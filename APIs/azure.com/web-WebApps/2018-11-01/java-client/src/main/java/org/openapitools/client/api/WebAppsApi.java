/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AzureStoragePropertyDictionaryResource;
import org.openapitools.client.model.BackupItem;
import org.openapitools.client.model.BackupItemCollection;
import org.openapitools.client.model.BackupRequest;
import org.openapitools.client.model.ConnectionStringDictionary;
import org.openapitools.client.model.ContinuousWebJob;
import org.openapitools.client.model.ContinuousWebJobCollection;
import org.openapitools.client.model.CsmPublishingProfileOptions;
import org.openapitools.client.model.CsmSlotEntity;
import org.openapitools.client.model.CustomHostnameAnalysisResult;
import org.openapitools.client.model.DeletedAppRestoreRequest;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentCollection;
import java.io.File;
import org.openapitools.client.model.FunctionEnvelope;
import org.openapitools.client.model.FunctionEnvelopeCollection;
import org.openapitools.client.model.FunctionSecrets;
import org.openapitools.client.model.HostNameBinding;
import org.openapitools.client.model.HostNameBindingCollection;
import org.openapitools.client.model.MSDeploy;
import org.openapitools.client.model.MSDeployLog;
import org.openapitools.client.model.MSDeployStatus;
import org.openapitools.client.model.MigrateMySqlRequest;
import org.openapitools.client.model.MigrateMySqlStatus;
import org.openapitools.client.model.NetworkFeatures;
import org.openapitools.client.model.NetworkTrace;
import org.openapitools.client.model.PerfMonCounterCollection;
import org.openapitools.client.model.PremierAddOn;
import org.openapitools.client.model.PremierAddOnPatchResource;
import org.openapitools.client.model.PrivateAccess;
import org.openapitools.client.model.ProcessInfo;
import org.openapitools.client.model.ProcessInfoCollection;
import org.openapitools.client.model.ProcessModuleInfo;
import org.openapitools.client.model.ProcessModuleInfoCollection;
import org.openapitools.client.model.ProcessThreadInfo;
import org.openapitools.client.model.ProcessThreadInfoCollection;
import org.openapitools.client.model.PublicCertificate;
import org.openapitools.client.model.PublicCertificateCollection;
import org.openapitools.client.model.RelayServiceConnectionEntity;
import org.openapitools.client.model.RestoreRequest;
import org.openapitools.client.model.SiteAuthSettings;
import org.openapitools.client.model.SiteCloneability;
import org.openapitools.client.model.SiteConfigResource;
import org.openapitools.client.model.SiteConfigResourceCollection;
import org.openapitools.client.model.SiteConfigurationSnapshotInfoCollection;
import org.openapitools.client.model.SiteExtensionInfo;
import org.openapitools.client.model.SiteExtensionInfoCollection;
import org.openapitools.client.model.SiteLogsConfig;
import org.openapitools.client.model.SitePatchResource;
import org.openapitools.client.model.SitePhpErrorLogFlag;
import org.openapitools.client.model.SiteSourceControl;
import org.openapitools.client.model.SlotConfigNamesResource;
import org.openapitools.client.model.SlotDifferenceCollection;
import org.openapitools.client.model.SnapshotCollection;
import org.openapitools.client.model.SnapshotRestoreRequest;
import org.openapitools.client.model.StorageMigrationOptions;
import org.openapitools.client.model.StorageMigrationResponse;
import org.openapitools.client.model.StringDictionary;
import org.openapitools.client.model.SwiftVirtualNetwork;
import org.openapitools.client.model.TriggeredJobHistory;
import org.openapitools.client.model.TriggeredJobHistoryCollection;
import org.openapitools.client.model.TriggeredWebJob;
import org.openapitools.client.model.TriggeredWebJobCollection;
import org.openapitools.client.model.WebAppInstanceCollection;
import org.openapitools.client.model.WebAppsGet200Response;
import org.openapitools.client.model.WebAppsGetDomainOwnershipIdentifier200Response;
import org.openapitools.client.model.WebAppsGetHybridConnection200Response;
import org.openapitools.client.model.WebAppsGetVnetConnectionGatewaySlot200Response;
import org.openapitools.client.model.WebAppsGetVnetConnectionSlot200Response;
import org.openapitools.client.model.WebAppsList200Response;
import org.openapitools.client.model.WebAppsListDefaultResponse;
import org.openapitools.client.model.WebAppsListDomainOwnershipIdentifiers200Response;
import org.openapitools.client.model.WebAppsListHybridConnectionKeys200Response;
import org.openapitools.client.model.WebAppsListMetricDefinitions200Response;
import org.openapitools.client.model.WebAppsListMetrics200Response;
import org.openapitools.client.model.WebAppsListPublishingCredentials200Response;
import org.openapitools.client.model.WebAppsListUsagesSlot200Response;
import org.openapitools.client.model.WebAppsListVnetConnectionsSlot200ResponseInner;
import org.openapitools.client.model.WebAppsMigrateMySql200Response;
import org.openapitools.client.model.WebAppsUpdateSitePushSettingsRequest;
import org.openapitools.client.model.WebJob;
import org.openapitools.client.model.WebJobCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebAppsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebAppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webAppsAddPremierAddOn
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAddPremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsAddPremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsAddPremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsAddPremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsAddPremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsAddPremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsAddPremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling webAppsAddPremierAddOn(Async)");
        }

        return webAppsAddPremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsAddPremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOn premierAddOn) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsAddPremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsAddPremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOn premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = webAppsAddPremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a named add-on of an app. (asynchronously)
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAddPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsAddPremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsAddPremierAddOnSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAddPremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsAddPremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling webAppsAddPremierAddOnSlot(Async)");
        }

        return webAppsAddPremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsAddPremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOn premierAddOn) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsAddPremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsAddPremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOn premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = webAppsAddPremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a named add-on of an app. (asynchronously)
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAddPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOn premierAddOn, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsAddPremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsAnalyzeCustomHostname
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAnalyzeCustomHostnameCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String hostName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostName", hostName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsAnalyzeCustomHostnameValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String hostName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsAnalyzeCustomHostname(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsAnalyzeCustomHostname(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsAnalyzeCustomHostname(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsAnalyzeCustomHostname(Async)");
        }

        return webAppsAnalyzeCustomHostnameCall(resourceGroupName, name, subscriptionId, apiVersion, hostName, _callback);

    }

    /**
     * Analyze a custom hostname.
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @return CustomHostnameAnalysisResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public CustomHostnameAnalysisResult webAppsAnalyzeCustomHostname(String resourceGroupName, String name, String subscriptionId, String apiVersion, String hostName) throws ApiException {
        ApiResponse<CustomHostnameAnalysisResult> localVarResp = webAppsAnalyzeCustomHostnameWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, hostName);
        return localVarResp.getData();
    }

    /**
     * Analyze a custom hostname.
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @return ApiResponse&lt;CustomHostnameAnalysisResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomHostnameAnalysisResult> webAppsAnalyzeCustomHostnameWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String hostName) throws ApiException {
        okhttp3.Call localVarCall = webAppsAnalyzeCustomHostnameValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostName, null);
        Type localVarReturnType = new TypeToken<CustomHostnameAnalysisResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze a custom hostname. (asynchronously)
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAnalyzeCustomHostnameAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String hostName, final ApiCallback<CustomHostnameAnalysisResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsAnalyzeCustomHostnameValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostName, _callback);
        Type localVarReturnType = new TypeToken<CustomHostnameAnalysisResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsAnalyzeCustomHostnameSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAnalyzeCustomHostnameSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String hostName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hostName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hostName", hostName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsAnalyzeCustomHostnameSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String hostName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsAnalyzeCustomHostnameSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsAnalyzeCustomHostnameSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsAnalyzeCustomHostnameSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsAnalyzeCustomHostnameSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsAnalyzeCustomHostnameSlot(Async)");
        }

        return webAppsAnalyzeCustomHostnameSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, hostName, _callback);

    }

    /**
     * Analyze a custom hostname.
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @return CustomHostnameAnalysisResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public CustomHostnameAnalysisResult webAppsAnalyzeCustomHostnameSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String hostName) throws ApiException {
        ApiResponse<CustomHostnameAnalysisResult> localVarResp = webAppsAnalyzeCustomHostnameSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, hostName);
        return localVarResp.getData();
    }

    /**
     * Analyze a custom hostname.
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @return ApiResponse&lt;CustomHostnameAnalysisResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomHostnameAnalysisResult> webAppsAnalyzeCustomHostnameSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String hostName) throws ApiException {
        okhttp3.Call localVarCall = webAppsAnalyzeCustomHostnameSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, hostName, null);
        Type localVarReturnType = new TypeToken<CustomHostnameAnalysisResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze a custom hostname. (asynchronously)
     * Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostName Custom hostname. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsAnalyzeCustomHostnameSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String hostName, final ApiCallback<CustomHostnameAnalysisResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsAnalyzeCustomHostnameSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, hostName, _callback);
        Type localVarReturnType = new TypeToken<CustomHostnameAnalysisResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsApplySlotConfigToProduction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsApplySlotConfigToProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsApplySlotConfigToProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsApplySlotConfigToProduction(Async)");
        }

        return webAppsApplySlotConfigToProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsApplySlotConfigToProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        webAppsApplySlotConfigToProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsApplySlotConfigToProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsApplySlotConfigToProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot. (asynchronously)
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsApplySlotConfigToProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsApplySlotConfigToProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsApplySlotConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsApplySlotConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsApplySlotConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsApplySlotConfigurationSlot(Async)");
        }

        return webAppsApplySlotConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsApplySlotConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        webAppsApplySlotConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsApplySlotConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsApplySlotConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot. (asynchronously)
     * Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsApplySlotConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsApplySlotConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsBackup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsBackupCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsBackupValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsBackup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsBackup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsBackup(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsBackup(Async)");
        }

        return webAppsBackupCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Creates a backup of an app.
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsBackup(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsBackupWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Creates a backup of an app.
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsBackupWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsBackupValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a backup of an app. (asynchronously)
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsBackupAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsBackupValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsBackupSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsBackupSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsBackupSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsBackupSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsBackupSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsBackupSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsBackupSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsBackupSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsBackupSlot(Async)");
        }

        return webAppsBackupSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Creates a backup of an app.
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsBackupSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsBackupSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Creates a backup of an app.
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsBackupSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsBackupSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a backup of an app. (asynchronously)
     * Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Backup configuration. You can use the JSON response from the POST action as input here. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsBackupSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsBackupSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateDeployment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsCreateDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling webAppsCreateDeployment(Async)");
        }

        return webAppsCreateDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment for an app, or a deployment slot.
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsCreateDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsCreateDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment for an app, or a deployment slot.
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsCreateDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment for an app, or a deployment slot. (asynchronously)
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateDeploymentSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling webAppsCreateDeploymentSlot(Async)");
        }

        return webAppsCreateDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment for an app, or a deployment slot.
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsCreateDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsCreateDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment for an app, or a deployment slot.
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsCreateDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment for an app, or a deployment slot. (asynchronously)
     * Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id ID of an existing deployment. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deployment Deployment details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateFunction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateFunctionCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateFunctionValidateBeforeCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateFunction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateFunction(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsCreateFunction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateFunction(Async)");
        }

        // verify the required parameter 'functionEnvelope' is set
        if (functionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'functionEnvelope' when calling webAppsCreateFunction(Async)");
        }

        return webAppsCreateFunctionCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope, _callback);

    }

    /**
     * Create function for web site, or a deployment slot.
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @return FunctionEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelope webAppsCreateFunction(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope) throws ApiException {
        ApiResponse<FunctionEnvelope> localVarResp = webAppsCreateFunctionWithHttpInfo(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create function for web site, or a deployment slot.
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @return ApiResponse&lt;FunctionEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelope> webAppsCreateFunctionWithHttpInfo(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create function for web site, or a deployment slot. (asynchronously)
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateFunctionAsync(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback<FunctionEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateInstanceFunctionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceFunctionSlotCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateInstanceFunctionSlotValidateBeforeCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'functionEnvelope' is set
        if (functionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'functionEnvelope' when calling webAppsCreateInstanceFunctionSlot(Async)");
        }

        return webAppsCreateInstanceFunctionSlotCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope, _callback);

    }

    /**
     * Create function for web site, or a deployment slot.
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @return FunctionEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelope webAppsCreateInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope) throws ApiException {
        ApiResponse<FunctionEnvelope> localVarResp = webAppsCreateInstanceFunctionSlotWithHttpInfo(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create function for web site, or a deployment slot.
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @return ApiResponse&lt;FunctionEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelope> webAppsCreateInstanceFunctionSlotWithHttpInfo(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create function for web site, or a deployment slot. (asynchronously)
     * Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param functionEnvelope Function details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Function created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, FunctionEnvelope functionEnvelope, final ApiCallback<FunctionEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateInstanceMSDeployOperation
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceMSDeployOperationCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = msDeploy;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateInstanceMSDeployOperationValidateBeforeCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        // verify the required parameter 'msDeploy' is set
        if (msDeploy == null) {
            throw new ApiException("Missing the required parameter 'msDeploy' when calling webAppsCreateInstanceMSDeployOperation(Async)");
        }

        return webAppsCreateInstanceMSDeployOperationCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, msDeploy, _callback);

    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsCreateInstanceMSDeployOperation(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsCreateInstanceMSDeployOperationWithHttpInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion, msDeploy);
        return localVarResp.getData();
    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsCreateInstanceMSDeployOperationWithHttpInfo(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateInstanceMSDeployOperationValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, msDeploy, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke the MSDeploy web app extension. (asynchronously)
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceMSDeployOperationAsync(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateInstanceMSDeployOperationValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, msDeploy, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateInstanceMSDeployOperationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceMSDeployOperationSlotCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = msDeploy;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateInstanceMSDeployOperationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'msDeploy' is set
        if (msDeploy == null) {
            throw new ApiException("Missing the required parameter 'msDeploy' when calling webAppsCreateInstanceMSDeployOperationSlot(Async)");
        }

        return webAppsCreateInstanceMSDeployOperationSlotCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, msDeploy, _callback);

    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsCreateInstanceMSDeployOperationSlot(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsCreateInstanceMSDeployOperationSlotWithHttpInfo(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, msDeploy);
        return localVarResp.getData();
    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsCreateInstanceMSDeployOperationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateInstanceMSDeployOperationSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, msDeploy, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke the MSDeploy web app extension. (asynchronously)
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateInstanceMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateInstanceMSDeployOperationSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, msDeploy, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateMSDeployOperation
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateMSDeployOperationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = msDeploy;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateMSDeployOperationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateMSDeployOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateMSDeployOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateMSDeployOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateMSDeployOperation(Async)");
        }

        // verify the required parameter 'msDeploy' is set
        if (msDeploy == null) {
            throw new ApiException("Missing the required parameter 'msDeploy' when calling webAppsCreateMSDeployOperation(Async)");
        }

        return webAppsCreateMSDeployOperationCall(resourceGroupName, name, subscriptionId, apiVersion, msDeploy, _callback);

    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsCreateMSDeployOperation(String resourceGroupName, String name, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsCreateMSDeployOperationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, msDeploy);
        return localVarResp.getData();
    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsCreateMSDeployOperationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateMSDeployOperationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, msDeploy, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke the MSDeploy web app extension. (asynchronously)
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateMSDeployOperationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateMSDeployOperationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, msDeploy, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateMSDeployOperationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateMSDeployOperationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = msDeploy;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateMSDeployOperationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        // verify the required parameter 'msDeploy' is set
        if (msDeploy == null) {
            throw new ApiException("Missing the required parameter 'msDeploy' when calling webAppsCreateMSDeployOperationSlot(Async)");
        }

        return webAppsCreateMSDeployOperationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, msDeploy, _callback);

    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsCreateMSDeployOperationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsCreateMSDeployOperationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, msDeploy);
        return localVarResp.getData();
    }

    /**
     * Invoke the MSDeploy web app extension.
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsCreateMSDeployOperationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, MSDeploy msDeploy) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateMSDeployOperationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, msDeploy, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke the MSDeploy web app extension. (asynchronously)
     * Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param msDeploy Details of MSDeploy operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deployment is scheduled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Another deployment is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, MSDeploy msDeploy, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateMSDeployOperationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, msDeploy, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling webAppsCreateOrUpdate(Async)");
        }

        return webAppsCreateOrUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, _callback);

    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsCreateOrUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsCreateOrUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsCreateOrUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app. (asynchronously)
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateConfiguration(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling webAppsCreateOrUpdateConfiguration(Async)");
        }

        return webAppsCreateOrUpdateConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsCreateOrUpdateConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsCreateOrUpdateConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsCreateOrUpdateConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the configuration of an app. (asynchronously)
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling webAppsCreateOrUpdateConfigurationSlot(Async)");
        }

        return webAppsCreateOrUpdateConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsCreateOrUpdateConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsCreateOrUpdateConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsCreateOrUpdateConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the configuration of an app. (asynchronously)
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateDomainOwnershipIdentifier
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainOwnershipIdentifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifier' is set
        if (domainOwnershipIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier(Async)");
        }

        return webAppsCreateOrUpdateDomainOwnershipIdentifierCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);

    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsCreateOrUpdateDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsCreateOrUpdateDomainOwnershipIdentifierWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier);
        return localVarResp.getData();
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsCreateOrUpdateDomainOwnershipIdentifierWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier. (asynchronously)
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierSlotCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainOwnershipIdentifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifier' is set
        if (domainOwnershipIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        return webAppsCreateOrUpdateDomainOwnershipIdentifierSlotCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);

    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsCreateOrUpdateDomainOwnershipIdentifierSlotWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier);
        return localVarResp.getData();
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsCreateOrUpdateDomainOwnershipIdentifierSlotWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier. (asynchronously)
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateHostNameBinding
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostNameBinding;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        // verify the required parameter 'hostNameBinding' is set
        if (hostNameBinding == null) {
            throw new ApiException("Missing the required parameter 'hostNameBinding' when calling webAppsCreateOrUpdateHostNameBinding(Async)");
        }

        return webAppsCreateOrUpdateHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, _callback);

    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding webAppsCreateOrUpdateHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = webAppsCreateOrUpdateHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding);
        return localVarResp.getData();
    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> webAppsCreateOrUpdateHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a hostname binding for an app. (asynchronously)
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateHostNameBindingSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHostNameBindingSlotCall(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostNameBinding;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostNameBinding' is set
        if (hostNameBinding == null) {
            throw new ApiException("Missing the required parameter 'hostNameBinding' when calling webAppsCreateOrUpdateHostNameBindingSlot(Async)");
        }

        return webAppsCreateOrUpdateHostNameBindingSlotCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, _callback);

    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding webAppsCreateOrUpdateHostNameBindingSlot(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = webAppsCreateOrUpdateHostNameBindingSlotWithHttpInfo(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding);
        return localVarResp.getData();
    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> webAppsCreateOrUpdateHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a hostname binding for an app. (asynchronously)
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHostNameBindingSlotAsync(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateHybridConnection(Async)");
        }

        return webAppsCreateOrUpdateHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsCreateOrUpdateHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsCreateOrUpdateHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsCreateOrUpdateHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay. (asynchronously)
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateHybridConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHybridConnectionSlotCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateHybridConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateHybridConnectionSlot(Async)");
        }

        return webAppsCreateOrUpdateHybridConnectionSlotCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsCreateOrUpdateHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsCreateOrUpdateHybridConnectionSlotWithHttpInfo(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsCreateOrUpdateHybridConnectionSlotWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay. (asynchronously)
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdatePublicCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdatePublicCertificateCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdatePublicCertificateValidateBeforeCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        // verify the required parameter 'publicCertificate' is set
        if (publicCertificate == null) {
            throw new ApiException("Missing the required parameter 'publicCertificate' when calling webAppsCreateOrUpdatePublicCertificate(Async)");
        }

        return webAppsCreateOrUpdatePublicCertificateCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate, _callback);

    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @return PublicCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificate webAppsCreateOrUpdatePublicCertificate(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, PublicCertificate publicCertificate) throws ApiException {
        ApiResponse<PublicCertificate> localVarResp = webAppsCreateOrUpdatePublicCertificateWithHttpInfo(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate);
        return localVarResp.getData();
    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @return ApiResponse&lt;PublicCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificate> webAppsCreateOrUpdatePublicCertificateWithHttpInfo(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, PublicCertificate publicCertificate) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdatePublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate, null);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a hostname binding for an app. (asynchronously)
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdatePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback<PublicCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdatePublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdatePublicCertificateSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdatePublicCertificateSlotCall(String resourceGroupName, String name, String publicCertificateName, String slot, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdatePublicCertificateSlotValidateBeforeCall(String resourceGroupName, String name, String publicCertificateName, String slot, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'publicCertificate' is set
        if (publicCertificate == null) {
            throw new ApiException("Missing the required parameter 'publicCertificate' when calling webAppsCreateOrUpdatePublicCertificateSlot(Async)");
        }

        return webAppsCreateOrUpdatePublicCertificateSlotCall(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate, _callback);

    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @return PublicCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificate webAppsCreateOrUpdatePublicCertificateSlot(String resourceGroupName, String name, String publicCertificateName, String slot, String subscriptionId, String apiVersion, PublicCertificate publicCertificate) throws ApiException {
        ApiResponse<PublicCertificate> localVarResp = webAppsCreateOrUpdatePublicCertificateSlotWithHttpInfo(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate);
        return localVarResp.getData();
    }

    /**
     * Creates a hostname binding for an app.
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @return ApiResponse&lt;PublicCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificate> webAppsCreateOrUpdatePublicCertificateSlotWithHttpInfo(String resourceGroupName, String name, String publicCertificateName, String slot, String subscriptionId, String apiVersion, PublicCertificate publicCertificate) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdatePublicCertificateSlotValidateBeforeCall(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate, null);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a hostname binding for an app. (asynchronously)
     * Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdatePublicCertificateSlotAsync(String resourceGroupName, String name, String publicCertificateName, String slot, String subscriptionId, String apiVersion, PublicCertificate publicCertificate, final ApiCallback<PublicCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdatePublicCertificateSlotValidateBeforeCall(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateRelayServiceConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateRelayServiceConnection(Async)");
        }

        return webAppsCreateOrUpdateRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsCreateOrUpdateRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsCreateOrUpdateRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsCreateOrUpdateRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH). (asynchronously)
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateRelayServiceConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot(Async)");
        }

        return webAppsCreateOrUpdateRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsCreateOrUpdateRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsCreateOrUpdateRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsCreateOrUpdateRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH). (asynchronously)
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling webAppsCreateOrUpdateSlot(Async)");
        }

        return webAppsCreateOrUpdateSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, _callback);

    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsCreateOrUpdateSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsCreateOrUpdateSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsCreateOrUpdateSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app. (asynchronously)
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsGet200Response siteEnvelope, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateSourceControl
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSourceControl(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling webAppsCreateOrUpdateSourceControl(Async)");
        }

        return webAppsCreateOrUpdateSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsCreateOrUpdateSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsCreateOrUpdateSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsCreateOrUpdateSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the source control configuration of an app. (asynchronously)
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateSourceControlSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling webAppsCreateOrUpdateSourceControlSlot(Async)");
        }

        return webAppsCreateOrUpdateSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsCreateOrUpdateSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsCreateOrUpdateSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsCreateOrUpdateSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the source control configuration of an app. (asynchronously)
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateSwiftVirtualNetworkConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection(Async)");
        }

        return webAppsCreateOrUpdateSwiftVirtualNetworkConnectionCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsCreateOrUpdateSwiftVirtualNetworkConnection(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in. (asynchronously)
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        return webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in. (asynchronously)
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateVnetConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateVnetConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnection(Async)");
        }

        return webAppsCreateOrUpdateVnetConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsCreateOrUpdateVnetConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsCreateOrUpdateVnetConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsCreateOrUpdateVnetConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH). (asynchronously)
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateVnetConnectionGateway
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionGateway(Async)");
        }

        return webAppsCreateOrUpdateVnetConnectionGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsCreateOrUpdateVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsCreateOrUpdateVnetConnectionGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsCreateOrUpdateVnetConnectionGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH). (asynchronously)
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateVnetConnectionGatewaySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot(Async)");
        }

        return webAppsCreateOrUpdateVnetConnectionGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsCreateOrUpdateVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsCreateOrUpdateVnetConnectionGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsCreateOrUpdateVnetConnectionGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH). (asynchronously)
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsCreateOrUpdateVnetConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsCreateOrUpdateVnetConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionSlot(Async)");
        }

        return webAppsCreateOrUpdateVnetConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsCreateOrUpdateVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsCreateOrUpdateVnetConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsCreateOrUpdateVnetConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH). (asynchronously)
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsCreateOrUpdateVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsCreateOrUpdateVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDelete
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteMetrics", deleteMetrics));
        }

        if (deleteEmptyServerFarm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteEmptyServerFarm", deleteEmptyServerFarm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDelete(Async)");
        }

        return webAppsDeleteCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, _callback);

    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDelete(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) throws ApiException {
        webAppsDeleteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm);
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots. (asynchronously)
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteBackup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteBackupValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteBackup(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsDeleteBackup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackup(Async)");
        }

        return webAppsDeleteBackupCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a backup of an app by its ID.
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteBackup(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteBackupWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion);
    }

    /**
     * Deletes a backup of an app by its ID.
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteBackupWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteBackupValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a backup of an app by its ID. (asynchronously)
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteBackupValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteBackupConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteBackupConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteBackupConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupConfiguration(Async)");
        }

        return webAppsDeleteBackupConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes the backup configuration of an app.
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteBackupConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteBackupConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Deletes the backup configuration of an app.
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteBackupConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the backup configuration of an app. (asynchronously)
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteBackupConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteBackupConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupConfigurationSlot(Async)");
        }

        return webAppsDeleteBackupConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes the backup configuration of an app.
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteBackupConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteBackupConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes the backup configuration of an app.
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteBackupConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the backup configuration of an app. (asynchronously)
     * Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted backup configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteBackupSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteBackupSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupSlot(Async)");
        }

        return webAppsDeleteBackupSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a backup of an app by its ID.
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteBackupSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteBackupSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes a backup of an app by its ID.
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteBackupSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteBackupSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a backup of an app by its ID. (asynchronously)
     * Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app backup item. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app backup item does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteBackupSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteBackupSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteContinuousWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteContinuousWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteContinuousWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteContinuousWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteContinuousWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsDeleteContinuousWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteContinuousWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteContinuousWebJob(Async)");
        }

        return webAppsDeleteContinuousWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteContinuousWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteContinuousWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteContinuousWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteContinuousWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteContinuousWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteContinuousWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteContinuousWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteContinuousWebJobSlot(Async)");
        }

        return webAppsDeleteContinuousWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteContinuousWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteContinuousWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteDeployment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsDeleteDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteDeployment(Async)");
        }

        return webAppsDeleteDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion);
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteDeploymentSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteDeploymentSlot(Async)");
        }

        return webAppsDeleteDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted deployment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteDomainOwnershipIdentifier
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDomainOwnershipIdentifierCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteDomainOwnershipIdentifierValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsDeleteDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteDomainOwnershipIdentifier(Async)");
        }

        return webAppsDeleteDomainOwnershipIdentifierCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a domain ownership identifier for a web app.
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteDomainOwnershipIdentifierWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a domain ownership identifier for a web app.
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteDomainOwnershipIdentifierWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a domain ownership identifier for a web app. (asynchronously)
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteDomainOwnershipIdentifierSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDomainOwnershipIdentifierSlotCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteDomainOwnershipIdentifierSlotValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteDomainOwnershipIdentifierSlot(Async)");
        }

        return webAppsDeleteDomainOwnershipIdentifierSlotCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a domain ownership identifier for a web app.
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteDomainOwnershipIdentifierSlotWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes a domain ownership identifier for a web app.
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteDomainOwnershipIdentifierSlotWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a domain ownership identifier for a web app. (asynchronously)
     * Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted domain ownership identifier. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Domain ownership identifier does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteFunction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteFunctionCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteFunctionValidateBeforeCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteFunction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteFunction(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsDeleteFunction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteFunction(Async)");
        }

        return webAppsDeleteFunctionCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a function for web site, or a deployment slot.
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteFunction(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteFunctionWithHttpInfo(resourceGroupName, name, functionName, subscriptionId, apiVersion);
    }

    /**
     * Delete a function for web site, or a deployment slot.
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteFunctionWithHttpInfo(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a function for web site, or a deployment slot. (asynchronously)
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteFunctionAsync(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteHostNameBinding
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsDeleteHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostNameBinding(Async)");
        }

        return webAppsDeleteHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a hostname binding for an app. (asynchronously)
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteHostNameBindingSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHostNameBindingSlotCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostNameBindingSlot(Async)");
        }

        return webAppsDeleteHostNameBindingSlotCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteHostNameBindingSlotWithHttpInfo(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a hostname binding for an app. (asynchronously)
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteHybridConnection(Async)");
        }

        return webAppsDeleteHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes a Hybrid Connection from this site.
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
    }

    /**
     * Removes a Hybrid Connection from this site.
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a Hybrid Connection from this site. (asynchronously)
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteHybridConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHybridConnectionSlotCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteHybridConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteHybridConnectionSlot(Async)");
        }

        return webAppsDeleteHybridConnectionSlotCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes a Hybrid Connection from this site.
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteHybridConnectionSlotWithHttpInfo(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion);
    }

    /**
     * Removes a Hybrid Connection from this site.
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteHybridConnectionSlotWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a Hybrid Connection from this site. (asynchronously)
     * Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Hybrid connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteInstanceFunctionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceFunctionSlotCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteInstanceFunctionSlotValidateBeforeCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceFunctionSlot(Async)");
        }

        return webAppsDeleteInstanceFunctionSlotCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a function for web site, or a deployment slot.
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteInstanceFunctionSlotWithHttpInfo(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
    }

    /**
     * Delete a function for web site, or a deployment slot.
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteInstanceFunctionSlotWithHttpInfo(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a function for web site, or a deployment slot. (asynchronously)
     * Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Function deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteInstanceProcess
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceProcessCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteInstanceProcessValidateBeforeCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceProcess(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteInstanceProcess(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsDeleteInstanceProcess(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsDeleteInstanceProcess(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceProcess(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceProcess(Async)");
        }

        return webAppsDeleteInstanceProcessCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteInstanceProcess(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteInstanceProcessWithHttpInfo(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteInstanceProcessWithHttpInfo(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteInstanceProcessValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site. (asynchronously)
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteInstanceProcessValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteInstanceProcessSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceProcessSlotCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteInstanceProcessSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceProcessSlot(Async)");
        }

        return webAppsDeleteInstanceProcessSlotCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteInstanceProcessSlot(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteInstanceProcessSlotWithHttpInfo(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteInstanceProcessSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteInstanceProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site. (asynchronously)
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteInstanceProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeletePremierAddOn
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeletePremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeletePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsDeletePremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeletePremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeletePremierAddOn(Async)");
        }

        return webAppsDeletePremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a premier add-on from an app.
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeletePremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeletePremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
    }

    /**
     * Delete a premier add-on from an app.
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeletePremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeletePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a premier add-on from an app. (asynchronously)
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeletePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeletePremierAddOnSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeletePremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeletePremierAddOnSlot(Async)");
        }

        return webAppsDeletePremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a premier add-on from an app.
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeletePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeletePremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
    }

    /**
     * Delete a premier add-on from an app.
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeletePremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeletePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a premier add-on from an app. (asynchronously)
     * Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted premier add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeletePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteProcess
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteProcessCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteProcessValidateBeforeCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteProcess(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteProcess(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsDeleteProcess(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteProcess(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteProcess(Async)");
        }

        return webAppsDeleteProcessCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteProcess(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteProcessWithHttpInfo(resourceGroupName, name, processId, subscriptionId, apiVersion);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteProcessWithHttpInfo(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteProcessValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site. (asynchronously)
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteProcessAsync(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteProcessValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteProcessSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteProcessSlotCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteProcessSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteProcessSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteProcessSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsDeleteProcessSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteProcessSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteProcessSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteProcessSlot(Async)");
        }

        return webAppsDeleteProcessSlotCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteProcessSlot(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteProcessSlotWithHttpInfo(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteProcessSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site. (asynchronously)
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeletePublicCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePublicCertificateCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeletePublicCertificateValidateBeforeCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePublicCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeletePublicCertificate(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsDeletePublicCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeletePublicCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeletePublicCertificate(Async)");
        }

        return webAppsDeletePublicCertificateCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeletePublicCertificate(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeletePublicCertificateWithHttpInfo(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeletePublicCertificateWithHttpInfo(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeletePublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a hostname binding for an app. (asynchronously)
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeletePublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeletePublicCertificateSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePublicCertificateSlotCall(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeletePublicCertificateSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeletePublicCertificateSlot(Async)");
        }

        return webAppsDeletePublicCertificateSlotCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeletePublicCertificateSlot(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeletePublicCertificateSlotWithHttpInfo(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a hostname binding for an app.
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeletePublicCertificateSlotWithHttpInfo(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeletePublicCertificateSlotValidateBeforeCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a hostname binding for an app. (asynchronously)
     * Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hostname binding. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hostname binding does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeletePublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeletePublicCertificateSlotValidateBeforeCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteRelayServiceConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsDeleteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteRelayServiceConnection(Async)");
        }

        return webAppsDeleteRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a relay service connection by its name.
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a relay service connection by its name.
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a relay service connection by its name. (asynchronously)
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteRelayServiceConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteRelayServiceConnectionSlot(Async)");
        }

        return webAppsDeleteRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a relay service connection by its name.
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes a relay service connection by its name.
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a relay service connection by its name. (asynchronously)
     * Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted relay service connection. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Relay service connection does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSiteExtension
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSiteExtensionCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSiteExtensionValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSiteExtension(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSiteExtension(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsDeleteSiteExtension(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSiteExtension(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSiteExtension(Async)");
        }

        return webAppsDeleteSiteExtensionCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSiteExtension(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSiteExtensionWithHttpInfo(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSiteExtensionWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a site extension from a web site, or a deployment slot. (asynchronously)
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSiteExtensionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSiteExtensionSlotCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSiteExtensionSlotValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSiteExtensionSlot(Async)");
        }

        return webAppsDeleteSiteExtensionSlotCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSiteExtensionSlotWithHttpInfo(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSiteExtensionSlotWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a site extension from a web site, or a deployment slot. (asynchronously)
     * Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> SiteExtension terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteMetrics", deleteMetrics));
        }

        if (deleteEmptyServerFarm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteEmptyServerFarm", deleteEmptyServerFarm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSlot(Async)");
        }

        return webAppsDeleteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, _callback);

    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) throws ApiException {
        webAppsDeleteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm);
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots. (asynchronously)
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app to delete. (required)
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted. (optional)
     * @param deleteEmptyServerFarm Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted web app. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSourceControl
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSourceControl(Async)");
        }

        return webAppsDeleteSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes the source control configuration of an app.
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Deletes the source control configuration of an app.
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the source control configuration of an app. (asynchronously)
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSourceControlSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSourceControlSlot(Async)");
        }

        return webAppsDeleteSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes the source control configuration of an app.
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes the source control configuration of an app.
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the source control configuration of an app. (asynchronously)
     * Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted source control for web app. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Source control delete operation in progress. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source control does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSwiftVirtualNetwork
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSwiftVirtualNetworkCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSwiftVirtualNetworkValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSwiftVirtualNetwork(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSwiftVirtualNetwork(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSwiftVirtualNetwork(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSwiftVirtualNetwork(Async)");
        }

        return webAppsDeleteSwiftVirtualNetworkCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSwiftVirtualNetwork(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSwiftVirtualNetworkWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSwiftVirtualNetworkWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSwiftVirtualNetworkValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot). (asynchronously)
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSwiftVirtualNetworkAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSwiftVirtualNetworkValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteSwiftVirtualNetworkSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSwiftVirtualNetworkSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteSwiftVirtualNetworkSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSwiftVirtualNetworkSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteSwiftVirtualNetworkSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteSwiftVirtualNetworkSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSwiftVirtualNetworkSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteSwiftVirtualNetworkSlot(Async)");
        }

        return webAppsDeleteSwiftVirtualNetworkSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteSwiftVirtualNetworkSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteSwiftVirtualNetworkSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteSwiftVirtualNetworkSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteSwiftVirtualNetworkSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot). (asynchronously)
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteSwiftVirtualNetworkSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteSwiftVirtualNetworkSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteTriggeredWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteTriggeredWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteTriggeredWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteTriggeredWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteTriggeredWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsDeleteTriggeredWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteTriggeredWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteTriggeredWebJob(Async)");
        }

        return webAppsDeleteTriggeredWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteTriggeredWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteTriggeredWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteTriggeredWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteTriggeredWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteTriggeredWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteTriggeredWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteTriggeredWebJobSlot(Async)");
        }

        return webAppsDeleteTriggeredWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteTriggeredWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteTriggeredWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot. (asynchronously)
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted continuous web job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteVnetConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteVnetConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteVnetConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteVnetConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteVnetConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsDeleteVnetConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteVnetConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteVnetConnection(Async)");
        }

        return webAppsDeleteVnetConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteVnetConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteVnetConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteVnetConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network. (asynchronously)
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteVnetConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDeleteVnetConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteVnetConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDeleteVnetConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDeleteVnetConnectionSlot(Async)");
        }

        return webAppsDeleteVnetConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsDeleteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsDeleteVnetConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsDeleteVnetConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsDeleteVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network. (asynchronously)
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted virtual network. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDeleteVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDeleteVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDiscoverBackup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDiscoverBackupCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDiscoverBackupValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDiscoverBackup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDiscoverBackup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDiscoverBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDiscoverBackup(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsDiscoverBackup(Async)");
        }

        return webAppsDiscoverBackupCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @return RestoreRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreRequest webAppsDiscoverBackup(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreRequest> localVarResp = webAppsDiscoverBackupWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @return ApiResponse&lt;RestoreRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreRequest> webAppsDiscoverBackupWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsDiscoverBackupValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup. (asynchronously)
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDiscoverBackupAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDiscoverBackupValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsDiscoverBackupSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDiscoverBackupSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsDiscoverBackupSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsDiscoverBackupSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsDiscoverBackupSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsDiscoverBackupSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsDiscoverBackupSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsDiscoverBackupSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsDiscoverBackupSlot(Async)");
        }

        return webAppsDiscoverBackupSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @return RestoreRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreRequest webAppsDiscoverBackupSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreRequest> localVarResp = webAppsDiscoverBackupSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @return ApiResponse&lt;RestoreRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreRequest> webAppsDiscoverBackupSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsDiscoverBackupSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup. (asynchronously)
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsDiscoverBackupSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsDiscoverBackupSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGenerateNewSitePublishingPassword
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGenerateNewSitePublishingPasswordCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGenerateNewSitePublishingPasswordValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGenerateNewSitePublishingPassword(Async)");
        }

        return webAppsGenerateNewSitePublishingPasswordCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsGenerateNewSitePublishingPassword(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsGenerateNewSitePublishingPasswordWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsGenerateNewSitePublishingPasswordWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGenerateNewSitePublishingPasswordValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified). (asynchronously)
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGenerateNewSitePublishingPasswordAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGenerateNewSitePublishingPasswordValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGenerateNewSitePublishingPasswordSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGenerateNewSitePublishingPasswordSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGenerateNewSitePublishingPasswordSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGenerateNewSitePublishingPasswordSlot(Async)");
        }

        return webAppsGenerateNewSitePublishingPasswordSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsGenerateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsGenerateNewSitePublishingPasswordSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsGenerateNewSitePublishingPasswordSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGenerateNewSitePublishingPasswordSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified). (asynchronously)
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully generate new password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGenerateNewSitePublishingPasswordSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGenerateNewSitePublishingPasswordSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGet(Async)");
        }

        return webAppsGetCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the details of a web, mobile, or API app.
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsGet(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsGetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a web, mobile, or API app.
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsGetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a web, mobile, or API app. (asynchronously)
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetAuthSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetAuthSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetAuthSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetAuthSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetAuthSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetAuthSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetAuthSettings(Async)");
        }

        return webAppsGetAuthSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings webAppsGetAuthSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = webAppsGetAuthSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> webAppsGetAuthSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Authentication/Authorization settings of an app. (asynchronously)
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetAuthSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetAuthSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetAuthSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetAuthSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetAuthSettingsSlot(Async)");
        }

        return webAppsGetAuthSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings webAppsGetAuthSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = webAppsGetAuthSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> webAppsGetAuthSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Authentication/Authorization settings of an app. (asynchronously)
     * Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetBackupConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetBackupConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetBackupConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetBackupConfiguration(Async)");
        }

        return webAppsGetBackupConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the backup configuration of an app.
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest webAppsGetBackupConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = webAppsGetBackupConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the backup configuration of an app.
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> webAppsGetBackupConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the backup configuration of an app. (asynchronously)
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetBackupConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetBackupConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetBackupConfigurationSlot(Async)");
        }

        return webAppsGetBackupConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the backup configuration of an app.
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest webAppsGetBackupConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = webAppsGetBackupConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the backup configuration of an app.
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> webAppsGetBackupConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the backup configuration of an app. (asynchronously)
     * Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetBackupStatus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupStatusCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetBackupStatusValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupStatus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetBackupStatus(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsGetBackupStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetBackupStatus(Async)");
        }

        return webAppsGetBackupStatusCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a backup of an app by its ID.
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsGetBackupStatus(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsGetBackupStatusWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a backup of an app by its ID.
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsGetBackupStatusWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetBackupStatusValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a backup of an app by its ID. (asynchronously)
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupStatusAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetBackupStatusValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetBackupStatusSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupStatusSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetBackupStatusSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupStatusSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetBackupStatusSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsGetBackupStatusSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetBackupStatusSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupStatusSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetBackupStatusSlot(Async)");
        }

        return webAppsGetBackupStatusSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a backup of an app by its ID.
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsGetBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsGetBackupStatusSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a backup of an app by its ID.
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsGetBackupStatusSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetBackupStatusSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a backup of an app by its ID. (asynchronously)
     * Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetBackupStatusSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetBackupStatusSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetConfiguration(Async)");
        }

        return webAppsGetConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsGetConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsGetConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsGetConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc. (asynchronously)
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSlot(Async)");
        }

        return webAppsGetConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsGetConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsGetConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsGetConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc. (asynchronously)
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetConfigurationSnapshot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSnapshotCall(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetConfigurationSnapshotValidateBeforeCall(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling webAppsGetConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSnapshot(Async)");
        }

        return webAppsGetConfigurationSnapshotCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsGetConfigurationSnapshot(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsGetConfigurationSnapshotWithHttpInfo(resourceGroupName, name, snapshotId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsGetConfigurationSnapshotWithHttpInfo(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetConfigurationSnapshotValidateBeforeCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time. (asynchronously)
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetConfigurationSnapshotValidateBeforeCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetConfigurationSnapshotSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSnapshotSlotCall(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetConfigurationSnapshotSlotValidateBeforeCall(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSnapshotSlot(Async)");
        }

        return webAppsGetConfigurationSnapshotSlotCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsGetConfigurationSnapshotSlot(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsGetConfigurationSnapshotSlotWithHttpInfo(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsGetConfigurationSnapshotSlotWithHttpInfo(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetConfigurationSnapshotSlotValidateBeforeCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time. (asynchronously)
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetConfigurationSnapshotSlotValidateBeforeCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetContainerLogsZip
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContainerLogsZipCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetContainerLogsZipValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetContainerLogsZip(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetContainerLogsZip(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetContainerLogsZip(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetContainerLogsZip(Async)");
        }

        return webAppsGetContainerLogsZipCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the ZIP archived docker log files for the given site
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetContainerLogsZip(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetContainerLogsZipWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the ZIP archived docker log files for the given site
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetContainerLogsZipWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetContainerLogsZipValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the ZIP archived docker log files for the given site (asynchronously)
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContainerLogsZipAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetContainerLogsZipValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetContainerLogsZipSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContainerLogsZipSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetContainerLogsZipSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetContainerLogsZipSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetContainerLogsZipSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetContainerLogsZipSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetContainerLogsZipSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetContainerLogsZipSlot(Async)");
        }

        return webAppsGetContainerLogsZipSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the ZIP archived docker log files for the given site
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetContainerLogsZipSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetContainerLogsZipSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the ZIP archived docker log files for the given site
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetContainerLogsZipSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetContainerLogsZipSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the ZIP archived docker log files for the given site (asynchronously)
     * Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContainerLogsZipSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetContainerLogsZipSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetContinuousWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContinuousWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetContinuousWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetContinuousWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetContinuousWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetContinuousWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetContinuousWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetContinuousWebJob(Async)");
        }

        return webAppsGetContinuousWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ContinuousWebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousWebJob webAppsGetContinuousWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ContinuousWebJob> localVarResp = webAppsGetContinuousWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ContinuousWebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousWebJob> webAppsGetContinuousWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContinuousWebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot. (asynchronously)
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContinuousWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<ContinuousWebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContinuousWebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetContinuousWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContinuousWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetContinuousWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetContinuousWebJobSlot(Async)");
        }

        return webAppsGetContinuousWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ContinuousWebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousWebJob webAppsGetContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ContinuousWebJob> localVarResp = webAppsGetContinuousWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ContinuousWebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousWebJob> webAppsGetContinuousWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContinuousWebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot. (asynchronously)
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<ContinuousWebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContinuousWebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDeployment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsGetDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDeployment(Async)");
        }

        return webAppsGetDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsGetDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsGetDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsGetDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot. (asynchronously)
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDeploymentSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDeploymentSlot(Async)");
        }

        return webAppsGetDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsGetDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsGetDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsGetDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot. (asynchronously)
     * Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id Deployment ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDiagnosticLogsConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDiagnosticLogsConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDiagnosticLogsConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDiagnosticLogsConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDiagnosticLogsConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDiagnosticLogsConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDiagnosticLogsConfiguration(Async)");
        }

        return webAppsGetDiagnosticLogsConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the logging configuration of an app.
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig webAppsGetDiagnosticLogsConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = webAppsGetDiagnosticLogsConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the logging configuration of an app.
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> webAppsGetDiagnosticLogsConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDiagnosticLogsConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the logging configuration of an app. (asynchronously)
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDiagnosticLogsConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDiagnosticLogsConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDiagnosticLogsConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDiagnosticLogsConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDiagnosticLogsConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDiagnosticLogsConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDiagnosticLogsConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetDiagnosticLogsConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDiagnosticLogsConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDiagnosticLogsConfigurationSlot(Async)");
        }

        return webAppsGetDiagnosticLogsConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the logging configuration of an app.
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig webAppsGetDiagnosticLogsConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = webAppsGetDiagnosticLogsConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the logging configuration of an app.
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> webAppsGetDiagnosticLogsConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDiagnosticLogsConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the logging configuration of an app. (asynchronously)
     * Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDiagnosticLogsConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDiagnosticLogsConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDomainOwnershipIdentifier
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDomainOwnershipIdentifierCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDomainOwnershipIdentifierValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsGetDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDomainOwnershipIdentifier(Async)");
        }

        return webAppsGetDomainOwnershipIdentifierCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get domain ownership identifier for web app.
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsGetDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsGetDomainOwnershipIdentifierWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get domain ownership identifier for web app.
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsGetDomainOwnershipIdentifierWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get domain ownership identifier for web app. (asynchronously)
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetDomainOwnershipIdentifierSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDomainOwnershipIdentifierSlotCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetDomainOwnershipIdentifierSlotValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetDomainOwnershipIdentifierSlot(Async)");
        }

        return webAppsGetDomainOwnershipIdentifierSlotCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get domain ownership identifier for web app.
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsGetDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsGetDomainOwnershipIdentifierSlotWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get domain ownership identifier for web app.
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsGetDomainOwnershipIdentifierSlotWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get domain ownership identifier for web app. (asynchronously)
     * Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetFunction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetFunctionValidateBeforeCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetFunction(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsGetFunction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetFunction(Async)");
        }

        return webAppsGetFunctionCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelope webAppsGetFunction(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionEnvelope> localVarResp = webAppsGetFunctionWithHttpInfo(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelope> webAppsGetFunctionWithHttpInfo(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get function information by its ID for web site, or a deployment slot. (asynchronously)
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionAsync(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback<FunctionEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetFunctionValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetFunctionsAdminToken
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionsAdminTokenCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetFunctionsAdminTokenValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunctionsAdminToken(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetFunctionsAdminToken(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetFunctionsAdminToken(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetFunctionsAdminToken(Async)");
        }

        return webAppsGetFunctionsAdminTokenCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public String webAppsGetFunctionsAdminToken(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<String> localVarResp = webAppsGetFunctionsAdminTokenWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> webAppsGetFunctionsAdminTokenWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetFunctionsAdminTokenValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key. (asynchronously)
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionsAdminTokenAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetFunctionsAdminTokenValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetFunctionsAdminTokenSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionsAdminTokenSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetFunctionsAdminTokenSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunctionsAdminTokenSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetFunctionsAdminTokenSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetFunctionsAdminTokenSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetFunctionsAdminTokenSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetFunctionsAdminTokenSlot(Async)");
        }

        return webAppsGetFunctionsAdminTokenSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public String webAppsGetFunctionsAdminTokenSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<String> localVarResp = webAppsGetFunctionsAdminTokenSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> webAppsGetFunctionsAdminTokenSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetFunctionsAdminTokenSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key. (asynchronously)
     * Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetFunctionsAdminTokenSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetFunctionsAdminTokenSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetHostNameBinding
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsGetHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetHostNameBinding(Async)");
        }

        return webAppsGetHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding webAppsGetHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = webAppsGetHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> webAppsGetHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified). (asynchronously)
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetHostNameBindingSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHostNameBindingSlotCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetHostNameBindingSlot(Async)");
        }

        return webAppsGetHostNameBindingSlotCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding webAppsGetHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = webAppsGetHostNameBindingSlotWithHttpInfo(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> webAppsGetHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified). (asynchronously)
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param hostName Hostname in the hostname binding. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsGetHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsGetHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetHybridConnection(Async)");
        }

        return webAppsGetHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsGetHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsGetHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsGetHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App. (asynchronously)
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetHybridConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHybridConnectionSlotCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetHybridConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetHybridConnectionSlot(Async)");
        }

        return webAppsGetHybridConnectionSlotCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsGetHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsGetHybridConnectionSlotWithHttpInfo(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsGetHybridConnectionSlotWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App. (asynchronously)
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceFunctionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceFunctionSlotCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceFunctionSlotValidateBeforeCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceFunctionSlot(Async)");
        }

        return webAppsGetInstanceFunctionSlotCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelope webAppsGetInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionEnvelope> localVarResp = webAppsGetInstanceFunctionSlotWithHttpInfo(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelope> webAppsGetInstanceFunctionSlotWithHttpInfo(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get function information by its ID for web site, or a deployment slot. (asynchronously)
     * Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an name of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback<FunctionEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceFunctionSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceMSDeployLog
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMSDeployLogCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceMSDeployLogValidateBeforeCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMSDeployLog(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceMSDeployLog(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMSDeployLog(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMSDeployLog(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMSDeployLog(Async)");
        }

        return webAppsGetInstanceMSDeployLogCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployLog webAppsGetInstanceMSDeployLog(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployLog> localVarResp = webAppsGetInstanceMSDeployLogWithHttpInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployLog> webAppsGetInstanceMSDeployLogWithHttpInfo(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceMSDeployLogValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation. (asynchronously)
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMSDeployLogAsync(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<MSDeployLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceMSDeployLogValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceMSDeployLogSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMSDeployLogSlotCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceMSDeployLogSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMSDeployLogSlot(Async)");
        }

        return webAppsGetInstanceMSDeployLogSlotCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployLog webAppsGetInstanceMSDeployLogSlot(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployLog> localVarResp = webAppsGetInstanceMSDeployLogSlotWithHttpInfo(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployLog> webAppsGetInstanceMSDeployLogSlotWithHttpInfo(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceMSDeployLogSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation. (asynchronously)
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMSDeployLogSlotAsync(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<MSDeployLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceMSDeployLogSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceMsDeployStatus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMsDeployStatusCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceMsDeployStatusValidateBeforeCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMsDeployStatus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceMsDeployStatus(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMsDeployStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMsDeployStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMsDeployStatus(Async)");
        }

        return webAppsGetInstanceMsDeployStatusCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsGetInstanceMsDeployStatus(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsGetInstanceMsDeployStatusWithHttpInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsGetInstanceMsDeployStatusWithHttpInfo(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceMsDeployStatusValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of the last MSDeploy operation. (asynchronously)
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMsDeployStatusAsync(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceMsDeployStatusValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceMsDeployStatusSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMsDeployStatusSlotCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceMsDeployStatusSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMsDeployStatusSlot(Async)");
        }

        return webAppsGetInstanceMsDeployStatusSlotCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsGetInstanceMsDeployStatusSlot(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsGetInstanceMsDeployStatusSlotWithHttpInfo(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsGetInstanceMsDeployStatusSlotWithHttpInfo(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceMsDeployStatusSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of the last MSDeploy operation. (asynchronously)
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId ID of web app instance. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceMsDeployStatusSlotAsync(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceMsDeployStatusSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcess
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessValidateBeforeCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcess(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcess(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcess(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcess(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcess(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcess(Async)");
        }

        return webAppsGetInstanceProcessCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfo webAppsGetInstanceProcess(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfo> localVarResp = webAppsGetInstanceProcessWithHttpInfo(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfo> webAppsGetInstanceProcessWithHttpInfo(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessDump
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessDumpCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessDumpValidateBeforeCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessDump(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessDump(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessDump(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessDump(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessDump(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessDump(Async)");
        }

        return webAppsGetInstanceProcessDumpCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetInstanceProcessDump(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetInstanceProcessDumpWithHttpInfo(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetInstanceProcessDumpWithHttpInfo(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessDumpValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessDumpAsync(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessDumpValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessDumpSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessDumpSlotCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessDumpSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessDumpSlot(Async)");
        }

        return webAppsGetInstanceProcessDumpSlotCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetInstanceProcessDumpSlot(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetInstanceProcessDumpSlotWithHttpInfo(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetInstanceProcessDumpSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessDumpSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessDumpSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessModule
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessModuleCall(String resourceGroupName, String name, String processId, String baseAddress, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "baseAddress" + "}", localVarApiClient.escapeString(baseAddress.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessModuleValidateBeforeCall(String resourceGroupName, String name, String processId, String baseAddress, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'baseAddress' is set
        if (baseAddress == null) {
            throw new ApiException("Missing the required parameter 'baseAddress' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessModule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessModule(Async)");
        }

        return webAppsGetInstanceProcessModuleCall(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfo webAppsGetInstanceProcessModule(String resourceGroupName, String name, String processId, String baseAddress, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfo> localVarResp = webAppsGetInstanceProcessModuleWithHttpInfo(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfo> webAppsGetInstanceProcessModuleWithHttpInfo(String resourceGroupName, String name, String processId, String baseAddress, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessModuleValidateBeforeCall(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessModuleValidateBeforeCall(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessModuleSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessModuleSlotCall(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "baseAddress" + "}", localVarApiClient.escapeString(baseAddress.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessModuleSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'baseAddress' is set
        if (baseAddress == null) {
            throw new ApiException("Missing the required parameter 'baseAddress' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessModuleSlot(Async)");
        }

        return webAppsGetInstanceProcessModuleSlotCall(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfo webAppsGetInstanceProcessModuleSlot(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfo> localVarResp = webAppsGetInstanceProcessModuleSlotWithHttpInfo(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfo> webAppsGetInstanceProcessModuleSlotWithHttpInfo(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessModuleSlotValidateBeforeCall(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessModuleSlotValidateBeforeCall(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessSlotCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessSlot(Async)");
        }

        return webAppsGetInstanceProcessSlotCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfo webAppsGetInstanceProcessSlot(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfo> localVarResp = webAppsGetInstanceProcessSlotWithHttpInfo(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfo> webAppsGetInstanceProcessSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessThread
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessThreadCall(String resourceGroupName, String name, String processId, String threadId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessThreadValidateBeforeCall(String resourceGroupName, String name, String processId, String threadId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessThread(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessThread(Async)");
        }

        return webAppsGetInstanceProcessThreadCall(resourceGroupName, name, processId, threadId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfo webAppsGetInstanceProcessThread(String resourceGroupName, String name, String processId, String threadId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfo> localVarResp = webAppsGetInstanceProcessThreadWithHttpInfo(resourceGroupName, name, processId, threadId, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfo> webAppsGetInstanceProcessThreadWithHttpInfo(String resourceGroupName, String name, String processId, String threadId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessThreadValidateBeforeCall(resourceGroupName, name, processId, threadId, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site. (asynchronously)
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessThreadAsync(String resourceGroupName, String name, String processId, String threadId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessThreadValidateBeforeCall(resourceGroupName, name, processId, threadId, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetInstanceProcessThreadSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessThreadSlotCall(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetInstanceProcessThreadSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessThreadSlot(Async)");
        }

        return webAppsGetInstanceProcessThreadSlotCall(resourceGroupName, name, processId, threadId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfo webAppsGetInstanceProcessThreadSlot(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfo> localVarResp = webAppsGetInstanceProcessThreadSlotWithHttpInfo(resourceGroupName, name, processId, threadId, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfo> webAppsGetInstanceProcessThreadSlotWithHttpInfo(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetInstanceProcessThreadSlotValidateBeforeCall(resourceGroupName, name, processId, threadId, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site. (asynchronously)
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetInstanceProcessThreadSlotAsync(String resourceGroupName, String name, String processId, String threadId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetInstanceProcessThreadSlotValidateBeforeCall(resourceGroupName, name, processId, threadId, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMSDeployLog
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployLogCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMSDeployLogValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployLog(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMSDeployLog(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployLog(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployLog(Async)");
        }

        return webAppsGetMSDeployLogCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployLog webAppsGetMSDeployLog(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployLog> localVarResp = webAppsGetMSDeployLogWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployLog> webAppsGetMSDeployLogWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMSDeployLogValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation. (asynchronously)
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployLogAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MSDeployLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMSDeployLogValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMSDeployLogSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployLogSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMSDeployLogSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployLogSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployLogSlot(Async)");
        }

        return webAppsGetMSDeployLogSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployLog webAppsGetMSDeployLogSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployLog> localVarResp = webAppsGetMSDeployLogSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployLog> webAppsGetMSDeployLogSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMSDeployLogSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation. (asynchronously)
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> MSDeploy log returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MSDeploy log not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployLogSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<MSDeployLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMSDeployLogSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMSDeployStatus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployStatusCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMSDeployStatusValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployStatus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMSDeployStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployStatus(Async)");
        }

        return webAppsGetMSDeployStatusCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsGetMSDeployStatus(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsGetMSDeployStatusWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsGetMSDeployStatusWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMSDeployStatusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of the last MSDeploy operation. (asynchronously)
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployStatusAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMSDeployStatusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMSDeployStatusSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployStatusSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMSDeployStatusSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployStatusSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMSDeployStatusSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetMSDeployStatusSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployStatusSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployStatusSlot(Async)");
        }

        return webAppsGetMSDeployStatusSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MSDeployStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MSDeployStatus webAppsGetMSDeployStatusSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MSDeployStatus> localVarResp = webAppsGetMSDeployStatusSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the status of the last MSDeploy operation.
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MSDeployStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MSDeployStatus> webAppsGetMSDeployStatusSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMSDeployStatusSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of the last MSDeploy operation. (asynchronously)
     * Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMSDeployStatusSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<MSDeployStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMSDeployStatusSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MSDeployStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMigrateMySqlStatus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMigrateMySqlStatusCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMigrateMySqlStatusValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMigrateMySqlStatus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMigrateMySqlStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMigrateMySqlStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMigrateMySqlStatus(Async)");
        }

        return webAppsGetMigrateMySqlStatusCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MigrateMySqlStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MigrateMySqlStatus webAppsGetMigrateMySqlStatus(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MigrateMySqlStatus> localVarResp = webAppsGetMigrateMySqlStatusWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MigrateMySqlStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrateMySqlStatus> webAppsGetMigrateMySqlStatusWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMigrateMySqlStatusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MigrateMySqlStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled (asynchronously)
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMigrateMySqlStatusAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MigrateMySqlStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMigrateMySqlStatusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MigrateMySqlStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetMigrateMySqlStatusSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of the deployment slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMigrateMySqlStatusSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetMigrateMySqlStatusSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetMigrateMySqlStatusSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetMigrateMySqlStatusSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetMigrateMySqlStatusSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetMigrateMySqlStatusSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetMigrateMySqlStatusSlot(Async)");
        }

        return webAppsGetMigrateMySqlStatusSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of the deployment slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return MigrateMySqlStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public MigrateMySqlStatus webAppsGetMigrateMySqlStatusSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MigrateMySqlStatus> localVarResp = webAppsGetMigrateMySqlStatusSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of the deployment slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MigrateMySqlStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrateMySqlStatus> webAppsGetMigrateMySqlStatusSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetMigrateMySqlStatusSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MigrateMySqlStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled (asynchronously)
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of the deployment slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetMigrateMySqlStatusSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<MigrateMySqlStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetMigrateMySqlStatusSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MigrateMySqlStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTraceOperation
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTraceOperationValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperation(Async)");
        }

        return webAppsGetNetworkTraceOperationCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTraceOperation(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTraceOperationWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTraceOperationWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTraceOperationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationSlotCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTraceOperationSlotValidateBeforeCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationSlot(Async)");
        }

        return webAppsGetNetworkTraceOperationSlotCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTraceOperationSlot(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTraceOperationSlotWithHttpInfo(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTraceOperationSlotWithHttpInfo(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTraceOperationSlotV2
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationSlotV2Call(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTraceOperationSlotV2ValidateBeforeCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationSlotV2(Async)");
        }

        return webAppsGetNetworkTraceOperationSlotV2Call(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTraceOperationSlotV2(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTraceOperationSlotV2WithHttpInfo(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTraceOperationSlotV2WithHttpInfo(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationSlotV2ValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationSlotV2Async(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationSlotV2ValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTraceOperationV2
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationV2Call(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTraceOperationV2ValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationV2(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationV2(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationV2(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationV2(Async)");
        }

        return webAppsGetNetworkTraceOperationV2Call(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTraceOperationV2(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTraceOperationV2WithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTraceOperationV2WithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationV2ValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTraceOperationV2Async(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTraceOperationV2ValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTraces
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTracesValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraces(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTraces(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraces(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraces(Async)");
        }

        return webAppsGetNetworkTracesCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTraces(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTracesWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTracesWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTracesValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTracesValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTracesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesSlotCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTracesSlotValidateBeforeCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesSlot(Async)");
        }

        return webAppsGetNetworkTracesSlotCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTracesSlot(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTracesSlotWithHttpInfo(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTracesSlotWithHttpInfo(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTracesSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesSlotAsync(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTracesSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTracesSlotV2
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesSlotV2Call(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTracesSlotV2ValidateBeforeCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesSlotV2(Async)");
        }

        return webAppsGetNetworkTracesSlotV2Call(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTracesSlotV2(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTracesSlotV2WithHttpInfo(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTracesSlotV2WithHttpInfo(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTracesSlotV2ValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesSlotV2Async(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTracesSlotV2ValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetNetworkTracesV2
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesV2Call(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetNetworkTracesV2ValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesV2(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetNetworkTracesV2(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesV2(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesV2(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesV2(Async)");
        }

        return webAppsGetNetworkTracesV2Call(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsGetNetworkTracesV2(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsGetNetworkTracesV2WithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsGetNetworkTracesV2WithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetNetworkTracesV2ValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified). (asynchronously)
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param operationId GUID of the operation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetNetworkTracesV2Async(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetNetworkTracesV2ValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPremierAddOn
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsGetPremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPremierAddOn(Async)");
        }

        return webAppsGetPremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named add-on of an app.
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsGetPremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsGetPremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named add-on of an app.
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsGetPremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named add-on of an app. (asynchronously)
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPremierAddOnSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPremierAddOnSlot(Async)");
        }

        return webAppsGetPremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a named add-on of an app.
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsGetPremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsGetPremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a named add-on of an app.
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsGetPremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a named add-on of an app. (asynchronously)
     * Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPrivateAccess
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPrivateAccessCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPrivateAccessValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPrivateAccess(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPrivateAccess(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPrivateAccess(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPrivateAccess(Async)");
        }

        return webAppsGetPrivateAccessCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PrivateAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAccess webAppsGetPrivateAccess(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PrivateAccess> localVarResp = webAppsGetPrivateAccessWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PrivateAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAccess> webAppsGetPrivateAccessWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPrivateAccessValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site. (asynchronously)
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPrivateAccessAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<PrivateAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPrivateAccessValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPrivateAccessSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPrivateAccessSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPrivateAccessSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPrivateAccessSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPrivateAccessSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetPrivateAccessSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPrivateAccessSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPrivateAccessSlot(Async)");
        }

        return webAppsGetPrivateAccessSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PrivateAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAccess webAppsGetPrivateAccessSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PrivateAccess> localVarResp = webAppsGetPrivateAccessSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PrivateAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAccess> webAppsGetPrivateAccessSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPrivateAccessSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site. (asynchronously)
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPrivateAccessSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<PrivateAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPrivateAccessSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcess
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessValidateBeforeCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcess(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcess(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcess(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcess(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcess(Async)");
        }

        return webAppsGetProcessCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfo webAppsGetProcess(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfo> localVarResp = webAppsGetProcessWithHttpInfo(resourceGroupName, name, processId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfo> webAppsGetProcessWithHttpInfo(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessAsync(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessDump
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessDumpCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessDumpValidateBeforeCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessDump(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessDump(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessDump(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessDump(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessDump(Async)");
        }

        return webAppsGetProcessDumpCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetProcessDump(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetProcessDumpWithHttpInfo(resourceGroupName, name, processId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetProcessDumpWithHttpInfo(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessDumpValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessDumpAsync(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessDumpValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessDumpSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessDumpSlotCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessDumpSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessDumpSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessDumpSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessDumpSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetProcessDumpSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessDumpSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessDumpSlot(Async)");
        }

        return webAppsGetProcessDumpSlotCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetProcessDumpSlot(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetProcessDumpSlotWithHttpInfo(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetProcessDumpSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessDumpSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessDumpSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessModule
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessModuleCall(String resourceGroupName, String name, String processId, String baseAddress, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "baseAddress" + "}", localVarApiClient.escapeString(baseAddress.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessModuleValidateBeforeCall(String resourceGroupName, String name, String processId, String baseAddress, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessModule(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessModule(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessModule(Async)");
        }

        // verify the required parameter 'baseAddress' is set
        if (baseAddress == null) {
            throw new ApiException("Missing the required parameter 'baseAddress' when calling webAppsGetProcessModule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessModule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessModule(Async)");
        }

        return webAppsGetProcessModuleCall(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfo webAppsGetProcessModule(String resourceGroupName, String name, String processId, String baseAddress, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfo> localVarResp = webAppsGetProcessModuleWithHttpInfo(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfo> webAppsGetProcessModuleWithHttpInfo(String resourceGroupName, String name, String processId, String baseAddress, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessModuleValidateBeforeCall(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessModuleValidateBeforeCall(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessModuleSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessModuleSlotCall(String resourceGroupName, String name, String processId, String baseAddress, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "baseAddress" + "}", localVarApiClient.escapeString(baseAddress.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessModuleSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String baseAddress, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'baseAddress' is set
        if (baseAddress == null) {
            throw new ApiException("Missing the required parameter 'baseAddress' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessModuleSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessModuleSlot(Async)");
        }

        return webAppsGetProcessModuleSlotCall(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfo webAppsGetProcessModuleSlot(String resourceGroupName, String name, String processId, String baseAddress, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfo> localVarResp = webAppsGetProcessModuleSlotWithHttpInfo(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfo> webAppsGetProcessModuleSlotWithHttpInfo(String resourceGroupName, String name, String processId, String baseAddress, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessModuleSlotValidateBeforeCall(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param baseAddress Module base address. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running, or a module with the specified baseAddress was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessModuleSlotValidateBeforeCall(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessSlotCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetProcessSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessSlot(Async)");
        }

        return webAppsGetProcessSlotCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfo webAppsGetProcessSlot(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfo> localVarResp = webAppsGetProcessSlotWithHttpInfo(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfo> webAppsGetProcessSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessThread
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessThreadCall(String resourceGroupName, String name, String processId, String threadId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessThreadValidateBeforeCall(String resourceGroupName, String name, String processId, String threadId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessThread(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessThread(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessThread(Async)");
        }

        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling webAppsGetProcessThread(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessThread(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessThread(Async)");
        }

        return webAppsGetProcessThreadCall(resourceGroupName, name, processId, threadId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfo webAppsGetProcessThread(String resourceGroupName, String name, String processId, String threadId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfo> localVarResp = webAppsGetProcessThreadWithHttpInfo(resourceGroupName, name, processId, threadId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfo> webAppsGetProcessThreadWithHttpInfo(String resourceGroupName, String name, String processId, String threadId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessThreadValidateBeforeCall(resourceGroupName, name, processId, threadId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site. (asynchronously)
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessThreadAsync(String resourceGroupName, String name, String processId, String threadId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessThreadValidateBeforeCall(resourceGroupName, name, processId, threadId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetProcessThreadSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessThreadSlotCall(String resourceGroupName, String name, String processId, String threadId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetProcessThreadSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String threadId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessThreadSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetProcessThreadSlot(Async)");
        }

        return webAppsGetProcessThreadSlotCall(resourceGroupName, name, processId, threadId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfo webAppsGetProcessThreadSlot(String resourceGroupName, String name, String processId, String threadId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfo> localVarResp = webAppsGetProcessThreadSlotWithHttpInfo(resourceGroupName, name, processId, threadId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfo> webAppsGetProcessThreadSlotWithHttpInfo(String resourceGroupName, String name, String processId, String threadId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetProcessThreadSlotValidateBeforeCall(resourceGroupName, name, processId, threadId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site. (asynchronously)
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param threadId TID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the thread with the specified TID was not found, or the process with the specified PID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetProcessThreadSlotAsync(String resourceGroupName, String name, String processId, String threadId, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetProcessThreadSlotValidateBeforeCall(resourceGroupName, name, processId, threadId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPublicCertificate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPublicCertificateCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPublicCertificateValidateBeforeCall(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPublicCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPublicCertificate(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsGetPublicCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPublicCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPublicCertificate(Async)");
        }

        return webAppsGetPublicCertificateCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PublicCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificate webAppsGetPublicCertificate(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PublicCertificate> localVarResp = webAppsGetPublicCertificateWithHttpInfo(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PublicCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificate> webAppsGetPublicCertificateWithHttpInfo(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified). (asynchronously)
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback<PublicCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPublicCertificateValidateBeforeCall(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetPublicCertificateSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPublicCertificateSlotCall(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "publicCertificateName" + "}", localVarApiClient.escapeString(publicCertificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetPublicCertificateSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        // verify the required parameter 'publicCertificateName' is set
        if (publicCertificateName == null) {
            throw new ApiException("Missing the required parameter 'publicCertificateName' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetPublicCertificateSlot(Async)");
        }

        return webAppsGetPublicCertificateSlotCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PublicCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificate webAppsGetPublicCertificateSlot(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PublicCertificate> localVarResp = webAppsGetPublicCertificateSlotWithHttpInfo(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PublicCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificate> webAppsGetPublicCertificateSlotWithHttpInfo(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetPublicCertificateSlotValidateBeforeCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified). (asynchronously)
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot. (required)
     * @param publicCertificateName Public certificate name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetPublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName, String subscriptionId, String apiVersion, final ApiCallback<PublicCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetPublicCertificateSlotValidateBeforeCall(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetRelayServiceConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsGetRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetRelayServiceConnection(Async)");
        }

        return webAppsGetRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a hybrid connection configuration by its name.
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsGetRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsGetRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a hybrid connection configuration by its name.
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsGetRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a hybrid connection configuration by its name. (asynchronously)
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetRelayServiceConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetRelayServiceConnectionSlot(Async)");
        }

        return webAppsGetRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a hybrid connection configuration by its name.
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsGetRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsGetRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a hybrid connection configuration by its name.
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsGetRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a hybrid connection configuration by its name. (asynchronously)
     * Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSiteExtension
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSiteExtensionCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSiteExtensionValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSiteExtension(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSiteExtension(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsGetSiteExtension(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSiteExtension(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSiteExtension(Async)");
        }

        return webAppsGetSiteExtensionCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfo webAppsGetSiteExtension(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfo> localVarResp = webAppsGetSiteExtensionWithHttpInfo(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfo> webAppsGetSiteExtensionWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot. (asynchronously)
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSiteExtensionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSiteExtensionSlotCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSiteExtensionSlotValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSiteExtensionSlot(Async)");
        }

        return webAppsGetSiteExtensionSlotCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfo webAppsGetSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfo> localVarResp = webAppsGetSiteExtensionSlotWithHttpInfo(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfo> webAppsGetSiteExtensionSlotWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot. (asynchronously)
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension with an ID of {siteExtensionId} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSitePhpErrorLogFlag
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSitePhpErrorLogFlagCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSitePhpErrorLogFlagValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSitePhpErrorLogFlag(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSitePhpErrorLogFlag(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSitePhpErrorLogFlag(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSitePhpErrorLogFlag(Async)");
        }

        return webAppsGetSitePhpErrorLogFlagCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets web app&#39;s event logs.
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SitePhpErrorLogFlag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SitePhpErrorLogFlag webAppsGetSitePhpErrorLogFlag(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SitePhpErrorLogFlag> localVarResp = webAppsGetSitePhpErrorLogFlagWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets web app&#39;s event logs.
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SitePhpErrorLogFlag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SitePhpErrorLogFlag> webAppsGetSitePhpErrorLogFlagWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSitePhpErrorLogFlagValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SitePhpErrorLogFlag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets web app&#39;s event logs. (asynchronously)
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSitePhpErrorLogFlagAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SitePhpErrorLogFlag> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSitePhpErrorLogFlagValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SitePhpErrorLogFlag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSitePhpErrorLogFlagSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSitePhpErrorLogFlagSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSitePhpErrorLogFlagSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSitePhpErrorLogFlagSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSitePhpErrorLogFlagSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetSitePhpErrorLogFlagSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSitePhpErrorLogFlagSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSitePhpErrorLogFlagSlot(Async)");
        }

        return webAppsGetSitePhpErrorLogFlagSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets web app&#39;s event logs.
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SitePhpErrorLogFlag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SitePhpErrorLogFlag webAppsGetSitePhpErrorLogFlagSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SitePhpErrorLogFlag> localVarResp = webAppsGetSitePhpErrorLogFlagSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets web app&#39;s event logs.
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SitePhpErrorLogFlag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SitePhpErrorLogFlag> webAppsGetSitePhpErrorLogFlagSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSitePhpErrorLogFlagSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SitePhpErrorLogFlag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets web app&#39;s event logs. (asynchronously)
     * Gets web app&#39;s event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSitePhpErrorLogFlagSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SitePhpErrorLogFlag> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSitePhpErrorLogFlagSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SitePhpErrorLogFlag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSlot(Async)");
        }

        return webAppsGetSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the details of a web, mobile, or API app.
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsGetSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsGetSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a web, mobile, or API app.
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsGetSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a web, mobile, or API app. (asynchronously)
     * Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSourceControl
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSourceControl(Async)");
        }

        return webAppsGetSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the source control configuration of an app.
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsGetSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsGetSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the source control configuration of an app.
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsGetSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the source control configuration of an app. (asynchronously)
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSourceControlSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSourceControlSlot(Async)");
        }

        return webAppsGetSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the source control configuration of an app.
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsGetSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsGetSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the source control configuration of an app.
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsGetSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the source control configuration of an app. (asynchronously)
     * Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app still in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSwiftVirtualNetworkConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSwiftVirtualNetworkConnection(Async)");
        }

        return webAppsGetSwiftVirtualNetworkConnectionCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a Swift Virtual Network connection.
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsGetSwiftVirtualNetworkConnection(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsGetSwiftVirtualNetworkConnectionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a Swift Virtual Network connection.
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsGetSwiftVirtualNetworkConnectionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Swift Virtual Network connection. (asynchronously)
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetSwiftVirtualNetworkConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetSwiftVirtualNetworkConnectionSlot(Async)");
        }

        return webAppsGetSwiftVirtualNetworkConnectionSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a Swift Virtual Network connection.
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsGetSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsGetSwiftVirtualNetworkConnectionSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a Swift Virtual Network connection.
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsGetSwiftVirtualNetworkConnectionSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Swift Virtual Network connection. (asynchronously)
     * Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetTriggeredWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetTriggeredWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJob(Async)");
        }

        return webAppsGetTriggeredWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredWebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredWebJob webAppsGetTriggeredWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredWebJob> localVarResp = webAppsGetTriggeredWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredWebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredWebJob> webAppsGetTriggeredWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredWebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot. (asynchronously)
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<TriggeredWebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredWebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetTriggeredWebJobHistory
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobHistoryCall(String resourceGroupName, String name, String webJobName, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetTriggeredWebJobHistoryValidateBeforeCall(String resourceGroupName, String name, String webJobName, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobHistory(Async)");
        }

        return webAppsGetTriggeredWebJobHistoryCall(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredJobHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredJobHistory webAppsGetTriggeredWebJobHistory(String resourceGroupName, String name, String webJobName, String id, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredJobHistory> localVarResp = webAppsGetTriggeredWebJobHistoryWithHttpInfo(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredJobHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredJobHistory> webAppsGetTriggeredWebJobHistoryWithHttpInfo(String resourceGroupName, String name, String webJobName, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobHistoryValidateBeforeCall(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredJobHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot. (asynchronously)
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName, String id, String subscriptionId, String apiVersion, final ApiCallback<TriggeredJobHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobHistoryValidateBeforeCall(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredJobHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetTriggeredWebJobHistorySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobHistorySlotCall(String resourceGroupName, String name, String webJobName, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetTriggeredWebJobHistorySlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobHistorySlot(Async)");
        }

        return webAppsGetTriggeredWebJobHistorySlotCall(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredJobHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredJobHistory webAppsGetTriggeredWebJobHistorySlot(String resourceGroupName, String name, String webJobName, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredJobHistory> localVarResp = webAppsGetTriggeredWebJobHistorySlotWithHttpInfo(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredJobHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredJobHistory> webAppsGetTriggeredWebJobHistorySlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobHistorySlotValidateBeforeCall(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredJobHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot. (asynchronously)
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param id History ID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<TriggeredJobHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobHistorySlotValidateBeforeCall(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredJobHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetTriggeredWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetTriggeredWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobSlot(Async)");
        }

        return webAppsGetTriggeredWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredWebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredWebJob webAppsGetTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredWebJob> localVarResp = webAppsGetTriggeredWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredWebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredWebJob> webAppsGetTriggeredWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredWebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot. (asynchronously)
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<TriggeredWebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredWebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetVnetConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetVnetConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetVnetConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnection(Async)");
        }

        return webAppsGetVnetConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsGetVnetConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsGetVnetConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsGetVnetConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name. (asynchronously)
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetVnetConnectionGateway
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetVnetConnectionGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionGateway(Async)");
        }

        return webAppsGetVnetConnectionGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsGetVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsGetVnetConnectionGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsGetVnetConnectionGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an app&#39;s Virtual Network gateway. (asynchronously)
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetVnetConnectionGatewaySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetVnetConnectionGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionGatewaySlot(Async)");
        }

        return webAppsGetVnetConnectionGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsGetVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsGetVnetConnectionGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsGetVnetConnectionGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an app&#39;s Virtual Network gateway. (asynchronously)
     * Gets an app&#39;s Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Named gateway does not exist. Only the \&quot;primary\&quot; gateway is supported currently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetVnetConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetVnetConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionSlot(Async)");
        }

        return webAppsGetVnetConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsGetVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsGetVnetConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsGetVnetConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name. (asynchronously)
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the virtual network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetWebJob(Async)");
        }

        return webAppsGetWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get webjob information for an app, or a deployment slot.
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebJob webAppsGetWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebJob> localVarResp = webAppsGetWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get webjob information for an app, or a deployment slot.
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebJob> webAppsGetWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webjob information for an app, or a deployment slot. (asynchronously)
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<WebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsGetWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetWebJobSlot(Async)");
        }

        return webAppsGetWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get webjob information for an app, or a deployment slot.
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebJob webAppsGetWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebJob> localVarResp = webAppsGetWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get webjob information for an app, or a deployment slot.
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebJob> webAppsGetWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webjob information for an app, or a deployment slot. (asynchronously)
     * Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of the web job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetWebSiteContainerLogs
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebSiteContainerLogsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetWebSiteContainerLogsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebSiteContainerLogs(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetWebSiteContainerLogs(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetWebSiteContainerLogs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetWebSiteContainerLogs(Async)");
        }

        return webAppsGetWebSiteContainerLogsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the last lines of docker logs for the given site
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetWebSiteContainerLogs(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetWebSiteContainerLogsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the last lines of docker logs for the given site
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetWebSiteContainerLogsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetWebSiteContainerLogsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the last lines of docker logs for the given site (asynchronously)
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebSiteContainerLogsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetWebSiteContainerLogsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsGetWebSiteContainerLogsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebSiteContainerLogsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsGetWebSiteContainerLogsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebSiteContainerLogsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsGetWebSiteContainerLogsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsGetWebSiteContainerLogsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsGetWebSiteContainerLogsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsGetWebSiteContainerLogsSlot(Async)");
        }

        return webAppsGetWebSiteContainerLogsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the last lines of docker logs for the given site
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsGetWebSiteContainerLogsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = webAppsGetWebSiteContainerLogsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the last lines of docker logs for the given site
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsGetWebSiteContainerLogsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsGetWebSiteContainerLogsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the last lines of docker logs for the given site (asynchronously)
     * Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsGetWebSiteContainerLogsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsGetWebSiteContainerLogsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsInstallSiteExtension
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsInstallSiteExtensionCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsInstallSiteExtensionValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsInstallSiteExtension(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsInstallSiteExtension(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsInstallSiteExtension(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsInstallSiteExtension(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsInstallSiteExtension(Async)");
        }

        return webAppsInstallSiteExtensionCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Install site extension on a web site, or a deployment slot.
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfo webAppsInstallSiteExtension(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfo> localVarResp = webAppsInstallSiteExtensionWithHttpInfo(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Install site extension on a web site, or a deployment slot.
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfo> webAppsInstallSiteExtensionWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsInstallSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Install site extension on a web site, or a deployment slot. (asynchronously)
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsInstallSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsInstallSiteExtensionValidateBeforeCall(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsInstallSiteExtensionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsInstallSiteExtensionSlotCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "siteExtensionId" + "}", localVarApiClient.escapeString(siteExtensionId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsInstallSiteExtensionSlotValidateBeforeCall(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'siteExtensionId' is set
        if (siteExtensionId == null) {
            throw new ApiException("Missing the required parameter 'siteExtensionId' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsInstallSiteExtensionSlot(Async)");
        }

        return webAppsInstallSiteExtensionSlotCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Install site extension on a web site, or a deployment slot.
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfo webAppsInstallSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfo> localVarResp = webAppsInstallSiteExtensionSlotWithHttpInfo(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Install site extension on a web site, or a deployment slot.
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfo> webAppsInstallSiteExtensionSlotWithHttpInfo(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsInstallSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Install site extension on a web site, or a deployment slot. (asynchronously)
     * Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param siteExtensionId Site extension name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Site Extension created. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Site Extension is being installed on another request: Rejecting current request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsInstallSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsInstallSiteExtensionSlotValidateBeforeCall(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsIsCloneable
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsIsCloneableCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsIsCloneableValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsIsCloneable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsIsCloneable(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsIsCloneable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsIsCloneable(Async)");
        }

        return webAppsIsCloneableCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteCloneability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteCloneability webAppsIsCloneable(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCloneability> localVarResp = webAppsIsCloneableWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCloneability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCloneability> webAppsIsCloneableWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsIsCloneableValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription. (asynchronously)
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsIsCloneableAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteCloneability> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsIsCloneableValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsIsCloneableSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns information on the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsIsCloneableSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsIsCloneableSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsIsCloneableSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsIsCloneableSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsIsCloneableSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsIsCloneableSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsIsCloneableSlot(Async)");
        }

        return webAppsIsCloneableSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns information on the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteCloneability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteCloneability webAppsIsCloneableSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCloneability> localVarResp = webAppsIsCloneableSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns information on the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCloneability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCloneability> webAppsIsCloneableSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsIsCloneableSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription. (asynchronously)
     * Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. By default, this API returns information on the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsIsCloneableSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteCloneability> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsIsCloneableSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsList(Async)");
        }

        return webAppsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all apps for a subscription.
     * Get all apps for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsList200Response webAppsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsList200Response> localVarResp = webAppsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all apps for a subscription.
     * Get all apps for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsList200Response> webAppsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all apps for a subscription. (asynchronously)
     * Get all apps for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListAsync(String subscriptionId, String apiVersion, final ApiCallback<WebAppsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListApplicationSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListApplicationSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListApplicationSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListApplicationSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListApplicationSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListApplicationSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListApplicationSettings(Async)");
        }

        return webAppsListApplicationSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the application settings of an app.
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsListApplicationSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsListApplicationSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the application settings of an app.
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsListApplicationSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListApplicationSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application settings of an app. (asynchronously)
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListApplicationSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListApplicationSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListApplicationSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListApplicationSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListApplicationSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListApplicationSettingsSlot(Async)");
        }

        return webAppsListApplicationSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the application settings of an app.
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsListApplicationSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsListApplicationSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the application settings of an app.
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsListApplicationSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListApplicationSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application settings of an app. (asynchronously)
     * Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListApplicationSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListAzureStorageAccounts
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListAzureStorageAccountsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListAzureStorageAccountsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListAzureStorageAccounts(Async)");
        }

        return webAppsListAzureStorageAccountsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Azure storage account configurations of an app.
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AzureStoragePropertyDictionaryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AzureStoragePropertyDictionaryResource webAppsListAzureStorageAccounts(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AzureStoragePropertyDictionaryResource> localVarResp = webAppsListAzureStorageAccountsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Azure storage account configurations of an app.
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AzureStoragePropertyDictionaryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AzureStoragePropertyDictionaryResource> webAppsListAzureStorageAccountsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListAzureStorageAccountsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Azure storage account configurations of an app. (asynchronously)
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListAzureStorageAccountsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AzureStoragePropertyDictionaryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListAzureStorageAccountsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListAzureStorageAccountsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListAzureStorageAccountsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListAzureStorageAccountsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListAzureStorageAccountsSlot(Async)");
        }

        return webAppsListAzureStorageAccountsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Azure storage account configurations of an app.
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AzureStoragePropertyDictionaryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AzureStoragePropertyDictionaryResource webAppsListAzureStorageAccountsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AzureStoragePropertyDictionaryResource> localVarResp = webAppsListAzureStorageAccountsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Azure storage account configurations of an app.
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AzureStoragePropertyDictionaryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AzureStoragePropertyDictionaryResource> webAppsListAzureStorageAccountsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListAzureStorageAccountsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Azure storage account configurations of an app. (asynchronously)
     * Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<AzureStoragePropertyDictionaryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListAzureStorageAccountsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListBackupStatusSecrets
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupStatusSecretsCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListBackupStatusSecretsValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsListBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsListBackupStatusSecrets(Async)");
        }

        return webAppsListBackupStatusSecretsCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsListBackupStatusSecrets(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsListBackupStatusSecretsWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsListBackupStatusSecretsWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsListBackupStatusSecretsValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body. (asynchronously)
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupStatusSecretsAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListBackupStatusSecretsValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListBackupStatusSecretsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupStatusSecretsSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListBackupStatusSecretsSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsListBackupStatusSecretsSlot(Async)");
        }

        return webAppsListBackupStatusSecretsSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem webAppsListBackupStatusSecretsSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = webAppsListBackupStatusSecretsSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> webAppsListBackupStatusSecretsSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsListBackupStatusSecretsSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body. (asynchronously)
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param backupId ID of backup. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupStatusSecretsSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListBackupStatusSecretsSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListBackups
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListBackupsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListBackups(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListBackups(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListBackups(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListBackups(Async)");
        }

        return webAppsListBackupsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets existing backups of an app.
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItemCollection webAppsListBackups(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItemCollection> localVarResp = webAppsListBackupsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets existing backups of an app.
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItemCollection> webAppsListBackupsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListBackupsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets existing backups of an app. (asynchronously)
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<BackupItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListBackupsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListBackupsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListBackupsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListBackupsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListBackupsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListBackupsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListBackupsSlot(Async)");
        }

        return webAppsListBackupsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets existing backups of an app.
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return BackupItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupItemCollection webAppsListBackupsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItemCollection> localVarResp = webAppsListBackupsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets existing backups of an app.
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItemCollection> webAppsListBackupsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListBackupsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets existing backups of an app. (asynchronously)
     * Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListBackupsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListBackupsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListByResourceGroup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param includeSlots Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The default is false, which only gives you the production slot of all apps. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, Boolean includeSlots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSlots", includeSlots));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, Boolean includeSlots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListByResourceGroup(Async)");
        }

        return webAppsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, includeSlots, _callback);

    }

    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * Gets all web, mobile, and API apps in the specified resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param includeSlots Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The default is false, which only gives you the production slot of all apps. (optional)
     * @return WebAppsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsList200Response webAppsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion, Boolean includeSlots) throws ApiException {
        ApiResponse<WebAppsList200Response> localVarResp = webAppsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, includeSlots);
        return localVarResp.getData();
    }

    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * Gets all web, mobile, and API apps in the specified resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param includeSlots Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The default is false, which only gives you the production slot of all apps. (optional)
     * @return ApiResponse&lt;WebAppsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsList200Response> webAppsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, Boolean includeSlots) throws ApiException {
        okhttp3.Call localVarCall = webAppsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, includeSlots, null);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all web, mobile, and API apps in the specified resource group. (asynchronously)
     * Gets all web, mobile, and API apps in the specified resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param includeSlots Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The default is false, which only gives you the production slot of all apps. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, Boolean includeSlots, final ApiCallback<WebAppsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, includeSlots, _callback);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConfigurationSnapshotInfo
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationSnapshotInfoCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConfigurationSnapshotInfoValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationSnapshotInfo(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConfigurationSnapshotInfo(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationSnapshotInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationSnapshotInfo(Async)");
        }

        return webAppsListConfigurationSnapshotInfoCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigurationSnapshotInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigurationSnapshotInfoCollection webAppsListConfigurationSnapshotInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigurationSnapshotInfoCollection> localVarResp = webAppsListConfigurationSnapshotInfoWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigurationSnapshotInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigurationSnapshotInfoCollection> webAppsListConfigurationSnapshotInfoWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConfigurationSnapshotInfoValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigurationSnapshotInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot. (asynchronously)
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationSnapshotInfoAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigurationSnapshotInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConfigurationSnapshotInfoValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigurationSnapshotInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConfigurationSnapshotInfoSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationSnapshotInfoSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConfigurationSnapshotInfoSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationSnapshotInfoSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConfigurationSnapshotInfoSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListConfigurationSnapshotInfoSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationSnapshotInfoSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationSnapshotInfoSlot(Async)");
        }

        return webAppsListConfigurationSnapshotInfoSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigurationSnapshotInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigurationSnapshotInfoCollection webAppsListConfigurationSnapshotInfoSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigurationSnapshotInfoCollection> localVarResp = webAppsListConfigurationSnapshotInfoSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigurationSnapshotInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigurationSnapshotInfoCollection> webAppsListConfigurationSnapshotInfoSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConfigurationSnapshotInfoSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigurationSnapshotInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot. (asynchronously)
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationSnapshotInfoSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigurationSnapshotInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConfigurationSnapshotInfoSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigurationSnapshotInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConfigurations
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConfigurationsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurations(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConfigurations(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConfigurations(Async)");
        }

        return webAppsListConfigurationsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the configurations of an app
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResourceCollection webAppsListConfigurations(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResourceCollection> localVarResp = webAppsListConfigurationsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the configurations of an app
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResourceCollection> webAppsListConfigurationsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConfigurationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the configurations of an app (asynchronously)
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConfigurationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConfigurationsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConfigurationsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConfigurationsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListConfigurationsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationsSlot(Async)");
        }

        return webAppsListConfigurationsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the configurations of an app
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteConfigResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResourceCollection webAppsListConfigurationsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfigResourceCollection> localVarResp = webAppsListConfigurationsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the configurations of an app
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfigResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResourceCollection> webAppsListConfigurationsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConfigurationsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfigResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the configurations of an app (asynchronously)
     * List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConfigurationsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteConfigResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConfigurationsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConnectionStrings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConnectionStringsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConnectionStringsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConnectionStrings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConnectionStrings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConnectionStrings(Async)");
        }

        return webAppsListConnectionStringsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the connection strings of an app.
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary webAppsListConnectionStrings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = webAppsListConnectionStringsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the connection strings of an app.
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> webAppsListConnectionStringsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the connection strings of an app. (asynchronously)
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConnectionStringsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListConnectionStringsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConnectionStringsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListConnectionStringsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListConnectionStringsSlot(Async)");
        }

        return webAppsListConnectionStringsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the connection strings of an app.
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary webAppsListConnectionStringsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = webAppsListConnectionStringsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the connection strings of an app.
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> webAppsListConnectionStringsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the connection strings of an app. (asynchronously)
     * Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListContinuousWebJobs
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListContinuousWebJobsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListContinuousWebJobsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListContinuousWebJobs(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListContinuousWebJobs(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListContinuousWebJobs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListContinuousWebJobs(Async)");
        }

        return webAppsListContinuousWebJobsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ContinuousWebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousWebJobCollection webAppsListContinuousWebJobs(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ContinuousWebJobCollection> localVarResp = webAppsListContinuousWebJobsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ContinuousWebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousWebJobCollection> webAppsListContinuousWebJobsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListContinuousWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContinuousWebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List continuous web jobs for an app, or a deployment slot. (asynchronously)
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListContinuousWebJobsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ContinuousWebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListContinuousWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContinuousWebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListContinuousWebJobsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListContinuousWebJobsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListContinuousWebJobsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListContinuousWebJobsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListContinuousWebJobsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListContinuousWebJobsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListContinuousWebJobsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListContinuousWebJobsSlot(Async)");
        }

        return webAppsListContinuousWebJobsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ContinuousWebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousWebJobCollection webAppsListContinuousWebJobsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ContinuousWebJobCollection> localVarResp = webAppsListContinuousWebJobsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ContinuousWebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousWebJobCollection> webAppsListContinuousWebJobsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListContinuousWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContinuousWebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List continuous web jobs for an app, or a deployment slot. (asynchronously)
     * List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListContinuousWebJobsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<ContinuousWebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListContinuousWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContinuousWebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDeploymentLog
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentLogCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDeploymentLogValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentLog(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDeploymentLog(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsListDeploymentLog(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentLog(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentLog(Async)");
        }

        return webAppsListDeploymentLogCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsListDeploymentLog(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsListDeploymentLogWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsListDeploymentLogWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDeploymentLogValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot. (asynchronously)
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentLogAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDeploymentLogValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDeploymentLogSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentLogSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDeploymentLogSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentLogSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDeploymentLogSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webAppsListDeploymentLogSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListDeploymentLogSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentLogSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentLogSlot(Async)");
        }

        return webAppsListDeploymentLogSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Deployment webAppsListDeploymentLogSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = webAppsListDeploymentLogSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> webAppsListDeploymentLogSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDeploymentLogSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot. (asynchronously)
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from \&quot;GET /api/sites/{siteName}/deployments\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentLogSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDeploymentLogSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDeployments
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDeploymentsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDeployments(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDeployments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDeployments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDeployments(Async)");
        }

        return webAppsListDeploymentsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments for an app, or a deployment slot.
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection webAppsListDeployments(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = webAppsListDeploymentsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments for an app, or a deployment slot.
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> webAppsListDeploymentsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDeploymentsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments for an app, or a deployment slot. (asynchronously)
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDeploymentsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDeploymentsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDeploymentsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDeploymentsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListDeploymentsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentsSlot(Async)");
        }

        return webAppsListDeploymentsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments for an app, or a deployment slot.
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection webAppsListDeploymentsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = webAppsListDeploymentsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments for an app, or a deployment slot.
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> webAppsListDeploymentsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments for an app, or a deployment slot. (asynchronously)
     * List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDeploymentsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDomainOwnershipIdentifiers
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDomainOwnershipIdentifiersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDomainOwnershipIdentifiersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDomainOwnershipIdentifiers(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDomainOwnershipIdentifiers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDomainOwnershipIdentifiers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDomainOwnershipIdentifiers(Async)");
        }

        return webAppsListDomainOwnershipIdentifiersCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListDomainOwnershipIdentifiers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListDomainOwnershipIdentifiers200Response webAppsListDomainOwnershipIdentifiers(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListDomainOwnershipIdentifiers200Response> localVarResp = webAppsListDomainOwnershipIdentifiersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListDomainOwnershipIdentifiers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListDomainOwnershipIdentifiers200Response> webAppsListDomainOwnershipIdentifiersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDomainOwnershipIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListDomainOwnershipIdentifiers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists ownership identifiers for domain associated with web app. (asynchronously)
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDomainOwnershipIdentifiersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListDomainOwnershipIdentifiers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDomainOwnershipIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListDomainOwnershipIdentifiers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListDomainOwnershipIdentifiersSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDomainOwnershipIdentifiersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListDomainOwnershipIdentifiersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListDomainOwnershipIdentifiersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListDomainOwnershipIdentifiersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListDomainOwnershipIdentifiersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListDomainOwnershipIdentifiersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListDomainOwnershipIdentifiersSlot(Async)");
        }

        return webAppsListDomainOwnershipIdentifiersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListDomainOwnershipIdentifiers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListDomainOwnershipIdentifiers200Response webAppsListDomainOwnershipIdentifiersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListDomainOwnershipIdentifiers200Response> localVarResp = webAppsListDomainOwnershipIdentifiersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListDomainOwnershipIdentifiers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListDomainOwnershipIdentifiers200Response> webAppsListDomainOwnershipIdentifiersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListDomainOwnershipIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListDomainOwnershipIdentifiers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists ownership identifiers for domain associated with web app. (asynchronously)
     * Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListDomainOwnershipIdentifiersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListDomainOwnershipIdentifiers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListDomainOwnershipIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListDomainOwnershipIdentifiers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListFunctionSecrets
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionSecretsCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListFunctionSecretsValidateBeforeCall(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionSecrets(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListFunctionSecrets(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsListFunctionSecrets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListFunctionSecrets(Async)");
        }

        return webAppsListFunctionSecretsCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionSecrets webAppsListFunctionSecrets(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionSecrets> localVarResp = webAppsListFunctionSecretsWithHttpInfo(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionSecrets> webAppsListFunctionSecretsWithHttpInfo(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListFunctionSecretsValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot. (asynchronously)
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionSecretsAsync(String resourceGroupName, String name, String functionName, String subscriptionId, String apiVersion, final ApiCallback<FunctionSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListFunctionSecretsValidateBeforeCall(resourceGroupName, name, functionName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListFunctionSecretsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionSecretsSlotCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListFunctionSecretsSlotValidateBeforeCall(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListFunctionSecretsSlot(Async)");
        }

        return webAppsListFunctionSecretsSlotCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionSecrets webAppsListFunctionSecretsSlot(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionSecrets> localVarResp = webAppsListFunctionSecretsSlotWithHttpInfo(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionSecrets> webAppsListFunctionSecretsSlotWithHttpInfo(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListFunctionSecretsSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot. (asynchronously)
     * Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param functionName Function name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function secrets returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionSecretsSlotAsync(String resourceGroupName, String name, String functionName, String slot, String subscriptionId, String apiVersion, final ApiCallback<FunctionSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListFunctionSecretsSlotValidateBeforeCall(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListFunctions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListFunctionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListFunctions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListFunctions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListFunctions(Async)");
        }

        return webAppsListFunctionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the functions for a web site, or a deployment slot.
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionEnvelopeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelopeCollection webAppsListFunctions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionEnvelopeCollection> localVarResp = webAppsListFunctionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the functions for a web site, or a deployment slot.
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionEnvelopeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelopeCollection> webAppsListFunctionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListFunctionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelopeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the functions for a web site, or a deployment slot. (asynchronously)
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListFunctionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<FunctionEnvelopeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListFunctionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelopeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHostNameBindings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHostNameBindingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHostNameBindingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHostNameBindings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHostNameBindings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHostNameBindings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHostNameBindings(Async)");
        }

        return webAppsListHostNameBindingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HostNameBindingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBindingCollection webAppsListHostNameBindings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBindingCollection> localVarResp = webAppsListHostNameBindingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBindingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBindingCollection> webAppsListHostNameBindingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHostNameBindingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hostname bindings for an app or a deployment slot. (asynchronously)
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHostNameBindingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<HostNameBindingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHostNameBindingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHostNameBindingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHostNameBindingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHostNameBindingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHostNameBindingsSlot(Async)");
        }

        return webAppsListHostNameBindingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HostNameBindingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBindingCollection webAppsListHostNameBindingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBindingCollection> localVarResp = webAppsListHostNameBindingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBindingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBindingCollection> webAppsListHostNameBindingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHostNameBindingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hostname bindings for an app or a deployment slot. (asynchronously)
     * Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHostNameBindingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<HostNameBindingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHostNameBindingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHybridConnectionKeys
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionKeysCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHybridConnectionKeysValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnectionKeys(Async)");
        }

        return webAppsListHybridConnectionKeysCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the send key name and value for a Hybrid Connection.
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListHybridConnectionKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListHybridConnectionKeys200Response webAppsListHybridConnectionKeys(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListHybridConnectionKeys200Response> localVarResp = webAppsListHybridConnectionKeysWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the send key name and value for a Hybrid Connection.
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListHybridConnectionKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListHybridConnectionKeys200Response> webAppsListHybridConnectionKeysWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHybridConnectionKeysValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListHybridConnectionKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the send key name and value for a Hybrid Connection. (asynchronously)
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionKeysAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListHybridConnectionKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHybridConnectionKeysValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListHybridConnectionKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHybridConnectionKeysSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionKeysSlotCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHybridConnectionKeysSlotValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnectionKeysSlot(Async)");
        }

        return webAppsListHybridConnectionKeysSlotCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the send key name and value for a Hybrid Connection.
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListHybridConnectionKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListHybridConnectionKeys200Response webAppsListHybridConnectionKeysSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListHybridConnectionKeys200Response> localVarResp = webAppsListHybridConnectionKeysSlotWithHttpInfo(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the send key name and value for a Hybrid Connection.
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListHybridConnectionKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListHybridConnectionKeys200Response> webAppsListHybridConnectionKeysSlotWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHybridConnectionKeysSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListHybridConnectionKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the send key name and value for a Hybrid Connection. (asynchronously)
     * Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionKeysSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListHybridConnectionKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHybridConnectionKeysSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListHybridConnectionKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHybridConnections
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHybridConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHybridConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnections(Async)");
        }

        return webAppsListHybridConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsListHybridConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsListHybridConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsListHybridConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHybridConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App. (asynchronously)
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHybridConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListHybridConnectionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListHybridConnectionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnectionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListHybridConnectionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListHybridConnectionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnectionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnectionsSlot(Async)");
        }

        return webAppsListHybridConnectionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsListHybridConnectionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsListHybridConnectionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsListHybridConnectionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListHybridConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App. (asynchronously)
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListHybridConnectionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListHybridConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceFunctionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceFunctionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceFunctionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceFunctionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceFunctionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListInstanceFunctionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceFunctionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceFunctionsSlot(Async)");
        }

        return webAppsListInstanceFunctionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the functions for a web site, or a deployment slot.
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionEnvelopeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionEnvelopeCollection webAppsListInstanceFunctionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionEnvelopeCollection> localVarResp = webAppsListInstanceFunctionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the functions for a web site, or a deployment slot.
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionEnvelopeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionEnvelopeCollection> webAppsListInstanceFunctionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceFunctionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionEnvelopeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the functions for a web site, or a deployment slot. (asynchronously)
     * List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Function information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Function with an ID of {functionName} is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceFunctionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<FunctionEnvelopeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceFunctionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionEnvelopeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceIdentifiers
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceIdentifiersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceIdentifiersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceIdentifiers(Async)");
        }

        return webAppsListInstanceIdentifiersCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all scale-out instances of an app.
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppInstanceCollection webAppsListInstanceIdentifiers(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppInstanceCollection> localVarResp = webAppsListInstanceIdentifiersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all scale-out instances of an app.
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppInstanceCollection> webAppsListInstanceIdentifiersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppInstanceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all scale-out instances of an app. (asynchronously)
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceIdentifiersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppInstanceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppInstanceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceIdentifiersSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceIdentifiersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceIdentifiersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceIdentifiersSlot(Async)");
        }

        return webAppsListInstanceIdentifiersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all scale-out instances of an app.
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppInstanceCollection webAppsListInstanceIdentifiersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppInstanceCollection> localVarResp = webAppsListInstanceIdentifiersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all scale-out instances of an app.
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppInstanceCollection> webAppsListInstanceIdentifiersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppInstanceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all scale-out instances of an app. (asynchronously)
     * Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceIdentifiersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppInstanceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppInstanceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcessModules
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessModulesCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessModulesValidateBeforeCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessModules(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcessModules(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListInstanceProcessModules(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessModules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessModules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessModules(Async)");
        }

        return webAppsListInstanceProcessModulesCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfoCollection webAppsListInstanceProcessModules(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfoCollection> localVarResp = webAppsListInstanceProcessModulesWithHttpInfo(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfoCollection> webAppsListInstanceProcessModulesWithHttpInfo(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessModulesValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessModulesAsync(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessModulesValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcessModulesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessModulesSlotCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessModulesSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessModulesSlot(Async)");
        }

        return webAppsListInstanceProcessModulesSlotCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfoCollection webAppsListInstanceProcessModulesSlot(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfoCollection> localVarResp = webAppsListInstanceProcessModulesSlotWithHttpInfo(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfoCollection> webAppsListInstanceProcessModulesSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessModulesSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessModulesSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessModulesSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcessThreads
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessThreadsCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessThreadsValidateBeforeCall(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessThreads(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcessThreads(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListInstanceProcessThreads(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessThreads(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessThreads(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessThreads(Async)");
        }

        return webAppsListInstanceProcessThreadsCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfoCollection webAppsListInstanceProcessThreads(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfoCollection> localVarResp = webAppsListInstanceProcessThreadsWithHttpInfo(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfoCollection> webAppsListInstanceProcessThreadsWithHttpInfo(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessThreadsValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessThreadsAsync(String resourceGroupName, String name, String processId, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessThreadsValidateBeforeCall(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcessThreadsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessThreadsSlotCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessThreadsSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessThreadsSlot(Async)");
        }

        return webAppsListInstanceProcessThreadsSlotCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfoCollection webAppsListInstanceProcessThreadsSlot(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfoCollection> localVarResp = webAppsListInstanceProcessThreadsSlotWithHttpInfo(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfoCollection> webAppsListInstanceProcessThreadsSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessThreadsSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessThreadsSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessThreadsSlotValidateBeforeCall(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcesses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessesCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessesValidateBeforeCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcesses(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcesses(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcesses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcesses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcesses(Async)");
        }

        return webAppsListInstanceProcessesCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfoCollection webAppsListInstanceProcesses(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfoCollection> localVarResp = webAppsListInstanceProcessesWithHttpInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfoCollection> webAppsListInstanceProcessesWithHttpInfo(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessesValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site. (asynchronously)
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessesAsync(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessesValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListInstanceProcessesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessesSlotCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListInstanceProcessesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessesSlot(Async)");
        }

        return webAppsListInstanceProcessesSlotCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfoCollection webAppsListInstanceProcessesSlot(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfoCollection> localVarResp = webAppsListInstanceProcessesSlotWithHttpInfo(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfoCollection> webAppsListInstanceProcessesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListInstanceProcessesSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site. (asynchronously)
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \&quot;GET api/sites/{siteName}/instances\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListInstanceProcessesSlotAsync(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListInstanceProcessesSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetadata
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetadataCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetadataValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetadata(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetadata(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetadata(Async)");
        }

        return webAppsListMetadataCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the metadata of an app.
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsListMetadata(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsListMetadataWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the metadata of an app.
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsListMetadataWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the metadata of an app. (asynchronously)
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetadataAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetadataSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetadataSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetadataSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetadataSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetadataSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListMetadataSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetadataSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetadataSlot(Async)");
        }

        return webAppsListMetadataSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the metadata of an app.
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsListMetadataSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsListMetadataSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the metadata of an app.
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsListMetadataSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the metadata of an app. (asynchronously)
     * Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetadataSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetricDefinitions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricDefinitionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetricDefinitions(Async)");
        }

        return webAppsListMetricDefinitionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListMetricDefinitions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListMetricDefinitions200Response webAppsListMetricDefinitions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListMetricDefinitions200Response> localVarResp = webAppsListMetricDefinitionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListMetricDefinitions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListMetricDefinitions200Response> webAppsListMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListMetricDefinitions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified). (asynchronously)
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricDefinitionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListMetricDefinitions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListMetricDefinitions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetricDefinitionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricDefinitionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetricDefinitionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetricDefinitionsSlot(Async)");
        }

        return webAppsListMetricDefinitionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListMetricDefinitions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListMetricDefinitions200Response webAppsListMetricDefinitionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListMetricDefinitions200Response> localVarResp = webAppsListMetricDefinitionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListMetricDefinitions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListMetricDefinitions200Response> webAppsListMetricDefinitionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetricDefinitionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListMetricDefinitions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all metric definitions of an app (or deployment slot, if specified). (asynchronously)
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricDefinitionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListMetricDefinitions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetricDefinitionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListMetricDefinitions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetrics
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetricsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetrics(Async)");
        }

        return webAppsListMetricsCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return WebAppsListMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListMetrics200Response webAppsListMetrics(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<WebAppsListMetrics200Response> localVarResp = webAppsListMetricsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;WebAppsListMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListMetrics200Response> webAppsListMetricsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<WebAppsListMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified). (asynchronously)
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<WebAppsListMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListMetricsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListMetricsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListMetricsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListMetricsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListMetricsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListMetricsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListMetricsSlot(Async)");
        }

        return webAppsListMetricsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return WebAppsListMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListMetrics200Response webAppsListMetricsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<WebAppsListMetrics200Response> localVarResp = webAppsListMetricsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;WebAppsListMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListMetrics200Response> webAppsListMetricsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListMetricsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<WebAppsListMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets performance metrics of an app (or deployment slot, if specified). (asynchronously)
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param details Specify \&quot;true\&quot; to include metric details in the response. It is \&quot;false\&quot; by default. (optional)
     * @param $filter Return only metrics specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListMetricsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<WebAppsListMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListMetricsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListNetworkFeatures
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListNetworkFeaturesCall(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "view" + "}", localVarApiClient.escapeString(view.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListNetworkFeaturesValidateBeforeCall(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListNetworkFeatures(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListNetworkFeatures(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling webAppsListNetworkFeatures(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListNetworkFeatures(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListNetworkFeatures(Async)");
        }

        return webAppsListNetworkFeaturesCall(resourceGroupName, name, view, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return NetworkFeatures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatures webAppsListNetworkFeatures(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<NetworkFeatures> localVarResp = webAppsListNetworkFeaturesWithHttpInfo(resourceGroupName, name, view, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;NetworkFeatures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatures> webAppsListNetworkFeaturesWithHttpInfo(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListNetworkFeaturesValidateBeforeCall(resourceGroupName, name, view, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified). (asynchronously)
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListNetworkFeaturesAsync(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback<NetworkFeatures> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListNetworkFeaturesValidateBeforeCall(resourceGroupName, name, view, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListNetworkFeaturesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListNetworkFeaturesSlotCall(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "view" + "}", localVarApiClient.escapeString(view.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListNetworkFeaturesSlotValidateBeforeCall(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListNetworkFeaturesSlot(Async)");
        }

        return webAppsListNetworkFeaturesSlotCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return NetworkFeatures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatures webAppsListNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<NetworkFeatures> localVarResp = webAppsListNetworkFeaturesSlotWithHttpInfo(resourceGroupName, name, view, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;NetworkFeatures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatures> webAppsListNetworkFeaturesSlotWithHttpInfo(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListNetworkFeaturesSlotValidateBeforeCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified). (asynchronously)
     * Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListNetworkFeaturesSlotAsync(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback<NetworkFeatures> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListNetworkFeaturesSlotValidateBeforeCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPerfMonCounters
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPerfMonCountersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPerfMonCountersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPerfMonCounters(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPerfMonCounters(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPerfMonCounters(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPerfMonCounters(Async)");
        }

        return webAppsListPerfMonCountersCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets perfmon counters for web app.
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return PerfMonCounterCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PerfMonCounterCollection webAppsListPerfMonCounters(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PerfMonCounterCollection> localVarResp = webAppsListPerfMonCountersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets perfmon counters for web app.
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;PerfMonCounterCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PerfMonCounterCollection> webAppsListPerfMonCountersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPerfMonCountersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PerfMonCounterCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets perfmon counters for web app. (asynchronously)
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPerfMonCountersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<PerfMonCounterCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPerfMonCountersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PerfMonCounterCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPerfMonCountersSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPerfMonCountersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPerfMonCountersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPerfMonCountersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPerfMonCountersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListPerfMonCountersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPerfMonCountersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPerfMonCountersSlot(Async)");
        }

        return webAppsListPerfMonCountersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets perfmon counters for web app.
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return PerfMonCounterCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PerfMonCounterCollection webAppsListPerfMonCountersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<PerfMonCounterCollection> localVarResp = webAppsListPerfMonCountersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets perfmon counters for web app.
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;PerfMonCounterCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PerfMonCounterCollection> webAppsListPerfMonCountersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPerfMonCountersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<PerfMonCounterCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets perfmon counters for web app. (asynchronously)
     * Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPerfMonCountersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback<PerfMonCounterCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPerfMonCountersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<PerfMonCounterCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPremierAddOns
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPremierAddOnsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPremierAddOnsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPremierAddOns(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPremierAddOns(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPremierAddOns(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPremierAddOns(Async)");
        }

        return webAppsListPremierAddOnsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the premier add-ons of an app.
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsListPremierAddOns(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsListPremierAddOnsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the premier add-ons of an app.
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsListPremierAddOnsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPremierAddOnsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the premier add-ons of an app. (asynchronously)
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPremierAddOnsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPremierAddOnsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPremierAddOnsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPremierAddOnsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPremierAddOnsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListPremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPremierAddOnsSlot(Async)");
        }

        return webAppsListPremierAddOnsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the premier add-ons of an app.
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsListPremierAddOnsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsListPremierAddOnsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the premier add-ons of an app.
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsListPremierAddOnsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPremierAddOnsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the premier add-ons of an app. (asynchronously)
     * Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPremierAddOnsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPremierAddOnsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcessModules
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessModulesCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessModulesValidateBeforeCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessModules(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcessModules(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListProcessModules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcessModules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcessModules(Async)");
        }

        return webAppsListProcessModulesCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfoCollection webAppsListProcessModules(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfoCollection> localVarResp = webAppsListProcessModulesWithHttpInfo(resourceGroupName, name, processId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfoCollection> webAppsListProcessModulesWithHttpInfo(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessModulesValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessModulesAsync(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessModulesValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcessModulesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessModulesSlotCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessModulesSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessModulesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcessModulesSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListProcessModulesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListProcessModulesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcessModulesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcessModulesSlot(Async)");
        }

        return webAppsListProcessModulesSlotCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessModuleInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessModuleInfoCollection webAppsListProcessModulesSlot(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessModuleInfoCollection> localVarResp = webAppsListProcessModulesSlotWithHttpInfo(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessModuleInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessModuleInfoCollection> webAppsListProcessModulesSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessModulesSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Module information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessModulesSlotAsync(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessModuleInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessModulesSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessModuleInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcessThreads
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessThreadsCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessThreadsValidateBeforeCall(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessThreads(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcessThreads(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListProcessThreads(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcessThreads(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcessThreads(Async)");
        }

        return webAppsListProcessThreadsCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfoCollection webAppsListProcessThreads(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfoCollection> localVarResp = webAppsListProcessThreadsWithHttpInfo(resourceGroupName, name, processId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfoCollection> webAppsListProcessThreadsWithHttpInfo(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessThreadsValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessThreadsAsync(String resourceGroupName, String name, String processId, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessThreadsValidateBeforeCall(resourceGroupName, name, processId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcessThreadsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessThreadsSlotCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessThreadsSlotValidateBeforeCall(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling webAppsListProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcessThreadsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcessThreadsSlot(Async)");
        }

        return webAppsListProcessThreadsSlotCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessThreadInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessThreadInfoCollection webAppsListProcessThreadsSlot(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessThreadInfoCollection> localVarResp = webAppsListProcessThreadsSlotWithHttpInfo(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessThreadInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessThreadInfoCollection> webAppsListProcessThreadsSlotWithHttpInfo(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessThreadsSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site. (asynchronously)
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param processId PID. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Thread information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessThreadsSlotAsync(String resourceGroupName, String name, String processId, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessThreadInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessThreadsSlotValidateBeforeCall(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessThreadInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcesses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcesses(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcesses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcesses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcesses(Async)");
        }

        return webAppsListProcessesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfoCollection webAppsListProcesses(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfoCollection> localVarResp = webAppsListProcessesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfoCollection> webAppsListProcessesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site. (asynchronously)
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListProcessesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListProcessesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListProcessesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListProcessesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListProcessesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListProcessesSlot(Async)");
        }

        return webAppsListProcessesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ProcessInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessInfoCollection webAppsListProcessesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProcessInfoCollection> localVarResp = webAppsListProcessesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ProcessInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessInfoCollection> webAppsListProcessesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListProcessesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site. (asynchronously)
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process terminated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Process with the specified ID is not running. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListProcessesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<ProcessInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListProcessesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProcessInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublicCertificates
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublicCertificatesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublicCertificatesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublicCertificates(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublicCertificates(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublicCertificates(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublicCertificates(Async)");
        }

        return webAppsListPublicCertificatesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get public certificates for an app or a deployment slot.
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PublicCertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificateCollection webAppsListPublicCertificates(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PublicCertificateCollection> localVarResp = webAppsListPublicCertificatesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get public certificates for an app or a deployment slot.
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PublicCertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificateCollection> webAppsListPublicCertificatesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublicCertificatesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PublicCertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get public certificates for an app or a deployment slot. (asynchronously)
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublicCertificatesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<PublicCertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublicCertificatesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublicCertificatesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublicCertificatesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublicCertificatesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublicCertificatesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublicCertificatesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListPublicCertificatesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublicCertificatesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublicCertificatesSlot(Async)");
        }

        return webAppsListPublicCertificatesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get public certificates for an app or a deployment slot.
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return PublicCertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCertificateCollection webAppsListPublicCertificatesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PublicCertificateCollection> localVarResp = webAppsListPublicCertificatesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get public certificates for an app or a deployment slot.
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;PublicCertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCertificateCollection> webAppsListPublicCertificatesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublicCertificatesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PublicCertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get public certificates for an app or a deployment slot. (asynchronously)
     * Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublicCertificatesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<PublicCertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublicCertificatesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PublicCertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublishingCredentials
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingCredentialsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublishingCredentialsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingCredentials(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublishingCredentials(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublishingCredentials(Async)");
        }

        return webAppsListPublishingCredentialsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListPublishingCredentials200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListPublishingCredentials200Response webAppsListPublishingCredentials(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListPublishingCredentials200Response> localVarResp = webAppsListPublishingCredentialsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListPublishingCredentials200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListPublishingCredentials200Response> webAppsListPublishingCredentialsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublishingCredentialsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListPublishingCredentials200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Git/FTP publishing credentials of an app. (asynchronously)
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingCredentialsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListPublishingCredentials200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublishingCredentialsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListPublishingCredentials200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublishingCredentialsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingCredentialsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublishingCredentialsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListPublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublishingCredentialsSlot(Async)");
        }

        return webAppsListPublishingCredentialsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsListPublishingCredentials200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListPublishingCredentials200Response webAppsListPublishingCredentialsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsListPublishingCredentials200Response> localVarResp = webAppsListPublishingCredentialsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsListPublishingCredentials200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListPublishingCredentials200Response> webAppsListPublishingCredentialsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublishingCredentialsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsListPublishingCredentials200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Git/FTP publishing credentials of an app. (asynchronously)
     * Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsListPublishingCredentials200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublishingCredentialsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListPublishingCredentials200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublishingProfileXmlWithSecrets
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingProfileXmlWithSecretsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishingProfileOptions;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublishingProfileXmlWithSecretsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingProfileXmlWithSecrets(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublishingProfileXmlWithSecrets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingProfileXmlWithSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublishingProfileXmlWithSecrets(Async)");
        }

        // verify the required parameter 'publishingProfileOptions' is set
        if (publishingProfileOptions == null) {
            throw new ApiException("Missing the required parameter 'publishingProfileOptions' when calling webAppsListPublishingProfileXmlWithSecrets(Async)");
        }

        return webAppsListPublishingProfileXmlWithSecretsCall(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions, _callback);

    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsListPublishingProfileXmlWithSecrets(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions) throws ApiException {
        ApiResponse<File> localVarResp = webAppsListPublishingProfileXmlWithSecretsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions);
        return localVarResp.getData();
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsListPublishingProfileXmlWithSecretsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublishingProfileXmlWithSecretsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified). (asynchronously)
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingProfileXmlWithSecretsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublishingProfileXmlWithSecretsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListPublishingProfileXmlWithSecretsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingProfileXmlWithSecretsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishingProfileOptions;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListPublishingProfileXmlWithSecretsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        // verify the required parameter 'publishingProfileOptions' is set
        if (publishingProfileOptions == null) {
            throw new ApiException("Missing the required parameter 'publishingProfileOptions' when calling webAppsListPublishingProfileXmlWithSecretsSlot(Async)");
        }

        return webAppsListPublishingProfileXmlWithSecretsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions, _callback);

    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public File webAppsListPublishingProfileXmlWithSecretsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions) throws ApiException {
        ApiResponse<File> localVarResp = webAppsListPublishingProfileXmlWithSecretsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions);
        return localVarResp.getData();
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> webAppsListPublishingProfileXmlWithSecretsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions) throws ApiException {
        okhttp3.Call localVarCall = webAppsListPublishingProfileXmlWithSecretsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified). (asynchronously)
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\&quot;format\&quot;: \&quot;FileZilla3\&quot;} to get a FileZilla publishing profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListPublishingProfileXmlWithSecretsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions publishingProfileOptions, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListPublishingProfileXmlWithSecretsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListRelayServiceConnections
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListRelayServiceConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListRelayServiceConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListRelayServiceConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListRelayServiceConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListRelayServiceConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListRelayServiceConnections(Async)");
        }

        return webAppsListRelayServiceConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsListRelayServiceConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsListRelayServiceConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsListRelayServiceConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListRelayServiceConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified). (asynchronously)
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListRelayServiceConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListRelayServiceConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListRelayServiceConnectionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListRelayServiceConnectionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListRelayServiceConnectionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListRelayServiceConnectionsSlot(Async)");
        }

        return webAppsListRelayServiceConnectionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsListRelayServiceConnectionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsListRelayServiceConnectionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsListRelayServiceConnectionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListRelayServiceConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified). (asynchronously)
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListRelayServiceConnectionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListRelayServiceConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSiteExtensions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSiteExtensionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSiteExtensionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteExtensions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSiteExtensions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSiteExtensions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSiteExtensions(Async)");
        }

        return webAppsListSiteExtensionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfoCollection webAppsListSiteExtensions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfoCollection> localVarResp = webAppsListSiteExtensionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfoCollection> webAppsListSiteExtensionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSiteExtensionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot. (asynchronously)
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSiteExtensionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSiteExtensionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSiteExtensionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSiteExtensionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSiteExtensionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteExtensionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSiteExtensionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSiteExtensionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSiteExtensionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSiteExtensionsSlot(Async)");
        }

        return webAppsListSiteExtensionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SiteExtensionInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public SiteExtensionInfoCollection webAppsListSiteExtensionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteExtensionInfoCollection> localVarResp = webAppsListSiteExtensionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteExtensionInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteExtensionInfoCollection> webAppsListSiteExtensionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSiteExtensionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteExtensionInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot. (asynchronously)
     * Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SiteExtension information returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> SiteExtension not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSiteExtensionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteExtensionInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSiteExtensionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteExtensionInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSitePushSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSitePushSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSitePushSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSitePushSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSitePushSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSitePushSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSitePushSettings(Async)");
        }

        return webAppsListSitePushSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Push settings associated with web app.
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsUpdateSitePushSettingsRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsUpdateSitePushSettingsRequest webAppsListSitePushSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsUpdateSitePushSettingsRequest> localVarResp = webAppsListSitePushSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Push settings associated with web app.
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsUpdateSitePushSettingsRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsUpdateSitePushSettingsRequest> webAppsListSitePushSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSitePushSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Push settings associated with web app. (asynchronously)
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSitePushSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsUpdateSitePushSettingsRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSitePushSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSitePushSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSitePushSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSitePushSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSitePushSettingsSlot(Async)");
        }

        return webAppsListSitePushSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Push settings associated with web app.
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsUpdateSitePushSettingsRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsUpdateSitePushSettingsRequest webAppsListSitePushSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsUpdateSitePushSettingsRequest> localVarResp = webAppsListSitePushSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Push settings associated with web app.
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsUpdateSitePushSettingsRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsUpdateSitePushSettingsRequest> webAppsListSitePushSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSitePushSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Push settings associated with web app. (asynchronously)
     * Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebAppsUpdateSitePushSettingsRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSitePushSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSlotConfigurationNames
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotConfigurationNamesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSlotConfigurationNamesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSlotConfigurationNames(Async)");
        }

        return webAppsListSlotConfigurationNamesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SlotConfigNamesResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SlotConfigNamesResource webAppsListSlotConfigurationNames(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SlotConfigNamesResource> localVarResp = webAppsListSlotConfigurationNamesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SlotConfigNamesResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotConfigNamesResource> webAppsListSlotConfigurationNamesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSlotConfigurationNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped). (asynchronously)
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotConfigurationNamesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SlotConfigNamesResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSlotConfigurationNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSlotDifferencesFromProduction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotDifferencesFromProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSlotDifferencesFromProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSlotDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSlotDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSlotDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsListSlotDifferencesFromProduction(Async)");
        }

        return webAppsListSlotDifferencesFromProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Get the difference in configuration settings between two web app slots.
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return SlotDifferenceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SlotDifferenceCollection webAppsListSlotDifferencesFromProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<SlotDifferenceCollection> localVarResp = webAppsListSlotDifferencesFromProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;SlotDifferenceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotDifferenceCollection> webAppsListSlotDifferencesFromProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSlotDifferencesFromProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the difference in configuration settings between two web app slots. (asynchronously)
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotDifferencesFromProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<SlotDifferenceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSlotDifferencesFromProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSlotDifferencesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotDifferencesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSlotDifferencesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsListSlotDifferencesSlot(Async)");
        }

        return webAppsListSlotDifferencesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Get the difference in configuration settings between two web app slots.
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return SlotDifferenceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SlotDifferenceCollection webAppsListSlotDifferencesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<SlotDifferenceCollection> localVarResp = webAppsListSlotDifferencesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;SlotDifferenceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotDifferenceCollection> webAppsListSlotDifferencesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSlotDifferencesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the difference in configuration settings between two web app slots. (asynchronously)
     * Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotDifferencesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<SlotDifferenceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSlotDifferencesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSlots
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSlotsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSlots(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSlots(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSlots(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSlots(Async)");
        }

        return webAppsListSlotsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets an app&#39;s deployment slots.
     * Gets an app&#39;s deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebAppsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsList200Response webAppsListSlots(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebAppsList200Response> localVarResp = webAppsListSlotsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an app&#39;s deployment slots.
     * Gets an app&#39;s deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebAppsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsList200Response> webAppsListSlotsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSlotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an app&#39;s deployment slots. (asynchronously)
     * Gets an app&#39;s deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSlotsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebAppsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSlotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebAppsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSnapshots
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSnapshotsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshots(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSnapshots(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshots(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSnapshots(Async)");
        }

        return webAppsListSnapshotsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user.
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SnapshotCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCollection webAppsListSnapshots(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SnapshotCollection> localVarResp = webAppsListSnapshotsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user.
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SnapshotCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCollection> webAppsListSnapshotsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSnapshotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user. (asynchronously)
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SnapshotCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSnapshotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSnapshotsFromDRSecondary
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsFromDRSecondaryCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSnapshotsFromDRSecondaryValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsFromDRSecondary(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSnapshotsFromDRSecondary(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsFromDRSecondary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsFromDRSecondary(Async)");
        }

        return webAppsListSnapshotsFromDRSecondaryCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SnapshotCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCollection webAppsListSnapshotsFromDRSecondary(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SnapshotCollection> localVarResp = webAppsListSnapshotsFromDRSecondaryWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SnapshotCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCollection> webAppsListSnapshotsFromDRSecondaryWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSnapshotsFromDRSecondaryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint. (asynchronously)
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsFromDRSecondaryAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SnapshotCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSnapshotsFromDRSecondaryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSnapshotsFromDRSecondarySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsFromDRSecondarySlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSnapshotsFromDRSecondarySlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsFromDRSecondarySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSnapshotsFromDRSecondarySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSnapshotsFromDRSecondarySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsFromDRSecondarySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsFromDRSecondarySlot(Async)");
        }

        return webAppsListSnapshotsFromDRSecondarySlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SnapshotCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCollection webAppsListSnapshotsFromDRSecondarySlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SnapshotCollection> localVarResp = webAppsListSnapshotsFromDRSecondarySlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SnapshotCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCollection> webAppsListSnapshotsFromDRSecondarySlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSnapshotsFromDRSecondarySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint. (asynchronously)
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsFromDRSecondarySlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SnapshotCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSnapshotsFromDRSecondarySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSnapshotsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSnapshotsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSnapshotsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSnapshotsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsSlot(Async)");
        }

        return webAppsListSnapshotsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user.
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SnapshotCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCollection webAppsListSnapshotsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SnapshotCollection> localVarResp = webAppsListSnapshotsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user.
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SnapshotCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCollection> webAppsListSnapshotsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSnapshotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user. (asynchronously)
     * Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Website Name. (required)
     * @param slot Website Slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSnapshotsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SnapshotCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSnapshotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSyncFunctionTriggers
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSyncFunctionTriggersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSyncFunctionTriggersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSyncFunctionTriggers(Async)");
        }

        return webAppsListSyncFunctionTriggersCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * This is to allow calling via powershell and ARM template.
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionSecrets webAppsListSyncFunctionTriggers(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionSecrets> localVarResp = webAppsListSyncFunctionTriggersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * This is to allow calling via powershell and ARM template.
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionSecrets> webAppsListSyncFunctionTriggersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSyncFunctionTriggersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is to allow calling via powershell and ARM template. (asynchronously)
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSyncFunctionTriggersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<FunctionSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSyncFunctionTriggersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListSyncFunctionTriggersSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSyncFunctionTriggersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListSyncFunctionTriggersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListSyncFunctionTriggersSlot(Async)");
        }

        return webAppsListSyncFunctionTriggersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * This is to allow calling via powershell and ARM template.
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return FunctionSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionSecrets webAppsListSyncFunctionTriggersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FunctionSecrets> localVarResp = webAppsListSyncFunctionTriggersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * This is to allow calling via powershell and ARM template.
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;FunctionSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionSecrets> webAppsListSyncFunctionTriggersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListSyncFunctionTriggersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is to allow calling via powershell and ARM template. (asynchronously)
     * This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListSyncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<FunctionSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListSyncFunctionTriggersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FunctionSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListTriggeredWebJobHistory
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobHistoryCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListTriggeredWebJobHistoryValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsListTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobHistory(Async)");
        }

        return webAppsListTriggeredWebJobHistoryCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredJobHistoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredJobHistoryCollection webAppsListTriggeredWebJobHistory(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredJobHistoryCollection> localVarResp = webAppsListTriggeredWebJobHistoryWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredJobHistoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredJobHistoryCollection> webAppsListTriggeredWebJobHistoryWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListTriggeredWebJobHistoryValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredJobHistoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot. (asynchronously)
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<TriggeredJobHistoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListTriggeredWebJobHistoryValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredJobHistoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListTriggeredWebJobHistorySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobHistorySlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListTriggeredWebJobHistorySlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobHistorySlot(Async)");
        }

        return webAppsListTriggeredWebJobHistorySlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredJobHistoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredJobHistoryCollection webAppsListTriggeredWebJobHistorySlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredJobHistoryCollection> localVarResp = webAppsListTriggeredWebJobHistorySlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredJobHistoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredJobHistoryCollection> webAppsListTriggeredWebJobHistorySlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListTriggeredWebJobHistorySlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredJobHistoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot. (asynchronously)
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<TriggeredJobHistoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListTriggeredWebJobHistorySlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredJobHistoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListTriggeredWebJobs
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListTriggeredWebJobsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobs(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobs(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobs(Async)");
        }

        return webAppsListTriggeredWebJobsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredWebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredWebJobCollection webAppsListTriggeredWebJobs(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredWebJobCollection> localVarResp = webAppsListTriggeredWebJobsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredWebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredWebJobCollection> webAppsListTriggeredWebJobsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListTriggeredWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredWebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List triggered web jobs for an app, or a deployment slot. (asynchronously)
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<TriggeredWebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListTriggeredWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredWebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListTriggeredWebJobsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListTriggeredWebJobsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListTriggeredWebJobsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobsSlot(Async)");
        }

        return webAppsListTriggeredWebJobsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return TriggeredWebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public TriggeredWebJobCollection webAppsListTriggeredWebJobsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<TriggeredWebJobCollection> localVarResp = webAppsListTriggeredWebJobsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;TriggeredWebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggeredWebJobCollection> webAppsListTriggeredWebJobsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListTriggeredWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<TriggeredWebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List triggered web jobs for an app, or a deployment slot. (asynchronously)
     * List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListTriggeredWebJobsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<TriggeredWebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListTriggeredWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TriggeredWebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListUsages
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListUsages(Async)");
        }

        return webAppsListUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return WebAppsListUsagesSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListUsagesSlot200Response webAppsListUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<WebAppsListUsagesSlot200Response> localVarResp = webAppsListUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;WebAppsListUsagesSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListUsagesSlot200Response> webAppsListUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<WebAppsListUsagesSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified). (asynchronously)
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<WebAppsListUsagesSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListUsagesSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListUsagesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListUsagesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListUsagesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListUsagesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListUsagesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListUsagesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListUsagesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListUsagesSlot(Async)");
        }

        return webAppsListUsagesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return WebAppsListUsagesSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsListUsagesSlot200Response webAppsListUsagesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<WebAppsListUsagesSlot200Response> localVarResp = webAppsListUsagesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;WebAppsListUsagesSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsListUsagesSlot200Response> webAppsListUsagesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = webAppsListUsagesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<WebAppsListUsagesSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified). (asynchronously)
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only information specified in the filter (using OData syntax). For example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListUsagesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback<WebAppsListUsagesSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListUsagesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<WebAppsListUsagesSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListVnetConnections
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListVnetConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListVnetConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListVnetConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListVnetConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListVnetConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListVnetConnections(Async)");
        }

        return webAppsListVnetConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;WebAppsListVnetConnectionsSlot200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<WebAppsListVnetConnectionsSlot200ResponseInner> webAppsListVnetConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<WebAppsListVnetConnectionsSlot200ResponseInner>> localVarResp = webAppsListVnetConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;WebAppsListVnetConnectionsSlot200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebAppsListVnetConnectionsSlot200ResponseInner>> webAppsListVnetConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListVnetConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<WebAppsListVnetConnectionsSlot200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to. (asynchronously)
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListVnetConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<WebAppsListVnetConnectionsSlot200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListVnetConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<WebAppsListVnetConnectionsSlot200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListVnetConnectionsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListVnetConnectionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListVnetConnectionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListVnetConnectionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListVnetConnectionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListVnetConnectionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListVnetConnectionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListVnetConnectionsSlot(Async)");
        }

        return webAppsListVnetConnectionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;WebAppsListVnetConnectionsSlot200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<WebAppsListVnetConnectionsSlot200ResponseInner> webAppsListVnetConnectionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<WebAppsListVnetConnectionsSlot200ResponseInner>> localVarResp = webAppsListVnetConnectionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;WebAppsListVnetConnectionsSlot200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebAppsListVnetConnectionsSlot200ResponseInner>> webAppsListVnetConnectionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListVnetConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<WebAppsListVnetConnectionsSlot200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to. (asynchronously)
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListVnetConnectionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<WebAppsListVnetConnectionsSlot200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListVnetConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<WebAppsListVnetConnectionsSlot200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListWebJobs
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListWebJobsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListWebJobsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListWebJobs(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListWebJobs(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListWebJobs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListWebJobs(Async)");
        }

        return webAppsListWebJobsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List webjobs for an app, or a deployment slot.
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebJobCollection webAppsListWebJobs(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebJobCollection> localVarResp = webAppsListWebJobsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List webjobs for an app, or a deployment slot.
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebJobCollection> webAppsListWebJobsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List webjobs for an app, or a deployment slot. (asynchronously)
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListWebJobsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListWebJobsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsListWebJobsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListWebJobsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsListWebJobsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsListWebJobsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsListWebJobsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsListWebJobsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsListWebJobsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsListWebJobsSlot(Async)");
        }

        return webAppsListWebJobsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List webjobs for an app, or a deployment slot.
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WebJobCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebJobCollection webAppsListWebJobsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WebJobCollection> localVarResp = webAppsListWebJobsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List webjobs for an app, or a deployment slot.
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WebJobCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebJobCollection> webAppsListWebJobsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsListWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WebJobCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List webjobs for an app, or a deployment slot. (asynchronously)
     * List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsListWebJobsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<WebJobCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsListWebJobsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WebJobCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsMigrateMySql
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationRequestEnvelope MySql migration options. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsMigrateMySqlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, MigrateMySqlRequest migrationRequestEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationRequestEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsMigrateMySqlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, MigrateMySqlRequest migrationRequestEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsMigrateMySql(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsMigrateMySql(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsMigrateMySql(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsMigrateMySql(Async)");
        }

        // verify the required parameter 'migrationRequestEnvelope' is set
        if (migrationRequestEnvelope == null) {
            throw new ApiException("Missing the required parameter 'migrationRequestEnvelope' when calling webAppsMigrateMySql(Async)");
        }

        return webAppsMigrateMySqlCall(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope, _callback);

    }

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationRequestEnvelope MySql migration options. (required)
     * @return WebAppsMigrateMySql200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsMigrateMySql200Response webAppsMigrateMySql(String resourceGroupName, String name, String subscriptionId, String apiVersion, MigrateMySqlRequest migrationRequestEnvelope) throws ApiException {
        ApiResponse<WebAppsMigrateMySql200Response> localVarResp = webAppsMigrateMySqlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope);
        return localVarResp.getData();
    }

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationRequestEnvelope MySql migration options. (required)
     * @return ApiResponse&lt;WebAppsMigrateMySql200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsMigrateMySql200Response> webAppsMigrateMySqlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, MigrateMySqlRequest migrationRequestEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsMigrateMySqlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsMigrateMySql200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database. (asynchronously)
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationRequestEnvelope MySql migration options. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsMigrateMySqlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, MigrateMySqlRequest migrationRequestEnvelope, final ApiCallback<WebAppsMigrateMySql200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsMigrateMySqlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsMigrateMySql200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsMigrateStorage
     * @param subscriptionName Azure subscription. (required)
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationOptions Migration migrationOptions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsMigrateStorageCall(String subscriptionName, String resourceGroupName, String name, String subscriptionId, String apiVersion, StorageMigrationOptions migrationOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationOptions;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionName", subscriptionName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsMigrateStorageValidateBeforeCall(String subscriptionName, String resourceGroupName, String name, String subscriptionId, String apiVersion, StorageMigrationOptions migrationOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling webAppsMigrateStorage(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsMigrateStorage(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsMigrateStorage(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsMigrateStorage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsMigrateStorage(Async)");
        }

        // verify the required parameter 'migrationOptions' is set
        if (migrationOptions == null) {
            throw new ApiException("Missing the required parameter 'migrationOptions' when calling webAppsMigrateStorage(Async)");
        }

        return webAppsMigrateStorageCall(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions, _callback);

    }

    /**
     * Restores a web app.
     * Restores a web app.
     * @param subscriptionName Azure subscription. (required)
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationOptions Migration migrationOptions. (required)
     * @return StorageMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StorageMigrationResponse webAppsMigrateStorage(String subscriptionName, String resourceGroupName, String name, String subscriptionId, String apiVersion, StorageMigrationOptions migrationOptions) throws ApiException {
        ApiResponse<StorageMigrationResponse> localVarResp = webAppsMigrateStorageWithHttpInfo(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions);
        return localVarResp.getData();
    }

    /**
     * Restores a web app.
     * Restores a web app.
     * @param subscriptionName Azure subscription. (required)
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationOptions Migration migrationOptions. (required)
     * @return ApiResponse&lt;StorageMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageMigrationResponse> webAppsMigrateStorageWithHttpInfo(String subscriptionName, String resourceGroupName, String name, String subscriptionId, String apiVersion, StorageMigrationOptions migrationOptions) throws ApiException {
        okhttp3.Call localVarCall = webAppsMigrateStorageValidateBeforeCall(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions, null);
        Type localVarReturnType = new TypeToken<StorageMigrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restores a web app. (asynchronously)
     * Restores a web app.
     * @param subscriptionName Azure subscription. (required)
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param migrationOptions Migration migrationOptions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsMigrateStorageAsync(String subscriptionName, String resourceGroupName, String name, String subscriptionId, String apiVersion, StorageMigrationOptions migrationOptions, final ApiCallback<StorageMigrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsMigrateStorageValidateBeforeCall(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions, _callback);
        Type localVarReturnType = new TypeToken<StorageMigrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsPutPrivateAccessVnet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsPutPrivateAccessVnetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = access;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsPutPrivateAccessVnetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsPutPrivateAccessVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsPutPrivateAccessVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsPutPrivateAccessVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsPutPrivateAccessVnet(Async)");
        }

        // verify the required parameter 'access' is set
        if (access == null) {
            throw new ApiException("Missing the required parameter 'access' when calling webAppsPutPrivateAccessVnet(Async)");
        }

        return webAppsPutPrivateAccessVnetCall(resourceGroupName, name, subscriptionId, apiVersion, access, _callback);

    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @return PrivateAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAccess webAppsPutPrivateAccessVnet(String resourceGroupName, String name, String subscriptionId, String apiVersion, PrivateAccess access) throws ApiException {
        ApiResponse<PrivateAccess> localVarResp = webAppsPutPrivateAccessVnetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, access);
        return localVarResp.getData();
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @return ApiResponse&lt;PrivateAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAccess> webAppsPutPrivateAccessVnetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, PrivateAccess access) throws ApiException {
        okhttp3.Call localVarCall = webAppsPutPrivateAccessVnetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, access, null);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site. (asynchronously)
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsPutPrivateAccessVnetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback<PrivateAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsPutPrivateAccessVnetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, access, _callback);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsPutPrivateAccessVnetSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsPutPrivateAccessVnetSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = access;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsPutPrivateAccessVnetSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        // verify the required parameter 'access' is set
        if (access == null) {
            throw new ApiException("Missing the required parameter 'access' when calling webAppsPutPrivateAccessVnetSlot(Async)");
        }

        return webAppsPutPrivateAccessVnetSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, access, _callback);

    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @return PrivateAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAccess webAppsPutPrivateAccessVnetSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, PrivateAccess access) throws ApiException {
        ApiResponse<PrivateAccess> localVarResp = webAppsPutPrivateAccessVnetSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, access);
        return localVarResp.getData();
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @return ApiResponse&lt;PrivateAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAccess> webAppsPutPrivateAccessVnetSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, PrivateAccess access) throws ApiException {
        okhttp3.Call localVarCall = webAppsPutPrivateAccessVnetSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, access, null);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site. (asynchronously)
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param access The information for the private access (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsPutPrivateAccessVnetSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, PrivateAccess access, final ApiCallback<PrivateAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsPutPrivateAccessVnetSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, access, _callback);
        Type localVarReturnType = new TypeToken<PrivateAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRecoverSiteConfigurationSnapshot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRecoverSiteConfigurationSnapshotCall(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRecoverSiteConfigurationSnapshotValidateBeforeCall(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRecoverSiteConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRecoverSiteConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling webAppsRecoverSiteConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRecoverSiteConfigurationSnapshot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRecoverSiteConfigurationSnapshot(Async)");
        }

        return webAppsRecoverSiteConfigurationSnapshotCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRecoverSiteConfigurationSnapshot(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion) throws ApiException {
        webAppsRecoverSiteConfigurationSnapshotWithHttpInfo(resourceGroupName, name, snapshotId, subscriptionId, apiVersion);
    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRecoverSiteConfigurationSnapshotWithHttpInfo(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsRecoverSiteConfigurationSnapshotValidateBeforeCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reverts the configuration of an app to a previous snapshot. (asynchronously)
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRecoverSiteConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRecoverSiteConfigurationSnapshotValidateBeforeCall(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRecoverSiteConfigurationSnapshotSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRecoverSiteConfigurationSnapshotSlotCall(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRecoverSiteConfigurationSnapshotSlotValidateBeforeCall(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRecoverSiteConfigurationSnapshotSlot(Async)");
        }

        return webAppsRecoverSiteConfigurationSnapshotSlotCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRecoverSiteConfigurationSnapshotSlot(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsRecoverSiteConfigurationSnapshotSlotWithHttpInfo(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion);
    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRecoverSiteConfigurationSnapshotSlotWithHttpInfo(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsRecoverSiteConfigurationSnapshotSlotValidateBeforeCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reverts the configuration of an app to a previous snapshot. (asynchronously)
     * Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param snapshotId The ID of the snapshot to read. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRecoverSiteConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRecoverSiteConfigurationSnapshotSlotValidateBeforeCall(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsResetProductionSlotConfig
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsResetProductionSlotConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsResetProductionSlotConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsResetProductionSlotConfig(Async)");
        }

        return webAppsResetProductionSlotConfigCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsResetProductionSlotConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsResetProductionSlotConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsResetProductionSlotConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsResetProductionSlotConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST. (asynchronously)
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsResetProductionSlotConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsResetProductionSlotConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsResetSlotConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsResetSlotConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsResetSlotConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsResetSlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsResetSlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsResetSlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsResetSlotConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsResetSlotConfigurationSlot(Async)");
        }

        return webAppsResetSlotConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsResetSlotConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsResetSlotConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsResetSlotConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsResetSlotConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST. (asynchronously)
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsResetSlotConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsResetSlotConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestart
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestartCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (synchronous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synchronous", synchronous));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestartValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestart(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestart(Async)");
        }

        return webAppsRestartCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, _callback);

    }

    /**
     * Restarts an app (or deployment slot, if specified).
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestart(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        webAppsRestartWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous);
    }

    /**
     * Restarts an app (or deployment slot, if specified).
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestartWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestartValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restarts an app (or deployment slot, if specified). (asynchronously)
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestartAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestartValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestartSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestartSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (synchronous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synchronous", synchronous));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestartSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestartSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestartSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRestartSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestartSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestartSlot(Async)");
        }

        return webAppsRestartSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, _callback);

    }

    /**
     * Restarts an app (or deployment slot, if specified).
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestartSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        webAppsRestartSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous);
    }

    /**
     * Restarts an app (or deployment slot, if specified).
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestartSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestartSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restarts an app (or deployment slot, if specified). (asynchronously)
     * Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app. (optional)
     * @param synchronous Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully restarted app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestartSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestartSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestore
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestore(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestore(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsRestore(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestore(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestore(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsRestore(Async)");
        }

        return webAppsRestoreCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestore(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        webAppsRestoreWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified). (asynchronously)
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreFromBackupBlob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromBackupBlobCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreFromBackupBlobValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromBackupBlob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreFromBackupBlob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromBackupBlob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromBackupBlob(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsRestoreFromBackupBlob(Async)");
        }

        return webAppsRestoreFromBackupBlobCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreFromBackupBlob(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        webAppsRestoreFromBackupBlobWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreFromBackupBlobWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreFromBackupBlobValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores an app from a backup blob in Azure Storage. (asynchronously)
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromBackupBlobAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreFromBackupBlobValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreFromBackupBlobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromBackupBlobSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreFromBackupBlobSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsRestoreFromBackupBlobSlot(Async)");
        }

        return webAppsRestoreFromBackupBlobSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreFromBackupBlobSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        webAppsRestoreFromBackupBlobSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreFromBackupBlobSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreFromBackupBlobSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores an app from a backup blob in Azure Storage. (asynchronously)
     * Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromBackupBlobSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreFromBackupBlobSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreFromDeletedApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromDeletedAppCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreFromDeletedAppValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromDeletedApp(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreFromDeletedApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromDeletedApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromDeletedApp(Async)");
        }

        // verify the required parameter 'restoreRequest' is set
        if (restoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreRequest' when calling webAppsRestoreFromDeletedApp(Async)");
        }

        return webAppsRestoreFromDeletedAppCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, _callback);

    }

    /**
     * Restores a deleted web app to this web app.
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreFromDeletedApp(String resourceGroupName, String name, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest) throws ApiException {
        webAppsRestoreFromDeletedAppWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest);
    }

    /**
     * Restores a deleted web app to this web app.
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreFromDeletedAppWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreFromDeletedAppValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a deleted web app to this web app. (asynchronously)
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromDeletedAppAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreFromDeletedAppValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreFromDeletedAppSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromDeletedAppSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreFromDeletedAppSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        // verify the required parameter 'restoreRequest' is set
        if (restoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreRequest' when calling webAppsRestoreFromDeletedAppSlot(Async)");
        }

        return webAppsRestoreFromDeletedAppSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, _callback);

    }

    /**
     * Restores a deleted web app to this web app.
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreFromDeletedAppSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest) throws ApiException {
        webAppsRestoreFromDeletedAppSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest);
    }

    /**
     * Restores a deleted web app to this web app.
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreFromDeletedAppSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreFromDeletedAppSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a deleted web app to this web app. (asynchronously)
     * Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Deleted web app restore information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreFromDeletedAppSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, DeletedAppRestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreFromDeletedAppSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsRestoreSlot(Async)");
        }

        return webAppsRestoreSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        webAppsRestoreSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified). (asynchronously)
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param backupId ID of the backup. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request . (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreSnapshot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSnapshotCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreSnapshotValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSnapshot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreSnapshot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSnapshot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreSnapshot(Async)");
        }

        // verify the required parameter 'restoreRequest' is set
        if (restoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreRequest' when calling webAppsRestoreSnapshot(Async)");
        }

        return webAppsRestoreSnapshotCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, _callback);

    }

    /**
     * Restores a web app from a snapshot.
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreSnapshot(String resourceGroupName, String name, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest) throws ApiException {
        webAppsRestoreSnapshotWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest);
    }

    /**
     * Restores a web app from a snapshot.
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreSnapshotWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreSnapshotValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a web app from a snapshot. (asynchronously)
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSnapshotAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreSnapshotValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRestoreSnapshotSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSnapshotSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRestoreSnapshotSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        // verify the required parameter 'restoreRequest' is set
        if (restoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreRequest' when calling webAppsRestoreSnapshotSlot(Async)");
        }

        return webAppsRestoreSnapshotSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, _callback);

    }

    /**
     * Restores a web app from a snapshot.
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRestoreSnapshotSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest) throws ApiException {
        webAppsRestoreSnapshotSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest);
    }

    /**
     * Restores a web app from a snapshot.
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRestoreSnapshotSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest) throws ApiException {
        okhttp3.Call localVarCall = webAppsRestoreSnapshotSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restores a web app from a snapshot. (asynchronously)
     * Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore operation started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Restore operation started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRestoreSnapshotSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SnapshotRestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRestoreSnapshotSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRunTriggeredWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRunTriggeredWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRunTriggeredWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRunTriggeredWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRunTriggeredWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsRunTriggeredWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRunTriggeredWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRunTriggeredWebJob(Async)");
        }

        return webAppsRunTriggeredWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRunTriggeredWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsRunTriggeredWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRunTriggeredWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsRunTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run a triggered web job for an app, or a deployment slot. (asynchronously)
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRunTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRunTriggeredWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsRunTriggeredWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRunTriggeredWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsRunTriggeredWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsRunTriggeredWebJobSlot(Async)");
        }

        return webAppsRunTriggeredWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsRunTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsRunTriggeredWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsRunTriggeredWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsRunTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run a triggered web job for an app, or a deployment slot. (asynchronously)
     * Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run a triggered web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Triggered web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsRunTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsRunTriggeredWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStart
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStart(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStart(Async)");
        }

        return webAppsStartCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Starts an app (or deployment slot, if specified).
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStart(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStartWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Starts an app (or deployment slot, if specified).
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStartWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts an app (or deployment slot, if specified). (asynchronously)
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartContinuousWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartContinuousWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartContinuousWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartContinuousWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartContinuousWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsStartContinuousWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartContinuousWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartContinuousWebJob(Async)");
        }

        return webAppsStartContinuousWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStartContinuousWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStartContinuousWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStartContinuousWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a continuous web job for an app, or a deployment slot. (asynchronously)
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartContinuousWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartContinuousWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartContinuousWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartContinuousWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartContinuousWebJobSlot(Async)");
        }

        return webAppsStartContinuousWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStartContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStartContinuousWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStartContinuousWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a continuous web job for an app, or a deployment slot. (asynchronously)
     * Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartNetworkTrace
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartNetworkTraceCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartNetworkTraceValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartNetworkTrace(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartNetworkTrace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartNetworkTrace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartNetworkTrace(Async)");
        }

        return webAppsStartNetworkTraceCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsStartNetworkTrace(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsStartNetworkTraceWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsStartNetworkTraceWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site. (asynchronously)
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartNetworkTraceAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartNetworkTraceSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartNetworkTraceSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartNetworkTraceSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStartNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartNetworkTraceSlot(Async)");
        }

        return webAppsStartNetworkTraceSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsStartNetworkTraceSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsStartNetworkTraceSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsStartNetworkTraceSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site. (asynchronously)
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStartSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartSlot(Async)");
        }

        return webAppsStartSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Starts an app (or deployment slot, if specified).
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStartSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStartSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Starts an app (or deployment slot, if specified).
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStartSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts an app (or deployment slot, if specified). (asynchronously)
     * Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartWebSiteNetworkTrace
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartWebSiteNetworkTraceValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTrace(Async)");
        }

        return webAppsStartWebSiteNetworkTraceCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public String webAppsStartWebSiteNetworkTrace(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<String> localVarResp = webAppsStartWebSiteNetworkTraceWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> webAppsStartWebSiteNetworkTraceWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site (To be deprecated). (asynchronously)
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartWebSiteNetworkTraceOperation
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceOperationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartWebSiteNetworkTraceOperationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceOperation(Async)");
        }

        return webAppsStartWebSiteNetworkTraceOperationCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsStartWebSiteNetworkTraceOperation(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsStartWebSiteNetworkTraceOperationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsStartWebSiteNetworkTraceOperationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceOperationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site. (asynchronously)
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceOperationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceOperationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartWebSiteNetworkTraceOperationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceOperationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartWebSiteNetworkTraceOperationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStartWebSiteNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceOperationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceOperationSlot(Async)");
        }

        return webAppsStartWebSiteNetworkTraceOperationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return List&lt;NetworkTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkTrace> webAppsStartWebSiteNetworkTraceOperationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<List<NetworkTrace>> localVarResp = webAppsStartWebSiteNetworkTraceOperationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site.
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;List&lt;NetworkTrace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkTrace>> webAppsStartWebSiteNetworkTraceOperationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceOperationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site. (asynchronously)
     * Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<List<NetworkTrace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceOperationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkTrace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStartWebSiteNetworkTraceSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationInSeconds", durationInSeconds));
        }

        if (maxFrameLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFrameLength", maxFrameLength));
        }

        if (sasUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sasUrl", sasUrl));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStartWebSiteNetworkTraceSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStartWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceSlot(Async)");
        }

        return webAppsStartWebSiteNetworkTraceSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);

    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public String webAppsStartWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        ApiResponse<String> localVarResp = webAppsStartWebSiteNetworkTraceSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        return localVarResp.getData();
    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> webAppsStartWebSiteNetworkTraceSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) throws ApiException {
        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start capturing network packets for the site (To be deprecated). (asynchronously)
     * Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param durationInSeconds The duration to keep capturing in seconds. (optional)
     * @param maxFrameLength The maximum frame length in bytes (Optional). (optional)
     * @param sasUrl The Blob URL to store capture file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStartWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Integer durationInSeconds, Integer maxFrameLength, String sasUrl, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStartWebSiteNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStop
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStop(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStop(Async)");
        }

        return webAppsStopCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stops an app (or deployment slot, if specified).
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStop(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Stops an app (or deployment slot, if specified).
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stops an app (or deployment slot, if specified). (asynchronously)
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopContinuousWebJob
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopContinuousWebJobCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopContinuousWebJobValidateBeforeCall(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopContinuousWebJob(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopContinuousWebJob(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsStopContinuousWebJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopContinuousWebJob(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopContinuousWebJob(Async)");
        }

        return webAppsStopContinuousWebJobCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopContinuousWebJob(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopContinuousWebJobWithHttpInfo(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopContinuousWebJobWithHttpInfo(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot. (asynchronously)
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopContinuousWebJobAsync(String resourceGroupName, String name, String webJobName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopContinuousWebJobValidateBeforeCall(resourceGroupName, name, webJobName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopContinuousWebJobSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopContinuousWebJobSlotCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webJobName" + "}", localVarApiClient.escapeString(webJobName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopContinuousWebJobSlotValidateBeforeCall(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'webJobName' is set
        if (webJobName == null) {
            throw new ApiException("Missing the required parameter 'webJobName' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopContinuousWebJobSlot(Async)");
        }

        return webAppsStopContinuousWebJobSlotCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopContinuousWebJobSlotWithHttpInfo(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopContinuousWebJobSlotWithHttpInfo(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot. (asynchronously)
     * Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site name. (required)
     * @param webJobName Name of Web Job. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found continuous web job. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Continuous web job does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopContinuousWebJobSlotValidateBeforeCall(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopNetworkTrace
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopNetworkTraceCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopNetworkTraceValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopNetworkTrace(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopNetworkTrace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopNetworkTrace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopNetworkTrace(Async)");
        }

        return webAppsStopNetworkTraceCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopNetworkTrace(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopNetworkTraceWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopNetworkTraceWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop ongoing capturing network packets for the site. (asynchronously)
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopNetworkTraceAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopNetworkTraceSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopNetworkTraceSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopNetworkTraceSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStopNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopNetworkTraceSlot(Async)");
        }

        return webAppsStopNetworkTraceSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopNetworkTraceSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopNetworkTraceSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopNetworkTraceSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop ongoing capturing network packets for the site. (asynchronously)
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStopSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopSlot(Async)");
        }

        return webAppsStopSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stops an app (or deployment slot, if specified).
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Stops an app (or deployment slot, if specified).
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stops an app (or deployment slot, if specified). (asynchronously)
     * Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped app. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopWebSiteNetworkTrace
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopWebSiteNetworkTraceCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopWebSiteNetworkTraceValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopWebSiteNetworkTrace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopWebSiteNetworkTrace(Async)");
        }

        return webAppsStopWebSiteNetworkTraceCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopWebSiteNetworkTrace(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopWebSiteNetworkTraceWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopWebSiteNetworkTraceWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopWebSiteNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop ongoing capturing network packets for the site. (asynchronously)
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopWebSiteNetworkTraceAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopWebSiteNetworkTraceValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsStopWebSiteNetworkTraceSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopWebSiteNetworkTraceSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsStopWebSiteNetworkTraceSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsStopWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsStopWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsStopWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsStopWebSiteNetworkTraceSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsStopWebSiteNetworkTraceSlot(Async)");
        }

        return webAppsStopWebSiteNetworkTraceSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsStopWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsStopWebSiteNetworkTraceSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Stop ongoing capturing network packets for the site.
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsStopWebSiteNetworkTraceSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsStopWebSiteNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop ongoing capturing network packets for the site. (asynchronously)
     * Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Stopped. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Stopped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsStopWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsStopWebSiteNetworkTraceSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSwapSlotSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSwapSlotSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSwapSlotSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSwapSlotSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSwapSlotSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsSwapSlotSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSwapSlotSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSwapSlotSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsSwapSlotSlot(Async)");
        }

        return webAppsSwapSlotSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Swaps two deployment slots of an app.
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSwapSlotSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        webAppsSwapSlotSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
    }

    /**
     * Swaps two deployment slots of an app.
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSwapSlotSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsSwapSlotSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Swaps two deployment slots of an app. (asynchronously)
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSwapSlotSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSwapSlotSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSwapSlotWithProduction
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSwapSlotWithProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSwapSlotWithProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling webAppsSwapSlotWithProduction(Async)");
        }

        return webAppsSwapSlotWithProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Swaps two deployment slots of an app.
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSwapSlotWithProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        webAppsSwapSlotWithProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
    }

    /**
     * Swaps two deployment slots of an app.
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSwapSlotWithProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = webAppsSwapSlotWithProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Swaps two deployment slots of an app. (asynchronously)
     * Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity JSON object that contains the target slot name. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSwapSlotWithProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSwapSlotWithProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSyncFunctionTriggers
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncFunctionTriggersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSyncFunctionTriggersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctionTriggers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctionTriggers(Async)");
        }

        return webAppsSyncFunctionTriggersCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Syncs function trigger metadata to the scale controller
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSyncFunctionTriggers(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsSyncFunctionTriggersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Syncs function trigger metadata to the scale controller
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSyncFunctionTriggersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsSyncFunctionTriggersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Syncs function trigger metadata to the scale controller (asynchronously)
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncFunctionTriggersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSyncFunctionTriggersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSyncFunctionTriggersSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncFunctionTriggersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSyncFunctionTriggersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctionTriggersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctionTriggersSlot(Async)");
        }

        return webAppsSyncFunctionTriggersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Syncs function trigger metadata to the scale controller
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSyncFunctionTriggersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsSyncFunctionTriggersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Syncs function trigger metadata to the scale controller
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSyncFunctionTriggersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsSyncFunctionTriggersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Syncs function trigger metadata to the scale controller (asynchronously)
     * Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSyncFunctionTriggersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSyncRepository
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncRepositoryCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSyncRepositoryValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSyncRepository(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSyncRepository(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSyncRepository(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSyncRepository(Async)");
        }

        return webAppsSyncRepositoryCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Sync web app repository.
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSyncRepository(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        webAppsSyncRepositoryWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Sync web app repository.
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSyncRepositoryWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsSyncRepositoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sync web app repository. (asynchronously)
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncRepositoryAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSyncRepositoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsSyncRepositorySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncRepositorySlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsSyncRepositorySlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsSyncRepositorySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsSyncRepositorySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsSyncRepositorySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsSyncRepositorySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsSyncRepositorySlot(Async)");
        }

        return webAppsSyncRepositorySlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Sync web app repository.
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public void webAppsSyncRepositorySlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        webAppsSyncRepositorySlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
    }

    /**
     * Sync web app repository.
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webAppsSyncRepositorySlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = webAppsSyncRepositorySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sync web app repository. (asynchronously)
     * Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully sync source control. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsSyncRepositorySlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsSyncRepositorySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdate(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling webAppsUpdate(Async)");
        }

        return webAppsUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, _callback);

    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app. (asynchronously)
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateApplicationSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateApplicationSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateApplicationSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateApplicationSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateApplicationSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateApplicationSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateApplicationSettings(Async)");
        }

        // verify the required parameter 'appSettings' is set
        if (appSettings == null) {
            throw new ApiException("Missing the required parameter 'appSettings' when calling webAppsUpdateApplicationSettings(Async)");
        }

        return webAppsUpdateApplicationSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, _callback);

    }

    /**
     * Replaces the application settings of an app.
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsUpdateApplicationSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsUpdateApplicationSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, appSettings);
        return localVarResp.getData();
    }

    /**
     * Replaces the application settings of an app.
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsUpdateApplicationSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateApplicationSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the application settings of an app. (asynchronously)
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateApplicationSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateApplicationSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateApplicationSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateApplicationSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateApplicationSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        // verify the required parameter 'appSettings' is set
        if (appSettings == null) {
            throw new ApiException("Missing the required parameter 'appSettings' when calling webAppsUpdateApplicationSettingsSlot(Async)");
        }

        return webAppsUpdateApplicationSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, _callback);

    }

    /**
     * Replaces the application settings of an app.
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsUpdateApplicationSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsUpdateApplicationSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings);
        return localVarResp.getData();
    }

    /**
     * Replaces the application settings of an app.
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsUpdateApplicationSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateApplicationSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the application settings of an app. (asynchronously)
     * Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateApplicationSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateAuthSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAuthSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteAuthSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateAuthSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAuthSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateAuthSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAuthSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateAuthSettings(Async)");
        }

        // verify the required parameter 'siteAuthSettings' is set
        if (siteAuthSettings == null) {
            throw new ApiException("Missing the required parameter 'siteAuthSettings' when calling webAppsUpdateAuthSettings(Async)");
        }

        return webAppsUpdateAuthSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, _callback);

    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings webAppsUpdateAuthSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = webAppsUpdateAuthSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> webAppsUpdateAuthSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app. (asynchronously)
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAuthSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateAuthSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAuthSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteAuthSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateAuthSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'siteAuthSettings' is set
        if (siteAuthSettings == null) {
            throw new ApiException("Missing the required parameter 'siteAuthSettings' when calling webAppsUpdateAuthSettingsSlot(Async)");
        }

        return webAppsUpdateAuthSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, _callback);

    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings webAppsUpdateAuthSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = webAppsUpdateAuthSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> webAppsUpdateAuthSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app. (asynchronously)
     * Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateAzureStorageAccounts
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAzureStorageAccountsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = azureStorageAccounts;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateAzureStorageAccountsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateAzureStorageAccounts(Async)");
        }

        // verify the required parameter 'azureStorageAccounts' is set
        if (azureStorageAccounts == null) {
            throw new ApiException("Missing the required parameter 'azureStorageAccounts' when calling webAppsUpdateAzureStorageAccounts(Async)");
        }

        return webAppsUpdateAzureStorageAccountsCall(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts, _callback);

    }

    /**
     * Updates the Azure storage account configurations of an app.
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @return AzureStoragePropertyDictionaryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AzureStoragePropertyDictionaryResource webAppsUpdateAzureStorageAccounts(String resourceGroupName, String name, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts) throws ApiException {
        ApiResponse<AzureStoragePropertyDictionaryResource> localVarResp = webAppsUpdateAzureStorageAccountsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts);
        return localVarResp.getData();
    }

    /**
     * Updates the Azure storage account configurations of an app.
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @return ApiResponse&lt;AzureStoragePropertyDictionaryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AzureStoragePropertyDictionaryResource> webAppsUpdateAzureStorageAccountsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateAzureStorageAccountsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts, null);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Azure storage account configurations of an app. (asynchronously)
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAzureStorageAccountsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback<AzureStoragePropertyDictionaryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateAzureStorageAccountsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts, _callback);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateAzureStorageAccountsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAzureStorageAccountsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = azureStorageAccounts;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateAzureStorageAccountsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        // verify the required parameter 'azureStorageAccounts' is set
        if (azureStorageAccounts == null) {
            throw new ApiException("Missing the required parameter 'azureStorageAccounts' when calling webAppsUpdateAzureStorageAccountsSlot(Async)");
        }

        return webAppsUpdateAzureStorageAccountsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts, _callback);

    }

    /**
     * Updates the Azure storage account configurations of an app.
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @return AzureStoragePropertyDictionaryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AzureStoragePropertyDictionaryResource webAppsUpdateAzureStorageAccountsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts) throws ApiException {
        ApiResponse<AzureStoragePropertyDictionaryResource> localVarResp = webAppsUpdateAzureStorageAccountsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts);
        return localVarResp.getData();
    }

    /**
     * Updates the Azure storage account configurations of an app.
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @return ApiResponse&lt;AzureStoragePropertyDictionaryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AzureStoragePropertyDictionaryResource> webAppsUpdateAzureStorageAccountsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateAzureStorageAccountsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts, null);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Azure storage account configurations of an app. (asynchronously)
     * Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param azureStorageAccounts Azure storage accounts of the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, AzureStoragePropertyDictionaryResource azureStorageAccounts, final ApiCallback<AzureStoragePropertyDictionaryResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateAzureStorageAccountsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts, _callback);
        Type localVarReturnType = new TypeToken<AzureStoragePropertyDictionaryResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateBackupConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateBackupConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateBackupConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateBackupConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateBackupConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateBackupConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateBackupConfiguration(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsUpdateBackupConfiguration(Async)");
        }

        return webAppsUpdateBackupConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Updates the backup configuration of an app.
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest webAppsUpdateBackupConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = webAppsUpdateBackupConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Updates the backup configuration of an app.
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> webAppsUpdateBackupConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the backup configuration of an app. (asynchronously)
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateBackupConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateBackupConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateBackupConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateBackupConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling webAppsUpdateBackupConfigurationSlot(Async)");
        }

        return webAppsUpdateBackupConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Updates the backup configuration of an app.
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest webAppsUpdateBackupConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = webAppsUpdateBackupConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Updates the backup configuration of an app.
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> webAppsUpdateBackupConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the backup configuration of an app. (asynchronously)
     * Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param request Edited backup configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateConfiguration
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateConfiguration(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling webAppsUpdateConfiguration(Async)");
        }

        return webAppsUpdateConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsUpdateConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsUpdateConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsUpdateConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the configuration of an app. (asynchronously)
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateConfigurationSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling webAppsUpdateConfigurationSlot(Async)");
        }

        return webAppsUpdateConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return SiteConfigResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfigResource webAppsUpdateConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        ApiResponse<SiteConfigResource> localVarResp = webAppsUpdateConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the configuration of an app.
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @return ApiResponse&lt;SiteConfigResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfigResource> webAppsUpdateConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the configuration of an app. (asynchronously)
     * Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteConfig JSON representation of a SiteConfig object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfigResource siteConfig, final ApiCallback<SiteConfigResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfigResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateConnectionStrings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConnectionStringsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionStrings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateConnectionStringsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConnectionStrings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateConnectionStrings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateConnectionStrings(Async)");
        }

        // verify the required parameter 'connectionStrings' is set
        if (connectionStrings == null) {
            throw new ApiException("Missing the required parameter 'connectionStrings' when calling webAppsUpdateConnectionStrings(Async)");
        }

        return webAppsUpdateConnectionStringsCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, _callback);

    }

    /**
     * Replaces the connection strings of an app.
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary webAppsUpdateConnectionStrings(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = webAppsUpdateConnectionStringsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings);
        return localVarResp.getData();
    }

    /**
     * Replaces the connection strings of an app.
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> webAppsUpdateConnectionStringsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the connection strings of an app. (asynchronously)
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConnectionStringsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateConnectionStringsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConnectionStringsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionStrings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateConnectionStringsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'connectionStrings' is set
        if (connectionStrings == null) {
            throw new ApiException("Missing the required parameter 'connectionStrings' when calling webAppsUpdateConnectionStringsSlot(Async)");
        }

        return webAppsUpdateConnectionStringsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, _callback);

    }

    /**
     * Replaces the connection strings of an app.
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary webAppsUpdateConnectionStringsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = webAppsUpdateConnectionStringsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings);
        return localVarResp.getData();
    }

    /**
     * Replaces the connection strings of an app.
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> webAppsUpdateConnectionStringsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the connection strings of an app. (asynchronously)
     * Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings of the app or deployment slot. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateDiagnosticLogsConfig
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDiagnosticLogsConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLogsConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateDiagnosticLogsConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDiagnosticLogsConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateDiagnosticLogsConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDiagnosticLogsConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateDiagnosticLogsConfig(Async)");
        }

        // verify the required parameter 'siteLogsConfig' is set
        if (siteLogsConfig == null) {
            throw new ApiException("Missing the required parameter 'siteLogsConfig' when calling webAppsUpdateDiagnosticLogsConfig(Async)");
        }

        return webAppsUpdateDiagnosticLogsConfigCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, _callback);

    }

    /**
     * Updates the logging configuration of an app.
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig webAppsUpdateDiagnosticLogsConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = webAppsUpdateDiagnosticLogsConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the logging configuration of an app.
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> webAppsUpdateDiagnosticLogsConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateDiagnosticLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the logging configuration of an app. (asynchronously)
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDiagnosticLogsConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateDiagnosticLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateDiagnosticLogsConfigSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDiagnosticLogsConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLogsConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateDiagnosticLogsConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        // verify the required parameter 'siteLogsConfig' is set
        if (siteLogsConfig == null) {
            throw new ApiException("Missing the required parameter 'siteLogsConfig' when calling webAppsUpdateDiagnosticLogsConfigSlot(Async)");
        }

        return webAppsUpdateDiagnosticLogsConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, _callback);

    }

    /**
     * Updates the logging configuration of an app.
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig webAppsUpdateDiagnosticLogsConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = webAppsUpdateDiagnosticLogsConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the logging configuration of an app.
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> webAppsUpdateDiagnosticLogsConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateDiagnosticLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the logging configuration of an app. (asynchronously)
     * Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \&quot;properties\&quot; property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDiagnosticLogsConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateDiagnosticLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateDomainOwnershipIdentifier
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDomainOwnershipIdentifierCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainOwnershipIdentifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateDomainOwnershipIdentifierValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifier' is set
        if (domainOwnershipIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsUpdateDomainOwnershipIdentifier(Async)");
        }

        return webAppsUpdateDomainOwnershipIdentifierCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);

    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsUpdateDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsUpdateDomainOwnershipIdentifierWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier);
        return localVarResp.getData();
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsUpdateDomainOwnershipIdentifierWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier. (asynchronously)
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateDomainOwnershipIdentifierValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateDomainOwnershipIdentifierSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDomainOwnershipIdentifierSlotCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainOwnershipIdentifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "domainOwnershipIdentifierName" + "}", localVarApiClient.escapeString(domainOwnershipIdentifierName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifierName' is set
        if (domainOwnershipIdentifierName == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        // verify the required parameter 'domainOwnershipIdentifier' is set
        if (domainOwnershipIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsUpdateDomainOwnershipIdentifierSlot(Async)");
        }

        return webAppsUpdateDomainOwnershipIdentifierSlotCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);

    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return WebAppsGetDomainOwnershipIdentifier200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetDomainOwnershipIdentifier200Response webAppsUpdateDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> localVarResp = webAppsUpdateDomainOwnershipIdentifierSlotWithHttpInfo(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier);
        return localVarResp.getData();
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @return ApiResponse&lt;WebAppsGetDomainOwnershipIdentifier200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetDomainOwnershipIdentifier200Response> webAppsUpdateDomainOwnershipIdentifierSlotWithHttpInfo(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, null);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier. (asynchronously)
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param domainOwnershipIdentifierName Name of domain ownership identifier. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, String subscriptionId, String apiVersion, WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier, final ApiCallback<WebAppsGetDomainOwnershipIdentifier200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateDomainOwnershipIdentifierSlotValidateBeforeCall(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetDomainOwnershipIdentifier200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateHybridConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateHybridConnection(Async)");
        }

        return webAppsUpdateHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsUpdateHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsUpdateHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsUpdateHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay. (asynchronously)
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateHybridConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateHybridConnectionSlotCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateHybridConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateHybridConnectionSlot(Async)");
        }

        return webAppsUpdateHybridConnectionSlotCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return WebAppsGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetHybridConnection200Response webAppsUpdateHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetHybridConnection200Response> localVarResp = webAppsUpdateHybridConnectionSlotWithHttpInfo(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @return ApiResponse&lt;WebAppsGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetHybridConnection200Response> webAppsUpdateHybridConnectionSlotWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay. (asynchronously)
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name The name of the web app. (required)
     * @param namespaceName The namespace for this hybrid connection. (required)
     * @param relayName The relay name for this hybrid connection. (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the hybrid connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, String subscriptionId, String apiVersion, WebAppsGetHybridConnection200Response connectionEnvelope, final ApiCallback<WebAppsGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateHybridConnectionSlotValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateMetadata
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateMetadataCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateMetadataValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateMetadata(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateMetadata(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateMetadata(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling webAppsUpdateMetadata(Async)");
        }

        return webAppsUpdateMetadataCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, _callback);

    }

    /**
     * Replaces the metadata of an app.
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsUpdateMetadata(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsUpdateMetadataWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, metadata);
        return localVarResp.getData();
    }

    /**
     * Replaces the metadata of an app.
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsUpdateMetadataWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the metadata of an app. (asynchronously)
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateMetadataAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateMetadataSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateMetadataSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateMetadataSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateMetadataSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateMetadataSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateMetadataSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateMetadataSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateMetadataSlot(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling webAppsUpdateMetadataSlot(Async)");
        }

        return webAppsUpdateMetadataSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, _callback);

    }

    /**
     * Replaces the metadata of an app.
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary webAppsUpdateMetadataSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = webAppsUpdateMetadataSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata);
        return localVarResp.getData();
    }

    /**
     * Replaces the metadata of an app.
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> webAppsUpdateMetadataSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces the metadata of an app. (asynchronously)
     * Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param metadata Edited metadata of the app or deployment slot. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateMetadataSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdatePremierAddOn
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdatePremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdatePremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdatePremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdatePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsUpdatePremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdatePremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdatePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling webAppsUpdatePremierAddOn(Async)");
        }

        return webAppsUpdatePremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsUpdatePremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsUpdatePremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsUpdatePremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdatePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a named add-on of an app. (asynchronously)
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdatePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdatePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdatePremierAddOnSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdatePremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdatePremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling webAppsUpdatePremierAddOnSlot(Async)");
        }

        return webAppsUpdatePremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return PremierAddOn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public PremierAddOn webAppsUpdatePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn) throws ApiException {
        ApiResponse<PremierAddOn> localVarResp = webAppsUpdatePremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * Updates a named add-on of an app.
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @return ApiResponse&lt;PremierAddOn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PremierAddOn> webAppsUpdatePremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdatePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a named add-on of an app. (asynchronously)
     * Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param premierAddOnName Add-on name. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn A JSON representation of the edited premier add-on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdatePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnPatchResource premierAddOn, final ApiCallback<PremierAddOn> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdatePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<PremierAddOn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateRelayServiceConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateRelayServiceConnection(Async)");
        }

        return webAppsUpdateRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsUpdateRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsUpdateRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsUpdateRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH). (asynchronously)
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateRelayServiceConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateRelayServiceConnectionSlot(Async)");
        }

        return webAppsUpdateRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity webAppsUpdateRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = webAppsUpdateRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> webAppsUpdateRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH). (asynchronously)
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param entityName Name of the hybrid connection configuration. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Details of the hybrid connection configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSitePushSettings
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSitePushSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSitePushSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSitePushSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSitePushSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSitePushSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSitePushSettings(Async)");
        }

        // verify the required parameter 'pushSettings' is set
        if (pushSettings == null) {
            throw new ApiException("Missing the required parameter 'pushSettings' when calling webAppsUpdateSitePushSettings(Async)");
        }

        return webAppsUpdateSitePushSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, pushSettings, _callback);

    }

    /**
     * Updates the Push settings associated with web app.
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @return WebAppsUpdateSitePushSettingsRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsUpdateSitePushSettingsRequest webAppsUpdateSitePushSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings) throws ApiException {
        ApiResponse<WebAppsUpdateSitePushSettingsRequest> localVarResp = webAppsUpdateSitePushSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, pushSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Push settings associated with web app.
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @return ApiResponse&lt;WebAppsUpdateSitePushSettingsRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsUpdateSitePushSettingsRequest> webAppsUpdateSitePushSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSitePushSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, pushSettings, null);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Push settings associated with web app. (asynchronously)
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSitePushSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback<WebAppsUpdateSitePushSettingsRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSitePushSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, pushSettings, _callback);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSitePushSettingsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSitePushSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSitePushSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        // verify the required parameter 'pushSettings' is set
        if (pushSettings == null) {
            throw new ApiException("Missing the required parameter 'pushSettings' when calling webAppsUpdateSitePushSettingsSlot(Async)");
        }

        return webAppsUpdateSitePushSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings, _callback);

    }

    /**
     * Updates the Push settings associated with web app.
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @return WebAppsUpdateSitePushSettingsRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsUpdateSitePushSettingsRequest webAppsUpdateSitePushSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings) throws ApiException {
        ApiResponse<WebAppsUpdateSitePushSettingsRequest> localVarResp = webAppsUpdateSitePushSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Push settings associated with web app.
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @return ApiResponse&lt;WebAppsUpdateSitePushSettingsRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsUpdateSitePushSettingsRequest> webAppsUpdateSitePushSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSitePushSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings, null);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Push settings associated with web app. (asynchronously)
     * Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of web app. (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param pushSettings Push settings associated with web app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, WebAppsUpdateSitePushSettingsRequest pushSettings, final ApiCallback<WebAppsUpdateSitePushSettingsRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSitePushSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings, _callback);
        Type localVarReturnType = new TypeToken<WebAppsUpdateSitePushSettingsRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSlot(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling webAppsUpdateSlot(Async)");
        }

        return webAppsUpdateSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, _callback);

    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return WebAppsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGet200Response webAppsUpdateSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope) throws ApiException {
        ApiResponse<WebAppsGet200Response> localVarResp = webAppsUpdateSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @return ApiResponse&lt;WebAppsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGet200Response> webAppsUpdateSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app. (asynchronously)
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter. (required)
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope A JSON representation of the app properties. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SitePatchResource siteEnvelope, final ApiCallback<WebAppsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSlotConfigurationNames
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Names of application settings and connection strings. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSlotConfigurationNamesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotConfigNames;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSlotConfigurationNamesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSlotConfigurationNames(Async)");
        }

        // verify the required parameter 'slotConfigNames' is set
        if (slotConfigNames == null) {
            throw new ApiException("Missing the required parameter 'slotConfigNames' when calling webAppsUpdateSlotConfigurationNames(Async)");
        }

        return webAppsUpdateSlotConfigurationNamesCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, _callback);

    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Names of application settings and connection strings. See example. (required)
     * @return SlotConfigNamesResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SlotConfigNamesResource webAppsUpdateSlotConfigurationNames(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames) throws ApiException {
        ApiResponse<SlotConfigNamesResource> localVarResp = webAppsUpdateSlotConfigurationNamesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames);
        return localVarResp.getData();
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Names of application settings and connection strings. See example. (required)
     * @return ApiResponse&lt;SlotConfigNamesResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotConfigNamesResource> webAppsUpdateSlotConfigurationNamesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSlotConfigurationNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, null);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation. (asynchronously)
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Names of application settings and connection strings. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSlotConfigurationNamesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback<SlotConfigNamesResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSlotConfigurationNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, _callback);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSourceControl
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSourceControl(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling webAppsUpdateSourceControl(Async)");
        }

        return webAppsUpdateSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsUpdateSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsUpdateSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsUpdateSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the source control configuration of an app. (asynchronously)
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSourceControlSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling webAppsUpdateSourceControlSlot(Async)");
        }

        return webAppsUpdateSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl webAppsUpdateSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = webAppsUpdateSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Updates the source control configuration of an app.
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> webAppsUpdateSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the source control configuration of an app. (asynchronously)
     * Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated source control for web app. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Create or update source control for web app in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSwiftVirtualNetworkConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSwiftVirtualNetworkConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateSwiftVirtualNetworkConnection(Async)");
        }

        return webAppsUpdateSwiftVirtualNetworkConnectionCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsUpdateSwiftVirtualNetworkConnection(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsUpdateSwiftVirtualNetworkConnectionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsUpdateSwiftVirtualNetworkConnectionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in. (asynchronously)
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSwiftVirtualNetworkConnectionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateSwiftVirtualNetworkConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot(Async)");
        }

        return webAppsUpdateSwiftVirtualNetworkConnectionSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return SwiftVirtualNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SwiftVirtualNetwork webAppsUpdateSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        ApiResponse<SwiftVirtualNetwork> localVarResp = webAppsUpdateSwiftVirtualNetworkConnectionSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;SwiftVirtualNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwiftVirtualNetwork> webAppsUpdateSwiftVirtualNetworkConnectionSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in. (asynchronously)
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SwiftVirtualNetwork connectionEnvelope, final ApiCallback<SwiftVirtualNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateSwiftVirtualNetworkConnectionSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<SwiftVirtualNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateVnetConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateVnetConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnection(Async)");
        }

        return webAppsUpdateVnetConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsUpdateVnetConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsUpdateVnetConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsUpdateVnetConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH). (asynchronously)
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateVnetConnectionGateway
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateVnetConnectionGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionGateway(Async)");
        }

        return webAppsUpdateVnetConnectionGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsUpdateVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsUpdateVnetConnectionGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsUpdateVnetConnectionGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH). (asynchronously)
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateVnetConnectionGatewaySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateVnetConnectionGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionGatewaySlot(Async)");
        }

        return webAppsUpdateVnetConnectionGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return WebAppsGetVnetConnectionGatewaySlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionGatewaySlot200Response webAppsUpdateVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> localVarResp = webAppsUpdateVnetConnectionGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionGatewaySlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionGatewaySlot200Response> webAppsUpdateVnetConnectionGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH). (asynchronously)
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Currently, the only supported string is \&quot;primary\&quot;. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot&#39;s Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionGatewaySlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionGatewaySlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webAppsUpdateVnetConnectionSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webAppsUpdateVnetConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionSlot(Async)");
        }

        return webAppsUpdateVnetConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return WebAppsGetVnetConnectionSlot200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WebAppsGetVnetConnectionSlot200Response webAppsUpdateVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        ApiResponse<WebAppsGetVnetConnectionSlot200Response> localVarResp = webAppsUpdateVnetConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @return ApiResponse&lt;WebAppsGetVnetConnectionSlot200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAppsGetVnetConnectionSlot200Response> webAppsUpdateVnetConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH). (asynchronously)
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the app. (required)
     * @param vnetName Name of an existing Virtual Network. (required)
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Properties of the Virtual Network connection. See example. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webAppsUpdateVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, WebAppsGetVnetConnectionSlot200Response connectionEnvelope, final ApiCallback<WebAppsGetVnetConnectionSlot200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webAppsUpdateVnetConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WebAppsGetVnetConnectionSlot200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
