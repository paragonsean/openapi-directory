/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Http logs to file system configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.440843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileSystemHttpLogsConfig {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_RETENTION_IN_DAYS = "retentionInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_IN_DAYS)
  private Integer retentionInDays;

  public static final String SERIALIZED_NAME_RETENTION_IN_MB = "retentionInMb";
  @SerializedName(SERIALIZED_NAME_RETENTION_IN_MB)
  private Integer retentionInMb;

  public FileSystemHttpLogsConfig() {
  }

  public FileSystemHttpLogsConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * True if configuration is enabled, false if it is disabled and null if configuration is not set.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public FileSystemHttpLogsConfig retentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
    return this;
  }

  /**
   * Retention in days. Remove files older than X days. 0 or lower means no retention.
   * @return retentionInDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionInDays() {
    return retentionInDays;
  }

  public void setRetentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
  }


  public FileSystemHttpLogsConfig retentionInMb(Integer retentionInMb) {
    this.retentionInMb = retentionInMb;
    return this;
  }

  /**
   * Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones. Value can range between 25 and 100.
   * minimum: 25
   * maximum: 100
   * @return retentionInMb
   */
  @javax.annotation.Nullable
  public Integer getRetentionInMb() {
    return retentionInMb;
  }

  public void setRetentionInMb(Integer retentionInMb) {
    this.retentionInMb = retentionInMb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileSystemHttpLogsConfig fileSystemHttpLogsConfig = (FileSystemHttpLogsConfig) o;
    return Objects.equals(this.enabled, fileSystemHttpLogsConfig.enabled) &&
        Objects.equals(this.retentionInDays, fileSystemHttpLogsConfig.retentionInDays) &&
        Objects.equals(this.retentionInMb, fileSystemHttpLogsConfig.retentionInMb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, retentionInDays, retentionInMb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileSystemHttpLogsConfig {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    retentionInDays: ").append(toIndentedString(retentionInDays)).append("\n");
    sb.append("    retentionInMb: ").append(toIndentedString(retentionInMb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("retentionInDays");
    openapiFields.add("retentionInMb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileSystemHttpLogsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileSystemHttpLogsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileSystemHttpLogsConfig is not found in the empty JSON string", FileSystemHttpLogsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileSystemHttpLogsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileSystemHttpLogsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileSystemHttpLogsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileSystemHttpLogsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileSystemHttpLogsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileSystemHttpLogsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FileSystemHttpLogsConfig>() {
           @Override
           public void write(JsonWriter out, FileSystemHttpLogsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileSystemHttpLogsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileSystemHttpLogsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileSystemHttpLogsConfig
   * @throws IOException if the JSON string is invalid with respect to FileSystemHttpLogsConfig
   */
  public static FileSystemHttpLogsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileSystemHttpLogsConfig.class);
  }

  /**
   * Convert an instance of FileSystemHttpLogsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

