/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebAppsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Value of resource metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.440843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebAppsListMetrics200ResponseValueInnerMetricValuesInner {
  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Float average;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Float count;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Float maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Float minimum;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<WebAppsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Float total;

  public WebAppsListMetrics200ResponseValueInnerMetricValuesInner() {
  }

  public WebAppsListMetrics200ResponseValueInnerMetricValuesInner(
     Float average, 
     Float count, 
     Float maximum, 
     Float minimum, 
     List<WebAppsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner> properties, 
     String timestamp, 
     Float total
  ) {
    this();
    this.average = average;
    this.count = count;
    this.maximum = maximum;
    this.minimum = minimum;
    this.properties = properties;
    this.timestamp = timestamp;
    this.total = total;
  }

  /**
   * Value average.
   * @return average
   */
  @javax.annotation.Nullable
  public Float getAverage() {
    return average;
  }



  /**
   * Value count.
   * @return count
   */
  @javax.annotation.Nullable
  public Float getCount() {
    return count;
  }



  /**
   * Value maximum.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Float getMaximum() {
    return maximum;
  }



  /**
   * Value minimum.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Float getMinimum() {
    return minimum;
  }



  /**
   * Resource metric properties collection.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<WebAppsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner> getProperties() {
    return properties;
  }



  /**
   * Value timestamp.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }



  /**
   * Value total.
   * @return total
   */
  @javax.annotation.Nullable
  public Float getTotal() {
    return total;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAppsListMetrics200ResponseValueInnerMetricValuesInner webAppsListMetrics200ResponseValueInnerMetricValuesInner = (WebAppsListMetrics200ResponseValueInnerMetricValuesInner) o;
    return Objects.equals(this.average, webAppsListMetrics200ResponseValueInnerMetricValuesInner.average) &&
        Objects.equals(this.count, webAppsListMetrics200ResponseValueInnerMetricValuesInner.count) &&
        Objects.equals(this.maximum, webAppsListMetrics200ResponseValueInnerMetricValuesInner.maximum) &&
        Objects.equals(this.minimum, webAppsListMetrics200ResponseValueInnerMetricValuesInner.minimum) &&
        Objects.equals(this.properties, webAppsListMetrics200ResponseValueInnerMetricValuesInner.properties) &&
        Objects.equals(this.timestamp, webAppsListMetrics200ResponseValueInnerMetricValuesInner.timestamp) &&
        Objects.equals(this.total, webAppsListMetrics200ResponseValueInnerMetricValuesInner.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, count, maximum, minimum, properties, timestamp, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAppsListMetrics200ResponseValueInnerMetricValuesInner {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average");
    openapiFields.add("count");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("properties");
    openapiFields.add("timestamp");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAppsListMetrics200ResponseValueInnerMetricValuesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAppsListMetrics200ResponseValueInnerMetricValuesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAppsListMetrics200ResponseValueInnerMetricValuesInner is not found in the empty JSON string", WebAppsListMetrics200ResponseValueInnerMetricValuesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAppsListMetrics200ResponseValueInnerMetricValuesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAppsListMetrics200ResponseValueInnerMetricValuesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            WebAppsListMetrics200ResponseValueInnerMetricValuesInnerPropertiesInner.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAppsListMetrics200ResponseValueInnerMetricValuesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAppsListMetrics200ResponseValueInnerMetricValuesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAppsListMetrics200ResponseValueInnerMetricValuesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAppsListMetrics200ResponseValueInnerMetricValuesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAppsListMetrics200ResponseValueInnerMetricValuesInner>() {
           @Override
           public void write(JsonWriter out, WebAppsListMetrics200ResponseValueInnerMetricValuesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAppsListMetrics200ResponseValueInnerMetricValuesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAppsListMetrics200ResponseValueInnerMetricValuesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAppsListMetrics200ResponseValueInnerMetricValuesInner
   * @throws IOException if the JSON string is invalid with respect to WebAppsListMetrics200ResponseValueInnerMetricValuesInner
   */
  public static WebAppsListMetrics200ResponseValueInnerMetricValuesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAppsListMetrics200ResponseValueInnerMetricValuesInner.class);
  }

  /**
   * Convert an instance of WebAppsListMetrics200ResponseValueInnerMetricValuesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

