/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VnetInfo resource specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.440843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebAppsListVnetConnectionsSlot200ResponseInnerProperties {
  public static final String SERIALIZED_NAME_CERT_BLOB = "certBlob";
  @SerializedName(SERIALIZED_NAME_CERT_BLOB)
  private String certBlob;

  public static final String SERIALIZED_NAME_CERT_THUMBPRINT = "certThumbprint";
  @SerializedName(SERIALIZED_NAME_CERT_THUMBPRINT)
  private String certThumbprint;

  public static final String SERIALIZED_NAME_DNS_SERVERS = "dnsServers";
  @SerializedName(SERIALIZED_NAME_DNS_SERVERS)
  private String dnsServers;

  public static final String SERIALIZED_NAME_IS_SWIFT = "isSwift";
  @SerializedName(SERIALIZED_NAME_IS_SWIFT)
  private Boolean isSwift;

  public static final String SERIALIZED_NAME_RESYNC_REQUIRED = "resyncRequired";
  @SerializedName(SERIALIZED_NAME_RESYNC_REQUIRED)
  private Boolean resyncRequired;

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private List<WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner> routes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VNET_RESOURCE_ID = "vnetResourceId";
  @SerializedName(SERIALIZED_NAME_VNET_RESOURCE_ID)
  private String vnetResourceId;

  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties() {
  }

  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties(
     String certThumbprint, 
     Boolean resyncRequired, 
     List<WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner> routes
  ) {
    this();
    this.certThumbprint = certThumbprint;
    this.resyncRequired = resyncRequired;
    this.routes = routes;
  }

  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties certBlob(String certBlob) {
    this.certBlob = certBlob;
    return this;
  }

  /**
   * A certificate file (.cer) blob containing the public key of the private key used to authenticate a  Point-To-Site VPN connection.
   * @return certBlob
   */
  @javax.annotation.Nullable
  public String getCertBlob() {
    return certBlob;
  }

  public void setCertBlob(String certBlob) {
    this.certBlob = certBlob;
  }


  /**
   * The client certificate thumbprint.
   * @return certThumbprint
   */
  @javax.annotation.Nullable
  public String getCertThumbprint() {
    return certThumbprint;
  }



  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties dnsServers(String dnsServers) {
    this.dnsServers = dnsServers;
    return this;
  }

  /**
   * DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
   * @return dnsServers
   */
  @javax.annotation.Nullable
  public String getDnsServers() {
    return dnsServers;
  }

  public void setDnsServers(String dnsServers) {
    this.dnsServers = dnsServers;
  }


  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties isSwift(Boolean isSwift) {
    this.isSwift = isSwift;
    return this;
  }

  /**
   * Flag that is used to denote if this is VNET injection
   * @return isSwift
   */
  @javax.annotation.Nullable
  public Boolean getIsSwift() {
    return isSwift;
  }

  public void setIsSwift(Boolean isSwift) {
    this.isSwift = isSwift;
  }


  /**
   * &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return resyncRequired
   */
  @javax.annotation.Nullable
  public Boolean getResyncRequired() {
    return resyncRequired;
  }



  /**
   * The routes that this Virtual Network connection uses.
   * @return routes
   */
  @javax.annotation.Nullable
  public List<WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner> getRoutes() {
    return routes;
  }



  public WebAppsListVnetConnectionsSlot200ResponseInnerProperties vnetResourceId(String vnetResourceId) {
    this.vnetResourceId = vnetResourceId;
    return this;
  }

  /**
   * The Virtual Network&#39;s resource ID.
   * @return vnetResourceId
   */
  @javax.annotation.Nullable
  public String getVnetResourceId() {
    return vnetResourceId;
  }

  public void setVnetResourceId(String vnetResourceId) {
    this.vnetResourceId = vnetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAppsListVnetConnectionsSlot200ResponseInnerProperties webAppsListVnetConnectionsSlot200ResponseInnerProperties = (WebAppsListVnetConnectionsSlot200ResponseInnerProperties) o;
    return Objects.equals(this.certBlob, webAppsListVnetConnectionsSlot200ResponseInnerProperties.certBlob) &&
        Objects.equals(this.certThumbprint, webAppsListVnetConnectionsSlot200ResponseInnerProperties.certThumbprint) &&
        Objects.equals(this.dnsServers, webAppsListVnetConnectionsSlot200ResponseInnerProperties.dnsServers) &&
        Objects.equals(this.isSwift, webAppsListVnetConnectionsSlot200ResponseInnerProperties.isSwift) &&
        Objects.equals(this.resyncRequired, webAppsListVnetConnectionsSlot200ResponseInnerProperties.resyncRequired) &&
        Objects.equals(this.routes, webAppsListVnetConnectionsSlot200ResponseInnerProperties.routes) &&
        Objects.equals(this.vnetResourceId, webAppsListVnetConnectionsSlot200ResponseInnerProperties.vnetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certBlob, certThumbprint, dnsServers, isSwift, resyncRequired, routes, vnetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAppsListVnetConnectionsSlot200ResponseInnerProperties {\n");
    sb.append("    certBlob: ").append(toIndentedString(certBlob)).append("\n");
    sb.append("    certThumbprint: ").append(toIndentedString(certThumbprint)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    isSwift: ").append(toIndentedString(isSwift)).append("\n");
    sb.append("    resyncRequired: ").append(toIndentedString(resyncRequired)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    vnetResourceId: ").append(toIndentedString(vnetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certBlob");
    openapiFields.add("certThumbprint");
    openapiFields.add("dnsServers");
    openapiFields.add("isSwift");
    openapiFields.add("resyncRequired");
    openapiFields.add("routes");
    openapiFields.add("vnetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAppsListVnetConnectionsSlot200ResponseInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAppsListVnetConnectionsSlot200ResponseInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAppsListVnetConnectionsSlot200ResponseInnerProperties is not found in the empty JSON string", WebAppsListVnetConnectionsSlot200ResponseInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAppsListVnetConnectionsSlot200ResponseInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAppsListVnetConnectionsSlot200ResponseInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certBlob") != null && !jsonObj.get("certBlob").isJsonNull()) && !jsonObj.get("certBlob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certBlob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certBlob").toString()));
      }
      if ((jsonObj.get("certThumbprint") != null && !jsonObj.get("certThumbprint").isJsonNull()) && !jsonObj.get("certThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certThumbprint").toString()));
      }
      if ((jsonObj.get("dnsServers") != null && !jsonObj.get("dnsServers").isJsonNull()) && !jsonObj.get("dnsServers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsServers").toString()));
      }
      if (jsonObj.get("routes") != null && !jsonObj.get("routes").isJsonNull()) {
        JsonArray jsonArrayroutes = jsonObj.getAsJsonArray("routes");
        if (jsonArrayroutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routes` to be an array in the JSON string but got `%s`", jsonObj.get("routes").toString()));
          }

          // validate the optional field `routes` (array)
          for (int i = 0; i < jsonArrayroutes.size(); i++) {
            WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner.validateJsonElement(jsonArrayroutes.get(i));
          };
        }
      }
      if ((jsonObj.get("vnetResourceId") != null && !jsonObj.get("vnetResourceId").isJsonNull()) && !jsonObj.get("vnetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAppsListVnetConnectionsSlot200ResponseInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAppsListVnetConnectionsSlot200ResponseInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAppsListVnetConnectionsSlot200ResponseInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAppsListVnetConnectionsSlot200ResponseInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAppsListVnetConnectionsSlot200ResponseInnerProperties>() {
           @Override
           public void write(JsonWriter out, WebAppsListVnetConnectionsSlot200ResponseInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAppsListVnetConnectionsSlot200ResponseInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAppsListVnetConnectionsSlot200ResponseInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAppsListVnetConnectionsSlot200ResponseInnerProperties
   * @throws IOException if the JSON string is invalid with respect to WebAppsListVnetConnectionsSlot200ResponseInnerProperties
   */
  public static WebAppsListVnetConnectionsSlot200ResponseInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAppsListVnetConnectionsSlot200ResponseInnerProperties.class);
  }

  /**
   * Convert an instance of WebAppsListVnetConnectionsSlot200ResponseInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

