/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HybridConnection resource specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.440843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebAppsGetHybridConnection200ResponseProperties {
  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_RELAY_ARM_URI = "relayArmUri";
  @SerializedName(SERIALIZED_NAME_RELAY_ARM_URI)
  private String relayArmUri;

  public static final String SERIALIZED_NAME_RELAY_NAME = "relayName";
  @SerializedName(SERIALIZED_NAME_RELAY_NAME)
  private String relayName;

  public static final String SERIALIZED_NAME_SEND_KEY_NAME = "sendKeyName";
  @SerializedName(SERIALIZED_NAME_SEND_KEY_NAME)
  private String sendKeyName;

  public static final String SERIALIZED_NAME_SEND_KEY_VALUE = "sendKeyValue";
  @SerializedName(SERIALIZED_NAME_SEND_KEY_VALUE)
  private String sendKeyValue;

  public static final String SERIALIZED_NAME_SERVICE_BUS_NAMESPACE = "serviceBusNamespace";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_NAMESPACE)
  private String serviceBusNamespace;

  public static final String SERIALIZED_NAME_SERVICE_BUS_SUFFIX = "serviceBusSuffix";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_SUFFIX)
  private String serviceBusSuffix;

  public WebAppsGetHybridConnection200ResponseProperties() {
  }

  public WebAppsGetHybridConnection200ResponseProperties hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The hostname of the endpoint.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public WebAppsGetHybridConnection200ResponseProperties port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The port of the endpoint.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public WebAppsGetHybridConnection200ResponseProperties relayArmUri(String relayArmUri) {
    this.relayArmUri = relayArmUri;
    return this;
  }

  /**
   * The ARM URI to the Service Bus relay.
   * @return relayArmUri
   */
  @javax.annotation.Nullable
  public String getRelayArmUri() {
    return relayArmUri;
  }

  public void setRelayArmUri(String relayArmUri) {
    this.relayArmUri = relayArmUri;
  }


  public WebAppsGetHybridConnection200ResponseProperties relayName(String relayName) {
    this.relayName = relayName;
    return this;
  }

  /**
   * The name of the Service Bus relay.
   * @return relayName
   */
  @javax.annotation.Nullable
  public String getRelayName() {
    return relayName;
  }

  public void setRelayName(String relayName) {
    this.relayName = relayName;
  }


  public WebAppsGetHybridConnection200ResponseProperties sendKeyName(String sendKeyName) {
    this.sendKeyName = sendKeyName;
    return this;
  }

  /**
   * The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
   * @return sendKeyName
   */
  @javax.annotation.Nullable
  public String getSendKeyName() {
    return sendKeyName;
  }

  public void setSendKeyName(String sendKeyName) {
    this.sendKeyName = sendKeyName;
  }


  public WebAppsGetHybridConnection200ResponseProperties sendKeyValue(String sendKeyValue) {
    this.sendKeyValue = sendKeyValue;
    return this;
  }

  /**
   * The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned normally, use the POST /listKeys API instead.
   * @return sendKeyValue
   */
  @javax.annotation.Nullable
  public String getSendKeyValue() {
    return sendKeyValue;
  }

  public void setSendKeyValue(String sendKeyValue) {
    this.sendKeyValue = sendKeyValue;
  }


  public WebAppsGetHybridConnection200ResponseProperties serviceBusNamespace(String serviceBusNamespace) {
    this.serviceBusNamespace = serviceBusNamespace;
    return this;
  }

  /**
   * The name of the Service Bus namespace.
   * @return serviceBusNamespace
   */
  @javax.annotation.Nullable
  public String getServiceBusNamespace() {
    return serviceBusNamespace;
  }

  public void setServiceBusNamespace(String serviceBusNamespace) {
    this.serviceBusNamespace = serviceBusNamespace;
  }


  public WebAppsGetHybridConnection200ResponseProperties serviceBusSuffix(String serviceBusSuffix) {
    this.serviceBusSuffix = serviceBusSuffix;
    return this;
  }

  /**
   * The suffix for the service bus endpoint. By default this is .servicebus.windows.net
   * @return serviceBusSuffix
   */
  @javax.annotation.Nullable
  public String getServiceBusSuffix() {
    return serviceBusSuffix;
  }

  public void setServiceBusSuffix(String serviceBusSuffix) {
    this.serviceBusSuffix = serviceBusSuffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAppsGetHybridConnection200ResponseProperties webAppsGetHybridConnection200ResponseProperties = (WebAppsGetHybridConnection200ResponseProperties) o;
    return Objects.equals(this.hostname, webAppsGetHybridConnection200ResponseProperties.hostname) &&
        Objects.equals(this.port, webAppsGetHybridConnection200ResponseProperties.port) &&
        Objects.equals(this.relayArmUri, webAppsGetHybridConnection200ResponseProperties.relayArmUri) &&
        Objects.equals(this.relayName, webAppsGetHybridConnection200ResponseProperties.relayName) &&
        Objects.equals(this.sendKeyName, webAppsGetHybridConnection200ResponseProperties.sendKeyName) &&
        Objects.equals(this.sendKeyValue, webAppsGetHybridConnection200ResponseProperties.sendKeyValue) &&
        Objects.equals(this.serviceBusNamespace, webAppsGetHybridConnection200ResponseProperties.serviceBusNamespace) &&
        Objects.equals(this.serviceBusSuffix, webAppsGetHybridConnection200ResponseProperties.serviceBusSuffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, port, relayArmUri, relayName, sendKeyName, sendKeyValue, serviceBusNamespace, serviceBusSuffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAppsGetHybridConnection200ResponseProperties {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    relayArmUri: ").append(toIndentedString(relayArmUri)).append("\n");
    sb.append("    relayName: ").append(toIndentedString(relayName)).append("\n");
    sb.append("    sendKeyName: ").append(toIndentedString(sendKeyName)).append("\n");
    sb.append("    sendKeyValue: ").append(toIndentedString(sendKeyValue)).append("\n");
    sb.append("    serviceBusNamespace: ").append(toIndentedString(serviceBusNamespace)).append("\n");
    sb.append("    serviceBusSuffix: ").append(toIndentedString(serviceBusSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostname");
    openapiFields.add("port");
    openapiFields.add("relayArmUri");
    openapiFields.add("relayName");
    openapiFields.add("sendKeyName");
    openapiFields.add("sendKeyValue");
    openapiFields.add("serviceBusNamespace");
    openapiFields.add("serviceBusSuffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAppsGetHybridConnection200ResponseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAppsGetHybridConnection200ResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAppsGetHybridConnection200ResponseProperties is not found in the empty JSON string", WebAppsGetHybridConnection200ResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAppsGetHybridConnection200ResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAppsGetHybridConnection200ResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("relayArmUri") != null && !jsonObj.get("relayArmUri").isJsonNull()) && !jsonObj.get("relayArmUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relayArmUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relayArmUri").toString()));
      }
      if ((jsonObj.get("relayName") != null && !jsonObj.get("relayName").isJsonNull()) && !jsonObj.get("relayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relayName").toString()));
      }
      if ((jsonObj.get("sendKeyName") != null && !jsonObj.get("sendKeyName").isJsonNull()) && !jsonObj.get("sendKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendKeyName").toString()));
      }
      if ((jsonObj.get("sendKeyValue") != null && !jsonObj.get("sendKeyValue").isJsonNull()) && !jsonObj.get("sendKeyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendKeyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendKeyValue").toString()));
      }
      if ((jsonObj.get("serviceBusNamespace") != null && !jsonObj.get("serviceBusNamespace").isJsonNull()) && !jsonObj.get("serviceBusNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusNamespace").toString()));
      }
      if ((jsonObj.get("serviceBusSuffix") != null && !jsonObj.get("serviceBusSuffix").isJsonNull()) && !jsonObj.get("serviceBusSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusSuffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAppsGetHybridConnection200ResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAppsGetHybridConnection200ResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAppsGetHybridConnection200ResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAppsGetHybridConnection200ResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAppsGetHybridConnection200ResponseProperties>() {
           @Override
           public void write(JsonWriter out, WebAppsGetHybridConnection200ResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAppsGetHybridConnection200ResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAppsGetHybridConnection200ResponseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAppsGetHybridConnection200ResponseProperties
   * @throws IOException if the JSON string is invalid with respect to WebAppsGetHybridConnection200ResponseProperties
   */
  public static WebAppsGetHybridConnection200ResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAppsGetHybridConnection200ResponseProperties.class);
  }

  /**
   * Convert an instance of WebAppsGetHybridConnection200ResponseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

