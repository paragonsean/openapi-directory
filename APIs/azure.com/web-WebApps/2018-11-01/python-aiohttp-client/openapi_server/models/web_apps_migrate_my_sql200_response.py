# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_apps_migrate_my_sql200_response_errors_inner import WebAppsMigrateMySql200ResponseErrorsInner
from openapi_server import util


class WebAppsMigrateMySql200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, errors: List[WebAppsMigrateMySql200ResponseErrorsInner]=None, expiration_time: datetime=None, geo_master_operation_id: str=None, id: str=None, modified_time: datetime=None, name: str=None, status: str=None):
        """WebAppsMigrateMySql200Response - a model defined in OpenAPI

        :param created_time: The created_time of this WebAppsMigrateMySql200Response.
        :param errors: The errors of this WebAppsMigrateMySql200Response.
        :param expiration_time: The expiration_time of this WebAppsMigrateMySql200Response.
        :param geo_master_operation_id: The geo_master_operation_id of this WebAppsMigrateMySql200Response.
        :param id: The id of this WebAppsMigrateMySql200Response.
        :param modified_time: The modified_time of this WebAppsMigrateMySql200Response.
        :param name: The name of this WebAppsMigrateMySql200Response.
        :param status: The status of this WebAppsMigrateMySql200Response.
        """
        self.openapi_types = {
            'created_time': datetime,
            'errors': List[WebAppsMigrateMySql200ResponseErrorsInner],
            'expiration_time': datetime,
            'geo_master_operation_id': str,
            'id': str,
            'modified_time': datetime,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'errors': 'errors',
            'expiration_time': 'expirationTime',
            'geo_master_operation_id': 'geoMasterOperationId',
            'id': 'id',
            'modified_time': 'modifiedTime',
            'name': 'name',
            'status': 'status'
        }

        self._created_time = created_time
        self._errors = errors
        self._expiration_time = expiration_time
        self._geo_master_operation_id = geo_master_operation_id
        self._id = id
        self._modified_time = modified_time
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAppsMigrateMySql200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebApps_MigrateMySql_200_response of this WebAppsMigrateMySql200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this WebAppsMigrateMySql200Response.

        Time when operation has started.

        :return: The created_time of this WebAppsMigrateMySql200Response.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this WebAppsMigrateMySql200Response.

        Time when operation has started.

        :param created_time: The created_time of this WebAppsMigrateMySql200Response.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def errors(self):
        """Gets the errors of this WebAppsMigrateMySql200Response.

        Any errors associate with the operation.

        :return: The errors of this WebAppsMigrateMySql200Response.
        :rtype: List[WebAppsMigrateMySql200ResponseErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this WebAppsMigrateMySql200Response.

        Any errors associate with the operation.

        :param errors: The errors of this WebAppsMigrateMySql200Response.
        :type errors: List[WebAppsMigrateMySql200ResponseErrorsInner]
        """

        self._errors = errors

    @property
    def expiration_time(self):
        """Gets the expiration_time of this WebAppsMigrateMySql200Response.

        Time when operation will expire.

        :return: The expiration_time of this WebAppsMigrateMySql200Response.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this WebAppsMigrateMySql200Response.

        Time when operation will expire.

        :param expiration_time: The expiration_time of this WebAppsMigrateMySql200Response.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def geo_master_operation_id(self):
        """Gets the geo_master_operation_id of this WebAppsMigrateMySql200Response.

        Applicable only for stamp operation ids.

        :return: The geo_master_operation_id of this WebAppsMigrateMySql200Response.
        :rtype: str
        """
        return self._geo_master_operation_id

    @geo_master_operation_id.setter
    def geo_master_operation_id(self, geo_master_operation_id):
        """Sets the geo_master_operation_id of this WebAppsMigrateMySql200Response.

        Applicable only for stamp operation ids.

        :param geo_master_operation_id: The geo_master_operation_id of this WebAppsMigrateMySql200Response.
        :type geo_master_operation_id: str
        """

        self._geo_master_operation_id = geo_master_operation_id

    @property
    def id(self):
        """Gets the id of this WebAppsMigrateMySql200Response.

        Operation ID.

        :return: The id of this WebAppsMigrateMySql200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebAppsMigrateMySql200Response.

        Operation ID.

        :param id: The id of this WebAppsMigrateMySql200Response.
        :type id: str
        """

        self._id = id

    @property
    def modified_time(self):
        """Gets the modified_time of this WebAppsMigrateMySql200Response.

        Time when operation has been updated.

        :return: The modified_time of this WebAppsMigrateMySql200Response.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this WebAppsMigrateMySql200Response.

        Time when operation has been updated.

        :param modified_time: The modified_time of this WebAppsMigrateMySql200Response.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this WebAppsMigrateMySql200Response.

        Operation name.

        :return: The name of this WebAppsMigrateMySql200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebAppsMigrateMySql200Response.

        Operation name.

        :param name: The name of this WebAppsMigrateMySql200Response.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this WebAppsMigrateMySql200Response.

        The current status of the operation.

        :return: The status of this WebAppsMigrateMySql200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebAppsMigrateMySql200Response.

        The current status of the operation.

        :param status: The status of this WebAppsMigrateMySql200Response.
        :type status: str
        """
        allowed_values = ["InProgress", "Failed", "Succeeded", "TimedOut", "Created"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
