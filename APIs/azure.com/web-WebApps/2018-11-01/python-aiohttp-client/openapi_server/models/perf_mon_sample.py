# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerfMonSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_name: str=None, time: datetime=None, value: float=None):
        """PerfMonSample - a model defined in OpenAPI

        :param instance_name: The instance_name of this PerfMonSample.
        :param time: The time of this PerfMonSample.
        :param value: The value of this PerfMonSample.
        """
        self.openapi_types = {
            'instance_name': str,
            'time': datetime,
            'value': float
        }

        self.attribute_map = {
            'instance_name': 'instanceName',
            'time': 'time',
            'value': 'value'
        }

        self._instance_name = instance_name
        self._time = time
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerfMonSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerfMonSample of this PerfMonSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_name(self):
        """Gets the instance_name of this PerfMonSample.

        Name of the server on which the measurement is made.

        :return: The instance_name of this PerfMonSample.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this PerfMonSample.

        Name of the server on which the measurement is made.

        :param instance_name: The instance_name of this PerfMonSample.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def time(self):
        """Gets the time of this PerfMonSample.

        Point in time for which counter was measured.

        :return: The time of this PerfMonSample.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PerfMonSample.

        Point in time for which counter was measured.

        :param time: The time of this PerfMonSample.
        :type time: datetime
        """

        self._time = time

    @property
    def value(self):
        """Gets the value of this PerfMonSample.

        Value of counter at a certain time.

        :return: The value of this PerfMonSample.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PerfMonSample.

        Value of counter at a certain time.

        :param value: The value of this PerfMonSample.
        :type value: float
        """

        self._value = value
