# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_access_subnet import PrivateAccessSubnet
from openapi_server import util


class PrivateAccessVirtualNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: int=None, name: str=None, resource_id: str=None, subnets: List[PrivateAccessSubnet]=None):
        """PrivateAccessVirtualNetwork - a model defined in OpenAPI

        :param key: The key of this PrivateAccessVirtualNetwork.
        :param name: The name of this PrivateAccessVirtualNetwork.
        :param resource_id: The resource_id of this PrivateAccessVirtualNetwork.
        :param subnets: The subnets of this PrivateAccessVirtualNetwork.
        """
        self.openapi_types = {
            'key': int,
            'name': str,
            'resource_id': str,
            'subnets': List[PrivateAccessSubnet]
        }

        self.attribute_map = {
            'key': 'key',
            'name': 'name',
            'resource_id': 'resourceId',
            'subnets': 'subnets'
        }

        self._key = key
        self._name = name
        self._resource_id = resource_id
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateAccessVirtualNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateAccessVirtualNetwork of this PrivateAccessVirtualNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this PrivateAccessVirtualNetwork.

        The key (ID) of the Virtual Network.

        :return: The key of this PrivateAccessVirtualNetwork.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PrivateAccessVirtualNetwork.

        The key (ID) of the Virtual Network.

        :param key: The key of this PrivateAccessVirtualNetwork.
        :type key: int
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this PrivateAccessVirtualNetwork.

        The name of the Virtual Network.

        :return: The name of this PrivateAccessVirtualNetwork.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateAccessVirtualNetwork.

        The name of the Virtual Network.

        :param name: The name of this PrivateAccessVirtualNetwork.
        :type name: str
        """

        self._name = name

    @property
    def resource_id(self):
        """Gets the resource_id of this PrivateAccessVirtualNetwork.

        The ARM uri of the Virtual Network

        :return: The resource_id of this PrivateAccessVirtualNetwork.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this PrivateAccessVirtualNetwork.

        The ARM uri of the Virtual Network

        :param resource_id: The resource_id of this PrivateAccessVirtualNetwork.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def subnets(self):
        """Gets the subnets of this PrivateAccessVirtualNetwork.

        A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network.

        :return: The subnets of this PrivateAccessVirtualNetwork.
        :rtype: List[PrivateAccessSubnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this PrivateAccessVirtualNetwork.

        A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network.

        :param subnets: The subnets of this PrivateAccessVirtualNetwork.
        :type subnets: List[PrivateAccessSubnet]
        """

        self._subnets = subnets
