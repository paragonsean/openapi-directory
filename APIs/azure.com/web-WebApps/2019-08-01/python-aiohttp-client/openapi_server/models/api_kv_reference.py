# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKVReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, identity_type: str=None, location: str=None, reference: str=None, secret_name: str=None, secret_version: str=None, source: str=None, status: str=None, vault_name: str=None):
        """ApiKVReference - a model defined in OpenAPI

        :param details: The details of this ApiKVReference.
        :param identity_type: The identity_type of this ApiKVReference.
        :param location: The location of this ApiKVReference.
        :param reference: The reference of this ApiKVReference.
        :param secret_name: The secret_name of this ApiKVReference.
        :param secret_version: The secret_version of this ApiKVReference.
        :param source: The source of this ApiKVReference.
        :param status: The status of this ApiKVReference.
        :param vault_name: The vault_name of this ApiKVReference.
        """
        self.openapi_types = {
            'details': str,
            'identity_type': str,
            'location': str,
            'reference': str,
            'secret_name': str,
            'secret_version': str,
            'source': str,
            'status': str,
            'vault_name': str
        }

        self.attribute_map = {
            'details': 'details',
            'identity_type': 'identityType',
            'location': 'location',
            'reference': 'reference',
            'secret_name': 'secretName',
            'secret_version': 'secretVersion',
            'source': 'source',
            'status': 'status',
            'vault_name': 'vaultName'
        }

        self._details = details
        self._identity_type = identity_type
        self._location = location
        self._reference = reference
        self._secret_name = secret_name
        self._secret_version = secret_version
        self._source = source
        self._status = status
        self._vault_name = vault_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKVReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKVReference of this ApiKVReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ApiKVReference.


        :return: The details of this ApiKVReference.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ApiKVReference.


        :param details: The details of this ApiKVReference.
        :type details: str
        """

        self._details = details

    @property
    def identity_type(self):
        """Gets the identity_type of this ApiKVReference.


        :return: The identity_type of this ApiKVReference.
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this ApiKVReference.


        :param identity_type: The identity_type of this ApiKVReference.
        :type identity_type: str
        """
        allowed_values = ["None", "SystemAssigned", "UserAssigned"]  # noqa: E501
        if identity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_type` ({0}), must be one of {1}"
                .format(identity_type, allowed_values)
            )

        self._identity_type = identity_type

    @property
    def location(self):
        """Gets the location of this ApiKVReference.


        :return: The location of this ApiKVReference.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ApiKVReference.


        :param location: The location of this ApiKVReference.
        :type location: str
        """
        allowed_values = ["ApplicationSetting"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def reference(self):
        """Gets the reference of this ApiKVReference.


        :return: The reference of this ApiKVReference.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ApiKVReference.


        :param reference: The reference of this ApiKVReference.
        :type reference: str
        """

        self._reference = reference

    @property
    def secret_name(self):
        """Gets the secret_name of this ApiKVReference.


        :return: The secret_name of this ApiKVReference.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this ApiKVReference.


        :param secret_name: The secret_name of this ApiKVReference.
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def secret_version(self):
        """Gets the secret_version of this ApiKVReference.


        :return: The secret_version of this ApiKVReference.
        :rtype: str
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this ApiKVReference.


        :param secret_version: The secret_version of this ApiKVReference.
        :type secret_version: str
        """

        self._secret_version = secret_version

    @property
    def source(self):
        """Gets the source of this ApiKVReference.


        :return: The source of this ApiKVReference.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApiKVReference.


        :param source: The source of this ApiKVReference.
        :type source: str
        """
        allowed_values = ["KeyVault"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this ApiKVReference.


        :return: The status of this ApiKVReference.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiKVReference.


        :param status: The status of this ApiKVReference.
        :type status: str
        """
        allowed_values = ["Initialized", "Resolved", "InvalidSyntax", "MSINotEnabled", "VaultNotFound", "SecretNotFound", "SecretVersionNotFound", "AccessToKeyVaultDenied", "OtherReasons"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def vault_name(self):
        """Gets the vault_name of this ApiKVReference.


        :return: The vault_name of this ApiKVReference.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """Sets the vault_name of this ApiKVReference.


        :param vault_name: The vault_name of this ApiKVReference.
        :type vault_name: str
        """

        self._vault_name = vault_name
