# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureStorageInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, account_name: str=None, mount_path: str=None, share_name: str=None, state: str=None, type: str=None):
        """AzureStorageInfoValue - a model defined in OpenAPI

        :param access_key: The access_key of this AzureStorageInfoValue.
        :param account_name: The account_name of this AzureStorageInfoValue.
        :param mount_path: The mount_path of this AzureStorageInfoValue.
        :param share_name: The share_name of this AzureStorageInfoValue.
        :param state: The state of this AzureStorageInfoValue.
        :param type: The type of this AzureStorageInfoValue.
        """
        self.openapi_types = {
            'access_key': str,
            'account_name': str,
            'mount_path': str,
            'share_name': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'account_name': 'accountName',
            'mount_path': 'mountPath',
            'share_name': 'shareName',
            'state': 'state',
            'type': 'type'
        }

        self._access_key = access_key
        self._account_name = account_name
        self._mount_path = mount_path
        self._share_name = share_name
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureStorageInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureStorageInfoValue of this AzureStorageInfoValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this AzureStorageInfoValue.

        Access key for the storage account.

        :return: The access_key of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this AzureStorageInfoValue.

        Access key for the storage account.

        :param access_key: The access_key of this AzureStorageInfoValue.
        :type access_key: str
        """

        self._access_key = access_key

    @property
    def account_name(self):
        """Gets the account_name of this AzureStorageInfoValue.

        Name of the storage account.

        :return: The account_name of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AzureStorageInfoValue.

        Name of the storage account.

        :param account_name: The account_name of this AzureStorageInfoValue.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def mount_path(self):
        """Gets the mount_path of this AzureStorageInfoValue.

        Path to mount the storage within the site's runtime environment.

        :return: The mount_path of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this AzureStorageInfoValue.

        Path to mount the storage within the site's runtime environment.

        :param mount_path: The mount_path of this AzureStorageInfoValue.
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def share_name(self):
        """Gets the share_name of this AzureStorageInfoValue.

        Name of the file share (container name, for Blob storage).

        :return: The share_name of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this AzureStorageInfoValue.

        Name of the file share (container name, for Blob storage).

        :param share_name: The share_name of this AzureStorageInfoValue.
        :type share_name: str
        """

        self._share_name = share_name

    @property
    def state(self):
        """Gets the state of this AzureStorageInfoValue.

        State of the storage account.

        :return: The state of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AzureStorageInfoValue.

        State of the storage account.

        :param state: The state of this AzureStorageInfoValue.
        :type state: str
        """
        allowed_values = ["Ok", "InvalidCredentials", "InvalidShare"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this AzureStorageInfoValue.

        Type of storage.

        :return: The type of this AzureStorageInfoValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AzureStorageInfoValue.

        Type of storage.

        :param type: The type of this AzureStorageInfoValue.
        :type type: str
        """
        allowed_values = ["AzureFiles", "AzureBlob"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
