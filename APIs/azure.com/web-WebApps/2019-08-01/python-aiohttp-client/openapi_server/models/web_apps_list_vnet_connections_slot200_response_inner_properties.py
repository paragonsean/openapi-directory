# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_apps_list_vnet_connections_slot200_response_inner_properties_routes_inner import WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner
from openapi_server import util


class WebAppsListVnetConnectionsSlot200ResponseInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_blob: str=None, cert_thumbprint: str=None, dns_servers: str=None, is_swift: bool=None, resync_required: bool=None, routes: List[WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner]=None, vnet_resource_id: str=None):
        """WebAppsListVnetConnectionsSlot200ResponseInnerProperties - a model defined in OpenAPI

        :param cert_blob: The cert_blob of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param cert_thumbprint: The cert_thumbprint of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param dns_servers: The dns_servers of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param is_swift: The is_swift of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param resync_required: The resync_required of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param routes: The routes of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :param vnet_resource_id: The vnet_resource_id of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        """
        self.openapi_types = {
            'cert_blob': str,
            'cert_thumbprint': str,
            'dns_servers': str,
            'is_swift': bool,
            'resync_required': bool,
            'routes': List[WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner],
            'vnet_resource_id': str
        }

        self.attribute_map = {
            'cert_blob': 'certBlob',
            'cert_thumbprint': 'certThumbprint',
            'dns_servers': 'dnsServers',
            'is_swift': 'isSwift',
            'resync_required': 'resyncRequired',
            'routes': 'routes',
            'vnet_resource_id': 'vnetResourceId'
        }

        self._cert_blob = cert_blob
        self._cert_thumbprint = cert_thumbprint
        self._dns_servers = dns_servers
        self._is_swift = is_swift
        self._resync_required = resync_required
        self._routes = routes
        self._vnet_resource_id = vnet_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAppsListVnetConnectionsSlot200ResponseInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebApps_ListVnetConnectionsSlot_200_response_inner_properties of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_blob(self):
        """Gets the cert_blob of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        A certificate file (.cer) blob containing the public key of the private key used to authenticate a  Point-To-Site VPN connection.

        :return: The cert_blob of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: str
        """
        return self._cert_blob

    @cert_blob.setter
    def cert_blob(self, cert_blob):
        """Sets the cert_blob of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        A certificate file (.cer) blob containing the public key of the private key used to authenticate a  Point-To-Site VPN connection.

        :param cert_blob: The cert_blob of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type cert_blob: str
        """

        self._cert_blob = cert_blob

    @property
    def cert_thumbprint(self):
        """Gets the cert_thumbprint of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The client certificate thumbprint.

        :return: The cert_thumbprint of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: str
        """
        return self._cert_thumbprint

    @cert_thumbprint.setter
    def cert_thumbprint(self, cert_thumbprint):
        """Sets the cert_thumbprint of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The client certificate thumbprint.

        :param cert_thumbprint: The cert_thumbprint of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type cert_thumbprint: str
        """

        self._cert_thumbprint = cert_thumbprint

    @property
    def dns_servers(self):
        """Gets the dns_servers of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.

        :return: The dns_servers of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: str
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.

        :param dns_servers: The dns_servers of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type dns_servers: str
        """

        self._dns_servers = dns_servers

    @property
    def is_swift(self):
        """Gets the is_swift of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        Flag that is used to denote if this is VNET injection

        :return: The is_swift of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: bool
        """
        return self._is_swift

    @is_swift.setter
    def is_swift(self, is_swift):
        """Sets the is_swift of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        Flag that is used to denote if this is VNET injection

        :param is_swift: The is_swift of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type is_swift: bool
        """

        self._is_swift = is_swift

    @property
    def resync_required(self):
        """Gets the resync_required of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        <code>true</code> if a resync is required; otherwise, <code>false</code>.

        :return: The resync_required of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: bool
        """
        return self._resync_required

    @resync_required.setter
    def resync_required(self, resync_required):
        """Sets the resync_required of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        <code>true</code> if a resync is required; otherwise, <code>false</code>.

        :param resync_required: The resync_required of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type resync_required: bool
        """

        self._resync_required = resync_required

    @property
    def routes(self):
        """Gets the routes of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The routes that this Virtual Network connection uses.

        :return: The routes of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: List[WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The routes that this Virtual Network connection uses.

        :param routes: The routes of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type routes: List[WebAppsListVnetConnectionsSlot200ResponseInnerPropertiesRoutesInner]
        """

        self._routes = routes

    @property
    def vnet_resource_id(self):
        """Gets the vnet_resource_id of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The Virtual Network's resource ID.

        :return: The vnet_resource_id of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :rtype: str
        """
        return self._vnet_resource_id

    @vnet_resource_id.setter
    def vnet_resource_id(self, vnet_resource_id):
        """Sets the vnet_resource_id of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.

        The Virtual Network's resource ID.

        :param vnet_resource_id: The vnet_resource_id of this WebAppsListVnetConnectionsSlot200ResponseInnerProperties.
        :type vnet_resource_id: str
        """

        self._vnet_resource_id = vnet_resource_id
