/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AzureStoragePropertyDictionaryResource from '../model/AzureStoragePropertyDictionaryResource';
import BackupItem from '../model/BackupItem';
import BackupItemCollection from '../model/BackupItemCollection';
import BackupRequest from '../model/BackupRequest';
import ConnectionStringDictionary from '../model/ConnectionStringDictionary';
import ContinuousWebJob from '../model/ContinuousWebJob';
import ContinuousWebJobCollection from '../model/ContinuousWebJobCollection';
import CsmCopySlotEntity from '../model/CsmCopySlotEntity';
import CsmPublishingProfileOptions from '../model/CsmPublishingProfileOptions';
import CsmSlotEntity from '../model/CsmSlotEntity';
import CustomHostnameAnalysisResult from '../model/CustomHostnameAnalysisResult';
import DeletedAppRestoreRequest from '../model/DeletedAppRestoreRequest';
import Deployment from '../model/Deployment';
import DeploymentCollection from '../model/DeploymentCollection';
import FunctionEnvelope from '../model/FunctionEnvelope';
import FunctionEnvelopeCollection from '../model/FunctionEnvelopeCollection';
import FunctionSecrets from '../model/FunctionSecrets';
import HostKeys from '../model/HostKeys';
import HostNameBinding from '../model/HostNameBinding';
import HostNameBindingCollection from '../model/HostNameBindingCollection';
import KeyInfo from '../model/KeyInfo';
import KeyVaultReferenceCollection from '../model/KeyVaultReferenceCollection';
import KeyVaultReferenceResource from '../model/KeyVaultReferenceResource';
import MSDeploy from '../model/MSDeploy';
import MSDeployLog from '../model/MSDeployLog';
import MSDeployStatus from '../model/MSDeployStatus';
import MigrateMySqlRequest from '../model/MigrateMySqlRequest';
import MigrateMySqlStatus from '../model/MigrateMySqlStatus';
import NetworkFeatures from '../model/NetworkFeatures';
import NetworkTrace from '../model/NetworkTrace';
import PerfMonCounterCollection from '../model/PerfMonCounterCollection';
import PremierAddOn from '../model/PremierAddOn';
import PremierAddOnPatchResource from '../model/PremierAddOnPatchResource';
import PrivateAccess from '../model/PrivateAccess';
import ProcessInfo from '../model/ProcessInfo';
import ProcessInfoCollection from '../model/ProcessInfoCollection';
import ProcessModuleInfo from '../model/ProcessModuleInfo';
import ProcessModuleInfoCollection from '../model/ProcessModuleInfoCollection';
import ProcessThreadInfoCollection from '../model/ProcessThreadInfoCollection';
import PublicCertificate from '../model/PublicCertificate';
import PublicCertificateCollection from '../model/PublicCertificateCollection';
import RelayServiceConnectionEntity from '../model/RelayServiceConnectionEntity';
import RestoreRequest from '../model/RestoreRequest';
import SiteAuthSettings from '../model/SiteAuthSettings';
import SiteCloneability from '../model/SiteCloneability';
import SiteConfigResource from '../model/SiteConfigResource';
import SiteConfigResourceCollection from '../model/SiteConfigResourceCollection';
import SiteConfigurationSnapshotInfoCollection from '../model/SiteConfigurationSnapshotInfoCollection';
import SiteExtensionInfo from '../model/SiteExtensionInfo';
import SiteExtensionInfoCollection from '../model/SiteExtensionInfoCollection';
import SiteLogsConfig from '../model/SiteLogsConfig';
import SitePatchResource from '../model/SitePatchResource';
import SitePhpErrorLogFlag from '../model/SitePhpErrorLogFlag';
import SiteSourceControl from '../model/SiteSourceControl';
import SlotConfigNamesResource from '../model/SlotConfigNamesResource';
import SlotDifferenceCollection from '../model/SlotDifferenceCollection';
import SnapshotCollection from '../model/SnapshotCollection';
import SnapshotRestoreRequest from '../model/SnapshotRestoreRequest';
import StorageMigrationOptions from '../model/StorageMigrationOptions';
import StorageMigrationResponse from '../model/StorageMigrationResponse';
import StringDictionary from '../model/StringDictionary';
import SwiftVirtualNetwork from '../model/SwiftVirtualNetwork';
import TriggeredJobHistory from '../model/TriggeredJobHistory';
import TriggeredJobHistoryCollection from '../model/TriggeredJobHistoryCollection';
import TriggeredWebJob from '../model/TriggeredWebJob';
import TriggeredWebJobCollection from '../model/TriggeredWebJobCollection';
import WebAppInstanceCollection from '../model/WebAppInstanceCollection';
import WebAppsGet200Response from '../model/WebAppsGet200Response';
import WebAppsGetDomainOwnershipIdentifier200Response from '../model/WebAppsGetDomainOwnershipIdentifier200Response';
import WebAppsGetHybridConnection200Response from '../model/WebAppsGetHybridConnection200Response';
import WebAppsGetVnetConnectionGatewaySlot200Response from '../model/WebAppsGetVnetConnectionGatewaySlot200Response';
import WebAppsGetVnetConnectionSlot200Response from '../model/WebAppsGetVnetConnectionSlot200Response';
import WebAppsList200Response from '../model/WebAppsList200Response';
import WebAppsListDefaultResponse from '../model/WebAppsListDefaultResponse';
import WebAppsListDomainOwnershipIdentifiers200Response from '../model/WebAppsListDomainOwnershipIdentifiers200Response';
import WebAppsListPublishingCredentials200Response from '../model/WebAppsListPublishingCredentials200Response';
import WebAppsListUsagesSlot200Response from '../model/WebAppsListUsagesSlot200Response';
import WebAppsListVnetConnectionsSlot200ResponseInner from '../model/WebAppsListVnetConnectionsSlot200ResponseInner';
import WebAppsMigrateMySql200Response from '../model/WebAppsMigrateMySql200Response';
import WebAppsUpdateSitePushSettingsRequest from '../model/WebAppsUpdateSitePushSettingsRequest';
import WebJob from '../model/WebJob';
import WebJobCollection from '../model/WebJobCollection';
import WebSiteInstanceStatus from '../model/WebSiteInstanceStatus';

/**
* WebApps service.
* @module api/WebAppsApi
* @version 2019-08-01
*/
export default class WebAppsApi {

    /**
    * Constructs a new WebAppsApi. 
    * @alias module:api/WebAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webAppsAddPremierAddOn operation.
     * @callback module:api/WebAppsApi~webAppsAddPremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOn} premierAddOn A JSON representation of the edited premier add-on.
     * @param {module:api/WebAppsApi~webAppsAddPremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsAddPremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsAddPremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsAddPremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsAddPremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsAddPremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsAddPremierAddOn");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling webAppsAddPremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsAddPremierAddOnSlot operation.
     * @callback module:api/WebAppsApi~webAppsAddPremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOn} premierAddOn A JSON representation of the edited premier add-on.
     * @param {module:api/WebAppsApi~webAppsAddPremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsAddPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsAddPremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling webAppsAddPremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsAnalyzeCustomHostname operation.
     * @callback module:api/WebAppsApi~webAppsAnalyzeCustomHostnameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomHostnameAnalysisResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a custom hostname.
     * Description for Analyze a custom hostname.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [hostName] Custom hostname.
     * @param {module:api/WebAppsApi~webAppsAnalyzeCustomHostnameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomHostnameAnalysisResult}
     */
    webAppsAnalyzeCustomHostname(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsAnalyzeCustomHostname");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsAnalyzeCustomHostname");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsAnalyzeCustomHostname");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsAnalyzeCustomHostname");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'hostName': opts['hostName'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomHostnameAnalysisResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsAnalyzeCustomHostnameSlot operation.
     * @callback module:api/WebAppsApi~webAppsAnalyzeCustomHostnameSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomHostnameAnalysisResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a custom hostname.
     * Description for Analyze a custom hostname.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [hostName] Custom hostname.
     * @param {module:api/WebAppsApi~webAppsAnalyzeCustomHostnameSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomHostnameAnalysisResult}
     */
    webAppsAnalyzeCustomHostnameSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsAnalyzeCustomHostnameSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsAnalyzeCustomHostnameSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsAnalyzeCustomHostnameSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsAnalyzeCustomHostnameSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsAnalyzeCustomHostnameSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'hostName': opts['hostName'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomHostnameAnalysisResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsApplySlotConfigToProduction operation.
     * @callback module:api/WebAppsApi~webAppsApplySlotConfigToProductionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsApplySlotConfigToProductionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsApplySlotConfigToProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsApplySlotConfigToProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsApplySlotConfigToProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsApplySlotConfigToProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsApplySlotConfigToProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsApplySlotConfigToProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsApplySlotConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsApplySlotConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsApplySlotConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsApplySlotConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsApplySlotConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsApplySlotConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsApplySlotConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsApplySlotConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsApplySlotConfigurationSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsApplySlotConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsBackup operation.
     * @callback module:api/WebAppsApi~webAppsBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a backup of an app.
     * Description for Creates a backup of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Backup configuration. You can use the JSON response from the POST action as input here.
     * @param {module:api/WebAppsApi~webAppsBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsBackup(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsBackup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsBackup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsBackup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsBackup");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsBackup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsBackupSlot operation.
     * @callback module:api/WebAppsApi~webAppsBackupSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a backup of an app.
     * Description for Creates a backup of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Backup configuration. You can use the JSON response from the POST action as input here.
     * @param {module:api/WebAppsApi~webAppsBackupSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsBackupSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsBackupSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsBackupSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsBackupSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsBackupSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsBackupSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsBackupSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCopyProductionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCopyProductionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies a deployment slot to another deployment slot of an app.
     * Description for Copies a deployment slot to another deployment slot of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmCopySlotEntity} copySlotEntity JSON object that contains the target slot name and site config properties to override the source slot config. See example.
     * @param {module:api/WebAppsApi~webAppsCopyProductionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsCopyProductionSlot(resourceGroupName, name, subscriptionId, apiVersion, copySlotEntity, callback) {
      let postBody = copySlotEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCopyProductionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCopyProductionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCopyProductionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCopyProductionSlot");
      }
      // verify the required parameter 'copySlotEntity' is set
      if (copySlotEntity === undefined || copySlotEntity === null) {
        throw new Error("Missing the required parameter 'copySlotEntity' when calling webAppsCopyProductionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCopySlotSlot operation.
     * @callback module:api/WebAppsApi~webAppsCopySlotSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies a deployment slot to another deployment slot of an app.
     * Description for Copies a deployment slot to another deployment slot of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmCopySlotEntity} copySlotEntity JSON object that contains the target slot name and site config properties to override the source slot config. See example.
     * @param {module:api/WebAppsApi~webAppsCopySlotSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsCopySlotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, copySlotEntity, callback) {
      let postBody = copySlotEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCopySlotSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCopySlotSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCopySlotSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCopySlotSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCopySlotSlot");
      }
      // verify the required parameter 'copySlotEntity' is set
      if (copySlotEntity === undefined || copySlotEntity === null) {
        throw new Error("Missing the required parameter 'copySlotEntity' when calling webAppsCopySlotSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateDeployment operation.
     * @callback module:api/WebAppsApi~webAppsCreateDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment for an app, or a deployment slot.
     * Description for Create a deployment for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id ID of an existing deployment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Deployment details.
     * @param {module:api/WebAppsApi~webAppsCreateDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsCreateDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsCreateDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling webAppsCreateDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateDeploymentSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment for an app, or a deployment slot.
     * Description for Create a deployment for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id ID of an existing deployment.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Deployment details.
     * @param {module:api/WebAppsApi~webAppsCreateDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsCreateDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateDeploymentSlot");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling webAppsCreateDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateFunction operation.
     * @callback module:api/WebAppsApi~webAppsCreateFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create function for web site, or a deployment slot.
     * Description for Create function for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/FunctionEnvelope} functionEnvelope Function details.
     * @param {module:api/WebAppsApi~webAppsCreateFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelope}
     */
    webAppsCreateFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope, callback) {
      let postBody = functionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateFunction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateFunction");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsCreateFunction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateFunction");
      }
      // verify the required parameter 'functionEnvelope' is set
      if (functionEnvelope === undefined || functionEnvelope === null) {
        throw new Error("Missing the required parameter 'functionEnvelope' when calling webAppsCreateFunction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelope;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateInstanceFunctionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateInstanceFunctionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create function for web site, or a deployment slot.
     * Description for Create function for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/FunctionEnvelope} functionEnvelope Function details.
     * @param {module:api/WebAppsApi~webAppsCreateInstanceFunctionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelope}
     */
    webAppsCreateInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope, callback) {
      let postBody = functionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceFunctionSlot");
      }
      // verify the required parameter 'functionEnvelope' is set
      if (functionEnvelope === undefined || functionEnvelope === null) {
        throw new Error("Missing the required parameter 'functionEnvelope' when calling webAppsCreateInstanceFunctionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelope;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateInstanceMSDeployOperation operation.
     * @callback module:api/WebAppsApi~webAppsCreateInstanceMSDeployOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/MSDeploy} mSDeploy Details of MSDeploy operation
     * @param {module:api/WebAppsApi~webAppsCreateInstanceMSDeployOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsCreateInstanceMSDeployOperation(resourceGroupName, name, instanceId, subscriptionId, apiVersion, mSDeploy, callback) {
      let postBody = mSDeploy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceMSDeployOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateInstanceMSDeployOperation");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsCreateInstanceMSDeployOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceMSDeployOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceMSDeployOperation");
      }
      // verify the required parameter 'mSDeploy' is set
      if (mSDeploy === undefined || mSDeploy === null) {
        throw new Error("Missing the required parameter 'mSDeploy' when calling webAppsCreateInstanceMSDeployOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateInstanceMSDeployOperationSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateInstanceMSDeployOperationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/MSDeploy} mSDeploy Details of MSDeploy operation
     * @param {module:api/WebAppsApi~webAppsCreateInstanceMSDeployOperationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsCreateInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, mSDeploy, callback) {
      let postBody = mSDeploy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }
      // verify the required parameter 'mSDeploy' is set
      if (mSDeploy === undefined || mSDeploy === null) {
        throw new Error("Missing the required parameter 'mSDeploy' when calling webAppsCreateInstanceMSDeployOperationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateMSDeployOperation operation.
     * @callback module:api/WebAppsApi~webAppsCreateMSDeployOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/MSDeploy} mSDeploy Details of MSDeploy operation
     * @param {module:api/WebAppsApi~webAppsCreateMSDeployOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsCreateMSDeployOperation(resourceGroupName, name, subscriptionId, apiVersion, mSDeploy, callback) {
      let postBody = mSDeploy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateMSDeployOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateMSDeployOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateMSDeployOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateMSDeployOperation");
      }
      // verify the required parameter 'mSDeploy' is set
      if (mSDeploy === undefined || mSDeploy === null) {
        throw new Error("Missing the required parameter 'mSDeploy' when calling webAppsCreateMSDeployOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateMSDeployOperationSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateMSDeployOperationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/MSDeploy} mSDeploy Details of MSDeploy operation
     * @param {module:api/WebAppsApi~webAppsCreateMSDeployOperationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsCreateMSDeployOperationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, mSDeploy, callback) {
      let postBody = mSDeploy;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateMSDeployOperationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateMSDeployOperationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateMSDeployOperationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateMSDeployOperationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateMSDeployOperationSlot");
      }
      // verify the required parameter 'mSDeploy' is set
      if (mSDeploy === undefined || mSDeploy === null) {
        throw new Error("Missing the required parameter 'mSDeploy' when calling webAppsCreateMSDeployOperationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdate operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGet200Response} siteEnvelope A JSON representation of the app properties. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, callback) {
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdate");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling webAppsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfigResource} siteConfig JSON representation of a SiteConfig object. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsCreateOrUpdateConfiguration(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateConfiguration");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling webAppsCreateOrUpdateConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfigResource} siteConfig JSON representation of a SiteConfig object. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsCreateOrUpdateConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateConfigurationSlot");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling webAppsCreateOrUpdateConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateDomainOwnershipIdentifier operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateDomainOwnershipIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateDomainOwnershipIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsCreateOrUpdateDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, callback) {
      let postBody = domainOwnershipIdentifier;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifier' is set
      if (domainOwnershipIdentifier === undefined || domainOwnershipIdentifier === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsCreateOrUpdateDomainOwnershipIdentifier");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateDomainOwnershipIdentifierSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateDomainOwnershipIdentifierSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateDomainOwnershipIdentifierSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, callback) {
      let postBody = domainOwnershipIdentifier;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifier' is set
      if (domainOwnershipIdentifier === undefined || domainOwnershipIdentifier === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsCreateOrUpdateDomainOwnershipIdentifierSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateFunctionSecret operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateFunctionSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update a function secret.
     * Description for Add or update a function secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName The name of the function.
     * @param {String} keyName The name of the key.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/KeyInfo} key The key to create or update
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateFunctionSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyInfo}
     */
    webAppsCreateOrUpdateFunctionSecret(resourceGroupName, name, functionName, keyName, subscriptionId, apiVersion, key, callback) {
      let postBody = key;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateFunctionSecret");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling webAppsCreateOrUpdateFunctionSecret");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'keyName': keyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateFunctionSecretSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateFunctionSecretSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update a function secret.
     * Description for Add or update a function secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName The name of the function.
     * @param {String} keyName The name of the key.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/KeyInfo} key The key to create or update
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateFunctionSecretSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyInfo}
     */
    webAppsCreateOrUpdateFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot, subscriptionId, apiVersion, key, callback) {
      let postBody = key;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling webAppsCreateOrUpdateFunctionSecretSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'keyName': keyName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHostNameBinding operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/HostNameBinding} hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    webAppsCreateOrUpdateHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, callback) {
      let postBody = hostNameBinding;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsCreateOrUpdateHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostNameBinding");
      }
      // verify the required parameter 'hostNameBinding' is set
      if (hostNameBinding === undefined || hostNameBinding === null) {
        throw new Error("Missing the required parameter 'hostNameBinding' when calling webAppsCreateOrUpdateHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHostNameBindingSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/HostNameBinding} hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    webAppsCreateOrUpdateHostNameBindingSlot(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, callback) {
      let postBody = hostNameBinding;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }
      // verify the required parameter 'hostNameBinding' is set
      if (hostNameBinding === undefined || hostNameBinding === null) {
        throw new Error("Missing the required parameter 'hostNameBinding' when calling webAppsCreateOrUpdateHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHostSecret operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHostSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update a host level secret.
     * Description for Add or update a host level secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} keyType The type of host key.
     * @param {String} keyName The name of the key.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/KeyInfo} key The key to create or update
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHostSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyInfo}
     */
    webAppsCreateOrUpdateHostSecret(resourceGroupName, name, keyType, keyName, subscriptionId, apiVersion, key, callback) {
      let postBody = key;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'keyType' is set
      if (keyType === undefined || keyType === null) {
        throw new Error("Missing the required parameter 'keyType' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostSecret");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling webAppsCreateOrUpdateHostSecret");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'keyType': keyType,
        'keyName': keyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHostSecretSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHostSecretSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update a host level secret.
     * Description for Add or update a host level secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} keyType The type of host key.
     * @param {String} keyName The name of the key.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/KeyInfo} key The key to create or update
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHostSecretSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyInfo}
     */
    webAppsCreateOrUpdateHostSecretSlot(resourceGroupName, name, keyType, keyName, slot, subscriptionId, apiVersion, key, callback) {
      let postBody = key;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'keyType' is set
      if (keyType === undefined || keyType === null) {
        throw new Error("Missing the required parameter 'keyType' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHostSecretSlot");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling webAppsCreateOrUpdateHostSecretSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'keyType': keyType,
        'keyName': keyName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHybridConnection operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetHybridConnection200Response} connectionEnvelope The details of the hybrid connection.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsCreateOrUpdateHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHybridConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateHybridConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateHybridConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetHybridConnection200Response} connectionEnvelope The details of the hybrid connection.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateHybridConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsCreateOrUpdateHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateHybridConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdatePublicCertificate operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdatePublicCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PublicCertificate} publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdatePublicCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificate}
     */
    webAppsCreateOrUpdatePublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate, callback) {
      let postBody = publicCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdatePublicCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdatePublicCertificate");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsCreateOrUpdatePublicCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdatePublicCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdatePublicCertificate");
      }
      // verify the required parameter 'publicCertificate' is set
      if (publicCertificate === undefined || publicCertificate === null) {
        throw new Error("Missing the required parameter 'publicCertificate' when calling webAppsCreateOrUpdatePublicCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'publicCertificateName': publicCertificateName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdatePublicCertificateSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdatePublicCertificateSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PublicCertificate} publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdatePublicCertificateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificate}
     */
    webAppsCreateOrUpdatePublicCertificateSlot(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate, callback) {
      let postBody = publicCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }
      // verify the required parameter 'publicCertificate' is set
      if (publicCertificate === undefined || publicCertificate === null) {
        throw new Error("Missing the required parameter 'publicCertificate' when calling webAppsCreateOrUpdatePublicCertificateSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'publicCertificateName': publicCertificateName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateRelayServiceConnection operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope Details of the hybrid connection configuration.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsCreateOrUpdateRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateRelayServiceConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope Details of the hybrid connection configuration.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsCreateOrUpdateRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
     * @param {String} slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGet200Response} siteEnvelope A JSON representation of the app properties. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsCreateOrUpdateSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, callback) {
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSlot");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling webAppsCreateOrUpdateSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateSourceControl operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsCreateOrUpdateSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSourceControl");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling webAppsCreateOrUpdateSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateSourceControlSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsCreateOrUpdateSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSourceControlSlot");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling webAppsCreateOrUpdateSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateSwiftVirtualNetworkConnection operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateSwiftVirtualNetworkConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SwiftVirtualNetwork} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateSwiftVirtualNetworkConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsCreateOrUpdateSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SwiftVirtualNetwork} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateVnetConnection operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of an existing Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsCreateOrUpdateVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateVnetConnectionGateway operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsCreateOrUpdateVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateVnetConnectionGatewaySlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsCreateOrUpdateVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsCreateOrUpdateVnetConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of an existing Virtual Network.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsCreateOrUpdateVnetConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsCreateOrUpdateVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsCreateOrUpdateVnetConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDelete operation.
     * @callback module:api/WebAppsApi~webAppsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app to delete.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteMetrics] If true, web app metrics are also deleted.
     * @param {Boolean} [deleteEmptyServerFarm] Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted.
     * @param {module:api/WebAppsApi~webAppsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDelete(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'deleteMetrics': opts['deleteMetrics'],
        'deleteEmptyServerFarm': opts['deleteEmptyServerFarm'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteBackup operation.
     * @callback module:api/WebAppsApi~webAppsDeleteBackupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a backup of an app by its ID.
     * Description for Deletes a backup of an app by its ID.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteBackupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteBackup(resourceGroupName, name, backupId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteBackup");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsDeleteBackup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteBackupConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsDeleteBackupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the backup configuration of an app.
     * Description for Deletes the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteBackupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteBackupConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteBackupConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteBackupConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the backup configuration of an app.
     * Description for Deletes the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteBackupConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteBackupConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteBackupConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteBackupSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteBackupSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a backup of an app by its ID.
     * Description for Deletes a backup of an app by its ID.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteBackupSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteBackupSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteBackupSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteBackupSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsDeleteBackupSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteBackupSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteBackupSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteBackupSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteContinuousWebJob operation.
     * @callback module:api/WebAppsApi~webAppsDeleteContinuousWebJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteContinuousWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteContinuousWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteContinuousWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsDeleteContinuousWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteContinuousWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteContinuousWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteContinuousWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteContinuousWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteContinuousWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteContinuousWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteContinuousWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsDeleteContinuousWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteContinuousWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteContinuousWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteContinuousWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteDeployment operation.
     * @callback module:api/WebAppsApi~webAppsDeleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id Deployment ID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsDeleteDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteDeploymentSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id Deployment ID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsDeleteDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteDomainOwnershipIdentifier operation.
     * @callback module:api/WebAppsApi~webAppsDeleteDomainOwnershipIdentifierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a domain ownership identifier for a web app.
     * Description for Deletes a domain ownership identifier for a web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteDomainOwnershipIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDomainOwnershipIdentifier");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsDeleteDomainOwnershipIdentifier");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDomainOwnershipIdentifier");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteDomainOwnershipIdentifier");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteDomainOwnershipIdentifierSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteDomainOwnershipIdentifierSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a domain ownership identifier for a web app.
     * Description for Deletes a domain ownership identifier for a web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteDomainOwnershipIdentifierSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteDomainOwnershipIdentifierSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteFunction operation.
     * @callback module:api/WebAppsApi~webAppsDeleteFunctionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a function for web site, or a deployment slot.
     * Description for Delete a function for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteFunction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteFunction");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsDeleteFunction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteFunction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteFunctionSecret operation.
     * @callback module:api/WebAppsApi~webAppsDeleteFunctionSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a function secret.
     * Description for Delete a function secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName The name of the function.
     * @param {String} keyName The name of the key.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteFunctionSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteFunctionSecret(resourceGroupName, name, functionName, keyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteFunctionSecret");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteFunctionSecret");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsDeleteFunctionSecret");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsDeleteFunctionSecret");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteFunctionSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteFunctionSecret");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'keyName': keyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteFunctionSecretSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteFunctionSecretSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a function secret.
     * Description for Delete a function secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName The name of the function.
     * @param {String} keyName The name of the key.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteFunctionSecretSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteFunctionSecretSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteFunctionSecretSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'keyName': keyName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHostNameBinding operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsDeleteHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHostNameBindingSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsDeleteHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHostSecret operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHostSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a host level secret.
     * Description for Delete a host level secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} keyType The type of host key.
     * @param {String} keyName The name of the key.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHostSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHostSecret(resourceGroupName, name, keyType, keyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostSecret");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHostSecret");
      }
      // verify the required parameter 'keyType' is set
      if (keyType === undefined || keyType === null) {
        throw new Error("Missing the required parameter 'keyType' when calling webAppsDeleteHostSecret");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsDeleteHostSecret");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostSecret");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'keyType': keyType,
        'keyName': keyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHostSecretSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHostSecretSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a host level secret.
     * Description for Delete a host level secret.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} keyType The type of host key.
     * @param {String} keyName The name of the key.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHostSecretSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHostSecretSlot(resourceGroupName, name, keyType, keyName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'keyType' is set
      if (keyType === undefined || keyType === null) {
        throw new Error("Missing the required parameter 'keyType' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHostSecretSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHostSecretSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'keyType': keyType,
        'keyName': keyName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHybridConnection operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a Hybrid Connection from this site.
     * Description for Removes a Hybrid Connection from this site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsDeleteHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsDeleteHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteHybridConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteHybridConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a Hybrid Connection from this site.
     * Description for Removes a Hybrid Connection from this site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteHybridConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteHybridConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteHybridConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteInstanceFunctionSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteInstanceFunctionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a function for web site, or a deployment slot.
     * Description for Delete a function for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteInstanceFunctionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceFunctionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteInstanceFunctionSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsDeleteInstanceFunctionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteInstanceFunctionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceFunctionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceFunctionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteInstanceProcess operation.
     * @callback module:api/WebAppsApi~webAppsDeleteInstanceProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteInstanceProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteInstanceProcess(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceProcess");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteInstanceProcess");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsDeleteInstanceProcess");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsDeleteInstanceProcess");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceProcess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceProcess");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteInstanceProcessSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteInstanceProcessSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteInstanceProcessSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteInstanceProcessSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteInstanceProcessSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeletePremierAddOn operation.
     * @callback module:api/WebAppsApi~webAppsDeletePremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a premier add-on from an app.
     * Description for Delete a premier add-on from an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeletePremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeletePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeletePremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsDeletePremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeletePremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeletePremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeletePremierAddOnSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeletePremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a premier add-on from an app.
     * Description for Delete a premier add-on from an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeletePremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeletePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeletePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsDeletePremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeletePremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeletePremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeletePremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteProcess operation.
     * @callback module:api/WebAppsApi~webAppsDeleteProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteProcess(resourceGroupName, name, processId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteProcess");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteProcess");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsDeleteProcess");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteProcess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteProcess");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteProcessSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteProcessSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteProcessSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteProcessSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteProcessSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteProcessSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsDeleteProcessSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteProcessSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteProcessSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteProcessSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeletePublicCertificate operation.
     * @callback module:api/WebAppsApi~webAppsDeletePublicCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeletePublicCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeletePublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePublicCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeletePublicCertificate");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsDeletePublicCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeletePublicCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeletePublicCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'publicCertificateName': publicCertificateName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeletePublicCertificateSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeletePublicCertificateSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeletePublicCertificateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeletePublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeletePublicCertificateSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeletePublicCertificateSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeletePublicCertificateSlot");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsDeletePublicCertificateSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeletePublicCertificateSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeletePublicCertificateSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'publicCertificateName': publicCertificateName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteRelayServiceConnection operation.
     * @callback module:api/WebAppsApi~webAppsDeleteRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a relay service connection by its name.
     * Description for Deletes a relay service connection by its name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsDeleteRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteRelayServiceConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a relay service connection by its name.
     * Description for Deletes a relay service connection by its name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsDeleteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSiteExtension operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSiteExtensionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Description for Remove a site extension from a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSiteExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSiteExtension");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSiteExtension");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsDeleteSiteExtension");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSiteExtension");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSiteExtension");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSiteExtensionSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSiteExtensionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Description for Remove a site extension from a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSiteExtensionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSiteExtensionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSiteExtensionSlot");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsDeleteSiteExtensionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteSiteExtensionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSiteExtensionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSiteExtensionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app to delete.
     * @param {String} slot Name of the deployment slot to delete. By default, the API deletes the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteMetrics] If true, web app metrics are also deleted.
     * @param {Boolean} [deleteEmptyServerFarm] Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
     * @param {module:api/WebAppsApi~webAppsDeleteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'deleteMetrics': opts['deleteMetrics'],
        'deleteEmptyServerFarm': opts['deleteEmptyServerFarm'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSourceControl operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSourceControlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the source control configuration of an app.
     * Description for Deletes the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSourceControlSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the source control configuration of an app.
     * Description for Deletes the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSwiftVirtualNetwork operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSwiftVirtualNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSwiftVirtualNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSwiftVirtualNetwork(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSwiftVirtualNetwork");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSwiftVirtualNetwork");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSwiftVirtualNetwork");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSwiftVirtualNetwork");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteSwiftVirtualNetworkSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteSwiftVirtualNetworkSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteSwiftVirtualNetworkSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteSwiftVirtualNetworkSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteSwiftVirtualNetworkSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteSwiftVirtualNetworkSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteSwiftVirtualNetworkSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteSwiftVirtualNetworkSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteSwiftVirtualNetworkSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteTriggeredWebJob operation.
     * @callback module:api/WebAppsApi~webAppsDeleteTriggeredWebJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteTriggeredWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteTriggeredWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteTriggeredWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsDeleteTriggeredWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteTriggeredWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteTriggeredWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteTriggeredWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteTriggeredWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes web job for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteTriggeredWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteTriggeredWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteTriggeredWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsDeleteTriggeredWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteTriggeredWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteTriggeredWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteTriggeredWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteVnetConnection operation.
     * @callback module:api/WebAppsApi~webAppsDeleteVnetConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the virtual network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteVnetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteVnetConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteVnetConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsDeleteVnetConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteVnetConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteVnetConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDeleteVnetConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsDeleteVnetConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the virtual network.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsDeleteVnetConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsDeleteVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDeleteVnetConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDeleteVnetConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsDeleteVnetConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDeleteVnetConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDeleteVnetConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDeleteVnetConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDiscoverBackup operation.
     * @callback module:api/WebAppsApi~webAppsDiscoverBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
     * @param {module:api/WebAppsApi~webAppsDiscoverBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreRequest}
     */
    webAppsDiscoverBackup(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDiscoverBackup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDiscoverBackup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDiscoverBackup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDiscoverBackup");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsDiscoverBackup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestoreRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsDiscoverBackupSlot operation.
     * @callback module:api/WebAppsApi~webAppsDiscoverBackupSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
     * @param {module:api/WebAppsApi~webAppsDiscoverBackupSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreRequest}
     */
    webAppsDiscoverBackupSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsDiscoverBackupSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsDiscoverBackupSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsDiscoverBackupSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsDiscoverBackupSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsDiscoverBackupSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsDiscoverBackupSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestoreRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGenerateNewSitePublishingPassword operation.
     * @callback module:api/WebAppsApi~webAppsGenerateNewSitePublishingPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGenerateNewSitePublishingPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsGenerateNewSitePublishingPassword(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGenerateNewSitePublishingPassword");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGenerateNewSitePublishingPasswordSlot operation.
     * @callback module:api/WebAppsApi~webAppsGenerateNewSitePublishingPasswordSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGenerateNewSitePublishingPasswordSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsGenerateNewSitePublishingPasswordSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGenerateNewSitePublishingPasswordSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGet operation.
     * @callback module:api/WebAppsApi~webAppsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a web, mobile, or API app.
     * Description for Gets the details of a web, mobile, or API app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsGet(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetAppSettingKeyVaultReference operation.
     * @callback module:api/WebAppsApi~webAppsGetAppSettingKeyVaultReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyVaultReferenceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the config reference and status of an app
     * Description for Gets the config reference and status of an app
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} appSettingKey App Setting key name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetAppSettingKeyVaultReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyVaultReferenceResource}
     */
    webAppsGetAppSettingKeyVaultReference(resourceGroupName, name, appSettingKey, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetAppSettingKeyVaultReference");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetAppSettingKeyVaultReference");
      }
      // verify the required parameter 'appSettingKey' is set
      if (appSettingKey === undefined || appSettingKey === null) {
        throw new Error("Missing the required parameter 'appSettingKey' when calling webAppsGetAppSettingKeyVaultReference");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetAppSettingKeyVaultReference");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetAppSettingKeyVaultReference");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'appSettingKey': appSettingKey,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyVaultReferenceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings/{appSettingKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetAppSettingsKeyVaultReferences operation.
     * @callback module:api/WebAppsApi~webAppsGetAppSettingsKeyVaultReferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyVaultReferenceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the config reference app settings and status of an app
     * Description for Gets the config reference app settings and status of an app
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetAppSettingsKeyVaultReferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyVaultReferenceCollection}
     */
    webAppsGetAppSettingsKeyVaultReferences(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetAppSettingsKeyVaultReferences");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetAppSettingsKeyVaultReferences");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetAppSettingsKeyVaultReferences");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetAppSettingsKeyVaultReferences");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyVaultReferenceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetAuthSettings operation.
     * @callback module:api/WebAppsApi~webAppsGetAuthSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Description for Gets the Authentication/Authorization settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetAuthSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    webAppsGetAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetAuthSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetAuthSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetAuthSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetAuthSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetAuthSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetAuthSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Description for Gets the Authentication/Authorization settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetAuthSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    webAppsGetAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetAuthSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetAuthSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetAuthSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetAuthSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetAuthSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetBackupConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsGetBackupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the backup configuration of an app.
     * Description for Gets the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetBackupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    webAppsGetBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetBackupConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetBackupConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetBackupConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetBackupConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the backup configuration of an app.
     * Description for Gets the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetBackupConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    webAppsGetBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetBackupConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetBackupConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetBackupConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetBackupStatus operation.
     * @callback module:api/WebAppsApi~webAppsGetBackupStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a backup of an app by its ID.
     * Description for Gets a backup of an app by its ID.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetBackupStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsGetBackupStatus(resourceGroupName, name, backupId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetBackupStatus");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsGetBackupStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetBackupStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetBackupStatusSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetBackupStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a backup of an app by its ID.
     * Description for Gets a backup of an app by its ID.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetBackupStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsGetBackupStatusSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetBackupStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetBackupStatusSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsGetBackupStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetBackupStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetBackupStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetBackupStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsGetConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsGetConfiguration(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsGetConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetConfigurationSnapshot operation.
     * @callback module:api/WebAppsApi~webAppsGetConfigurationSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} snapshotId The ID of the snapshot to read.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetConfigurationSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsGetConfigurationSnapshot(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSnapshot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetConfigurationSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling webAppsGetConfigurationSnapshot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSnapshot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSnapshot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'snapshotId': snapshotId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetConfigurationSnapshotSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetConfigurationSnapshotSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} snapshotId The ID of the snapshot to read.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetConfigurationSnapshotSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsGetConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetConfigurationSnapshotSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetConfigurationSnapshotSlot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling webAppsGetConfigurationSnapshotSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetConfigurationSnapshotSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetConfigurationSnapshotSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetConfigurationSnapshotSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'snapshotId': snapshotId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetContainerLogsZip operation.
     * @callback module:api/WebAppsApi~webAppsGetContainerLogsZipCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ZIP archived docker log files for the given site
     * Description for Gets the ZIP archived docker log files for the given site
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetContainerLogsZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetContainerLogsZip(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetContainerLogsZip");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetContainerLogsZip");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetContainerLogsZip");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetContainerLogsZip");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetContainerLogsZipSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetContainerLogsZipSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ZIP archived docker log files for the given site
     * Description for Gets the ZIP archived docker log files for the given site
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetContainerLogsZipSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetContainerLogsZipSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetContainerLogsZipSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetContainerLogsZipSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetContainerLogsZipSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetContainerLogsZipSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetContainerLogsZipSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetContinuousWebJob operation.
     * @callback module:api/WebAppsApi~webAppsGetContinuousWebJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousWebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetContinuousWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousWebJob}
     */
    webAppsGetContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetContinuousWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetContinuousWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetContinuousWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetContinuousWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetContinuousWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousWebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetContinuousWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetContinuousWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousWebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetContinuousWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousWebJob}
     */
    webAppsGetContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetContinuousWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetContinuousWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetContinuousWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetContinuousWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetContinuousWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetContinuousWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousWebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDeployment operation.
     * @callback module:api/WebAppsApi~webAppsGetDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id Deployment ID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsGetDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsGetDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDeploymentSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id Deployment ID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsGetDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsGetDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDiagnosticLogsConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsGetDiagnosticLogsConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logging configuration of an app.
     * Description for Gets the logging configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDiagnosticLogsConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    webAppsGetDiagnosticLogsConfiguration(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDiagnosticLogsConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDiagnosticLogsConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDiagnosticLogsConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDiagnosticLogsConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDiagnosticLogsConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetDiagnosticLogsConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logging configuration of an app.
     * Description for Gets the logging configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDiagnosticLogsConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    webAppsGetDiagnosticLogsConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDiagnosticLogsConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDiagnosticLogsConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetDiagnosticLogsConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDiagnosticLogsConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDiagnosticLogsConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDomainOwnershipIdentifier operation.
     * @callback module:api/WebAppsApi~webAppsGetDomainOwnershipIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get domain ownership identifier for web app.
     * Description for Get domain ownership identifier for web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDomainOwnershipIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsGetDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDomainOwnershipIdentifier");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsGetDomainOwnershipIdentifier");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDomainOwnershipIdentifier");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDomainOwnershipIdentifier");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetDomainOwnershipIdentifierSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetDomainOwnershipIdentifierSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get domain ownership identifier for web app.
     * Description for Get domain ownership identifier for web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetDomainOwnershipIdentifierSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsGetDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetDomainOwnershipIdentifierSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetFunction operation.
     * @callback module:api/WebAppsApi~webAppsGetFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Description for Get function information by its ID for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelope}
     */
    webAppsGetFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetFunction");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsGetFunction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetFunction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelope;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetFunctionsAdminToken operation.
     * @callback module:api/WebAppsApi~webAppsGetFunctionsAdminTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetFunctionsAdminTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    webAppsGetFunctionsAdminToken(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunctionsAdminToken");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetFunctionsAdminToken");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetFunctionsAdminToken");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetFunctionsAdminToken");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetFunctionsAdminTokenSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetFunctionsAdminTokenSlotCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetFunctionsAdminTokenSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    webAppsGetFunctionsAdminTokenSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetFunctionsAdminTokenSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetFunctionsAdminTokenSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetFunctionsAdminTokenSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetFunctionsAdminTokenSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetFunctionsAdminTokenSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetHostNameBinding operation.
     * @callback module:api/WebAppsApi~webAppsGetHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    webAppsGetHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsGetHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetHostNameBindingSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
     * @param {String} hostName Hostname in the hostname binding.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    webAppsGetHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling webAppsGetHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetHybridConnection operation.
     * @callback module:api/WebAppsApi~webAppsGetHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsGetHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsGetHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsGetHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetHybridConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetHybridConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetHybridConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsGetHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetHybridConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetHybridConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceFunctionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceFunctionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Description for Get function information by its ID for web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceFunctionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelope}
     */
    webAppsGetInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceFunctionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceFunctionSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsGetInstanceFunctionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceFunctionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceFunctionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceFunctionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelope;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceInfo operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebSiteInstanceStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} instanceId 
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebSiteInstanceStatus}
     */
    webAppsGetInstanceInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceInfo");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceInfo");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceInfo");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceInfo");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebSiteInstanceStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceInfoSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceInfoSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebSiteInstanceStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} instanceId 
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceInfoSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebSiteInstanceStatus}
     */
    webAppsGetInstanceInfoSlot(resourceGroupName, name, instanceId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceInfoSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceInfoSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceInfoSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceInfoSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceInfoSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceInfoSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebSiteInstanceStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceMSDeployLog operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceMSDeployLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceMSDeployLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployLog}
     */
    webAppsGetInstanceMSDeployLog(resourceGroupName, name, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMSDeployLog");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceMSDeployLog");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMSDeployLog");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMSDeployLog");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMSDeployLog");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceMSDeployLogSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceMSDeployLogSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceMSDeployLogSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployLog}
     */
    webAppsGetInstanceMSDeployLogSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMSDeployLogSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceMSDeployLogSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceMSDeployLogSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMSDeployLogSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMSDeployLogSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMSDeployLogSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceMsDeployStatus operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceMsDeployStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceMsDeployStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsGetInstanceMsDeployStatus(resourceGroupName, name, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMsDeployStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceMsDeployStatus");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMsDeployStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMsDeployStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMsDeployStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceMsDeployStatusSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceMsDeployStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId ID of web app instance.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceMsDeployStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsGetInstanceMsDeployStatusSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceMsDeployStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceMsDeployStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceMsDeployStatusSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceMsDeployStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceMsDeployStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceMsDeployStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcess operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfo}
     */
    webAppsGetInstanceProcess(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcess");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcess");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcess");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcess");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcess");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcessDump operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessDumpCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessDumpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetInstanceProcessDump(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessDump");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcessDump");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessDump");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessDump");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessDump");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessDump");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcessDumpSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessDumpSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessDumpSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetInstanceProcessDumpSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessDumpSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessDumpSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcessModule operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} baseAddress Module base address.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfo}
     */
    webAppsGetInstanceProcessModule(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'baseAddress' is set
      if (baseAddress === undefined || baseAddress === null) {
        throw new Error("Missing the required parameter 'baseAddress' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessModule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessModule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'baseAddress': baseAddress,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcessModuleSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessModuleSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} baseAddress Module base address.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessModuleSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfo}
     */
    webAppsGetInstanceProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'baseAddress' is set
      if (baseAddress === undefined || baseAddress === null) {
        throw new Error("Missing the required parameter 'baseAddress' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessModuleSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessModuleSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'baseAddress': baseAddress,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetInstanceProcessSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetInstanceProcessSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetInstanceProcessSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfo}
     */
    webAppsGetInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetInstanceProcessSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetInstanceProcessSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMSDeployLog operation.
     * @callback module:api/WebAppsApi~webAppsGetMSDeployLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMSDeployLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployLog}
     */
    webAppsGetMSDeployLog(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployLog");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMSDeployLog");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployLog");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployLog");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMSDeployLogSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetMSDeployLogSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMSDeployLogSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployLog}
     */
    webAppsGetMSDeployLogSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployLogSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMSDeployLogSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetMSDeployLogSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployLogSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployLogSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMSDeployStatus operation.
     * @callback module:api/WebAppsApi~webAppsGetMSDeployStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMSDeployStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsGetMSDeployStatus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMSDeployStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMSDeployStatusSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetMSDeployStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MSDeployStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMSDeployStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MSDeployStatus}
     */
    webAppsGetMSDeployStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMSDeployStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMSDeployStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetMSDeployStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMSDeployStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMSDeployStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MSDeployStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMigrateMySqlStatus operation.
     * @callback module:api/WebAppsApi~webAppsGetMigrateMySqlStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateMySqlStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMigrateMySqlStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateMySqlStatus}
     */
    webAppsGetMigrateMySqlStatus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMigrateMySqlStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMigrateMySqlStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMigrateMySqlStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMigrateMySqlStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrateMySqlStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetMigrateMySqlStatusSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetMigrateMySqlStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateMySqlStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetMigrateMySqlStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateMySqlStatus}
     */
    webAppsGetMigrateMySqlStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetMigrateMySqlStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetMigrateMySqlStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetMigrateMySqlStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetMigrateMySqlStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetMigrateMySqlStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrateMySqlStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTraceOperation operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTraceOperationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTraceOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTraceOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTraceOperationSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTraceOperationSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTraceOperationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTraceOperationSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationSlot");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetNetworkTraceOperationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTraceOperationSlotV2 operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTraceOperationSlotV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTraceOperationSlotV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTraceOperationSlotV2(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationSlotV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationSlotV2");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationSlotV2");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetNetworkTraceOperationSlotV2");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationSlotV2");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationSlotV2");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTraceOperationV2 operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTraceOperationV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTraceOperationV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTraceOperationV2(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraceOperationV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTraceOperationV2");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraceOperationV2");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraceOperationV2");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraceOperationV2");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTraces operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTracesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTracesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTraces(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTraces");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTraces");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTraces");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTraces");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTraces");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTracesSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTracesSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTracesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTracesSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTracesSlot");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetNetworkTracesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTracesSlotV2 operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTracesSlotV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTracesSlotV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTracesSlotV2(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesSlotV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTracesSlotV2");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesSlotV2");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetNetworkTracesSlotV2");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesSlotV2");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesSlotV2");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetNetworkTracesV2 operation.
     * @callback module:api/WebAppsApi~webAppsGetNetworkTracesV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} operationId GUID of the operation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetNetworkTracesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsGetNetworkTracesV2(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetNetworkTracesV2");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetNetworkTracesV2");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling webAppsGetNetworkTracesV2");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetNetworkTracesV2");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetNetworkTracesV2");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPremierAddOn operation.
     * @callback module:api/WebAppsApi~webAppsGetPremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named add-on of an app.
     * Description for Gets a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsGetPremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsGetPremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPremierAddOnSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetPremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a named add-on of an app.
     * Description for Gets a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsGetPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsGetPremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetPremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPrivateAccess operation.
     * @callback module:api/WebAppsApi~webAppsGetPrivateAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPrivateAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAccess}
     */
    webAppsGetPrivateAccess(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPrivateAccess");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPrivateAccess");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPrivateAccess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPrivateAccess");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateAccess;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPrivateAccessSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetPrivateAccessSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPrivateAccessSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAccess}
     */
    webAppsGetPrivateAccessSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPrivateAccessSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPrivateAccessSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetPrivateAccessSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPrivateAccessSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPrivateAccessSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateAccess;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcess operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfo}
     */
    webAppsGetProcess(resourceGroupName, name, processId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcess");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcess");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcess");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcess");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcess");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcessDump operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessDumpCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessDumpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetProcessDump(resourceGroupName, name, processId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessDump");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcessDump");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcessDump");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessDump");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcessDump");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcessDumpSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessDumpSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessDumpSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetProcessDumpSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessDumpSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcessDumpSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcessDumpSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetProcessDumpSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessDumpSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcessDumpSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcessModule operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} baseAddress Module base address.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfo}
     */
    webAppsGetProcessModule(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessModule");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcessModule");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcessModule");
      }
      // verify the required parameter 'baseAddress' is set
      if (baseAddress === undefined || baseAddress === null) {
        throw new Error("Missing the required parameter 'baseAddress' when calling webAppsGetProcessModule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessModule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcessModule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'baseAddress': baseAddress,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcessModuleSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessModuleSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} baseAddress Module base address.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessModuleSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfo}
     */
    webAppsGetProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'baseAddress' is set
      if (baseAddress === undefined || baseAddress === null) {
        throw new Error("Missing the required parameter 'baseAddress' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessModuleSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcessModuleSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'baseAddress': baseAddress,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetProcessSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetProcessSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetProcessSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfo}
     */
    webAppsGetProcessSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetProcessSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetProcessSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsGetProcessSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetProcessSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetProcessSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetProcessSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPublicCertificate operation.
     * @callback module:api/WebAppsApi~webAppsGetPublicCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPublicCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificate}
     */
    webAppsGetPublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPublicCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPublicCertificate");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsGetPublicCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPublicCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPublicCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'publicCertificateName': publicCertificateName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetPublicCertificateSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetPublicCertificateSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
     * @param {String} publicCertificateName Public certificate name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetPublicCertificateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificate}
     */
    webAppsGetPublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetPublicCertificateSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetPublicCertificateSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetPublicCertificateSlot");
      }
      // verify the required parameter 'publicCertificateName' is set
      if (publicCertificateName === undefined || publicCertificateName === null) {
        throw new Error("Missing the required parameter 'publicCertificateName' when calling webAppsGetPublicCertificateSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetPublicCertificateSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetPublicCertificateSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'publicCertificateName': publicCertificateName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetRelayServiceConnection operation.
     * @callback module:api/WebAppsApi~webAppsGetRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a hybrid connection configuration by its name.
     * Description for Gets a hybrid connection configuration by its name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsGetRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsGetRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetRelayServiceConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a hybrid connection configuration by its name.
     * Description for Gets a hybrid connection configuration by its name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsGetRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsGetRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSiteExtension operation.
     * @callback module:api/WebAppsApi~webAppsGetSiteExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSiteExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfo}
     */
    webAppsGetSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSiteExtension");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSiteExtension");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsGetSiteExtension");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSiteExtension");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSiteExtension");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSiteExtensionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetSiteExtensionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSiteExtensionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfo}
     */
    webAppsGetSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSiteExtensionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSiteExtensionSlot");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsGetSiteExtensionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetSiteExtensionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSiteExtensionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSiteExtensionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSitePhpErrorLogFlag operation.
     * @callback module:api/WebAppsApi~webAppsGetSitePhpErrorLogFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitePhpErrorLogFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets web app's event logs.
     * Description for Gets web app's event logs.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSitePhpErrorLogFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitePhpErrorLogFlag}
     */
    webAppsGetSitePhpErrorLogFlag(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSitePhpErrorLogFlag");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSitePhpErrorLogFlag");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSitePhpErrorLogFlag");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSitePhpErrorLogFlag");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SitePhpErrorLogFlag;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSitePhpErrorLogFlagSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetSitePhpErrorLogFlagSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitePhpErrorLogFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets web app's event logs.
     * Description for Gets web app's event logs.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSitePhpErrorLogFlagSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitePhpErrorLogFlag}
     */
    webAppsGetSitePhpErrorLogFlagSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSitePhpErrorLogFlagSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSitePhpErrorLogFlagSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetSitePhpErrorLogFlagSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSitePhpErrorLogFlagSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSitePhpErrorLogFlagSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SitePhpErrorLogFlag;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a web, mobile, or API app.
     * Description for Gets the details of a web, mobile, or API app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. By default, this API returns the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsGetSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSourceControl operation.
     * @callback module:api/WebAppsApi~webAppsGetSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the source control configuration of an app.
     * Description for Gets the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsGetSourceControl(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSourceControlSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the source control configuration of an app.
     * Description for Gets the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsGetSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSwiftVirtualNetworkConnection operation.
     * @callback module:api/WebAppsApi~webAppsGetSwiftVirtualNetworkConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Swift Virtual Network connection.
     * Description for Gets a Swift Virtual Network connection.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSwiftVirtualNetworkConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsGetSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSwiftVirtualNetworkConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetSwiftVirtualNetworkConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetSwiftVirtualNetworkConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Swift Virtual Network connection.
     * Description for Gets a Swift Virtual Network connection.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetSwiftVirtualNetworkConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsGetSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetSwiftVirtualNetworkConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetTriggeredWebJob operation.
     * @callback module:api/WebAppsApi~webAppsGetTriggeredWebJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredWebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetTriggeredWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredWebJob}
     */
    webAppsGetTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredWebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetTriggeredWebJobHistory operation.
     * @callback module:api/WebAppsApi~webAppsGetTriggeredWebJobHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredJobHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} id History ID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetTriggeredWebJobHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredJobHistory}
     */
    webAppsGetTriggeredWebJobHistory(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobHistory");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobHistory");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobHistory");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsGetTriggeredWebJobHistory");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobHistory");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredJobHistory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetTriggeredWebJobHistorySlot operation.
     * @callback module:api/WebAppsApi~webAppsGetTriggeredWebJobHistorySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredJobHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} id History ID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetTriggeredWebJobHistorySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredJobHistory}
     */
    webAppsGetTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobHistorySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredJobHistory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetTriggeredWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetTriggeredWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredWebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetTriggeredWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredWebJob}
     */
    webAppsGetTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetTriggeredWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetTriggeredWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetTriggeredWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetTriggeredWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetTriggeredWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetTriggeredWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredWebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetVnetConnection operation.
     * @callback module:api/WebAppsApi~webAppsGetVnetConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the virtual network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetVnetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsGetVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetVnetConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetVnetConnectionGateway operation.
     * @callback module:api/WebAppsApi~webAppsGetVnetConnectionGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an app's Virtual Network gateway.
     * Description for Gets an app's Virtual Network gateway.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetVnetConnectionGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsGetVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetVnetConnectionGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsGetVnetConnectionGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetVnetConnectionGatewaySlot operation.
     * @callback module:api/WebAppsApi~webAppsGetVnetConnectionGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an app's Virtual Network gateway.
     * Description for Gets an app's Virtual Network gateway.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetVnetConnectionGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsGetVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetVnetConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetVnetConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the virtual network.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetVnetConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsGetVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetVnetConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetVnetConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsGetVnetConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetVnetConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetVnetConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetVnetConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetWebJob operation.
     * @callback module:api/WebAppsApi~webAppsGetWebJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webjob information for an app, or a deployment slot.
     * Description for Get webjob information for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of the web job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebJob}
     */
    webAppsGetWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webjob information for an app, or a deployment slot.
     * Description for Get webjob information for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of the web job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebJob}
     */
    webAppsGetWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsGetWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebJob;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetWebSiteContainerLogs operation.
     * @callback module:api/WebAppsApi~webAppsGetWebSiteContainerLogsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the last lines of docker logs for the given site
     * Description for Gets the last lines of docker logs for the given site
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetWebSiteContainerLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetWebSiteContainerLogs(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebSiteContainerLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetWebSiteContainerLogs");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetWebSiteContainerLogs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetWebSiteContainerLogs");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsGetWebSiteContainerLogsSlot operation.
     * @callback module:api/WebAppsApi~webAppsGetWebSiteContainerLogsSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the last lines of docker logs for the given site
     * Description for Gets the last lines of docker logs for the given site
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsGetWebSiteContainerLogsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsGetWebSiteContainerLogsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsGetWebSiteContainerLogsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsGetWebSiteContainerLogsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsGetWebSiteContainerLogsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsGetWebSiteContainerLogsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsGetWebSiteContainerLogsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsInstallSiteExtension operation.
     * @callback module:api/WebAppsApi~webAppsInstallSiteExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install site extension on a web site, or a deployment slot.
     * Description for Install site extension on a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsInstallSiteExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfo}
     */
    webAppsInstallSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsInstallSiteExtension");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsInstallSiteExtension");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsInstallSiteExtension");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsInstallSiteExtension");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsInstallSiteExtension");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsInstallSiteExtensionSlot operation.
     * @callback module:api/WebAppsApi~webAppsInstallSiteExtensionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install site extension on a web site, or a deployment slot.
     * Description for Install site extension on a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} siteExtensionId Site extension name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsInstallSiteExtensionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfo}
     */
    webAppsInstallSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsInstallSiteExtensionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsInstallSiteExtensionSlot");
      }
      // verify the required parameter 'siteExtensionId' is set
      if (siteExtensionId === undefined || siteExtensionId === null) {
        throw new Error("Missing the required parameter 'siteExtensionId' when calling webAppsInstallSiteExtensionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsInstallSiteExtensionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsInstallSiteExtensionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsInstallSiteExtensionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'siteExtensionId': siteExtensionId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsIsCloneable operation.
     * @callback module:api/WebAppsApi~webAppsIsCloneableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCloneability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsIsCloneableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCloneability}
     */
    webAppsIsCloneable(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsIsCloneable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsIsCloneable");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsIsCloneable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsIsCloneable");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteCloneability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsIsCloneableSlot operation.
     * @callback module:api/WebAppsApi~webAppsIsCloneableSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCloneability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. By default, this API returns information on the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsIsCloneableSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCloneability}
     */
    webAppsIsCloneableSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsIsCloneableSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsIsCloneableSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsIsCloneableSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsIsCloneableSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsIsCloneableSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteCloneability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsList operation.
     * @callback module:api/WebAppsApi~webAppsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all apps for a subscription.
     * Description for Get all apps for a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsList200Response}
     */
    webAppsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListApplicationSettings operation.
     * @callback module:api/WebAppsApi~webAppsListApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application settings of an app.
     * Description for Gets the application settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListApplicationSettings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListApplicationSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListApplicationSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListApplicationSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListApplicationSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListApplicationSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListApplicationSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application settings of an app.
     * Description for Gets the application settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListApplicationSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListApplicationSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListApplicationSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListApplicationSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListApplicationSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListApplicationSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListApplicationSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListAzureStorageAccounts operation.
     * @callback module:api/WebAppsApi~webAppsListAzureStorageAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureStoragePropertyDictionaryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Azure storage account configurations of an app.
     * Description for Gets the Azure storage account configurations of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListAzureStorageAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureStoragePropertyDictionaryResource}
     */
    webAppsListAzureStorageAccounts(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListAzureStorageAccounts");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListAzureStorageAccounts");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListAzureStorageAccounts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListAzureStorageAccounts");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AzureStoragePropertyDictionaryResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListAzureStorageAccountsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListAzureStorageAccountsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureStoragePropertyDictionaryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Azure storage account configurations of an app.
     * Description for Gets the Azure storage account configurations of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListAzureStorageAccountsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureStoragePropertyDictionaryResource}
     */
    webAppsListAzureStorageAccountsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListAzureStorageAccountsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListAzureStorageAccountsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListAzureStorageAccountsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListAzureStorageAccountsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListAzureStorageAccountsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AzureStoragePropertyDictionaryResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListBackupStatusSecrets operation.
     * @callback module:api/WebAppsApi~webAppsListBackupStatusSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} backupId ID of backup.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request.
     * @param {module:api/WebAppsApi~webAppsListBackupStatusSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsListBackupStatusSecrets(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupStatusSecrets");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListBackupStatusSecrets");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsListBackupStatusSecrets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListBackupStatusSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListBackupStatusSecrets");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsListBackupStatusSecrets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListBackupStatusSecretsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListBackupStatusSecretsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} backupId ID of backup.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request.
     * @param {module:api/WebAppsApi~webAppsListBackupStatusSecretsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    webAppsListBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListBackupStatusSecretsSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsListBackupStatusSecretsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListBackups operation.
     * @callback module:api/WebAppsApi~webAppsListBackupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    webAppsListBackups(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListBackups");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListBackups");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListBackups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListBackups");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListBackupsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListBackupsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListBackupsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    webAppsListBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListBackupsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListBackupsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListBackupsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListBackupsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListBackupsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListByResourceGroup operation.
     * @callback module:api/WebAppsApi~webAppsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeSlots] Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
     * @param {module:api/WebAppsApi~webAppsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsList200Response}
     */
    webAppsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'includeSlots': opts['includeSlots'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConfigurationSnapshotInfo operation.
     * @callback module:api/WebAppsApi~webAppsListConfigurationSnapshotInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigurationSnapshotInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConfigurationSnapshotInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigurationSnapshotInfoCollection}
     */
    webAppsListConfigurationSnapshotInfo(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationSnapshotInfo");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConfigurationSnapshotInfo");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationSnapshotInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationSnapshotInfo");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigurationSnapshotInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConfigurationSnapshotInfoSlot operation.
     * @callback module:api/WebAppsApi~webAppsListConfigurationSnapshotInfoSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigurationSnapshotInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConfigurationSnapshotInfoSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigurationSnapshotInfoCollection}
     */
    webAppsListConfigurationSnapshotInfoSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationSnapshotInfoSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConfigurationSnapshotInfoSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListConfigurationSnapshotInfoSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationSnapshotInfoSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationSnapshotInfoSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigurationSnapshotInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConfigurations operation.
     * @callback module:api/WebAppsApi~webAppsListConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the configurations of an app
     * Description for List the configurations of an app
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResourceCollection}
     */
    webAppsListConfigurations(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurations");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConfigurations");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConfigurations");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConfigurationsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListConfigurationsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the configurations of an app
     * Description for List the configurations of an app
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConfigurationsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResourceCollection}
     */
    webAppsListConfigurationsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConfigurationsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConfigurationsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListConfigurationsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConfigurationsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConfigurationsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteConfigResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConnectionStrings operation.
     * @callback module:api/WebAppsApi~webAppsListConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the connection strings of an app.
     * Description for Gets the connection strings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    webAppsListConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConnectionStrings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConnectionStrings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConnectionStrings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListConnectionStringsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListConnectionStringsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the connection strings of an app.
     * Description for Gets the connection strings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListConnectionStringsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    webAppsListConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListConnectionStringsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListConnectionStringsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListConnectionStringsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListConnectionStringsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListConnectionStringsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListContinuousWebJobs operation.
     * @callback module:api/WebAppsApi~webAppsListContinuousWebJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousWebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * Description for List continuous web jobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListContinuousWebJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousWebJobCollection}
     */
    webAppsListContinuousWebJobs(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListContinuousWebJobs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListContinuousWebJobs");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListContinuousWebJobs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListContinuousWebJobs");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousWebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListContinuousWebJobsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListContinuousWebJobsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousWebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * Description for List continuous web jobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListContinuousWebJobsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousWebJobCollection}
     */
    webAppsListContinuousWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListContinuousWebJobsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListContinuousWebJobsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListContinuousWebJobsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListContinuousWebJobsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListContinuousWebJobsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousWebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDeploymentLog operation.
     * @callback module:api/WebAppsApi~webAppsListDeploymentLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id The ID of a specific deployment. This is the value of the name property in the JSON response from \"GET /api/sites/{siteName}/deployments\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDeploymentLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsListDeploymentLog(resourceGroupName, name, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentLog");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDeploymentLog");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsListDeploymentLog");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentLog");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentLog");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDeploymentLogSlot operation.
     * @callback module:api/WebAppsApi~webAppsListDeploymentLogSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} id The ID of a specific deployment. This is the value of the name property in the JSON response from \"GET /api/sites/{siteName}/deployments\".
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDeploymentLogSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    webAppsListDeploymentLogSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentLogSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDeploymentLogSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webAppsListDeploymentLogSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListDeploymentLogSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentLogSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentLogSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDeployments operation.
     * @callback module:api/WebAppsApi~webAppsListDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments for an app, or a deployment slot.
     * Description for List deployments for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    webAppsListDeployments(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDeployments");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDeployments");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDeployments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDeployments");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDeploymentsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListDeploymentsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments for an app, or a deployment slot.
     * Description for List deployments for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDeploymentsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    webAppsListDeploymentsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDeploymentsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDeploymentsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListDeploymentsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDeploymentsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDeploymentsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDomainOwnershipIdentifiers operation.
     * @callback module:api/WebAppsApi~webAppsListDomainOwnershipIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListDomainOwnershipIdentifiers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Description for Lists ownership identifiers for domain associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDomainOwnershipIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListDomainOwnershipIdentifiers200Response}
     */
    webAppsListDomainOwnershipIdentifiers(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDomainOwnershipIdentifiers");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDomainOwnershipIdentifiers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDomainOwnershipIdentifiers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDomainOwnershipIdentifiers");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListDomainOwnershipIdentifiers200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListDomainOwnershipIdentifiersSlot operation.
     * @callback module:api/WebAppsApi~webAppsListDomainOwnershipIdentifiersSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListDomainOwnershipIdentifiers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Description for Lists ownership identifiers for domain associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListDomainOwnershipIdentifiersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListDomainOwnershipIdentifiers200Response}
     */
    webAppsListDomainOwnershipIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListDomainOwnershipIdentifiersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListDomainOwnershipIdentifiersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListDomainOwnershipIdentifiersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListDomainOwnershipIdentifiersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListDomainOwnershipIdentifiersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListDomainOwnershipIdentifiers200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListFunctionKeys operation.
     * @callback module:api/WebAppsApi~webAppsListFunctionKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListFunctionKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListFunctionKeys(resourceGroupName, name, functionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionKeys");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListFunctionKeys");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsListFunctionKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListFunctionKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListFunctionKeysSlot operation.
     * @callback module:api/WebAppsApi~webAppsListFunctionKeysSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListFunctionKeysSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListFunctionKeysSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionKeysSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListFunctionKeysSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsListFunctionKeysSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListFunctionKeysSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionKeysSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListFunctionKeysSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListFunctionSecrets operation.
     * @callback module:api/WebAppsApi~webAppsListFunctionSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionSecrets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListFunctionSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionSecrets}
     */
    webAppsListFunctionSecrets(resourceGroupName, name, functionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionSecrets");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListFunctionSecrets");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsListFunctionSecrets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListFunctionSecrets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionSecrets;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListFunctionSecretsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListFunctionSecretsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionSecrets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} functionName Function name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListFunctionSecretsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionSecrets}
     */
    webAppsListFunctionSecretsSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctionSecretsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListFunctionSecretsSlot");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling webAppsListFunctionSecretsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListFunctionSecretsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListFunctionSecretsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListFunctionSecretsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'functionName': functionName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionSecrets;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListFunctions operation.
     * @callback module:api/WebAppsApi~webAppsListFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelopeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the functions for a web site, or a deployment slot.
     * Description for List the functions for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelopeCollection}
     */
    webAppsListFunctions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListFunctions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListFunctions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListFunctions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListFunctions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelopeCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHostKeys operation.
     * @callback module:api/WebAppsApi~webAppsListHostKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get host secrets for a function app.
     * Description for Get host secrets for a function app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHostKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostKeys}
     */
    webAppsListHostKeys(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHostKeys");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHostKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHostKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHostKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHostKeysSlot operation.
     * @callback module:api/WebAppsApi~webAppsListHostKeysSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get host secrets for a function app.
     * Description for Get host secrets for a function app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHostKeysSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostKeys}
     */
    webAppsListHostKeysSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHostKeysSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHostKeysSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListHostKeysSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHostKeysSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHostKeysSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHostNameBindings operation.
     * @callback module:api/WebAppsApi~webAppsListHostNameBindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBindingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Description for Get hostname bindings for an app or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHostNameBindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBindingCollection}
     */
    webAppsListHostNameBindings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHostNameBindings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHostNameBindings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHostNameBindings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHostNameBindings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostNameBindingCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHostNameBindingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListHostNameBindingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBindingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Description for Get hostname bindings for an app or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHostNameBindingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBindingCollection}
     */
    webAppsListHostNameBindingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHostNameBindingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHostNameBindingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListHostNameBindingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHostNameBindingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHostNameBindingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostNameBindingCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHybridConnections operation.
     * @callback module:api/WebAppsApi~webAppsListHybridConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHybridConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsListHybridConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHybridConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListHybridConnectionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListHybridConnectionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListHybridConnectionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsListHybridConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListHybridConnectionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListHybridConnectionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListHybridConnectionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListHybridConnectionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListHybridConnectionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceFunctionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceFunctionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionEnvelopeCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the functions for a web site, or a deployment slot.
     * Description for List the functions for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceFunctionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionEnvelopeCollection}
     */
    webAppsListInstanceFunctionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceFunctionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceFunctionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListInstanceFunctionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceFunctionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceFunctionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionEnvelopeCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceIdentifiers operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppInstanceCollection}
     */
    webAppsListInstanceIdentifiers(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceIdentifiers");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceIdentifiers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceIdentifiers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceIdentifiers");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppInstanceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceIdentifiersSlot operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceIdentifiersSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceIdentifiersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppInstanceCollection}
     */
    webAppsListInstanceIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceIdentifiersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceIdentifiersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListInstanceIdentifiersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceIdentifiersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceIdentifiersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppInstanceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcessModules operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessModulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfoCollection}
     */
    webAppsListInstanceProcessModules(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessModules");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcessModules");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListInstanceProcessModules");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessModules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessModules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessModules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcessModulesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessModulesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessModulesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfoCollection}
     */
    webAppsListInstanceProcessModulesSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessModulesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessModulesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcessThreads operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessThreadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessThreadInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessThreadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessThreadInfoCollection}
     */
    webAppsListInstanceProcessThreads(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessThreads");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcessThreads");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListInstanceProcessThreads");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessThreads");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessThreads");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessThreads");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessThreadInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcessThreadsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessThreadsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessThreadInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessThreadsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessThreadInfoCollection}
     */
    webAppsListInstanceProcessThreadsSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessThreadsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessThreadsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessThreadInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcesses operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfoCollection}
     */
    webAppsListInstanceProcesses(resourceGroupName, name, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcesses");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcesses");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcesses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcesses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcesses");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListInstanceProcessesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListInstanceProcessesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from \"GET api/sites/{siteName}/instances\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListInstanceProcessesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfoCollection}
     */
    webAppsListInstanceProcessesSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListInstanceProcessesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListInstanceProcessesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListInstanceProcessesSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling webAppsListInstanceProcessesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListInstanceProcessesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListInstanceProcessesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListMetadata operation.
     * @callback module:api/WebAppsApi~webAppsListMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the metadata of an app.
     * Description for Gets the metadata of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListMetadata(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListMetadata");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListMetadata");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListMetadata");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListMetadataSlot operation.
     * @callback module:api/WebAppsApi~webAppsListMetadataSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the metadata of an app.
     * Description for Gets the metadata of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListMetadataSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsListMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListMetadataSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListMetadataSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListMetadataSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListMetadataSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListMetadataSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListNetworkFeatures operation.
     * @callback module:api/WebAppsApi~webAppsListNetworkFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} view The type of view. This can either be \"summary\" or \"detailed\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListNetworkFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatures}
     */
    webAppsListNetworkFeatures(resourceGroupName, name, view, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListNetworkFeatures");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListNetworkFeatures");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling webAppsListNetworkFeatures");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListNetworkFeatures");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListNetworkFeatures");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'view': view,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkFeatures;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListNetworkFeaturesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListNetworkFeaturesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} view The type of view. This can either be \"summary\" or \"detailed\".
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListNetworkFeaturesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatures}
     */
    webAppsListNetworkFeaturesSlot(resourceGroupName, name, view, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListNetworkFeaturesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListNetworkFeaturesSlot");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling webAppsListNetworkFeaturesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListNetworkFeaturesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListNetworkFeaturesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListNetworkFeaturesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'view': view,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkFeatures;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPerfMonCounters operation.
     * @callback module:api/WebAppsApi~webAppsListPerfMonCountersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerfMonCounterCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets perfmon counters for web app.
     * Description for Gets perfmon counters for web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/WebAppsApi~webAppsListPerfMonCountersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerfMonCounterCollection}
     */
    webAppsListPerfMonCounters(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPerfMonCounters");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPerfMonCounters");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPerfMonCounters");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPerfMonCounters");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerfMonCounterCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPerfMonCountersSlot operation.
     * @callback module:api/WebAppsApi~webAppsListPerfMonCountersSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerfMonCounterCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets perfmon counters for web app.
     * Description for Gets perfmon counters for web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/WebAppsApi~webAppsListPerfMonCountersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerfMonCounterCollection}
     */
    webAppsListPerfMonCountersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPerfMonCountersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPerfMonCountersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListPerfMonCountersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPerfMonCountersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPerfMonCountersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerfMonCounterCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPremierAddOns operation.
     * @callback module:api/WebAppsApi~webAppsListPremierAddOnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the premier add-ons of an app.
     * Description for Gets the premier add-ons of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPremierAddOnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsListPremierAddOns(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPremierAddOns");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPremierAddOns");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPremierAddOns");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPremierAddOns");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPremierAddOnsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListPremierAddOnsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the premier add-ons of an app.
     * Description for Gets the premier add-ons of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPremierAddOnsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsListPremierAddOnsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPremierAddOnsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPremierAddOnsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListPremierAddOnsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPremierAddOnsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPremierAddOnsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcessModules operation.
     * @callback module:api/WebAppsApi~webAppsListProcessModulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfoCollection}
     */
    webAppsListProcessModules(resourceGroupName, name, processId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessModules");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcessModules");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListProcessModules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcessModules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcessModules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcessModulesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListProcessModulesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessModuleInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessModulesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessModuleInfoCollection}
     */
    webAppsListProcessModulesSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessModulesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcessModulesSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListProcessModulesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListProcessModulesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcessModulesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcessModulesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessModuleInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcessThreads operation.
     * @callback module:api/WebAppsApi~webAppsListProcessThreadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessThreadInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessThreadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessThreadInfoCollection}
     */
    webAppsListProcessThreads(resourceGroupName, name, processId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessThreads");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcessThreads");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListProcessThreads");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcessThreads");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcessThreads");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessThreadInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcessThreadsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListProcessThreadsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessThreadInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} processId PID.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessThreadsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessThreadInfoCollection}
     */
    webAppsListProcessThreadsSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessThreadsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcessThreadsSlot");
      }
      // verify the required parameter 'processId' is set
      if (processId === undefined || processId === null) {
        throw new Error("Missing the required parameter 'processId' when calling webAppsListProcessThreadsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListProcessThreadsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcessThreadsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcessThreadsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'processId': processId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessThreadInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcesses operation.
     * @callback module:api/WebAppsApi~webAppsListProcessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfoCollection}
     */
    webAppsListProcesses(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcesses");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcesses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcesses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcesses");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListProcessesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListProcessesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListProcessesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessInfoCollection}
     */
    webAppsListProcessesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListProcessesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListProcessesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListProcessesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListProcessesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListProcessesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublicCertificates operation.
     * @callback module:api/WebAppsApi~webAppsListPublicCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public certificates for an app or a deployment slot.
     * Description for Get public certificates for an app or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPublicCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificateCollection}
     */
    webAppsListPublicCertificates(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublicCertificates");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublicCertificates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublicCertificates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublicCertificates");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicCertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublicCertificatesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListPublicCertificatesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicCertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public certificates for an app or a deployment slot.
     * Description for Get public certificates for an app or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPublicCertificatesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicCertificateCollection}
     */
    webAppsListPublicCertificatesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublicCertificatesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublicCertificatesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListPublicCertificatesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublicCertificatesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublicCertificatesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicCertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublishingCredentials operation.
     * @callback module:api/WebAppsApi~webAppsListPublishingCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListPublishingCredentials200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Description for Gets the Git/FTP publishing credentials of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPublishingCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListPublishingCredentials200Response}
     */
    webAppsListPublishingCredentials(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingCredentials");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublishingCredentials");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublishingCredentials");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListPublishingCredentials200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublishingCredentialsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListPublishingCredentialsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListPublishingCredentials200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Description for Gets the Git/FTP publishing credentials of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListPublishingCredentialsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListPublishingCredentials200Response}
     */
    webAppsListPublishingCredentialsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingCredentialsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublishingCredentialsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListPublishingCredentialsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingCredentialsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublishingCredentialsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListPublishingCredentials200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublishingProfileXmlWithSecrets operation.
     * @callback module:api/WebAppsApi~webAppsListPublishingProfileXmlWithSecretsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmPublishingProfileOptions} publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\"format\": \"FileZilla3\"} to get a FileZilla publishing profile.
     * @param {module:api/WebAppsApi~webAppsListPublishingProfileXmlWithSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsListPublishingProfileXmlWithSecrets(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions, callback) {
      let postBody = publishingProfileOptions;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingProfileXmlWithSecrets");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublishingProfileXmlWithSecrets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingProfileXmlWithSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublishingProfileXmlWithSecrets");
      }
      // verify the required parameter 'publishingProfileOptions' is set
      if (publishingProfileOptions === undefined || publishingProfileOptions === null) {
        throw new Error("Missing the required parameter 'publishingProfileOptions' when calling webAppsListPublishingProfileXmlWithSecrets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListPublishingProfileXmlWithSecretsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListPublishingProfileXmlWithSecretsSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmPublishingProfileOptions} publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {\"format\": \"FileZilla3\"} to get a FileZilla publishing profile.
     * @param {module:api/WebAppsApi~webAppsListPublishingProfileXmlWithSecretsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    webAppsListPublishingProfileXmlWithSecretsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions, callback) {
      let postBody = publishingProfileOptions;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }
      // verify the required parameter 'publishingProfileOptions' is set
      if (publishingProfileOptions === undefined || publishingProfileOptions === null) {
        throw new Error("Missing the required parameter 'publishingProfileOptions' when calling webAppsListPublishingProfileXmlWithSecretsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListRelayServiceConnections operation.
     * @callback module:api/WebAppsApi~webAppsListRelayServiceConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListRelayServiceConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsListRelayServiceConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListRelayServiceConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListRelayServiceConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListRelayServiceConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListRelayServiceConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListRelayServiceConnectionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListRelayServiceConnectionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListRelayServiceConnectionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsListRelayServiceConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListRelayServiceConnectionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSiteBackups operation.
     * @callback module:api/WebAppsApi~webAppsListSiteBackupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSiteBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    webAppsListSiteBackups(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteBackups");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSiteBackups");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSiteBackups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSiteBackups");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSiteBackupsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSiteBackupsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSiteBackupsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    webAppsListSiteBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteBackupsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSiteBackupsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSiteBackupsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSiteBackupsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSiteBackupsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSiteExtensions operation.
     * @callback module:api/WebAppsApi~webAppsListSiteExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSiteExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfoCollection}
     */
    webAppsListSiteExtensions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteExtensions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSiteExtensions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSiteExtensions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSiteExtensions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSiteExtensionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSiteExtensionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteExtensionInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSiteExtensionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteExtensionInfoCollection}
     */
    webAppsListSiteExtensionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSiteExtensionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSiteExtensionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSiteExtensionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSiteExtensionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSiteExtensionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteExtensionInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSitePushSettings operation.
     * @callback module:api/WebAppsApi~webAppsListSitePushSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Push settings associated with web app.
     * Description for Gets the Push settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSitePushSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsUpdateSitePushSettingsRequest}
     */
    webAppsListSitePushSettings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSitePushSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSitePushSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSitePushSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSitePushSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsUpdateSitePushSettingsRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSitePushSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSitePushSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Push settings associated with web app.
     * Description for Gets the Push settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSitePushSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsUpdateSitePushSettingsRequest}
     */
    webAppsListSitePushSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSitePushSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSitePushSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSitePushSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSitePushSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSitePushSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsUpdateSitePushSettingsRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSlotConfigurationNames operation.
     * @callback module:api/WebAppsApi~webAppsListSlotConfigurationNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotConfigNamesResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSlotConfigurationNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotConfigNamesResource}
     */
    webAppsListSlotConfigurationNames(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotConfigurationNames");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSlotConfigurationNames");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSlotConfigurationNames");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSlotConfigurationNames");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SlotConfigNamesResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSlotDifferencesFromProduction operation.
     * @callback module:api/WebAppsApi~webAppsListSlotDifferencesFromProductionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotDifferenceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the difference in configuration settings between two web app slots.
     * Description for Get the difference in configuration settings between two web app slots.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsListSlotDifferencesFromProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotDifferenceCollection}
     */
    webAppsListSlotDifferencesFromProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotDifferencesFromProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSlotDifferencesFromProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSlotDifferencesFromProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSlotDifferencesFromProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsListSlotDifferencesFromProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SlotDifferenceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSlotDifferencesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSlotDifferencesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotDifferenceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the difference in configuration settings between two web app slots.
     * Description for Get the difference in configuration settings between two web app slots.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsListSlotDifferencesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotDifferenceCollection}
     */
    webAppsListSlotDifferencesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSlotDifferencesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSlotDifferencesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSlotDifferencesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSlotDifferencesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSlotDifferencesSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsListSlotDifferencesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SlotDifferenceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSlots operation.
     * @callback module:api/WebAppsApi~webAppsListSlotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an app's deployment slots.
     * Description for Gets an app's deployment slots.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSlotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsList200Response}
     */
    webAppsListSlots(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSlots");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSlots");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSlots");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSlots");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSnapshots operation.
     * @callback module:api/WebAppsApi~webAppsListSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user.
     * Description for Returns all Snapshots to the user.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Website Name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCollection}
     */
    webAppsListSnapshots(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshots");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSnapshots");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshots");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSnapshots");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnapshotCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSnapshotsFromDRSecondary operation.
     * @callback module:api/WebAppsApi~webAppsListSnapshotsFromDRSecondaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Website Name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSnapshotsFromDRSecondaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCollection}
     */
    webAppsListSnapshotsFromDRSecondary(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsFromDRSecondary");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSnapshotsFromDRSecondary");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsFromDRSecondary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsFromDRSecondary");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnapshotCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSnapshotsFromDRSecondarySlot operation.
     * @callback module:api/WebAppsApi~webAppsListSnapshotsFromDRSecondarySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Website Name.
     * @param {String} slot Website Slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSnapshotsFromDRSecondarySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCollection}
     */
    webAppsListSnapshotsFromDRSecondarySlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsFromDRSecondarySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSnapshotsFromDRSecondarySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSnapshotsFromDRSecondarySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsFromDRSecondarySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsFromDRSecondarySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnapshotCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSnapshotsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSnapshotsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user.
     * Description for Returns all Snapshots to the user.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Website Name.
     * @param {String} slot Website Slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSnapshotsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCollection}
     */
    webAppsListSnapshotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSnapshotsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSnapshotsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSnapshotsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSnapshotsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSnapshotsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnapshotCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSyncFunctionTriggers operation.
     * @callback module:api/WebAppsApi~webAppsListSyncFunctionTriggersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionSecrets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSyncFunctionTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionSecrets}
     */
    webAppsListSyncFunctionTriggers(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncFunctionTriggers");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSyncFunctionTriggers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSyncFunctionTriggers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSyncFunctionTriggers");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionSecrets;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSyncFunctionTriggersSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSyncFunctionTriggersSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionSecrets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSyncFunctionTriggersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionSecrets}
     */
    webAppsListSyncFunctionTriggersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSyncFunctionTriggersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionSecrets;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSyncStatus operation.
     * @callback module:api/WebAppsApi~webAppsListSyncStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSyncStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsListSyncStatus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSyncStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSyncStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSyncStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListSyncStatusSlot operation.
     * @callback module:api/WebAppsApi~webAppsListSyncStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListSyncStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsListSyncStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListSyncStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListSyncStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListSyncStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListSyncStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListSyncStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListTriggeredWebJobHistory operation.
     * @callback module:api/WebAppsApi~webAppsListTriggeredWebJobHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredJobHistoryCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListTriggeredWebJobHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredJobHistoryCollection}
     */
    webAppsListTriggeredWebJobHistory(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobHistory");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobHistory");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsListTriggeredWebJobHistory");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobHistory");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredJobHistoryCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListTriggeredWebJobHistorySlot operation.
     * @callback module:api/WebAppsApi~webAppsListTriggeredWebJobHistorySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredJobHistoryCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListTriggeredWebJobHistorySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredJobHistoryCollection}
     */
    webAppsListTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsListTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobHistorySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobHistorySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredJobHistoryCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListTriggeredWebJobs operation.
     * @callback module:api/WebAppsApi~webAppsListTriggeredWebJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredWebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * Description for List triggered web jobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListTriggeredWebJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredWebJobCollection}
     */
    webAppsListTriggeredWebJobs(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobs");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobs");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredWebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListTriggeredWebJobsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListTriggeredWebJobsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggeredWebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * Description for List triggered web jobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListTriggeredWebJobsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggeredWebJobCollection}
     */
    webAppsListTriggeredWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListTriggeredWebJobsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListTriggeredWebJobsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListTriggeredWebJobsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListTriggeredWebJobsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListTriggeredWebJobsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggeredWebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListUsages operation.
     * @callback module:api/WebAppsApi~webAppsListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListUsagesSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/WebAppsApi~webAppsListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListUsagesSlot200Response}
     */
    webAppsListUsages(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListUsagesSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListUsagesSlot operation.
     * @callback module:api/WebAppsApi~webAppsListUsagesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsListUsagesSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/WebAppsApi~webAppsListUsagesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsListUsagesSlot200Response}
     */
    webAppsListUsagesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListUsagesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListUsagesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListUsagesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListUsagesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListUsagesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebAppsListUsagesSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListVnetConnections operation.
     * @callback module:api/WebAppsApi~webAppsListVnetConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebAppsListVnetConnectionsSlot200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListVnetConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebAppsListVnetConnectionsSlot200ResponseInner>}
     */
    webAppsListVnetConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListVnetConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListVnetConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListVnetConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListVnetConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebAppsListVnetConnectionsSlot200ResponseInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListVnetConnectionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListVnetConnectionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebAppsListVnetConnectionsSlot200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListVnetConnectionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebAppsListVnetConnectionsSlot200ResponseInner>}
     */
    webAppsListVnetConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListVnetConnectionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListVnetConnectionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListVnetConnectionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListVnetConnectionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListVnetConnectionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebAppsListVnetConnectionsSlot200ResponseInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListWebJobs operation.
     * @callback module:api/WebAppsApi~webAppsListWebJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webjobs for an app, or a deployment slot.
     * Description for List webjobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListWebJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebJobCollection}
     */
    webAppsListWebJobs(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListWebJobs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListWebJobs");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListWebJobs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListWebJobs");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsListWebJobsSlot operation.
     * @callback module:api/WebAppsApi~webAppsListWebJobsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webjobs for an app, or a deployment slot.
     * Description for List webjobs for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsListWebJobsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebJobCollection}
     */
    webAppsListWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsListWebJobsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsListWebJobsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsListWebJobsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsListWebJobsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsListWebJobsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebJobCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsMigrateMySql operation.
     * @callback module:api/WebAppsApi~webAppsMigrateMySqlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsMigrateMySql200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/MigrateMySqlRequest} migrationRequestEnvelope MySql migration options.
     * @param {module:api/WebAppsApi~webAppsMigrateMySqlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsMigrateMySql200Response}
     */
    webAppsMigrateMySql(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope, callback) {
      let postBody = migrationRequestEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsMigrateMySql");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsMigrateMySql");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsMigrateMySql");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsMigrateMySql");
      }
      // verify the required parameter 'migrationRequestEnvelope' is set
      if (migrationRequestEnvelope === undefined || migrationRequestEnvelope === null) {
        throw new Error("Missing the required parameter 'migrationRequestEnvelope' when calling webAppsMigrateMySql");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsMigrateMySql200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsMigrateStorage operation.
     * @callback module:api/WebAppsApi~webAppsMigrateStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageMigrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a web app.
     * Description for Restores a web app.
     * @param {String} subscriptionName Azure subscription.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/StorageMigrationOptions} migrationOptions Migration migrationOptions.
     * @param {module:api/WebAppsApi~webAppsMigrateStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageMigrationResponse}
     */
    webAppsMigrateStorage(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions, callback) {
      let postBody = migrationOptions;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling webAppsMigrateStorage");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsMigrateStorage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsMigrateStorage");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsMigrateStorage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsMigrateStorage");
      }
      // verify the required parameter 'migrationOptions' is set
      if (migrationOptions === undefined || migrationOptions === null) {
        throw new Error("Missing the required parameter 'migrationOptions' when calling webAppsMigrateStorage");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'subscriptionName': subscriptionName,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageMigrationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsPutPrivateAccessVnet operation.
     * @callback module:api/WebAppsApi~webAppsPutPrivateAccessVnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PrivateAccess} access The information for the private access
     * @param {module:api/WebAppsApi~webAppsPutPrivateAccessVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAccess}
     */
    webAppsPutPrivateAccessVnet(resourceGroupName, name, subscriptionId, apiVersion, access, callback) {
      let postBody = access;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsPutPrivateAccessVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsPutPrivateAccessVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsPutPrivateAccessVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsPutPrivateAccessVnet");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling webAppsPutPrivateAccessVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateAccess;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsPutPrivateAccessVnetSlot operation.
     * @callback module:api/WebAppsApi~webAppsPutPrivateAccessVnetSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PrivateAccess} access The information for the private access
     * @param {module:api/WebAppsApi~webAppsPutPrivateAccessVnetSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAccess}
     */
    webAppsPutPrivateAccessVnetSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, access, callback) {
      let postBody = access;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsPutPrivateAccessVnetSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsPutPrivateAccessVnetSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsPutPrivateAccessVnetSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsPutPrivateAccessVnetSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsPutPrivateAccessVnetSlot");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling webAppsPutPrivateAccessVnetSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateAccess;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRecoverSiteConfigurationSnapshot operation.
     * @callback module:api/WebAppsApi~webAppsRecoverSiteConfigurationSnapshotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Description for Reverts the configuration of an app to a previous snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} snapshotId The ID of the snapshot to read.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsRecoverSiteConfigurationSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRecoverSiteConfigurationSnapshot(resourceGroupName, name, snapshotId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRecoverSiteConfigurationSnapshot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRecoverSiteConfigurationSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling webAppsRecoverSiteConfigurationSnapshot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRecoverSiteConfigurationSnapshot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRecoverSiteConfigurationSnapshot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'snapshotId': snapshotId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRecoverSiteConfigurationSnapshotSlot operation.
     * @callback module:api/WebAppsApi~webAppsRecoverSiteConfigurationSnapshotSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Description for Reverts the configuration of an app to a previous snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} snapshotId The ID of the snapshot to read.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsRecoverSiteConfigurationSnapshotSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRecoverSiteConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRecoverSiteConfigurationSnapshotSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'snapshotId': snapshotId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsResetProductionSlotConfig operation.
     * @callback module:api/WebAppsApi~webAppsResetProductionSlotConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsResetProductionSlotConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsResetProductionSlotConfig(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsResetProductionSlotConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsResetProductionSlotConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsResetProductionSlotConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsResetProductionSlotConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsResetSlotConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsResetSlotConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsResetSlotConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsResetSlotConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsResetSlotConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsResetSlotConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsResetSlotConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsResetSlotConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsResetSlotConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestart operation.
     * @callback module:api/WebAppsApi~webAppsRestartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts an app (or deployment slot, if specified).
     * Description for Restarts an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
     * @param {Boolean} [synchronous] Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
     * @param {module:api/WebAppsApi~webAppsRestartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestart(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestart");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestart");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestart");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'synchronous': opts['synchronous'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestartSlot operation.
     * @callback module:api/WebAppsApi~webAppsRestartSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts an app (or deployment slot, if specified).
     * Description for Restarts an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
     * @param {Boolean} [synchronous] Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
     * @param {module:api/WebAppsApi~webAppsRestartSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestartSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestartSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestartSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRestartSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestartSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestartSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'synchronous': opts['synchronous'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestore operation.
     * @callback module:api/WebAppsApi~webAppsRestoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request .
     * @param {module:api/WebAppsApi~webAppsRestoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestore(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestore");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestore");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsRestore");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestore");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestore");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsRestore");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreFromBackupBlob operation.
     * @callback module:api/WebAppsApi~webAppsRestoreFromBackupBlobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Description for Restores an app from a backup blob in Azure Storage.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request .
     * @param {module:api/WebAppsApi~webAppsRestoreFromBackupBlobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreFromBackupBlob(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromBackupBlob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreFromBackupBlob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromBackupBlob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromBackupBlob");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsRestoreFromBackupBlob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreFromBackupBlobSlot operation.
     * @callback module:api/WebAppsApi~webAppsRestoreFromBackupBlobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Description for Restores an app from a backup blob in Azure Storage.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request .
     * @param {module:api/WebAppsApi~webAppsRestoreFromBackupBlobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreFromBackupBlobSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromBackupBlobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreFromBackupBlobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRestoreFromBackupBlobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromBackupBlobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromBackupBlobSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsRestoreFromBackupBlobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreFromDeletedApp operation.
     * @callback module:api/WebAppsApi~webAppsRestoreFromDeletedAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a deleted web app to this web app.
     * Description for Restores a deleted web app to this web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/DeletedAppRestoreRequest} restoreRequest Deleted web app restore information.
     * @param {module:api/WebAppsApi~webAppsRestoreFromDeletedAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreFromDeletedApp(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, callback) {
      let postBody = restoreRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromDeletedApp");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreFromDeletedApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromDeletedApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromDeletedApp");
      }
      // verify the required parameter 'restoreRequest' is set
      if (restoreRequest === undefined || restoreRequest === null) {
        throw new Error("Missing the required parameter 'restoreRequest' when calling webAppsRestoreFromDeletedApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreFromDeletedAppSlot operation.
     * @callback module:api/WebAppsApi~webAppsRestoreFromDeletedAppSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a deleted web app to this web app.
     * Description for Restores a deleted web app to this web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/DeletedAppRestoreRequest} restoreRequest Deleted web app restore information.
     * @param {module:api/WebAppsApi~webAppsRestoreFromDeletedAppSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreFromDeletedAppSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, callback) {
      let postBody = restoreRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreFromDeletedAppSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreFromDeletedAppSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRestoreFromDeletedAppSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreFromDeletedAppSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreFromDeletedAppSlot");
      }
      // verify the required parameter 'restoreRequest' is set
      if (restoreRequest === undefined || restoreRequest === null) {
        throw new Error("Missing the required parameter 'restoreRequest' when calling webAppsRestoreFromDeletedAppSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreSlot operation.
     * @callback module:api/WebAppsApi~webAppsRestoreSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} backupId ID of the backup.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request .
     * @param {module:api/WebAppsApi~webAppsRestoreSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsRestoreSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreSnapshot operation.
     * @callback module:api/WebAppsApi~webAppsRestoreSnapshotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a web app from a snapshot.
     * Description for Restores a web app from a snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SnapshotRestoreRequest} restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @param {module:api/WebAppsApi~webAppsRestoreSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreSnapshot(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest, callback) {
      let postBody = restoreRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSnapshot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreSnapshot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSnapshot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreSnapshot");
      }
      // verify the required parameter 'restoreRequest' is set
      if (restoreRequest === undefined || restoreRequest === null) {
        throw new Error("Missing the required parameter 'restoreRequest' when calling webAppsRestoreSnapshot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRestoreSnapshotSlot operation.
     * @callback module:api/WebAppsApi~webAppsRestoreSnapshotSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a web app from a snapshot.
     * Description for Restores a web app from a snapshot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SnapshotRestoreRequest} restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @param {module:api/WebAppsApi~webAppsRestoreSnapshotSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRestoreSnapshotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest, callback) {
      let postBody = restoreRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRestoreSnapshotSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRestoreSnapshotSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRestoreSnapshotSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRestoreSnapshotSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRestoreSnapshotSlot");
      }
      // verify the required parameter 'restoreRequest' is set
      if (restoreRequest === undefined || restoreRequest === null) {
        throw new Error("Missing the required parameter 'restoreRequest' when calling webAppsRestoreSnapshotSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRunTriggeredWebJob operation.
     * @callback module:api/WebAppsApi~webAppsRunTriggeredWebJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Description for Run a triggered web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsRunTriggeredWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRunTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRunTriggeredWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRunTriggeredWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsRunTriggeredWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRunTriggeredWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRunTriggeredWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsRunTriggeredWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsRunTriggeredWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Description for Run a triggered web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsRunTriggeredWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsRunTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsRunTriggeredWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsRunTriggeredWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsRunTriggeredWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsRunTriggeredWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsRunTriggeredWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsRunTriggeredWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStart operation.
     * @callback module:api/WebAppsApi~webAppsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an app (or deployment slot, if specified).
     * Description for Starts an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStart(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStart");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStart");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStart");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartContinuousWebJob operation.
     * @callback module:api/WebAppsApi~webAppsStartContinuousWebJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Description for Start a continuous web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStartContinuousWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStartContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartContinuousWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartContinuousWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsStartContinuousWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartContinuousWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartContinuousWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartContinuousWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsStartContinuousWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Description for Start a continuous web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStartContinuousWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStartContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartContinuousWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartContinuousWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsStartContinuousWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStartContinuousWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartContinuousWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartContinuousWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartNetworkTrace operation.
     * @callback module:api/WebAppsApi~webAppsStartNetworkTraceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartNetworkTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsStartNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartNetworkTrace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartNetworkTrace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartNetworkTrace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartNetworkTrace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartNetworkTraceSlot operation.
     * @callback module:api/WebAppsApi~webAppsStartNetworkTraceSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartNetworkTraceSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsStartNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartNetworkTraceSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartNetworkTraceSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStartNetworkTraceSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartNetworkTraceSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartNetworkTraceSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartSlot operation.
     * @callback module:api/WebAppsApi~webAppsStartSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an app (or deployment slot, if specified).
     * Description for Starts an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will start the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStartSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStartSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStartSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartWebSiteNetworkTrace operation.
     * @callback module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Description for Start capturing network packets for the site (To be deprecated).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    webAppsStartWebSiteNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTrace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTrace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTrace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTrace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartWebSiteNetworkTraceOperation operation.
     * @callback module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceOperationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsStartWebSiteNetworkTraceOperation(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartWebSiteNetworkTraceOperationSlot operation.
     * @callback module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceOperationSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkTrace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceOperationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkTrace>}
     */
    webAppsStartWebSiteNetworkTraceOperationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceOperationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceOperationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStartWebSiteNetworkTraceOperationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceOperationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceOperationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkTrace];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStartWebSiteNetworkTraceSlot operation.
     * @callback module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceSlotCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Description for Start capturing network packets for the site (To be deprecated).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [durationInSeconds] The duration to keep capturing in seconds.
     * @param {Number} [maxFrameLength] The maximum frame length in bytes (Optional).
     * @param {String} [sasUrl] The Blob URL to store capture file.
     * @param {module:api/WebAppsApi~webAppsStartWebSiteNetworkTraceSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    webAppsStartWebSiteNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStartWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStartWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStartWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStartWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStartWebSiteNetworkTraceSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'durationInSeconds': opts['durationInSeconds'],
        'maxFrameLength': opts['maxFrameLength'],
        'sasUrl': opts['sasUrl'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStop operation.
     * @callback module:api/WebAppsApi~webAppsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an app (or deployment slot, if specified).
     * Description for Stops an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStop(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStop");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStop");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStop");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopContinuousWebJob operation.
     * @callback module:api/WebAppsApi~webAppsStopContinuousWebJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopContinuousWebJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopContinuousWebJob");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopContinuousWebJob");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsStopContinuousWebJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopContinuousWebJob");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopContinuousWebJob");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopContinuousWebJobSlot operation.
     * @callback module:api/WebAppsApi~webAppsStopContinuousWebJobSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site name.
     * @param {String} webJobName Name of Web Job.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopContinuousWebJobSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopContinuousWebJobSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopContinuousWebJobSlot");
      }
      // verify the required parameter 'webJobName' is set
      if (webJobName === undefined || webJobName === null) {
        throw new Error("Missing the required parameter 'webJobName' when calling webAppsStopContinuousWebJobSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStopContinuousWebJobSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopContinuousWebJobSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopContinuousWebJobSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'webJobName': webJobName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopNetworkTrace operation.
     * @callback module:api/WebAppsApi~webAppsStopNetworkTraceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopNetworkTraceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopNetworkTrace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopNetworkTrace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopNetworkTrace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopNetworkTrace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopNetworkTraceSlot operation.
     * @callback module:api/WebAppsApi~webAppsStopNetworkTraceSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopNetworkTraceSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopNetworkTraceSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopNetworkTraceSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStopNetworkTraceSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopNetworkTraceSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopNetworkTraceSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopSlot operation.
     * @callback module:api/WebAppsApi~webAppsStopSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an app (or deployment slot, if specified).
     * Description for Stops an app (or deployment slot, if specified).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStopSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopWebSiteNetworkTrace operation.
     * @callback module:api/WebAppsApi~webAppsStopWebSiteNetworkTraceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopWebSiteNetworkTraceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopWebSiteNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopWebSiteNetworkTrace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopWebSiteNetworkTrace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopWebSiteNetworkTrace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopWebSiteNetworkTrace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsStopWebSiteNetworkTraceSlot operation.
     * @callback module:api/WebAppsApi~webAppsStopWebSiteNetworkTraceSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsStopWebSiteNetworkTraceSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsStopWebSiteNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsStopWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsStopWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsStopWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsStopWebSiteNetworkTraceSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsStopWebSiteNetworkTraceSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSwapSlotSlot operation.
     * @callback module:api/WebAppsApi~webAppsSwapSlotSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps two deployment slots of an app.
     * Description for Swaps two deployment slots of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsSwapSlotSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSwapSlotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSwapSlotSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSwapSlotSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsSwapSlotSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSwapSlotSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSwapSlotSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsSwapSlotSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSwapSlotWithProduction operation.
     * @callback module:api/WebAppsApi~webAppsSwapSlotWithProductionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps two deployment slots of an app.
     * Description for Swaps two deployment slots of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity JSON object that contains the target slot name. See example.
     * @param {module:api/WebAppsApi~webAppsSwapSlotWithProductionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSwapSlotWithProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSwapSlotWithProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSwapSlotWithProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSwapSlotWithProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSwapSlotWithProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling webAppsSwapSlotWithProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncFunctionTriggers operation.
     * @callback module:api/WebAppsApi~webAppsSyncFunctionTriggersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syncs function trigger metadata to the management database
     * Description for Syncs function trigger metadata to the management database
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncFunctionTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncFunctionTriggers(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctionTriggers");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncFunctionTriggers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctionTriggers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctionTriggers");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncFunctionTriggersSlot operation.
     * @callback module:api/WebAppsApi~webAppsSyncFunctionTriggersSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syncs function trigger metadata to the management database
     * Description for Syncs function trigger metadata to the management database
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncFunctionTriggersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncFunctionTriggersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctionTriggersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctionTriggersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncFunctions operation.
     * @callback module:api/WebAppsApi~webAppsSyncFunctionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syncs function trigger metadata to the management database
     * Description for Syncs function trigger metadata to the management database
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncFunctions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncFunctions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncFunctionsSlot operation.
     * @callback module:api/WebAppsApi~webAppsSyncFunctionsSlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Syncs function trigger metadata to the management database
     * Description for Syncs function trigger metadata to the management database
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncFunctionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncFunctionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncFunctionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncFunctionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsSyncFunctionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncFunctionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncFunctionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncRepository operation.
     * @callback module:api/WebAppsApi~webAppsSyncRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync web app repository.
     * Description for Sync web app repository.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncRepository(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncRepository");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncRepository");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncRepository");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncRepository");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsSyncRepositorySlot operation.
     * @callback module:api/WebAppsApi~webAppsSyncRepositorySlotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync web app repository.
     * Description for Sync web app repository.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/WebAppsApi~webAppsSyncRepositorySlotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webAppsSyncRepositorySlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsSyncRepositorySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsSyncRepositorySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsSyncRepositorySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsSyncRepositorySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsSyncRepositorySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdate operation.
     * @callback module:api/WebAppsApi~webAppsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SitePatchResource} siteEnvelope A JSON representation of the app properties. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsUpdate(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, callback) {
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdate");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling webAppsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateApplicationSettings operation.
     * @callback module:api/WebAppsApi~webAppsUpdateApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the application settings of an app.
     * Description for Replaces the application settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} appSettings Application settings of the app.
     * @param {module:api/WebAppsApi~webAppsUpdateApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsUpdateApplicationSettings(resourceGroupName, name, subscriptionId, apiVersion, appSettings, callback) {
      let postBody = appSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateApplicationSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateApplicationSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateApplicationSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateApplicationSettings");
      }
      // verify the required parameter 'appSettings' is set
      if (appSettings === undefined || appSettings === null) {
        throw new Error("Missing the required parameter 'appSettings' when calling webAppsUpdateApplicationSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateApplicationSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateApplicationSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the application settings of an app.
     * Description for Replaces the application settings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} appSettings Application settings of the app.
     * @param {module:api/WebAppsApi~webAppsUpdateApplicationSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsUpdateApplicationSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, callback) {
      let postBody = appSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateApplicationSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateApplicationSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateApplicationSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateApplicationSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateApplicationSettingsSlot");
      }
      // verify the required parameter 'appSettings' is set
      if (appSettings === undefined || appSettings === null) {
        throw new Error("Missing the required parameter 'appSettings' when calling webAppsUpdateApplicationSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateAuthSettings operation.
     * @callback module:api/WebAppsApi~webAppsUpdateAuthSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteAuthSettings} siteAuthSettings Auth settings associated with web app.
     * @param {module:api/WebAppsApi~webAppsUpdateAuthSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    webAppsUpdateAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, callback) {
      let postBody = siteAuthSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAuthSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateAuthSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAuthSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateAuthSettings");
      }
      // verify the required parameter 'siteAuthSettings' is set
      if (siteAuthSettings === undefined || siteAuthSettings === null) {
        throw new Error("Missing the required parameter 'siteAuthSettings' when calling webAppsUpdateAuthSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateAuthSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateAuthSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteAuthSettings} siteAuthSettings Auth settings associated with web app.
     * @param {module:api/WebAppsApi~webAppsUpdateAuthSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    webAppsUpdateAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, callback) {
      let postBody = siteAuthSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAuthSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateAuthSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateAuthSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAuthSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateAuthSettingsSlot");
      }
      // verify the required parameter 'siteAuthSettings' is set
      if (siteAuthSettings === undefined || siteAuthSettings === null) {
        throw new Error("Missing the required parameter 'siteAuthSettings' when calling webAppsUpdateAuthSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateAzureStorageAccounts operation.
     * @callback module:api/WebAppsApi~webAppsUpdateAzureStorageAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureStoragePropertyDictionaryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Azure storage account configurations of an app.
     * Description for Updates the Azure storage account configurations of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AzureStoragePropertyDictionaryResource} azureStorageAccounts Azure storage accounts of the app.
     * @param {module:api/WebAppsApi~webAppsUpdateAzureStorageAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureStoragePropertyDictionaryResource}
     */
    webAppsUpdateAzureStorageAccounts(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts, callback) {
      let postBody = azureStorageAccounts;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAzureStorageAccounts");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateAzureStorageAccounts");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAzureStorageAccounts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateAzureStorageAccounts");
      }
      // verify the required parameter 'azureStorageAccounts' is set
      if (azureStorageAccounts === undefined || azureStorageAccounts === null) {
        throw new Error("Missing the required parameter 'azureStorageAccounts' when calling webAppsUpdateAzureStorageAccounts");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AzureStoragePropertyDictionaryResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateAzureStorageAccountsSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateAzureStorageAccountsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureStoragePropertyDictionaryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Azure storage account configurations of an app.
     * Description for Updates the Azure storage account configurations of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AzureStoragePropertyDictionaryResource} azureStorageAccounts Azure storage accounts of the app.
     * @param {module:api/WebAppsApi~webAppsUpdateAzureStorageAccountsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureStoragePropertyDictionaryResource}
     */
    webAppsUpdateAzureStorageAccountsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts, callback) {
      let postBody = azureStorageAccounts;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateAzureStorageAccountsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateAzureStorageAccountsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateAzureStorageAccountsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateAzureStorageAccountsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateAzureStorageAccountsSlot");
      }
      // verify the required parameter 'azureStorageAccounts' is set
      if (azureStorageAccounts === undefined || azureStorageAccounts === null) {
        throw new Error("Missing the required parameter 'azureStorageAccounts' when calling webAppsUpdateAzureStorageAccountsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AzureStoragePropertyDictionaryResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateBackupConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsUpdateBackupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the backup configuration of an app.
     * Description for Updates the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Edited backup configuration.
     * @param {module:api/WebAppsApi~webAppsUpdateBackupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    webAppsUpdateBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateBackupConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateBackupConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateBackupConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateBackupConfiguration");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsUpdateBackupConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateBackupConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateBackupConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the backup configuration of an app.
     * Description for Updates the backup configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Edited backup configuration.
     * @param {module:api/WebAppsApi~webAppsUpdateBackupConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    webAppsUpdateBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateBackupConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateBackupConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateBackupConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateBackupConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateBackupConfigurationSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling webAppsUpdateBackupConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateConfiguration operation.
     * @callback module:api/WebAppsApi~webAppsUpdateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfigResource} siteConfig JSON representation of a SiteConfig object. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsUpdateConfiguration(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateConfiguration");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling webAppsUpdateConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateConfigurationSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfigResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfigResource} siteConfig JSON representation of a SiteConfig object. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfigResource}
     */
    webAppsUpdateConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateConfigurationSlot");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling webAppsUpdateConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteConfigResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateConnectionStrings operation.
     * @callback module:api/WebAppsApi~webAppsUpdateConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the connection strings of an app.
     * Description for Replaces the connection strings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionStringDictionary} connectionStrings Connection strings of the app or deployment slot. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    webAppsUpdateConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, callback) {
      let postBody = connectionStrings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConnectionStrings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateConnectionStrings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateConnectionStrings");
      }
      // verify the required parameter 'connectionStrings' is set
      if (connectionStrings === undefined || connectionStrings === null) {
        throw new Error("Missing the required parameter 'connectionStrings' when calling webAppsUpdateConnectionStrings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateConnectionStringsSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateConnectionStringsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the connection strings of an app.
     * Description for Replaces the connection strings of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionStringDictionary} connectionStrings Connection strings of the app or deployment slot. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateConnectionStringsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    webAppsUpdateConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, callback) {
      let postBody = connectionStrings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateConnectionStringsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateConnectionStringsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateConnectionStringsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateConnectionStringsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateConnectionStringsSlot");
      }
      // verify the required parameter 'connectionStrings' is set
      if (connectionStrings === undefined || connectionStrings === null) {
        throw new Error("Missing the required parameter 'connectionStrings' when calling webAppsUpdateConnectionStringsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateDiagnosticLogsConfig operation.
     * @callback module:api/WebAppsApi~webAppsUpdateDiagnosticLogsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the logging configuration of an app.
     * Description for Updates the logging configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteLogsConfig} siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \"properties\" property.
     * @param {module:api/WebAppsApi~webAppsUpdateDiagnosticLogsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    webAppsUpdateDiagnosticLogsConfig(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, callback) {
      let postBody = siteLogsConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDiagnosticLogsConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateDiagnosticLogsConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDiagnosticLogsConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateDiagnosticLogsConfig");
      }
      // verify the required parameter 'siteLogsConfig' is set
      if (siteLogsConfig === undefined || siteLogsConfig === null) {
        throw new Error("Missing the required parameter 'siteLogsConfig' when calling webAppsUpdateDiagnosticLogsConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateDiagnosticLogsConfigSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateDiagnosticLogsConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the logging configuration of an app.
     * Description for Updates the logging configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteLogsConfig} siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the \"properties\" property.
     * @param {module:api/WebAppsApi~webAppsUpdateDiagnosticLogsConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    webAppsUpdateDiagnosticLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, callback) {
      let postBody = siteLogsConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }
      // verify the required parameter 'siteLogsConfig' is set
      if (siteLogsConfig === undefined || siteLogsConfig === null) {
        throw new Error("Missing the required parameter 'siteLogsConfig' when calling webAppsUpdateDiagnosticLogsConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateDomainOwnershipIdentifier operation.
     * @callback module:api/WebAppsApi~webAppsUpdateDomainOwnershipIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param {module:api/WebAppsApi~webAppsUpdateDomainOwnershipIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsUpdateDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier, callback) {
      let postBody = domainOwnershipIdentifier;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateDomainOwnershipIdentifier");
      }
      // verify the required parameter 'domainOwnershipIdentifier' is set
      if (domainOwnershipIdentifier === undefined || domainOwnershipIdentifier === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsUpdateDomainOwnershipIdentifier");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateDomainOwnershipIdentifierSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateDomainOwnershipIdentifierSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetDomainOwnershipIdentifier200Response} domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param {module:api/WebAppsApi~webAppsUpdateDomainOwnershipIdentifierSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetDomainOwnershipIdentifier200Response}
     */
    webAppsUpdateDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier, callback) {
      let postBody = domainOwnershipIdentifier;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifierName' is set
      if (domainOwnershipIdentifierName === undefined || domainOwnershipIdentifierName === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifierName' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }
      // verify the required parameter 'domainOwnershipIdentifier' is set
      if (domainOwnershipIdentifier === undefined || domainOwnershipIdentifier === null) {
        throw new Error("Missing the required parameter 'domainOwnershipIdentifier' when calling webAppsUpdateDomainOwnershipIdentifierSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'domainOwnershipIdentifierName': domainOwnershipIdentifierName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetDomainOwnershipIdentifier200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateHybridConnection operation.
     * @callback module:api/WebAppsApi~webAppsUpdateHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetHybridConnection200Response} connectionEnvelope The details of the hybrid connection.
     * @param {module:api/WebAppsApi~webAppsUpdateHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsUpdateHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateHybridConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateHybridConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateHybridConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name The name of the web app.
     * @param {String} namespaceName The namespace for this hybrid connection.
     * @param {String} relayName The relay name for this hybrid connection.
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetHybridConnection200Response} connectionEnvelope The details of the hybrid connection.
     * @param {module:api/WebAppsApi~webAppsUpdateHybridConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetHybridConnection200Response}
     */
    webAppsUpdateHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateHybridConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateHybridConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateMetadata operation.
     * @callback module:api/WebAppsApi~webAppsUpdateMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the metadata of an app.
     * Description for Replaces the metadata of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} metadata Edited metadata of the app or deployment slot. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsUpdateMetadata(resourceGroupName, name, subscriptionId, apiVersion, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateMetadata");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateMetadata");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateMetadata");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling webAppsUpdateMetadata");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateMetadataSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateMetadataSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the metadata of an app.
     * Description for Replaces the metadata of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} metadata Edited metadata of the app or deployment slot. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateMetadataSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    webAppsUpdateMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateMetadataSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateMetadataSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateMetadataSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateMetadataSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateMetadataSlot");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling webAppsUpdateMetadataSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdatePremierAddOn operation.
     * @callback module:api/WebAppsApi~webAppsUpdatePremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOnPatchResource} premierAddOn A JSON representation of the edited premier add-on.
     * @param {module:api/WebAppsApi~webAppsUpdatePremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsUpdatePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdatePremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdatePremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsUpdatePremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdatePremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdatePremierAddOn");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling webAppsUpdatePremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdatePremierAddOnSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdatePremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} premierAddOnName Add-on name.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOnPatchResource} premierAddOn A JSON representation of the edited premier add-on.
     * @param {module:api/WebAppsApi~webAppsUpdatePremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOn}
     */
    webAppsUpdatePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdatePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling webAppsUpdatePremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PremierAddOn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateRelayServiceConnection operation.
     * @callback module:api/WebAppsApi~webAppsUpdateRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope Details of the hybrid connection configuration.
     * @param {module:api/WebAppsApi~webAppsUpdateRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsUpdateRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsUpdateRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateRelayServiceConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateRelayServiceConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} entityName Name of the hybrid connection configuration.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope Details of the hybrid connection configuration.
     * @param {module:api/WebAppsApi~webAppsUpdateRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    webAppsUpdateRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateRelayServiceConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSitePushSettings operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSitePushSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Push settings associated with web app.
     * Description for Updates the Push settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} pushSettings Push settings associated with web app.
     * @param {module:api/WebAppsApi~webAppsUpdateSitePushSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsUpdateSitePushSettingsRequest}
     */
    webAppsUpdateSitePushSettings(resourceGroupName, name, subscriptionId, apiVersion, pushSettings, callback) {
      let postBody = pushSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSitePushSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSitePushSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSitePushSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSitePushSettings");
      }
      // verify the required parameter 'pushSettings' is set
      if (pushSettings === undefined || pushSettings === null) {
        throw new Error("Missing the required parameter 'pushSettings' when calling webAppsUpdateSitePushSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsUpdateSitePushSettingsRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSitePushSettingsSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSitePushSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Push settings associated with web app.
     * Description for Updates the Push settings associated with web app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of web app.
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsUpdateSitePushSettingsRequest} pushSettings Push settings associated with web app.
     * @param {module:api/WebAppsApi~webAppsUpdateSitePushSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsUpdateSitePushSettingsRequest}
     */
    webAppsUpdateSitePushSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings, callback) {
      let postBody = pushSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSitePushSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSitePushSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateSitePushSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSitePushSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSitePushSettingsSlot");
      }
      // verify the required parameter 'pushSettings' is set
      if (pushSettings === undefined || pushSettings === null) {
        throw new Error("Missing the required parameter 'pushSettings' when calling webAppsUpdateSitePushSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsUpdateSitePushSettingsRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
     * @param {String} slot Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SitePatchResource} siteEnvelope A JSON representation of the app properties. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGet200Response}
     */
    webAppsUpdateSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, callback) {
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSlot");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling webAppsUpdateSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSlotConfigurationNames operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSlotConfigurationNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotConfigNamesResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SlotConfigNamesResource} slotConfigNames Names of application settings and connection strings. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSlotConfigurationNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotConfigNamesResource}
     */
    webAppsUpdateSlotConfigurationNames(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, callback) {
      let postBody = slotConfigNames;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSlotConfigurationNames");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSlotConfigurationNames");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSlotConfigurationNames");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSlotConfigurationNames");
      }
      // verify the required parameter 'slotConfigNames' is set
      if (slotConfigNames === undefined || slotConfigNames === null) {
        throw new Error("Missing the required parameter 'slotConfigNames' when calling webAppsUpdateSlotConfigurationNames");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SlotConfigNamesResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSourceControl operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsUpdateSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSourceControl");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling webAppsUpdateSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSourceControlSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    webAppsUpdateSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSourceControlSlot");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling webAppsUpdateSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSwiftVirtualNetworkConnection operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSwiftVirtualNetworkConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SwiftVirtualNetwork} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSwiftVirtualNetworkConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsUpdateSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSwiftVirtualNetworkConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateSwiftVirtualNetworkConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateSwiftVirtualNetworkConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateSwiftVirtualNetworkConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwiftVirtualNetwork} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \"swiftSupported\" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/SwiftVirtualNetwork} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateSwiftVirtualNetworkConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwiftVirtualNetwork}
     */
    webAppsUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateSwiftVirtualNetworkConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwiftVirtualNetwork;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateVnetConnection operation.
     * @callback module:api/WebAppsApi~webAppsUpdateVnetConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of an existing Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateVnetConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsUpdateVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateVnetConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateVnetConnectionGateway operation.
     * @callback module:api/WebAppsApi~webAppsUpdateVnetConnectionGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/WebAppsApi~webAppsUpdateVnetConnectionGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsUpdateVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateVnetConnectionGatewaySlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateVnetConnectionGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Currently, the only supported string is \"primary\".
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionGatewaySlot200Response} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/WebAppsApi~webAppsUpdateVnetConnectionGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionGatewaySlot200Response}
     */
    webAppsUpdateVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionGatewaySlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webAppsUpdateVnetConnectionSlot operation.
     * @callback module:api/WebAppsApi~webAppsUpdateVnetConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the app.
     * @param {String} vnetName Name of an existing Virtual Network.
     * @param {String} slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WebAppsGetVnetConnectionSlot200Response} connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param {module:api/WebAppsApi~webAppsUpdateVnetConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebAppsGetVnetConnectionSlot200Response}
     */
    webAppsUpdateVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webAppsUpdateVnetConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling webAppsUpdateVnetConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebAppsGetVnetConnectionSlot200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
