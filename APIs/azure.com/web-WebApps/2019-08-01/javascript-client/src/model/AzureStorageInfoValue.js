/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AzureStorageInfoValue model module.
 * @module model/AzureStorageInfoValue
 * @version 2019-08-01
 */
class AzureStorageInfoValue {
    /**
     * Constructs a new <code>AzureStorageInfoValue</code>.
     * Azure Files or Blob Storage access information value for dictionary storage.
     * @alias module:model/AzureStorageInfoValue
     */
    constructor() { 
        
        AzureStorageInfoValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AzureStorageInfoValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureStorageInfoValue} obj Optional instance to populate.
     * @return {module:model/AzureStorageInfoValue} The populated <code>AzureStorageInfoValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureStorageInfoValue();

            if (data.hasOwnProperty('accessKey')) {
                obj['accessKey'] = ApiClient.convertToType(data['accessKey'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('mountPath')) {
                obj['mountPath'] = ApiClient.convertToType(data['mountPath'], 'String');
            }
            if (data.hasOwnProperty('shareName')) {
                obj['shareName'] = ApiClient.convertToType(data['shareName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureStorageInfoValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureStorageInfoValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessKey'] && !(typeof data['accessKey'] === 'string' || data['accessKey'] instanceof String)) {
            throw new Error("Expected the field `accessKey` to be a primitive type in the JSON string but got " + data['accessKey']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['mountPath'] && !(typeof data['mountPath'] === 'string' || data['mountPath'] instanceof String)) {
            throw new Error("Expected the field `mountPath` to be a primitive type in the JSON string but got " + data['mountPath']);
        }
        // ensure the json data is a string
        if (data['shareName'] && !(typeof data['shareName'] === 'string' || data['shareName'] instanceof String)) {
            throw new Error("Expected the field `shareName` to be a primitive type in the JSON string but got " + data['shareName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Access key for the storage account.
 * @member {String} accessKey
 */
AzureStorageInfoValue.prototype['accessKey'] = undefined;

/**
 * Name of the storage account.
 * @member {String} accountName
 */
AzureStorageInfoValue.prototype['accountName'] = undefined;

/**
 * Path to mount the storage within the site's runtime environment.
 * @member {String} mountPath
 */
AzureStorageInfoValue.prototype['mountPath'] = undefined;

/**
 * Name of the file share (container name, for Blob storage).
 * @member {String} shareName
 */
AzureStorageInfoValue.prototype['shareName'] = undefined;

/**
 * State of the storage account.
 * @member {module:model/AzureStorageInfoValue.StateEnum} state
 */
AzureStorageInfoValue.prototype['state'] = undefined;

/**
 * Type of storage.
 * @member {module:model/AzureStorageInfoValue.TypeEnum} type
 */
AzureStorageInfoValue.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AzureStorageInfoValue['StateEnum'] = {

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "InvalidCredentials"
     * @const
     */
    "InvalidCredentials": "InvalidCredentials",

    /**
     * value: "InvalidShare"
     * @const
     */
    "InvalidShare": "InvalidShare"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AzureStorageInfoValue['TypeEnum'] = {

    /**
     * value: "AzureFiles"
     * @const
     */
    "AzureFiles": "AzureFiles",

    /**
     * value: "AzureBlob"
     * @const
     */
    "AzureBlob": "AzureBlob"
};



export default AzureStorageInfoValue;

