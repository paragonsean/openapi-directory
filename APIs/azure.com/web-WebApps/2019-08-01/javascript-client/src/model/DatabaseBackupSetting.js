/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseBackupSetting model module.
 * @module model/DatabaseBackupSetting
 * @version 2019-08-01
 */
class DatabaseBackupSetting {
    /**
     * Constructs a new <code>DatabaseBackupSetting</code>.
     * Database backup settings.
     * @alias module:model/DatabaseBackupSetting
     * @param databaseType {module:model/DatabaseBackupSetting.DatabaseTypeEnum} Database type (e.g. SqlAzure / MySql).
     */
    constructor(databaseType) { 
        
        DatabaseBackupSetting.initialize(this, databaseType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseType) { 
        obj['databaseType'] = databaseType;
    }

    /**
     * Constructs a <code>DatabaseBackupSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseBackupSetting} obj Optional instance to populate.
     * @return {module:model/DatabaseBackupSetting} The populated <code>DatabaseBackupSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseBackupSetting();

            if (data.hasOwnProperty('connectionString')) {
                obj['connectionString'] = ApiClient.convertToType(data['connectionString'], 'String');
            }
            if (data.hasOwnProperty('connectionStringName')) {
                obj['connectionStringName'] = ApiClient.convertToType(data['connectionStringName'], 'String');
            }
            if (data.hasOwnProperty('databaseType')) {
                obj['databaseType'] = ApiClient.convertToType(data['databaseType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseBackupSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseBackupSetting</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabaseBackupSetting.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionString'] && !(typeof data['connectionString'] === 'string' || data['connectionString'] instanceof String)) {
            throw new Error("Expected the field `connectionString` to be a primitive type in the JSON string but got " + data['connectionString']);
        }
        // ensure the json data is a string
        if (data['connectionStringName'] && !(typeof data['connectionStringName'] === 'string' || data['connectionStringName'] instanceof String)) {
            throw new Error("Expected the field `connectionStringName` to be a primitive type in the JSON string but got " + data['connectionStringName']);
        }
        // ensure the json data is a string
        if (data['databaseType'] && !(typeof data['databaseType'] === 'string' || data['databaseType'] instanceof String)) {
            throw new Error("Expected the field `databaseType` to be a primitive type in the JSON string but got " + data['databaseType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

DatabaseBackupSetting.RequiredProperties = ["databaseType"];

/**
 * Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
 * @member {String} connectionString
 */
DatabaseBackupSetting.prototype['connectionString'] = undefined;

/**
 * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options.
 * @member {String} connectionStringName
 */
DatabaseBackupSetting.prototype['connectionStringName'] = undefined;

/**
 * Database type (e.g. SqlAzure / MySql).
 * @member {module:model/DatabaseBackupSetting.DatabaseTypeEnum} databaseType
 */
DatabaseBackupSetting.prototype['databaseType'] = undefined;

/**
 * @member {String} name
 */
DatabaseBackupSetting.prototype['name'] = undefined;





/**
 * Allowed values for the <code>databaseType</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseBackupSetting['DatabaseTypeEnum'] = {

    /**
     * value: "SqlAzure"
     * @const
     */
    "SqlAzure": "SqlAzure",

    /**
     * value: "MySql"
     * @const
     */
    "MySql": "MySql",

    /**
     * value: "LocalMySql"
     * @const
     */
    "LocalMySql": "LocalMySql",

    /**
     * value: "PostgreSql"
     * @const
     */
    "PostgreSql": "PostgreSql"
};



export default DatabaseBackupSetting;

