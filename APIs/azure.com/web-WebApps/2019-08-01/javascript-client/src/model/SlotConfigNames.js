/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SlotConfigNames model module.
 * @module model/SlotConfigNames
 * @version 2019-08-01
 */
class SlotConfigNames {
    /**
     * Constructs a new <code>SlotConfigNames</code>.
     * Names for connection strings, application settings, and external Azure storage account configuration identifiers to be marked as sticky to the deployment slot and not moved during a swap operation. This is valid for all deployment slots in an app.
     * @alias module:model/SlotConfigNames
     */
    constructor() { 
        
        SlotConfigNames.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlotConfigNames</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlotConfigNames} obj Optional instance to populate.
     * @return {module:model/SlotConfigNames} The populated <code>SlotConfigNames</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlotConfigNames();

            if (data.hasOwnProperty('appSettingNames')) {
                obj['appSettingNames'] = ApiClient.convertToType(data['appSettingNames'], ['String']);
            }
            if (data.hasOwnProperty('azureStorageConfigNames')) {
                obj['azureStorageConfigNames'] = ApiClient.convertToType(data['azureStorageConfigNames'], ['String']);
            }
            if (data.hasOwnProperty('connectionStringNames')) {
                obj['connectionStringNames'] = ApiClient.convertToType(data['connectionStringNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlotConfigNames</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlotConfigNames</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['appSettingNames'])) {
            throw new Error("Expected the field `appSettingNames` to be an array in the JSON data but got " + data['appSettingNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['azureStorageConfigNames'])) {
            throw new Error("Expected the field `azureStorageConfigNames` to be an array in the JSON data but got " + data['azureStorageConfigNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connectionStringNames'])) {
            throw new Error("Expected the field `connectionStringNames` to be an array in the JSON data but got " + data['connectionStringNames']);
        }

        return true;
    }


}



/**
 * List of application settings names.
 * @member {Array.<String>} appSettingNames
 */
SlotConfigNames.prototype['appSettingNames'] = undefined;

/**
 * List of external Azure storage account identifiers.
 * @member {Array.<String>} azureStorageConfigNames
 */
SlotConfigNames.prototype['azureStorageConfigNames'] = undefined;

/**
 * List of connection string names.
 * @member {Array.<String>} connectionStringNames
 */
SlotConfigNames.prototype['connectionStringNames'] = undefined;






export default SlotConfigNames;

