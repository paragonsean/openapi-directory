/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKVReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKVReference::OAIApiKVReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKVReference::OAIApiKVReference() {
    this->initializeModel();
}

OAIApiKVReference::~OAIApiKVReference() {}

void OAIApiKVReference::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;

    m_secret_version_isSet = false;
    m_secret_version_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vault_name_isSet = false;
    m_vault_name_isValid = false;
}

void OAIApiKVReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKVReference::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("identityType")]);
    m_identity_type_isSet = !json[QString("identityType")].isNull() && m_identity_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;

    m_secret_version_isValid = ::OpenAPI::fromJsonValue(m_secret_version, json[QString("secretVersion")]);
    m_secret_version_isSet = !json[QString("secretVersion")].isNull() && m_secret_version_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vault_name_isValid = ::OpenAPI::fromJsonValue(m_vault_name, json[QString("vaultName")]);
    m_vault_name_isSet = !json[QString("vaultName")].isNull() && m_vault_name_isValid;
}

QString OAIApiKVReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKVReference::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_identity_type_isSet) {
        obj.insert(QString("identityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    if (m_secret_version_isSet) {
        obj.insert(QString("secretVersion"), ::OpenAPI::toJsonValue(m_secret_version));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vault_name_isSet) {
        obj.insert(QString("vaultName"), ::OpenAPI::toJsonValue(m_vault_name));
    }
    return obj;
}

QString OAIApiKVReference::getDetails() const {
    return m_details;
}
void OAIApiKVReference::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIApiKVReference::is_details_Set() const{
    return m_details_isSet;
}

bool OAIApiKVReference::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIApiKVReference::getIdentityType() const {
    return m_identity_type;
}
void OAIApiKVReference::setIdentityType(const QString &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIApiKVReference::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIApiKVReference::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

QString OAIApiKVReference::getLocation() const {
    return m_location;
}
void OAIApiKVReference::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIApiKVReference::is_location_Set() const{
    return m_location_isSet;
}

bool OAIApiKVReference::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIApiKVReference::getReference() const {
    return m_reference;
}
void OAIApiKVReference::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIApiKVReference::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIApiKVReference::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIApiKVReference::getSecretName() const {
    return m_secret_name;
}
void OAIApiKVReference::setSecretName(const QString &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAIApiKVReference::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAIApiKVReference::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

QString OAIApiKVReference::getSecretVersion() const {
    return m_secret_version;
}
void OAIApiKVReference::setSecretVersion(const QString &secret_version) {
    m_secret_version = secret_version;
    m_secret_version_isSet = true;
}

bool OAIApiKVReference::is_secret_version_Set() const{
    return m_secret_version_isSet;
}

bool OAIApiKVReference::is_secret_version_Valid() const{
    return m_secret_version_isValid;
}

QString OAIApiKVReference::getSource() const {
    return m_source;
}
void OAIApiKVReference::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIApiKVReference::is_source_Set() const{
    return m_source_isSet;
}

bool OAIApiKVReference::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIApiKVReference::getStatus() const {
    return m_status;
}
void OAIApiKVReference::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApiKVReference::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApiKVReference::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApiKVReference::getVaultName() const {
    return m_vault_name;
}
void OAIApiKVReference::setVaultName(const QString &vault_name) {
    m_vault_name = vault_name;
    m_vault_name_isSet = true;
}

bool OAIApiKVReference::is_vault_name_Set() const{
    return m_vault_name_isSet;
}

bool OAIApiKVReference::is_vault_name_Valid() const{
    return m_vault_name_isValid;
}

bool OAIApiKVReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKVReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
