/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerThrottlingData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerThrottlingData::OAIContainerThrottlingData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerThrottlingData::OAIContainerThrottlingData() {
    this->initializeModel();
}

OAIContainerThrottlingData::~OAIContainerThrottlingData() {}

void OAIContainerThrottlingData::initializeModel() {

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_throttled_periods_isSet = false;
    m_throttled_periods_isValid = false;

    m_throttled_time_isSet = false;
    m_throttled_time_isValid = false;
}

void OAIContainerThrottlingData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerThrottlingData::fromJsonObject(QJsonObject json) {

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_throttled_periods_isValid = ::OpenAPI::fromJsonValue(m_throttled_periods, json[QString("throttledPeriods")]);
    m_throttled_periods_isSet = !json[QString("throttledPeriods")].isNull() && m_throttled_periods_isValid;

    m_throttled_time_isValid = ::OpenAPI::fromJsonValue(m_throttled_time, json[QString("throttledTime")]);
    m_throttled_time_isSet = !json[QString("throttledTime")].isNull() && m_throttled_time_isValid;
}

QString OAIContainerThrottlingData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerThrottlingData::asJsonObject() const {
    QJsonObject obj;
    if (m_periods_isSet) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_throttled_periods_isSet) {
        obj.insert(QString("throttledPeriods"), ::OpenAPI::toJsonValue(m_throttled_periods));
    }
    if (m_throttled_time_isSet) {
        obj.insert(QString("throttledTime"), ::OpenAPI::toJsonValue(m_throttled_time));
    }
    return obj;
}

qint32 OAIContainerThrottlingData::getPeriods() const {
    return m_periods;
}
void OAIContainerThrottlingData::setPeriods(const qint32 &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIContainerThrottlingData::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIContainerThrottlingData::is_periods_Valid() const{
    return m_periods_isValid;
}

qint32 OAIContainerThrottlingData::getThrottledPeriods() const {
    return m_throttled_periods;
}
void OAIContainerThrottlingData::setThrottledPeriods(const qint32 &throttled_periods) {
    m_throttled_periods = throttled_periods;
    m_throttled_periods_isSet = true;
}

bool OAIContainerThrottlingData::is_throttled_periods_Set() const{
    return m_throttled_periods_isSet;
}

bool OAIContainerThrottlingData::is_throttled_periods_Valid() const{
    return m_throttled_periods_isValid;
}

qint32 OAIContainerThrottlingData::getThrottledTime() const {
    return m_throttled_time;
}
void OAIContainerThrottlingData::setThrottledTime(const qint32 &throttled_time) {
    m_throttled_time = throttled_time;
    m_throttled_time_isSet = true;
}

bool OAIContainerThrottlingData::is_throttled_time_Set() const{
    return m_throttled_time_isSet;
}

bool OAIContainerThrottlingData::is_throttled_time_Valid() const{
    return m_throttled_time_isValid;
}

bool OAIContainerThrottlingData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttled_periods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttled_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerThrottlingData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
