/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureStorageInfoValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureStorageInfoValue::OAIAzureStorageInfoValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureStorageInfoValue::OAIAzureStorageInfoValue() {
    this->initializeModel();
}

OAIAzureStorageInfoValue::~OAIAzureStorageInfoValue() {}

void OAIAzureStorageInfoValue::initializeModel() {

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAzureStorageInfoValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureStorageInfoValue::fromJsonObject(QJsonObject json) {

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAzureStorageInfoValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureStorageInfoValue::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_isSet) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAzureStorageInfoValue::getAccessKey() const {
    return m_access_key;
}
void OAIAzureStorageInfoValue::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIAzureStorageInfoValue::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIAzureStorageInfoValue::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIAzureStorageInfoValue::getAccountName() const {
    return m_account_name;
}
void OAIAzureStorageInfoValue::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAzureStorageInfoValue::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAzureStorageInfoValue::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIAzureStorageInfoValue::getMountPath() const {
    return m_mount_path;
}
void OAIAzureStorageInfoValue::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIAzureStorageInfoValue::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIAzureStorageInfoValue::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

QString OAIAzureStorageInfoValue::getShareName() const {
    return m_share_name;
}
void OAIAzureStorageInfoValue::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIAzureStorageInfoValue::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIAzureStorageInfoValue::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAIAzureStorageInfoValue::getState() const {
    return m_state;
}
void OAIAzureStorageInfoValue::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAzureStorageInfoValue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAzureStorageInfoValue::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAzureStorageInfoValue::getType() const {
    return m_type;
}
void OAIAzureStorageInfoValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAzureStorageInfoValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAzureStorageInfoValue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAzureStorageInfoValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureStorageInfoValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
