/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebApps_List_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebApps_List_200_response_value_inner_properties::OAIWebApps_List_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebApps_List_200_response_value_inner_properties::OAIWebApps_List_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIWebApps_List_200_response_value_inner_properties::~OAIWebApps_List_200_response_value_inner_properties() {}

void OAIWebApps_List_200_response_value_inner_properties::initializeModel() {

    m_availability_state_isSet = false;
    m_availability_state_isValid = false;

    m_client_affinity_enabled_isSet = false;
    m_client_affinity_enabled_isValid = false;

    m_client_cert_enabled_isSet = false;
    m_client_cert_enabled_isValid = false;

    m_client_cert_exclusion_paths_isSet = false;
    m_client_cert_exclusion_paths_isValid = false;

    m_cloning_info_isSet = false;
    m_cloning_info_isValid = false;

    m_container_size_isSet = false;
    m_container_size_isValid = false;

    m_daily_memory_time_quota_isSet = false;
    m_daily_memory_time_quota_isValid = false;

    m_default_host_name_isSet = false;
    m_default_host_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_enabled_host_names_isSet = false;
    m_enabled_host_names_isValid = false;

    m_host_name_ssl_states_isSet = false;
    m_host_name_ssl_states_isValid = false;

    m_host_names_isSet = false;
    m_host_names_isValid = false;

    m_host_names_disabled_isSet = false;
    m_host_names_disabled_isValid = false;

    m_hosting_environment_profile_isSet = false;
    m_hosting_environment_profile_isValid = false;

    m_https_only_isSet = false;
    m_https_only_isValid = false;

    m_hyper_v_isSet = false;
    m_hyper_v_isValid = false;

    m_in_progress_operation_id_isSet = false;
    m_in_progress_operation_id_isValid = false;

    m_is_default_container_isSet = false;
    m_is_default_container_isValid = false;

    m_is_xenon_isSet = false;
    m_is_xenon_isValid = false;

    m_last_modified_time_utc_isSet = false;
    m_last_modified_time_utc_isValid = false;

    m_max_number_of_workers_isSet = false;
    m_max_number_of_workers_isValid = false;

    m_outbound_ip_addresses_isSet = false;
    m_outbound_ip_addresses_isValid = false;

    m_possible_outbound_ip_addresses_isSet = false;
    m_possible_outbound_ip_addresses_isValid = false;

    m_redundancy_mode_isSet = false;
    m_redundancy_mode_isValid = false;

    m_repository_site_name_isSet = false;
    m_repository_site_name_isValid = false;

    m_reserved_isSet = false;
    m_reserved_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_scm_site_also_stopped_isSet = false;
    m_scm_site_also_stopped_isValid = false;

    m_server_farm_id_isSet = false;
    m_server_farm_id_isValid = false;

    m_site_config_isSet = false;
    m_site_config_isValid = false;

    m_slot_swap_status_isSet = false;
    m_slot_swap_status_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_suspended_till_isSet = false;
    m_suspended_till_isValid = false;

    m_target_swap_slot_isSet = false;
    m_target_swap_slot_isValid = false;

    m_traffic_manager_host_names_isSet = false;
    m_traffic_manager_host_names_isValid = false;

    m_usage_state_isSet = false;
    m_usage_state_isValid = false;
}

void OAIWebApps_List_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebApps_List_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_availability_state_isValid = ::OpenAPI::fromJsonValue(m_availability_state, json[QString("availabilityState")]);
    m_availability_state_isSet = !json[QString("availabilityState")].isNull() && m_availability_state_isValid;

    m_client_affinity_enabled_isValid = ::OpenAPI::fromJsonValue(m_client_affinity_enabled, json[QString("clientAffinityEnabled")]);
    m_client_affinity_enabled_isSet = !json[QString("clientAffinityEnabled")].isNull() && m_client_affinity_enabled_isValid;

    m_client_cert_enabled_isValid = ::OpenAPI::fromJsonValue(m_client_cert_enabled, json[QString("clientCertEnabled")]);
    m_client_cert_enabled_isSet = !json[QString("clientCertEnabled")].isNull() && m_client_cert_enabled_isValid;

    m_client_cert_exclusion_paths_isValid = ::OpenAPI::fromJsonValue(m_client_cert_exclusion_paths, json[QString("clientCertExclusionPaths")]);
    m_client_cert_exclusion_paths_isSet = !json[QString("clientCertExclusionPaths")].isNull() && m_client_cert_exclusion_paths_isValid;

    m_cloning_info_isValid = ::OpenAPI::fromJsonValue(m_cloning_info, json[QString("cloningInfo")]);
    m_cloning_info_isSet = !json[QString("cloningInfo")].isNull() && m_cloning_info_isValid;

    m_container_size_isValid = ::OpenAPI::fromJsonValue(m_container_size, json[QString("containerSize")]);
    m_container_size_isSet = !json[QString("containerSize")].isNull() && m_container_size_isValid;

    m_daily_memory_time_quota_isValid = ::OpenAPI::fromJsonValue(m_daily_memory_time_quota, json[QString("dailyMemoryTimeQuota")]);
    m_daily_memory_time_quota_isSet = !json[QString("dailyMemoryTimeQuota")].isNull() && m_daily_memory_time_quota_isValid;

    m_default_host_name_isValid = ::OpenAPI::fromJsonValue(m_default_host_name, json[QString("defaultHostName")]);
    m_default_host_name_isSet = !json[QString("defaultHostName")].isNull() && m_default_host_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_enabled_host_names_isValid = ::OpenAPI::fromJsonValue(m_enabled_host_names, json[QString("enabledHostNames")]);
    m_enabled_host_names_isSet = !json[QString("enabledHostNames")].isNull() && m_enabled_host_names_isValid;

    m_host_name_ssl_states_isValid = ::OpenAPI::fromJsonValue(m_host_name_ssl_states, json[QString("hostNameSslStates")]);
    m_host_name_ssl_states_isSet = !json[QString("hostNameSslStates")].isNull() && m_host_name_ssl_states_isValid;

    m_host_names_isValid = ::OpenAPI::fromJsonValue(m_host_names, json[QString("hostNames")]);
    m_host_names_isSet = !json[QString("hostNames")].isNull() && m_host_names_isValid;

    m_host_names_disabled_isValid = ::OpenAPI::fromJsonValue(m_host_names_disabled, json[QString("hostNamesDisabled")]);
    m_host_names_disabled_isSet = !json[QString("hostNamesDisabled")].isNull() && m_host_names_disabled_isValid;

    m_hosting_environment_profile_isValid = ::OpenAPI::fromJsonValue(m_hosting_environment_profile, json[QString("hostingEnvironmentProfile")]);
    m_hosting_environment_profile_isSet = !json[QString("hostingEnvironmentProfile")].isNull() && m_hosting_environment_profile_isValid;

    m_https_only_isValid = ::OpenAPI::fromJsonValue(m_https_only, json[QString("httpsOnly")]);
    m_https_only_isSet = !json[QString("httpsOnly")].isNull() && m_https_only_isValid;

    m_hyper_v_isValid = ::OpenAPI::fromJsonValue(m_hyper_v, json[QString("hyperV")]);
    m_hyper_v_isSet = !json[QString("hyperV")].isNull() && m_hyper_v_isValid;

    m_in_progress_operation_id_isValid = ::OpenAPI::fromJsonValue(m_in_progress_operation_id, json[QString("inProgressOperationId")]);
    m_in_progress_operation_id_isSet = !json[QString("inProgressOperationId")].isNull() && m_in_progress_operation_id_isValid;

    m_is_default_container_isValid = ::OpenAPI::fromJsonValue(m_is_default_container, json[QString("isDefaultContainer")]);
    m_is_default_container_isSet = !json[QString("isDefaultContainer")].isNull() && m_is_default_container_isValid;

    m_is_xenon_isValid = ::OpenAPI::fromJsonValue(m_is_xenon, json[QString("isXenon")]);
    m_is_xenon_isSet = !json[QString("isXenon")].isNull() && m_is_xenon_isValid;

    m_last_modified_time_utc_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time_utc, json[QString("lastModifiedTimeUtc")]);
    m_last_modified_time_utc_isSet = !json[QString("lastModifiedTimeUtc")].isNull() && m_last_modified_time_utc_isValid;

    m_max_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_workers, json[QString("maxNumberOfWorkers")]);
    m_max_number_of_workers_isSet = !json[QString("maxNumberOfWorkers")].isNull() && m_max_number_of_workers_isValid;

    m_outbound_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_outbound_ip_addresses, json[QString("outboundIpAddresses")]);
    m_outbound_ip_addresses_isSet = !json[QString("outboundIpAddresses")].isNull() && m_outbound_ip_addresses_isValid;

    m_possible_outbound_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_possible_outbound_ip_addresses, json[QString("possibleOutboundIpAddresses")]);
    m_possible_outbound_ip_addresses_isSet = !json[QString("possibleOutboundIpAddresses")].isNull() && m_possible_outbound_ip_addresses_isValid;

    m_redundancy_mode_isValid = ::OpenAPI::fromJsonValue(m_redundancy_mode, json[QString("redundancyMode")]);
    m_redundancy_mode_isSet = !json[QString("redundancyMode")].isNull() && m_redundancy_mode_isValid;

    m_repository_site_name_isValid = ::OpenAPI::fromJsonValue(m_repository_site_name, json[QString("repositorySiteName")]);
    m_repository_site_name_isSet = !json[QString("repositorySiteName")].isNull() && m_repository_site_name_isValid;

    m_reserved_isValid = ::OpenAPI::fromJsonValue(m_reserved, json[QString("reserved")]);
    m_reserved_isSet = !json[QString("reserved")].isNull() && m_reserved_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_scm_site_also_stopped_isValid = ::OpenAPI::fromJsonValue(m_scm_site_also_stopped, json[QString("scmSiteAlsoStopped")]);
    m_scm_site_also_stopped_isSet = !json[QString("scmSiteAlsoStopped")].isNull() && m_scm_site_also_stopped_isValid;

    m_server_farm_id_isValid = ::OpenAPI::fromJsonValue(m_server_farm_id, json[QString("serverFarmId")]);
    m_server_farm_id_isSet = !json[QString("serverFarmId")].isNull() && m_server_farm_id_isValid;

    m_site_config_isValid = ::OpenAPI::fromJsonValue(m_site_config, json[QString("siteConfig")]);
    m_site_config_isSet = !json[QString("siteConfig")].isNull() && m_site_config_isValid;

    m_slot_swap_status_isValid = ::OpenAPI::fromJsonValue(m_slot_swap_status, json[QString("slotSwapStatus")]);
    m_slot_swap_status_isSet = !json[QString("slotSwapStatus")].isNull() && m_slot_swap_status_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_suspended_till_isValid = ::OpenAPI::fromJsonValue(m_suspended_till, json[QString("suspendedTill")]);
    m_suspended_till_isSet = !json[QString("suspendedTill")].isNull() && m_suspended_till_isValid;

    m_target_swap_slot_isValid = ::OpenAPI::fromJsonValue(m_target_swap_slot, json[QString("targetSwapSlot")]);
    m_target_swap_slot_isSet = !json[QString("targetSwapSlot")].isNull() && m_target_swap_slot_isValid;

    m_traffic_manager_host_names_isValid = ::OpenAPI::fromJsonValue(m_traffic_manager_host_names, json[QString("trafficManagerHostNames")]);
    m_traffic_manager_host_names_isSet = !json[QString("trafficManagerHostNames")].isNull() && m_traffic_manager_host_names_isValid;

    m_usage_state_isValid = ::OpenAPI::fromJsonValue(m_usage_state, json[QString("usageState")]);
    m_usage_state_isSet = !json[QString("usageState")].isNull() && m_usage_state_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebApps_List_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_state_isSet) {
        obj.insert(QString("availabilityState"), ::OpenAPI::toJsonValue(m_availability_state));
    }
    if (m_client_affinity_enabled_isSet) {
        obj.insert(QString("clientAffinityEnabled"), ::OpenAPI::toJsonValue(m_client_affinity_enabled));
    }
    if (m_client_cert_enabled_isSet) {
        obj.insert(QString("clientCertEnabled"), ::OpenAPI::toJsonValue(m_client_cert_enabled));
    }
    if (m_client_cert_exclusion_paths_isSet) {
        obj.insert(QString("clientCertExclusionPaths"), ::OpenAPI::toJsonValue(m_client_cert_exclusion_paths));
    }
    if (m_cloning_info.isSet()) {
        obj.insert(QString("cloningInfo"), ::OpenAPI::toJsonValue(m_cloning_info));
    }
    if (m_container_size_isSet) {
        obj.insert(QString("containerSize"), ::OpenAPI::toJsonValue(m_container_size));
    }
    if (m_daily_memory_time_quota_isSet) {
        obj.insert(QString("dailyMemoryTimeQuota"), ::OpenAPI::toJsonValue(m_daily_memory_time_quota));
    }
    if (m_default_host_name_isSet) {
        obj.insert(QString("defaultHostName"), ::OpenAPI::toJsonValue(m_default_host_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_enabled_host_names.size() > 0) {
        obj.insert(QString("enabledHostNames"), ::OpenAPI::toJsonValue(m_enabled_host_names));
    }
    if (m_host_name_ssl_states.size() > 0) {
        obj.insert(QString("hostNameSslStates"), ::OpenAPI::toJsonValue(m_host_name_ssl_states));
    }
    if (m_host_names.size() > 0) {
        obj.insert(QString("hostNames"), ::OpenAPI::toJsonValue(m_host_names));
    }
    if (m_host_names_disabled_isSet) {
        obj.insert(QString("hostNamesDisabled"), ::OpenAPI::toJsonValue(m_host_names_disabled));
    }
    if (m_hosting_environment_profile.isSet()) {
        obj.insert(QString("hostingEnvironmentProfile"), ::OpenAPI::toJsonValue(m_hosting_environment_profile));
    }
    if (m_https_only_isSet) {
        obj.insert(QString("httpsOnly"), ::OpenAPI::toJsonValue(m_https_only));
    }
    if (m_hyper_v_isSet) {
        obj.insert(QString("hyperV"), ::OpenAPI::toJsonValue(m_hyper_v));
    }
    if (m_in_progress_operation_id_isSet) {
        obj.insert(QString("inProgressOperationId"), ::OpenAPI::toJsonValue(m_in_progress_operation_id));
    }
    if (m_is_default_container_isSet) {
        obj.insert(QString("isDefaultContainer"), ::OpenAPI::toJsonValue(m_is_default_container));
    }
    if (m_is_xenon_isSet) {
        obj.insert(QString("isXenon"), ::OpenAPI::toJsonValue(m_is_xenon));
    }
    if (m_last_modified_time_utc_isSet) {
        obj.insert(QString("lastModifiedTimeUtc"), ::OpenAPI::toJsonValue(m_last_modified_time_utc));
    }
    if (m_max_number_of_workers_isSet) {
        obj.insert(QString("maxNumberOfWorkers"), ::OpenAPI::toJsonValue(m_max_number_of_workers));
    }
    if (m_outbound_ip_addresses_isSet) {
        obj.insert(QString("outboundIpAddresses"), ::OpenAPI::toJsonValue(m_outbound_ip_addresses));
    }
    if (m_possible_outbound_ip_addresses_isSet) {
        obj.insert(QString("possibleOutboundIpAddresses"), ::OpenAPI::toJsonValue(m_possible_outbound_ip_addresses));
    }
    if (m_redundancy_mode_isSet) {
        obj.insert(QString("redundancyMode"), ::OpenAPI::toJsonValue(m_redundancy_mode));
    }
    if (m_repository_site_name_isSet) {
        obj.insert(QString("repositorySiteName"), ::OpenAPI::toJsonValue(m_repository_site_name));
    }
    if (m_reserved_isSet) {
        obj.insert(QString("reserved"), ::OpenAPI::toJsonValue(m_reserved));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_scm_site_also_stopped_isSet) {
        obj.insert(QString("scmSiteAlsoStopped"), ::OpenAPI::toJsonValue(m_scm_site_also_stopped));
    }
    if (m_server_farm_id_isSet) {
        obj.insert(QString("serverFarmId"), ::OpenAPI::toJsonValue(m_server_farm_id));
    }
    if (m_site_config.isSet()) {
        obj.insert(QString("siteConfig"), ::OpenAPI::toJsonValue(m_site_config));
    }
    if (m_slot_swap_status.isSet()) {
        obj.insert(QString("slotSwapStatus"), ::OpenAPI::toJsonValue(m_slot_swap_status));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_suspended_till_isSet) {
        obj.insert(QString("suspendedTill"), ::OpenAPI::toJsonValue(m_suspended_till));
    }
    if (m_target_swap_slot_isSet) {
        obj.insert(QString("targetSwapSlot"), ::OpenAPI::toJsonValue(m_target_swap_slot));
    }
    if (m_traffic_manager_host_names.size() > 0) {
        obj.insert(QString("trafficManagerHostNames"), ::OpenAPI::toJsonValue(m_traffic_manager_host_names));
    }
    if (m_usage_state_isSet) {
        obj.insert(QString("usageState"), ::OpenAPI::toJsonValue(m_usage_state));
    }
    return obj;
}

QString OAIWebApps_List_200_response_value_inner_properties::getAvailabilityState() const {
    return m_availability_state;
}
void OAIWebApps_List_200_response_value_inner_properties::setAvailabilityState(const QString &availability_state) {
    m_availability_state = availability_state;
    m_availability_state_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_availability_state_Set() const{
    return m_availability_state_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_availability_state_Valid() const{
    return m_availability_state_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isClientAffinityEnabled() const {
    return m_client_affinity_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties::setClientAffinityEnabled(const bool &client_affinity_enabled) {
    m_client_affinity_enabled = client_affinity_enabled;
    m_client_affinity_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_affinity_enabled_Set() const{
    return m_client_affinity_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_affinity_enabled_Valid() const{
    return m_client_affinity_enabled_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isClientCertEnabled() const {
    return m_client_cert_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties::setClientCertEnabled(const bool &client_cert_enabled) {
    m_client_cert_enabled = client_cert_enabled;
    m_client_cert_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_cert_enabled_Set() const{
    return m_client_cert_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_cert_enabled_Valid() const{
    return m_client_cert_enabled_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getClientCertExclusionPaths() const {
    return m_client_cert_exclusion_paths;
}
void OAIWebApps_List_200_response_value_inner_properties::setClientCertExclusionPaths(const QString &client_cert_exclusion_paths) {
    m_client_cert_exclusion_paths = client_cert_exclusion_paths;
    m_client_cert_exclusion_paths_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_cert_exclusion_paths_Set() const{
    return m_client_cert_exclusion_paths_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_client_cert_exclusion_paths_Valid() const{
    return m_client_cert_exclusion_paths_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_cloningInfo OAIWebApps_List_200_response_value_inner_properties::getCloningInfo() const {
    return m_cloning_info;
}
void OAIWebApps_List_200_response_value_inner_properties::setCloningInfo(const OAIWebApps_List_200_response_value_inner_properties_cloningInfo &cloning_info) {
    m_cloning_info = cloning_info;
    m_cloning_info_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_cloning_info_Set() const{
    return m_cloning_info_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_cloning_info_Valid() const{
    return m_cloning_info_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties::getContainerSize() const {
    return m_container_size;
}
void OAIWebApps_List_200_response_value_inner_properties::setContainerSize(const qint32 &container_size) {
    m_container_size = container_size;
    m_container_size_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_container_size_Set() const{
    return m_container_size_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_container_size_Valid() const{
    return m_container_size_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties::getDailyMemoryTimeQuota() const {
    return m_daily_memory_time_quota;
}
void OAIWebApps_List_200_response_value_inner_properties::setDailyMemoryTimeQuota(const qint32 &daily_memory_time_quota) {
    m_daily_memory_time_quota = daily_memory_time_quota;
    m_daily_memory_time_quota_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_daily_memory_time_quota_Set() const{
    return m_daily_memory_time_quota_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_daily_memory_time_quota_Valid() const{
    return m_daily_memory_time_quota_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getDefaultHostName() const {
    return m_default_host_name;
}
void OAIWebApps_List_200_response_value_inner_properties::setDefaultHostName(const QString &default_host_name) {
    m_default_host_name = default_host_name;
    m_default_host_name_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_default_host_name_Set() const{
    return m_default_host_name_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_default_host_name_Valid() const{
    return m_default_host_name_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isEnabled() const {
    return m_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIWebApps_List_200_response_value_inner_properties::getEnabledHostNames() const {
    return m_enabled_host_names;
}
void OAIWebApps_List_200_response_value_inner_properties::setEnabledHostNames(const QList<QString> &enabled_host_names) {
    m_enabled_host_names = enabled_host_names;
    m_enabled_host_names_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_enabled_host_names_Set() const{
    return m_enabled_host_names_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_enabled_host_names_Valid() const{
    return m_enabled_host_names_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_hostNameSslStates_inner> OAIWebApps_List_200_response_value_inner_properties::getHostNameSslStates() const {
    return m_host_name_ssl_states;
}
void OAIWebApps_List_200_response_value_inner_properties::setHostNameSslStates(const QList<OAIWebApps_List_200_response_value_inner_properties_hostNameSslStates_inner> &host_name_ssl_states) {
    m_host_name_ssl_states = host_name_ssl_states;
    m_host_name_ssl_states_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_name_ssl_states_Set() const{
    return m_host_name_ssl_states_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_name_ssl_states_Valid() const{
    return m_host_name_ssl_states_isValid;
}

QList<QString> OAIWebApps_List_200_response_value_inner_properties::getHostNames() const {
    return m_host_names;
}
void OAIWebApps_List_200_response_value_inner_properties::setHostNames(const QList<QString> &host_names) {
    m_host_names = host_names;
    m_host_names_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_names_Set() const{
    return m_host_names_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_names_Valid() const{
    return m_host_names_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isHostNamesDisabled() const {
    return m_host_names_disabled;
}
void OAIWebApps_List_200_response_value_inner_properties::setHostNamesDisabled(const bool &host_names_disabled) {
    m_host_names_disabled = host_names_disabled;
    m_host_names_disabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_names_disabled_Set() const{
    return m_host_names_disabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_host_names_disabled_Valid() const{
    return m_host_names_disabled_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_hostingEnvironmentProfile OAIWebApps_List_200_response_value_inner_properties::getHostingEnvironmentProfile() const {
    return m_hosting_environment_profile;
}
void OAIWebApps_List_200_response_value_inner_properties::setHostingEnvironmentProfile(const OAIWebApps_List_200_response_value_inner_properties_hostingEnvironmentProfile &hosting_environment_profile) {
    m_hosting_environment_profile = hosting_environment_profile;
    m_hosting_environment_profile_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_hosting_environment_profile_Set() const{
    return m_hosting_environment_profile_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_hosting_environment_profile_Valid() const{
    return m_hosting_environment_profile_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isHttpsOnly() const {
    return m_https_only;
}
void OAIWebApps_List_200_response_value_inner_properties::setHttpsOnly(const bool &https_only) {
    m_https_only = https_only;
    m_https_only_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_https_only_Set() const{
    return m_https_only_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_https_only_Valid() const{
    return m_https_only_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isHyperV() const {
    return m_hyper_v;
}
void OAIWebApps_List_200_response_value_inner_properties::setHyperV(const bool &hyper_v) {
    m_hyper_v = hyper_v;
    m_hyper_v_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_hyper_v_Set() const{
    return m_hyper_v_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_hyper_v_Valid() const{
    return m_hyper_v_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getInProgressOperationId() const {
    return m_in_progress_operation_id;
}
void OAIWebApps_List_200_response_value_inner_properties::setInProgressOperationId(const QString &in_progress_operation_id) {
    m_in_progress_operation_id = in_progress_operation_id;
    m_in_progress_operation_id_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_in_progress_operation_id_Set() const{
    return m_in_progress_operation_id_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_in_progress_operation_id_Valid() const{
    return m_in_progress_operation_id_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isIsDefaultContainer() const {
    return m_is_default_container;
}
void OAIWebApps_List_200_response_value_inner_properties::setIsDefaultContainer(const bool &is_default_container) {
    m_is_default_container = is_default_container;
    m_is_default_container_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_is_default_container_Set() const{
    return m_is_default_container_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_is_default_container_Valid() const{
    return m_is_default_container_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isIsXenon() const {
    return m_is_xenon;
}
void OAIWebApps_List_200_response_value_inner_properties::setIsXenon(const bool &is_xenon) {
    m_is_xenon = is_xenon;
    m_is_xenon_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_is_xenon_Set() const{
    return m_is_xenon_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_is_xenon_Valid() const{
    return m_is_xenon_isValid;
}

QDateTime OAIWebApps_List_200_response_value_inner_properties::getLastModifiedTimeUtc() const {
    return m_last_modified_time_utc;
}
void OAIWebApps_List_200_response_value_inner_properties::setLastModifiedTimeUtc(const QDateTime &last_modified_time_utc) {
    m_last_modified_time_utc = last_modified_time_utc;
    m_last_modified_time_utc_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_last_modified_time_utc_Set() const{
    return m_last_modified_time_utc_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_last_modified_time_utc_Valid() const{
    return m_last_modified_time_utc_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties::getMaxNumberOfWorkers() const {
    return m_max_number_of_workers;
}
void OAIWebApps_List_200_response_value_inner_properties::setMaxNumberOfWorkers(const qint32 &max_number_of_workers) {
    m_max_number_of_workers = max_number_of_workers;
    m_max_number_of_workers_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_max_number_of_workers_Set() const{
    return m_max_number_of_workers_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_max_number_of_workers_Valid() const{
    return m_max_number_of_workers_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getOutboundIpAddresses() const {
    return m_outbound_ip_addresses;
}
void OAIWebApps_List_200_response_value_inner_properties::setOutboundIpAddresses(const QString &outbound_ip_addresses) {
    m_outbound_ip_addresses = outbound_ip_addresses;
    m_outbound_ip_addresses_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_outbound_ip_addresses_Set() const{
    return m_outbound_ip_addresses_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_outbound_ip_addresses_Valid() const{
    return m_outbound_ip_addresses_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getPossibleOutboundIpAddresses() const {
    return m_possible_outbound_ip_addresses;
}
void OAIWebApps_List_200_response_value_inner_properties::setPossibleOutboundIpAddresses(const QString &possible_outbound_ip_addresses) {
    m_possible_outbound_ip_addresses = possible_outbound_ip_addresses;
    m_possible_outbound_ip_addresses_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_possible_outbound_ip_addresses_Set() const{
    return m_possible_outbound_ip_addresses_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_possible_outbound_ip_addresses_Valid() const{
    return m_possible_outbound_ip_addresses_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getRedundancyMode() const {
    return m_redundancy_mode;
}
void OAIWebApps_List_200_response_value_inner_properties::setRedundancyMode(const QString &redundancy_mode) {
    m_redundancy_mode = redundancy_mode;
    m_redundancy_mode_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_redundancy_mode_Set() const{
    return m_redundancy_mode_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_redundancy_mode_Valid() const{
    return m_redundancy_mode_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getRepositorySiteName() const {
    return m_repository_site_name;
}
void OAIWebApps_List_200_response_value_inner_properties::setRepositorySiteName(const QString &repository_site_name) {
    m_repository_site_name = repository_site_name;
    m_repository_site_name_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_repository_site_name_Set() const{
    return m_repository_site_name_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_repository_site_name_Valid() const{
    return m_repository_site_name_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isReserved() const {
    return m_reserved;
}
void OAIWebApps_List_200_response_value_inner_properties::setReserved(const bool &reserved) {
    m_reserved = reserved;
    m_reserved_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_reserved_Set() const{
    return m_reserved_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_reserved_Valid() const{
    return m_reserved_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getResourceGroup() const {
    return m_resource_group;
}
void OAIWebApps_List_200_response_value_inner_properties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isScmSiteAlsoStopped() const {
    return m_scm_site_also_stopped;
}
void OAIWebApps_List_200_response_value_inner_properties::setScmSiteAlsoStopped(const bool &scm_site_also_stopped) {
    m_scm_site_also_stopped = scm_site_also_stopped;
    m_scm_site_also_stopped_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_scm_site_also_stopped_Set() const{
    return m_scm_site_also_stopped_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_scm_site_also_stopped_Valid() const{
    return m_scm_site_also_stopped_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getServerFarmId() const {
    return m_server_farm_id;
}
void OAIWebApps_List_200_response_value_inner_properties::setServerFarmId(const QString &server_farm_id) {
    m_server_farm_id = server_farm_id;
    m_server_farm_id_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_server_farm_id_Set() const{
    return m_server_farm_id_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_server_farm_id_Valid() const{
    return m_server_farm_id_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig OAIWebApps_List_200_response_value_inner_properties::getSiteConfig() const {
    return m_site_config;
}
void OAIWebApps_List_200_response_value_inner_properties::setSiteConfig(const OAIWebApps_List_200_response_value_inner_properties_siteConfig &site_config) {
    m_site_config = site_config;
    m_site_config_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_site_config_Set() const{
    return m_site_config_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_site_config_Valid() const{
    return m_site_config_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_slotSwapStatus OAIWebApps_List_200_response_value_inner_properties::getSlotSwapStatus() const {
    return m_slot_swap_status;
}
void OAIWebApps_List_200_response_value_inner_properties::setSlotSwapStatus(const OAIWebApps_List_200_response_value_inner_properties_slotSwapStatus &slot_swap_status) {
    m_slot_swap_status = slot_swap_status;
    m_slot_swap_status_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_slot_swap_status_Set() const{
    return m_slot_swap_status_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_slot_swap_status_Valid() const{
    return m_slot_swap_status_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getState() const {
    return m_state;
}
void OAIWebApps_List_200_response_value_inner_properties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIWebApps_List_200_response_value_inner_properties::getSuspendedTill() const {
    return m_suspended_till;
}
void OAIWebApps_List_200_response_value_inner_properties::setSuspendedTill(const QDateTime &suspended_till) {
    m_suspended_till = suspended_till;
    m_suspended_till_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_suspended_till_Set() const{
    return m_suspended_till_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_suspended_till_Valid() const{
    return m_suspended_till_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getTargetSwapSlot() const {
    return m_target_swap_slot;
}
void OAIWebApps_List_200_response_value_inner_properties::setTargetSwapSlot(const QString &target_swap_slot) {
    m_target_swap_slot = target_swap_slot;
    m_target_swap_slot_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_target_swap_slot_Set() const{
    return m_target_swap_slot_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_target_swap_slot_Valid() const{
    return m_target_swap_slot_isValid;
}

QList<QString> OAIWebApps_List_200_response_value_inner_properties::getTrafficManagerHostNames() const {
    return m_traffic_manager_host_names;
}
void OAIWebApps_List_200_response_value_inner_properties::setTrafficManagerHostNames(const QList<QString> &traffic_manager_host_names) {
    m_traffic_manager_host_names = traffic_manager_host_names;
    m_traffic_manager_host_names_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_traffic_manager_host_names_Set() const{
    return m_traffic_manager_host_names_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_traffic_manager_host_names_Valid() const{
    return m_traffic_manager_host_names_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties::getUsageState() const {
    return m_usage_state;
}
void OAIWebApps_List_200_response_value_inner_properties::setUsageState(const QString &usage_state) {
    m_usage_state = usage_state;
    m_usage_state_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_usage_state_Set() const{
    return m_usage_state_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties::is_usage_state_Valid() const{
    return m_usage_state_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_affinity_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cert_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cert_exclusion_paths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloning_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_memory_time_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_host_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_ssl_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_names_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosting_environment_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_v_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_xenon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_ip_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_outbound_ip_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redundancy_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_site_also_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_farm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_swap_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_till_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_swap_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_manager_host_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebApps_List_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
