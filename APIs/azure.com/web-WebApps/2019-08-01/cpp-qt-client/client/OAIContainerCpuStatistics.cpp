/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerCpuStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerCpuStatistics::OAIContainerCpuStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerCpuStatistics::OAIContainerCpuStatistics() {
    this->initializeModel();
}

OAIContainerCpuStatistics::~OAIContainerCpuStatistics() {}

void OAIContainerCpuStatistics::initializeModel() {

    m_cpu_usage_isSet = false;
    m_cpu_usage_isValid = false;

    m_online_cpu_count_isSet = false;
    m_online_cpu_count_isValid = false;

    m_system_cpu_usage_isSet = false;
    m_system_cpu_usage_isValid = false;

    m_throttling_data_isSet = false;
    m_throttling_data_isValid = false;
}

void OAIContainerCpuStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerCpuStatistics::fromJsonObject(QJsonObject json) {

    m_cpu_usage_isValid = ::OpenAPI::fromJsonValue(m_cpu_usage, json[QString("cpuUsage")]);
    m_cpu_usage_isSet = !json[QString("cpuUsage")].isNull() && m_cpu_usage_isValid;

    m_online_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_online_cpu_count, json[QString("onlineCpuCount")]);
    m_online_cpu_count_isSet = !json[QString("onlineCpuCount")].isNull() && m_online_cpu_count_isValid;

    m_system_cpu_usage_isValid = ::OpenAPI::fromJsonValue(m_system_cpu_usage, json[QString("systemCpuUsage")]);
    m_system_cpu_usage_isSet = !json[QString("systemCpuUsage")].isNull() && m_system_cpu_usage_isValid;

    m_throttling_data_isValid = ::OpenAPI::fromJsonValue(m_throttling_data, json[QString("throttlingData")]);
    m_throttling_data_isSet = !json[QString("throttlingData")].isNull() && m_throttling_data_isValid;
}

QString OAIContainerCpuStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerCpuStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_usage.isSet()) {
        obj.insert(QString("cpuUsage"), ::OpenAPI::toJsonValue(m_cpu_usage));
    }
    if (m_online_cpu_count_isSet) {
        obj.insert(QString("onlineCpuCount"), ::OpenAPI::toJsonValue(m_online_cpu_count));
    }
    if (m_system_cpu_usage_isSet) {
        obj.insert(QString("systemCpuUsage"), ::OpenAPI::toJsonValue(m_system_cpu_usage));
    }
    if (m_throttling_data.isSet()) {
        obj.insert(QString("throttlingData"), ::OpenAPI::toJsonValue(m_throttling_data));
    }
    return obj;
}

OAIContainerCpuUsage OAIContainerCpuStatistics::getCpuUsage() const {
    return m_cpu_usage;
}
void OAIContainerCpuStatistics::setCpuUsage(const OAIContainerCpuUsage &cpu_usage) {
    m_cpu_usage = cpu_usage;
    m_cpu_usage_isSet = true;
}

bool OAIContainerCpuStatistics::is_cpu_usage_Set() const{
    return m_cpu_usage_isSet;
}

bool OAIContainerCpuStatistics::is_cpu_usage_Valid() const{
    return m_cpu_usage_isValid;
}

qint32 OAIContainerCpuStatistics::getOnlineCpuCount() const {
    return m_online_cpu_count;
}
void OAIContainerCpuStatistics::setOnlineCpuCount(const qint32 &online_cpu_count) {
    m_online_cpu_count = online_cpu_count;
    m_online_cpu_count_isSet = true;
}

bool OAIContainerCpuStatistics::is_online_cpu_count_Set() const{
    return m_online_cpu_count_isSet;
}

bool OAIContainerCpuStatistics::is_online_cpu_count_Valid() const{
    return m_online_cpu_count_isValid;
}

qint64 OAIContainerCpuStatistics::getSystemCpuUsage() const {
    return m_system_cpu_usage;
}
void OAIContainerCpuStatistics::setSystemCpuUsage(const qint64 &system_cpu_usage) {
    m_system_cpu_usage = system_cpu_usage;
    m_system_cpu_usage_isSet = true;
}

bool OAIContainerCpuStatistics::is_system_cpu_usage_Set() const{
    return m_system_cpu_usage_isSet;
}

bool OAIContainerCpuStatistics::is_system_cpu_usage_Valid() const{
    return m_system_cpu_usage_isValid;
}

OAIContainerThrottlingData OAIContainerCpuStatistics::getThrottlingData() const {
    return m_throttling_data;
}
void OAIContainerCpuStatistics::setThrottlingData(const OAIContainerThrottlingData &throttling_data) {
    m_throttling_data = throttling_data;
    m_throttling_data_isSet = true;
}

bool OAIContainerCpuStatistics::is_throttling_data_Set() const{
    return m_throttling_data_isSet;
}

bool OAIContainerCpuStatistics::is_throttling_data_Valid() const{
    return m_throttling_data_isValid;
}

bool OAIContainerCpuStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_cpu_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerCpuStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
