/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsmCopySlotEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsmCopySlotEntity::OAICsmCopySlotEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsmCopySlotEntity::OAICsmCopySlotEntity() {
    this->initializeModel();
}

OAICsmCopySlotEntity::~OAICsmCopySlotEntity() {}

void OAICsmCopySlotEntity::initializeModel() {

    m_site_config_isSet = false;
    m_site_config_isValid = false;

    m_target_slot_isSet = false;
    m_target_slot_isValid = false;
}

void OAICsmCopySlotEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsmCopySlotEntity::fromJsonObject(QJsonObject json) {

    m_site_config_isValid = ::OpenAPI::fromJsonValue(m_site_config, json[QString("siteConfig")]);
    m_site_config_isSet = !json[QString("siteConfig")].isNull() && m_site_config_isValid;

    m_target_slot_isValid = ::OpenAPI::fromJsonValue(m_target_slot, json[QString("targetSlot")]);
    m_target_slot_isSet = !json[QString("targetSlot")].isNull() && m_target_slot_isValid;
}

QString OAICsmCopySlotEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsmCopySlotEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_site_config.isSet()) {
        obj.insert(QString("siteConfig"), ::OpenAPI::toJsonValue(m_site_config));
    }
    if (m_target_slot_isSet) {
        obj.insert(QString("targetSlot"), ::OpenAPI::toJsonValue(m_target_slot));
    }
    return obj;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig OAICsmCopySlotEntity::getSiteConfig() const {
    return m_site_config;
}
void OAICsmCopySlotEntity::setSiteConfig(const OAIWebApps_List_200_response_value_inner_properties_siteConfig &site_config) {
    m_site_config = site_config;
    m_site_config_isSet = true;
}

bool OAICsmCopySlotEntity::is_site_config_Set() const{
    return m_site_config_isSet;
}

bool OAICsmCopySlotEntity::is_site_config_Valid() const{
    return m_site_config_isValid;
}

QString OAICsmCopySlotEntity::getTargetSlot() const {
    return m_target_slot;
}
void OAICsmCopySlotEntity::setTargetSlot(const QString &target_slot) {
    m_target_slot = target_slot;
    m_target_slot_isSet = true;
}

bool OAICsmCopySlotEntity::is_target_slot_Set() const{
    return m_target_slot_isSet;
}

bool OAICsmCopySlotEntity::is_target_slot_Valid() const{
    return m_target_slot_isValid;
}

bool OAICsmCopySlotEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_slot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsmCopySlotEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_site_config_isValid && m_target_slot_isValid && true;
}

} // namespace OpenAPI
