/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpLogsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpLogsConfig::OAIHttpLogsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpLogsConfig::OAIHttpLogsConfig() {
    this->initializeModel();
}

OAIHttpLogsConfig::~OAIHttpLogsConfig() {}

void OAIHttpLogsConfig::initializeModel() {

    m_azure_blob_storage_isSet = false;
    m_azure_blob_storage_isValid = false;

    m_file_system_isSet = false;
    m_file_system_isValid = false;
}

void OAIHttpLogsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpLogsConfig::fromJsonObject(QJsonObject json) {

    m_azure_blob_storage_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_storage, json[QString("azureBlobStorage")]);
    m_azure_blob_storage_isSet = !json[QString("azureBlobStorage")].isNull() && m_azure_blob_storage_isValid;

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("fileSystem")]);
    m_file_system_isSet = !json[QString("fileSystem")].isNull() && m_file_system_isValid;
}

QString OAIHttpLogsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpLogsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_blob_storage.isSet()) {
        obj.insert(QString("azureBlobStorage"), ::OpenAPI::toJsonValue(m_azure_blob_storage));
    }
    if (m_file_system.isSet()) {
        obj.insert(QString("fileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    return obj;
}

OAIAzureBlobStorageHttpLogsConfig OAIHttpLogsConfig::getAzureBlobStorage() const {
    return m_azure_blob_storage;
}
void OAIHttpLogsConfig::setAzureBlobStorage(const OAIAzureBlobStorageHttpLogsConfig &azure_blob_storage) {
    m_azure_blob_storage = azure_blob_storage;
    m_azure_blob_storage_isSet = true;
}

bool OAIHttpLogsConfig::is_azure_blob_storage_Set() const{
    return m_azure_blob_storage_isSet;
}

bool OAIHttpLogsConfig::is_azure_blob_storage_Valid() const{
    return m_azure_blob_storage_isValid;
}

OAIFileSystemHttpLogsConfig OAIHttpLogsConfig::getFileSystem() const {
    return m_file_system;
}
void OAIHttpLogsConfig::setFileSystem(const OAIFileSystemHttpLogsConfig &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAIHttpLogsConfig::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAIHttpLogsConfig::is_file_system_Valid() const{
    return m_file_system_isValid;
}

bool OAIHttpLogsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_blob_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpLogsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
