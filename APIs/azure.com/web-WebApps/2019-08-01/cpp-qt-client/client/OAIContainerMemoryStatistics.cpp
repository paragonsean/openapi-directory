/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerMemoryStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerMemoryStatistics::OAIContainerMemoryStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerMemoryStatistics::OAIContainerMemoryStatistics() {
    this->initializeModel();
}

OAIContainerMemoryStatistics::~OAIContainerMemoryStatistics() {}

void OAIContainerMemoryStatistics::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_max_usage_isSet = false;
    m_max_usage_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIContainerMemoryStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerMemoryStatistics::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_max_usage_isValid = ::OpenAPI::fromJsonValue(m_max_usage, json[QString("maxUsage")]);
    m_max_usage_isSet = !json[QString("maxUsage")].isNull() && m_max_usage_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIContainerMemoryStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerMemoryStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_max_usage_isSet) {
        obj.insert(QString("maxUsage"), ::OpenAPI::toJsonValue(m_max_usage));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

qint64 OAIContainerMemoryStatistics::getLimit() const {
    return m_limit;
}
void OAIContainerMemoryStatistics::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIContainerMemoryStatistics::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIContainerMemoryStatistics::is_limit_Valid() const{
    return m_limit_isValid;
}

qint64 OAIContainerMemoryStatistics::getMaxUsage() const {
    return m_max_usage;
}
void OAIContainerMemoryStatistics::setMaxUsage(const qint64 &max_usage) {
    m_max_usage = max_usage;
    m_max_usage_isSet = true;
}

bool OAIContainerMemoryStatistics::is_max_usage_Set() const{
    return m_max_usage_isSet;
}

bool OAIContainerMemoryStatistics::is_max_usage_Valid() const{
    return m_max_usage_isValid;
}

qint64 OAIContainerMemoryStatistics::getUsage() const {
    return m_usage;
}
void OAIContainerMemoryStatistics::setUsage(const qint64 &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIContainerMemoryStatistics::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIContainerMemoryStatistics::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIContainerMemoryStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerMemoryStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
