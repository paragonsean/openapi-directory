/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerCpuUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerCpuUsage::OAIContainerCpuUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerCpuUsage::OAIContainerCpuUsage() {
    this->initializeModel();
}

OAIContainerCpuUsage::~OAIContainerCpuUsage() {}

void OAIContainerCpuUsage::initializeModel() {

    m_kernel_mode_usage_isSet = false;
    m_kernel_mode_usage_isValid = false;

    m_per_cpu_usage_isSet = false;
    m_per_cpu_usage_isValid = false;

    m_total_usage_isSet = false;
    m_total_usage_isValid = false;

    m_user_mode_usage_isSet = false;
    m_user_mode_usage_isValid = false;
}

void OAIContainerCpuUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerCpuUsage::fromJsonObject(QJsonObject json) {

    m_kernel_mode_usage_isValid = ::OpenAPI::fromJsonValue(m_kernel_mode_usage, json[QString("kernelModeUsage")]);
    m_kernel_mode_usage_isSet = !json[QString("kernelModeUsage")].isNull() && m_kernel_mode_usage_isValid;

    m_per_cpu_usage_isValid = ::OpenAPI::fromJsonValue(m_per_cpu_usage, json[QString("perCpuUsage")]);
    m_per_cpu_usage_isSet = !json[QString("perCpuUsage")].isNull() && m_per_cpu_usage_isValid;

    m_total_usage_isValid = ::OpenAPI::fromJsonValue(m_total_usage, json[QString("totalUsage")]);
    m_total_usage_isSet = !json[QString("totalUsage")].isNull() && m_total_usage_isValid;

    m_user_mode_usage_isValid = ::OpenAPI::fromJsonValue(m_user_mode_usage, json[QString("userModeUsage")]);
    m_user_mode_usage_isSet = !json[QString("userModeUsage")].isNull() && m_user_mode_usage_isValid;
}

QString OAIContainerCpuUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerCpuUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_kernel_mode_usage_isSet) {
        obj.insert(QString("kernelModeUsage"), ::OpenAPI::toJsonValue(m_kernel_mode_usage));
    }
    if (m_per_cpu_usage.size() > 0) {
        obj.insert(QString("perCpuUsage"), ::OpenAPI::toJsonValue(m_per_cpu_usage));
    }
    if (m_total_usage_isSet) {
        obj.insert(QString("totalUsage"), ::OpenAPI::toJsonValue(m_total_usage));
    }
    if (m_user_mode_usage_isSet) {
        obj.insert(QString("userModeUsage"), ::OpenAPI::toJsonValue(m_user_mode_usage));
    }
    return obj;
}

qint64 OAIContainerCpuUsage::getKernelModeUsage() const {
    return m_kernel_mode_usage;
}
void OAIContainerCpuUsage::setKernelModeUsage(const qint64 &kernel_mode_usage) {
    m_kernel_mode_usage = kernel_mode_usage;
    m_kernel_mode_usage_isSet = true;
}

bool OAIContainerCpuUsage::is_kernel_mode_usage_Set() const{
    return m_kernel_mode_usage_isSet;
}

bool OAIContainerCpuUsage::is_kernel_mode_usage_Valid() const{
    return m_kernel_mode_usage_isValid;
}

QList<qint64> OAIContainerCpuUsage::getPerCpuUsage() const {
    return m_per_cpu_usage;
}
void OAIContainerCpuUsage::setPerCpuUsage(const QList<qint64> &per_cpu_usage) {
    m_per_cpu_usage = per_cpu_usage;
    m_per_cpu_usage_isSet = true;
}

bool OAIContainerCpuUsage::is_per_cpu_usage_Set() const{
    return m_per_cpu_usage_isSet;
}

bool OAIContainerCpuUsage::is_per_cpu_usage_Valid() const{
    return m_per_cpu_usage_isValid;
}

qint64 OAIContainerCpuUsage::getTotalUsage() const {
    return m_total_usage;
}
void OAIContainerCpuUsage::setTotalUsage(const qint64 &total_usage) {
    m_total_usage = total_usage;
    m_total_usage_isSet = true;
}

bool OAIContainerCpuUsage::is_total_usage_Set() const{
    return m_total_usage_isSet;
}

bool OAIContainerCpuUsage::is_total_usage_Valid() const{
    return m_total_usage_isValid;
}

qint64 OAIContainerCpuUsage::getUserModeUsage() const {
    return m_user_mode_usage;
}
void OAIContainerCpuUsage::setUserModeUsage(const qint64 &user_mode_usage) {
    m_user_mode_usage = user_mode_usage;
    m_user_mode_usage_isSet = true;
}

bool OAIContainerCpuUsage::is_user_mode_usage_Set() const{
    return m_user_mode_usage_isSet;
}

bool OAIContainerCpuUsage::is_user_mode_usage_Valid() const{
    return m_user_mode_usage_isValid;
}

bool OAIContainerCpuUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kernel_mode_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_cpu_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mode_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerCpuUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
