/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerNetworkInterfaceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerNetworkInterfaceStatistics::OAIContainerNetworkInterfaceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerNetworkInterfaceStatistics::OAIContainerNetworkInterfaceStatistics() {
    this->initializeModel();
}

OAIContainerNetworkInterfaceStatistics::~OAIContainerNetworkInterfaceStatistics() {}

void OAIContainerNetworkInterfaceStatistics::initializeModel() {

    m_rx_bytes_isSet = false;
    m_rx_bytes_isValid = false;

    m_rx_dropped_isSet = false;
    m_rx_dropped_isValid = false;

    m_rx_errors_isSet = false;
    m_rx_errors_isValid = false;

    m_rx_packets_isSet = false;
    m_rx_packets_isValid = false;

    m_tx_bytes_isSet = false;
    m_tx_bytes_isValid = false;

    m_tx_dropped_isSet = false;
    m_tx_dropped_isValid = false;

    m_tx_errors_isSet = false;
    m_tx_errors_isValid = false;

    m_tx_packets_isSet = false;
    m_tx_packets_isValid = false;
}

void OAIContainerNetworkInterfaceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerNetworkInterfaceStatistics::fromJsonObject(QJsonObject json) {

    m_rx_bytes_isValid = ::OpenAPI::fromJsonValue(m_rx_bytes, json[QString("rxBytes")]);
    m_rx_bytes_isSet = !json[QString("rxBytes")].isNull() && m_rx_bytes_isValid;

    m_rx_dropped_isValid = ::OpenAPI::fromJsonValue(m_rx_dropped, json[QString("rxDropped")]);
    m_rx_dropped_isSet = !json[QString("rxDropped")].isNull() && m_rx_dropped_isValid;

    m_rx_errors_isValid = ::OpenAPI::fromJsonValue(m_rx_errors, json[QString("rxErrors")]);
    m_rx_errors_isSet = !json[QString("rxErrors")].isNull() && m_rx_errors_isValid;

    m_rx_packets_isValid = ::OpenAPI::fromJsonValue(m_rx_packets, json[QString("rxPackets")]);
    m_rx_packets_isSet = !json[QString("rxPackets")].isNull() && m_rx_packets_isValid;

    m_tx_bytes_isValid = ::OpenAPI::fromJsonValue(m_tx_bytes, json[QString("txBytes")]);
    m_tx_bytes_isSet = !json[QString("txBytes")].isNull() && m_tx_bytes_isValid;

    m_tx_dropped_isValid = ::OpenAPI::fromJsonValue(m_tx_dropped, json[QString("txDropped")]);
    m_tx_dropped_isSet = !json[QString("txDropped")].isNull() && m_tx_dropped_isValid;

    m_tx_errors_isValid = ::OpenAPI::fromJsonValue(m_tx_errors, json[QString("txErrors")]);
    m_tx_errors_isSet = !json[QString("txErrors")].isNull() && m_tx_errors_isValid;

    m_tx_packets_isValid = ::OpenAPI::fromJsonValue(m_tx_packets, json[QString("txPackets")]);
    m_tx_packets_isSet = !json[QString("txPackets")].isNull() && m_tx_packets_isValid;
}

QString OAIContainerNetworkInterfaceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerNetworkInterfaceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_rx_bytes_isSet) {
        obj.insert(QString("rxBytes"), ::OpenAPI::toJsonValue(m_rx_bytes));
    }
    if (m_rx_dropped_isSet) {
        obj.insert(QString("rxDropped"), ::OpenAPI::toJsonValue(m_rx_dropped));
    }
    if (m_rx_errors_isSet) {
        obj.insert(QString("rxErrors"), ::OpenAPI::toJsonValue(m_rx_errors));
    }
    if (m_rx_packets_isSet) {
        obj.insert(QString("rxPackets"), ::OpenAPI::toJsonValue(m_rx_packets));
    }
    if (m_tx_bytes_isSet) {
        obj.insert(QString("txBytes"), ::OpenAPI::toJsonValue(m_tx_bytes));
    }
    if (m_tx_dropped_isSet) {
        obj.insert(QString("txDropped"), ::OpenAPI::toJsonValue(m_tx_dropped));
    }
    if (m_tx_errors_isSet) {
        obj.insert(QString("txErrors"), ::OpenAPI::toJsonValue(m_tx_errors));
    }
    if (m_tx_packets_isSet) {
        obj.insert(QString("txPackets"), ::OpenAPI::toJsonValue(m_tx_packets));
    }
    return obj;
}

qint64 OAIContainerNetworkInterfaceStatistics::getRxBytes() const {
    return m_rx_bytes;
}
void OAIContainerNetworkInterfaceStatistics::setRxBytes(const qint64 &rx_bytes) {
    m_rx_bytes = rx_bytes;
    m_rx_bytes_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_bytes_Set() const{
    return m_rx_bytes_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_bytes_Valid() const{
    return m_rx_bytes_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getRxDropped() const {
    return m_rx_dropped;
}
void OAIContainerNetworkInterfaceStatistics::setRxDropped(const qint64 &rx_dropped) {
    m_rx_dropped = rx_dropped;
    m_rx_dropped_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_dropped_Set() const{
    return m_rx_dropped_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_dropped_Valid() const{
    return m_rx_dropped_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getRxErrors() const {
    return m_rx_errors;
}
void OAIContainerNetworkInterfaceStatistics::setRxErrors(const qint64 &rx_errors) {
    m_rx_errors = rx_errors;
    m_rx_errors_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_errors_Set() const{
    return m_rx_errors_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_errors_Valid() const{
    return m_rx_errors_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getRxPackets() const {
    return m_rx_packets;
}
void OAIContainerNetworkInterfaceStatistics::setRxPackets(const qint64 &rx_packets) {
    m_rx_packets = rx_packets;
    m_rx_packets_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_packets_Set() const{
    return m_rx_packets_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_rx_packets_Valid() const{
    return m_rx_packets_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getTxBytes() const {
    return m_tx_bytes;
}
void OAIContainerNetworkInterfaceStatistics::setTxBytes(const qint64 &tx_bytes) {
    m_tx_bytes = tx_bytes;
    m_tx_bytes_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_bytes_Set() const{
    return m_tx_bytes_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_bytes_Valid() const{
    return m_tx_bytes_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getTxDropped() const {
    return m_tx_dropped;
}
void OAIContainerNetworkInterfaceStatistics::setTxDropped(const qint64 &tx_dropped) {
    m_tx_dropped = tx_dropped;
    m_tx_dropped_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_dropped_Set() const{
    return m_tx_dropped_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_dropped_Valid() const{
    return m_tx_dropped_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getTxErrors() const {
    return m_tx_errors;
}
void OAIContainerNetworkInterfaceStatistics::setTxErrors(const qint64 &tx_errors) {
    m_tx_errors = tx_errors;
    m_tx_errors_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_errors_Set() const{
    return m_tx_errors_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_errors_Valid() const{
    return m_tx_errors_isValid;
}

qint64 OAIContainerNetworkInterfaceStatistics::getTxPackets() const {
    return m_tx_packets;
}
void OAIContainerNetworkInterfaceStatistics::setTxPackets(const qint64 &tx_packets) {
    m_tx_packets = tx_packets;
    m_tx_packets_isSet = true;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_packets_Set() const{
    return m_tx_packets_isSet;
}

bool OAIContainerNetworkInterfaceStatistics::is_tx_packets_Valid() const{
    return m_tx_packets_isValid;
}

bool OAIContainerNetworkInterfaceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rx_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_dropped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_packets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_dropped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_packets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerNetworkInterfaceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
