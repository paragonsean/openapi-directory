/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerInfo::OAIContainerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerInfo::OAIContainerInfo() {
    this->initializeModel();
}

OAIContainerInfo::~OAIContainerInfo() {}

void OAIContainerInfo::initializeModel() {

    m_current_cpu_stats_isSet = false;
    m_current_cpu_stats_isValid = false;

    m_current_time_stamp_isSet = false;
    m_current_time_stamp_isValid = false;

    m_eth0_isSet = false;
    m_eth0_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_memory_stats_isSet = false;
    m_memory_stats_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_previous_cpu_stats_isSet = false;
    m_previous_cpu_stats_isValid = false;

    m_previous_time_stamp_isSet = false;
    m_previous_time_stamp_isValid = false;
}

void OAIContainerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerInfo::fromJsonObject(QJsonObject json) {

    m_current_cpu_stats_isValid = ::OpenAPI::fromJsonValue(m_current_cpu_stats, json[QString("currentCpuStats")]);
    m_current_cpu_stats_isSet = !json[QString("currentCpuStats")].isNull() && m_current_cpu_stats_isValid;

    m_current_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_current_time_stamp, json[QString("currentTimeStamp")]);
    m_current_time_stamp_isSet = !json[QString("currentTimeStamp")].isNull() && m_current_time_stamp_isValid;

    m_eth0_isValid = ::OpenAPI::fromJsonValue(m_eth0, json[QString("eth0")]);
    m_eth0_isSet = !json[QString("eth0")].isNull() && m_eth0_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_memory_stats_isValid = ::OpenAPI::fromJsonValue(m_memory_stats, json[QString("memoryStats")]);
    m_memory_stats_isSet = !json[QString("memoryStats")].isNull() && m_memory_stats_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_previous_cpu_stats_isValid = ::OpenAPI::fromJsonValue(m_previous_cpu_stats, json[QString("previousCpuStats")]);
    m_previous_cpu_stats_isSet = !json[QString("previousCpuStats")].isNull() && m_previous_cpu_stats_isValid;

    m_previous_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_previous_time_stamp, json[QString("previousTimeStamp")]);
    m_previous_time_stamp_isSet = !json[QString("previousTimeStamp")].isNull() && m_previous_time_stamp_isValid;
}

QString OAIContainerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_cpu_stats.isSet()) {
        obj.insert(QString("currentCpuStats"), ::OpenAPI::toJsonValue(m_current_cpu_stats));
    }
    if (m_current_time_stamp_isSet) {
        obj.insert(QString("currentTimeStamp"), ::OpenAPI::toJsonValue(m_current_time_stamp));
    }
    if (m_eth0.isSet()) {
        obj.insert(QString("eth0"), ::OpenAPI::toJsonValue(m_eth0));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_memory_stats.isSet()) {
        obj.insert(QString("memoryStats"), ::OpenAPI::toJsonValue(m_memory_stats));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_previous_cpu_stats.isSet()) {
        obj.insert(QString("previousCpuStats"), ::OpenAPI::toJsonValue(m_previous_cpu_stats));
    }
    if (m_previous_time_stamp_isSet) {
        obj.insert(QString("previousTimeStamp"), ::OpenAPI::toJsonValue(m_previous_time_stamp));
    }
    return obj;
}

OAIContainerCpuStatistics OAIContainerInfo::getCurrentCpuStats() const {
    return m_current_cpu_stats;
}
void OAIContainerInfo::setCurrentCpuStats(const OAIContainerCpuStatistics &current_cpu_stats) {
    m_current_cpu_stats = current_cpu_stats;
    m_current_cpu_stats_isSet = true;
}

bool OAIContainerInfo::is_current_cpu_stats_Set() const{
    return m_current_cpu_stats_isSet;
}

bool OAIContainerInfo::is_current_cpu_stats_Valid() const{
    return m_current_cpu_stats_isValid;
}

QDateTime OAIContainerInfo::getCurrentTimeStamp() const {
    return m_current_time_stamp;
}
void OAIContainerInfo::setCurrentTimeStamp(const QDateTime &current_time_stamp) {
    m_current_time_stamp = current_time_stamp;
    m_current_time_stamp_isSet = true;
}

bool OAIContainerInfo::is_current_time_stamp_Set() const{
    return m_current_time_stamp_isSet;
}

bool OAIContainerInfo::is_current_time_stamp_Valid() const{
    return m_current_time_stamp_isValid;
}

OAIContainerNetworkInterfaceStatistics OAIContainerInfo::getEth0() const {
    return m_eth0;
}
void OAIContainerInfo::setEth0(const OAIContainerNetworkInterfaceStatistics &eth0) {
    m_eth0 = eth0;
    m_eth0_isSet = true;
}

bool OAIContainerInfo::is_eth0_Set() const{
    return m_eth0_isSet;
}

bool OAIContainerInfo::is_eth0_Valid() const{
    return m_eth0_isValid;
}

QString OAIContainerInfo::getId() const {
    return m_id;
}
void OAIContainerInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContainerInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContainerInfo::is_id_Valid() const{
    return m_id_isValid;
}

OAIContainerMemoryStatistics OAIContainerInfo::getMemoryStats() const {
    return m_memory_stats;
}
void OAIContainerInfo::setMemoryStats(const OAIContainerMemoryStatistics &memory_stats) {
    m_memory_stats = memory_stats;
    m_memory_stats_isSet = true;
}

bool OAIContainerInfo::is_memory_stats_Set() const{
    return m_memory_stats_isSet;
}

bool OAIContainerInfo::is_memory_stats_Valid() const{
    return m_memory_stats_isValid;
}

QString OAIContainerInfo::getName() const {
    return m_name;
}
void OAIContainerInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIContainerCpuStatistics OAIContainerInfo::getPreviousCpuStats() const {
    return m_previous_cpu_stats;
}
void OAIContainerInfo::setPreviousCpuStats(const OAIContainerCpuStatistics &previous_cpu_stats) {
    m_previous_cpu_stats = previous_cpu_stats;
    m_previous_cpu_stats_isSet = true;
}

bool OAIContainerInfo::is_previous_cpu_stats_Set() const{
    return m_previous_cpu_stats_isSet;
}

bool OAIContainerInfo::is_previous_cpu_stats_Valid() const{
    return m_previous_cpu_stats_isValid;
}

QDateTime OAIContainerInfo::getPreviousTimeStamp() const {
    return m_previous_time_stamp;
}
void OAIContainerInfo::setPreviousTimeStamp(const QDateTime &previous_time_stamp) {
    m_previous_time_stamp = previous_time_stamp;
    m_previous_time_stamp_isSet = true;
}

bool OAIContainerInfo::is_previous_time_stamp_Set() const{
    return m_previous_time_stamp_isSet;
}

bool OAIContainerInfo::is_previous_time_stamp_Valid() const{
    return m_previous_time_stamp_isValid;
}

bool OAIContainerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_cpu_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eth0.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_cpu_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
