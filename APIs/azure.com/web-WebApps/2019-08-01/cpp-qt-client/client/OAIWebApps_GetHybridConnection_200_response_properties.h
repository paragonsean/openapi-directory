/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebApps_GetHybridConnection_200_response_properties.h
 *
 * HybridConnection resource specific properties
 */

#ifndef OAIWebApps_GetHybridConnection_200_response_properties_H
#define OAIWebApps_GetHybridConnection_200_response_properties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWebApps_GetHybridConnection_200_response_properties : public OAIObject {
public:
    OAIWebApps_GetHybridConnection_200_response_properties();
    OAIWebApps_GetHybridConnection_200_response_properties(QString json);
    ~OAIWebApps_GetHybridConnection_200_response_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getRelayArmUri() const;
    void setRelayArmUri(const QString &relay_arm_uri);
    bool is_relay_arm_uri_Set() const;
    bool is_relay_arm_uri_Valid() const;

    QString getRelayName() const;
    void setRelayName(const QString &relay_name);
    bool is_relay_name_Set() const;
    bool is_relay_name_Valid() const;

    QString getSendKeyName() const;
    void setSendKeyName(const QString &send_key_name);
    bool is_send_key_name_Set() const;
    bool is_send_key_name_Valid() const;

    QString getSendKeyValue() const;
    void setSendKeyValue(const QString &send_key_value);
    bool is_send_key_value_Set() const;
    bool is_send_key_value_Valid() const;

    QString getServiceBusNamespace() const;
    void setServiceBusNamespace(const QString &service_bus_namespace);
    bool is_service_bus_namespace_Set() const;
    bool is_service_bus_namespace_Valid() const;

    QString getServiceBusSuffix() const;
    void setServiceBusSuffix(const QString &service_bus_suffix);
    bool is_service_bus_suffix_Set() const;
    bool is_service_bus_suffix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_relay_arm_uri;
    bool m_relay_arm_uri_isSet;
    bool m_relay_arm_uri_isValid;

    QString m_relay_name;
    bool m_relay_name_isSet;
    bool m_relay_name_isValid;

    QString m_send_key_name;
    bool m_send_key_name_isSet;
    bool m_send_key_name_isValid;

    QString m_send_key_value;
    bool m_send_key_value_isSet;
    bool m_send_key_value_isValid;

    QString m_service_bus_namespace;
    bool m_service_bus_namespace_isSet;
    bool m_service_bus_namespace_isValid;

    QString m_service_bus_suffix;
    bool m_service_bus_suffix_isSet;
    bool m_service_bus_suffix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebApps_GetHybridConnection_200_response_properties)

#endif // OAIWebApps_GetHybridConnection_200_response_properties_H
