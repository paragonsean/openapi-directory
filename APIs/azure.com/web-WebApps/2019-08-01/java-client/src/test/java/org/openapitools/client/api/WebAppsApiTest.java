/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AzureStoragePropertyDictionaryResource;
import org.openapitools.client.model.BackupItem;
import org.openapitools.client.model.BackupItemCollection;
import org.openapitools.client.model.BackupRequest;
import org.openapitools.client.model.ConnectionStringDictionary;
import org.openapitools.client.model.ContinuousWebJob;
import org.openapitools.client.model.ContinuousWebJobCollection;
import org.openapitools.client.model.CsmCopySlotEntity;
import org.openapitools.client.model.CsmPublishingProfileOptions;
import org.openapitools.client.model.CsmSlotEntity;
import org.openapitools.client.model.CustomHostnameAnalysisResult;
import org.openapitools.client.model.DeletedAppRestoreRequest;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentCollection;
import java.io.File;
import org.openapitools.client.model.FunctionEnvelope;
import org.openapitools.client.model.FunctionEnvelopeCollection;
import org.openapitools.client.model.FunctionSecrets;
import org.openapitools.client.model.HostKeys;
import org.openapitools.client.model.HostNameBinding;
import org.openapitools.client.model.HostNameBindingCollection;
import org.openapitools.client.model.KeyInfo;
import org.openapitools.client.model.KeyVaultReferenceCollection;
import org.openapitools.client.model.KeyVaultReferenceResource;
import org.openapitools.client.model.MSDeploy;
import org.openapitools.client.model.MSDeployLog;
import org.openapitools.client.model.MSDeployStatus;
import org.openapitools.client.model.MigrateMySqlRequest;
import org.openapitools.client.model.MigrateMySqlStatus;
import org.openapitools.client.model.NetworkFeatures;
import org.openapitools.client.model.NetworkTrace;
import org.openapitools.client.model.PerfMonCounterCollection;
import org.openapitools.client.model.PremierAddOn;
import org.openapitools.client.model.PremierAddOnPatchResource;
import org.openapitools.client.model.PrivateAccess;
import org.openapitools.client.model.ProcessInfo;
import org.openapitools.client.model.ProcessInfoCollection;
import org.openapitools.client.model.ProcessModuleInfo;
import org.openapitools.client.model.ProcessModuleInfoCollection;
import org.openapitools.client.model.ProcessThreadInfoCollection;
import org.openapitools.client.model.PublicCertificate;
import org.openapitools.client.model.PublicCertificateCollection;
import org.openapitools.client.model.RelayServiceConnectionEntity;
import org.openapitools.client.model.RestoreRequest;
import org.openapitools.client.model.SiteAuthSettings;
import org.openapitools.client.model.SiteCloneability;
import org.openapitools.client.model.SiteConfigResource;
import org.openapitools.client.model.SiteConfigResourceCollection;
import org.openapitools.client.model.SiteConfigurationSnapshotInfoCollection;
import org.openapitools.client.model.SiteExtensionInfo;
import org.openapitools.client.model.SiteExtensionInfoCollection;
import org.openapitools.client.model.SiteLogsConfig;
import org.openapitools.client.model.SitePatchResource;
import org.openapitools.client.model.SitePhpErrorLogFlag;
import org.openapitools.client.model.SiteSourceControl;
import org.openapitools.client.model.SlotConfigNamesResource;
import org.openapitools.client.model.SlotDifferenceCollection;
import org.openapitools.client.model.SnapshotCollection;
import org.openapitools.client.model.SnapshotRestoreRequest;
import org.openapitools.client.model.StorageMigrationOptions;
import org.openapitools.client.model.StorageMigrationResponse;
import org.openapitools.client.model.StringDictionary;
import org.openapitools.client.model.SwiftVirtualNetwork;
import org.openapitools.client.model.TriggeredJobHistory;
import org.openapitools.client.model.TriggeredJobHistoryCollection;
import org.openapitools.client.model.TriggeredWebJob;
import org.openapitools.client.model.TriggeredWebJobCollection;
import org.openapitools.client.model.WebAppInstanceCollection;
import org.openapitools.client.model.WebAppsGet200Response;
import org.openapitools.client.model.WebAppsGetDomainOwnershipIdentifier200Response;
import org.openapitools.client.model.WebAppsGetHybridConnection200Response;
import org.openapitools.client.model.WebAppsGetVnetConnectionGatewaySlot200Response;
import org.openapitools.client.model.WebAppsGetVnetConnectionSlot200Response;
import org.openapitools.client.model.WebAppsList200Response;
import org.openapitools.client.model.WebAppsListDefaultResponse;
import org.openapitools.client.model.WebAppsListDomainOwnershipIdentifiers200Response;
import org.openapitools.client.model.WebAppsListPublishingCredentials200Response;
import org.openapitools.client.model.WebAppsListUsagesSlot200Response;
import org.openapitools.client.model.WebAppsListVnetConnectionsSlot200ResponseInner;
import org.openapitools.client.model.WebAppsMigrateMySql200Response;
import org.openapitools.client.model.WebAppsUpdateSitePushSettingsRequest;
import org.openapitools.client.model.WebJob;
import org.openapitools.client.model.WebJobCollection;
import org.openapitools.client.model.WebSiteInstanceStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebAppsApi
 */
@Disabled
public class WebAppsApiTest {

    private final WebAppsApi api = new WebAppsApi();

    /**
     * Updates a named add-on of an app.
     *
     * Description for Updates a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsAddPremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn premierAddOn = null;
        PremierAddOn response = api.webAppsAddPremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * Updates a named add-on of an app.
     *
     * Description for Updates a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsAddPremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn premierAddOn = null;
        PremierAddOn response = api.webAppsAddPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * Analyze a custom hostname.
     *
     * Description for Analyze a custom hostname.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsAnalyzeCustomHostnameTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String hostName = null;
        CustomHostnameAnalysisResult response = api.webAppsAnalyzeCustomHostname(resourceGroupName, name, subscriptionId, apiVersion, hostName);
        // TODO: test validations
    }

    /**
     * Analyze a custom hostname.
     *
     * Description for Analyze a custom hostname.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsAnalyzeCustomHostnameSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String hostName = null;
        CustomHostnameAnalysisResult response = api.webAppsAnalyzeCustomHostnameSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, hostName);
        // TODO: test validations
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * Description for Applies the configuration settings from the target slot onto the current slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsApplySlotConfigToProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        api.webAppsApplySlotConfigToProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     *
     * Description for Applies the configuration settings from the target slot onto the current slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsApplySlotConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        api.webAppsApplySlotConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Creates a backup of an app.
     *
     * Description for Creates a backup of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsBackupTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.webAppsBackup(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Creates a backup of an app.
     *
     * Description for Creates a backup of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsBackupSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.webAppsBackupSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Copies a deployment slot to another deployment slot of an app.
     *
     * Description for Copies a deployment slot to another deployment slot of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCopyProductionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmCopySlotEntity copySlotEntity = null;
        api.webAppsCopyProductionSlot(resourceGroupName, name, subscriptionId, apiVersion, copySlotEntity);
        // TODO: test validations
    }

    /**
     * Copies a deployment slot to another deployment slot of an app.
     *
     * Description for Copies a deployment slot to another deployment slot of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCopySlotSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmCopySlotEntity copySlotEntity = null;
        api.webAppsCopySlotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, copySlotEntity);
        // TODO: test validations
    }

    /**
     * Create a deployment for an app, or a deployment slot.
     *
     * Description for Create a deployment for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.webAppsCreateDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Create a deployment for an app, or a deployment slot.
     *
     * Description for Create a deployment for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.webAppsCreateDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Create function for web site, or a deployment slot.
     *
     * Description for Create function for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateFunctionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelope functionEnvelope = null;
        FunctionEnvelope response = api.webAppsCreateFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion, functionEnvelope);
        // TODO: test validations
    }

    /**
     * Create function for web site, or a deployment slot.
     *
     * Description for Create function for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateInstanceFunctionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelope functionEnvelope = null;
        FunctionEnvelope response = api.webAppsCreateInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion, functionEnvelope);
        // TODO: test validations
    }

    /**
     * Invoke the MSDeploy web app extension.
     *
     * Description for Invoke the MSDeploy web app extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateInstanceMSDeployOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeploy msDeploy = null;
        MSDeployStatus response = api.webAppsCreateInstanceMSDeployOperation(resourceGroupName, name, instanceId, subscriptionId, apiVersion, msDeploy);
        // TODO: test validations
    }

    /**
     * Invoke the MSDeploy web app extension.
     *
     * Description for Invoke the MSDeploy web app extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateInstanceMSDeployOperationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeploy msDeploy = null;
        MSDeployStatus response = api.webAppsCreateInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, msDeploy);
        // TODO: test validations
    }

    /**
     * Invoke the MSDeploy web app extension.
     *
     * Description for Invoke the MSDeploy web app extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateMSDeployOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeploy msDeploy = null;
        MSDeployStatus response = api.webAppsCreateMSDeployOperation(resourceGroupName, name, subscriptionId, apiVersion, msDeploy);
        // TODO: test validations
    }

    /**
     * Invoke the MSDeploy web app extension.
     *
     * Description for Invoke the MSDeploy web app extension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateMSDeployOperationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeploy msDeploy = null;
        MSDeployStatus response = api.webAppsCreateMSDeployOperationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, msDeploy);
        // TODO: test validations
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGet200Response siteEnvelope = null;
        WebAppsGet200Response response = api.webAppsCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an app.
     *
     * Description for Updates the configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource siteConfig = null;
        SiteConfigResource response = api.webAppsCreateOrUpdateConfiguration(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an app.
     *
     * Description for Updates the configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource siteConfig = null;
        SiteConfigResource response = api.webAppsCreateOrUpdateConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateDomainOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsCreateOrUpdateDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateDomainOwnershipIdentifierSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsCreateOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

    /**
     * Add or update a function secret.
     *
     * Description for Add or update a function secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateFunctionSecretTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String keyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyInfo key = null;
        KeyInfo response = api.webAppsCreateOrUpdateFunctionSecret(resourceGroupName, name, functionName, keyName, subscriptionId, apiVersion, key);
        // TODO: test validations
    }

    /**
     * Add or update a function secret.
     *
     * Description for Add or update a function secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateFunctionSecretSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String keyName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyInfo key = null;
        KeyInfo response = api.webAppsCreateOrUpdateFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot, subscriptionId, apiVersion, key);
        // TODO: test validations
    }

    /**
     * Creates a hostname binding for an app.
     *
     * Description for Creates a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding hostNameBinding = null;
        HostNameBinding response = api.webAppsCreateOrUpdateHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding);
        // TODO: test validations
    }

    /**
     * Creates a hostname binding for an app.
     *
     * Description for Creates a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding hostNameBinding = null;
        HostNameBinding response = api.webAppsCreateOrUpdateHostNameBindingSlot(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding);
        // TODO: test validations
    }

    /**
     * Add or update a host level secret.
     *
     * Description for Add or update a host level secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHostSecretTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String keyType = null;
        String keyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyInfo key = null;
        KeyInfo response = api.webAppsCreateOrUpdateHostSecret(resourceGroupName, name, keyType, keyName, subscriptionId, apiVersion, key);
        // TODO: test validations
    }

    /**
     * Add or update a host level secret.
     *
     * Description for Add or update a host level secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHostSecretSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String keyType = null;
        String keyName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyInfo key = null;
        KeyInfo response = api.webAppsCreateOrUpdateHostSecretSlot(resourceGroupName, name, keyType, keyName, slot, subscriptionId, apiVersion, key);
        // TODO: test validations
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response connectionEnvelope = null;
        WebAppsGetHybridConnection200Response response = api.webAppsCreateOrUpdateHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateHybridConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response connectionEnvelope = null;
        WebAppsGetHybridConnection200Response response = api.webAppsCreateOrUpdateHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a hostname binding for an app.
     *
     * Description for Creates a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdatePublicCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String publicCertificateName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificate publicCertificate = null;
        PublicCertificate response = api.webAppsCreateOrUpdatePublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion, publicCertificate);
        // TODO: test validations
    }

    /**
     * Creates a hostname binding for an app.
     *
     * Description for Creates a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdatePublicCertificateSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String publicCertificateName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificate publicCertificate = null;
        PublicCertificate response = api.webAppsCreateOrUpdatePublicCertificateSlot(resourceGroupName, name, publicCertificateName, slot, subscriptionId, apiVersion, publicCertificate);
        // TODO: test validations
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.webAppsCreateOrUpdateRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.webAppsCreateOrUpdateRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGet200Response siteEnvelope = null;
        WebAppsGet200Response response = api.webAppsCreateOrUpdateSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the source control configuration of an app.
     *
     * Description for Updates the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.webAppsCreateOrUpdateSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Updates the source control configuration of an app.
     *
     * Description for Updates the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.webAppsCreateOrUpdateSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     *
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork connectionEnvelope = null;
        SwiftVirtualNetwork response = api.webAppsCreateOrUpdateSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     *
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork connectionEnvelope = null;
        SwiftVirtualNetwork response = api.webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateVnetConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsCreateOrUpdateVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateVnetConnectionGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsCreateOrUpdateVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateVnetConnectionGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsCreateOrUpdateVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsCreateOrUpdateVnetConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsCreateOrUpdateVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean deleteMetrics = null;
        Boolean deleteEmptyServerFarm = null;
        api.webAppsDelete(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm);
        // TODO: test validations
    }

    /**
     * Deletes a backup of an app by its ID.
     *
     * Description for Deletes a backup of an app by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteBackupTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteBackup(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the backup configuration of an app.
     *
     * Description for Deletes the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteBackupConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the backup configuration of an app.
     *
     * Description for Deletes the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteBackupConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a backup of an app by its ID.
     *
     * Description for Deletes a backup of an app by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteBackupSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteBackupSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteContinuousWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteContinuousWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteDeployment(resourceGroupName, name, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a domain ownership identifier for a web app.
     *
     * Description for Deletes a domain ownership identifier for a web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteDomainOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a domain ownership identifier for a web app.
     *
     * Description for Deletes a domain ownership identifier for a web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteDomainOwnershipIdentifierSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a function for web site, or a deployment slot.
     *
     * Description for Delete a function for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteFunctionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a function secret.
     *
     * Description for Delete a function secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteFunctionSecretTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String keyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteFunctionSecret(resourceGroupName, name, functionName, keyName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a function secret.
     *
     * Description for Delete a function secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteFunctionSecretSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String keyName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a hostname binding for an app.
     *
     * Description for Deletes a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a hostname binding for an app.
     *
     * Description for Deletes a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a host level secret.
     *
     * Description for Delete a host level secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHostSecretTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String keyType = null;
        String keyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHostSecret(resourceGroupName, name, keyType, keyName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a host level secret.
     *
     * Description for Delete a host level secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHostSecretSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String keyType = null;
        String keyName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHostSecretSlot(resourceGroupName, name, keyType, keyName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes a Hybrid Connection from this site.
     *
     * Description for Removes a Hybrid Connection from this site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes a Hybrid Connection from this site.
     *
     * Description for Removes a Hybrid Connection from this site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteHybridConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a function for web site, or a deployment slot.
     *
     * Description for Delete a function for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteInstanceFunctionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteInstanceProcessTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteInstanceProcess(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteInstanceProcessSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a premier add-on from an app.
     *
     * Description for Delete a premier add-on from an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeletePremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeletePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a premier add-on from an app.
     *
     * Description for Delete a premier add-on from an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeletePremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeletePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteProcessTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteProcess(resourceGroupName, name, processId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteProcessSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteProcessSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a hostname binding for an app.
     *
     * Description for Deletes a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeletePublicCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String publicCertificateName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeletePublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a hostname binding for an app.
     *
     * Description for Deletes a hostname binding for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeletePublicCertificateSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String publicCertificateName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeletePublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a relay service connection by its name.
     *
     * Description for Deletes a relay service connection by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a relay service connection by its name.
     *
     * Description for Deletes a relay service connection by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     *
     * Description for Remove a site extension from a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSiteExtensionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Remove a site extension from a web site, or a deployment slot.
     *
     * Description for Remove a site extension from a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSiteExtensionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean deleteMetrics = null;
        Boolean deleteEmptyServerFarm = null;
        api.webAppsDeleteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm);
        // TODO: test validations
    }

    /**
     * Deletes the source control configuration of an app.
     *
     * Description for Deletes the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSourceControl(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the source control configuration of an app.
     *
     * Description for Deletes the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSwiftVirtualNetworkTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSwiftVirtualNetwork(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteSwiftVirtualNetworkSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteSwiftVirtualNetworkSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteTriggeredWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteTriggeredWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteVnetConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDeleteVnetConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsDeleteVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDiscoverBackupTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreRequest response = api.webAppsDiscoverBackup(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsDiscoverBackupSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreRequest response = api.webAppsDiscoverBackupSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGenerateNewSitePublishingPasswordTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsGenerateNewSitePublishingPassword(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGenerateNewSitePublishingPasswordSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsGenerateNewSitePublishingPasswordSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of a web, mobile, or API app.
     *
     * Description for Gets the details of a web, mobile, or API app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGet200Response response = api.webAppsGet(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the config reference and status of an app
     *
     * Description for Gets the config reference and status of an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetAppSettingKeyVaultReferenceTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String appSettingKey = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyVaultReferenceResource response = api.webAppsGetAppSettingKeyVaultReference(resourceGroupName, name, appSettingKey, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the config reference app settings and status of an app
     *
     * Description for Gets the config reference app settings and status of an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetAppSettingsKeyVaultReferencesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        KeyVaultReferenceCollection response = api.webAppsGetAppSettingsKeyVaultReferences(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     *
     * Description for Gets the Authentication/Authorization settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetAuthSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings response = api.webAppsGetAuthSettings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Authentication/Authorization settings of an app.
     *
     * Description for Gets the Authentication/Authorization settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetAuthSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings response = api.webAppsGetAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the backup configuration of an app.
     *
     * Description for Gets the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetBackupConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest response = api.webAppsGetBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the backup configuration of an app.
     *
     * Description for Gets the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetBackupConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest response = api.webAppsGetBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a backup of an app by its ID.
     *
     * Description for Gets a backup of an app by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetBackupStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.webAppsGetBackupStatus(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a backup of an app by its ID.
     *
     * Description for Gets a backup of an app by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetBackupStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.webAppsGetBackupStatusSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource response = api.webAppsGetConfiguration(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource response = api.webAppsGetConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetConfigurationSnapshotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String snapshotId = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource response = api.webAppsGetConfigurationSnapshot(resourceGroupName, name, snapshotId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetConfigurationSnapshotSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String snapshotId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource response = api.webAppsGetConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the ZIP archived docker log files for the given site
     *
     * Description for Gets the ZIP archived docker log files for the given site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetContainerLogsZipTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetContainerLogsZip(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the ZIP archived docker log files for the given site
     *
     * Description for Gets the ZIP archived docker log files for the given site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetContainerLogsZipSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetContainerLogsZipSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetContinuousWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ContinuousWebJob response = api.webAppsGetContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetContinuousWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ContinuousWebJob response = api.webAppsGetContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.webAppsGetDeployment(resourceGroupName, name, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.webAppsGetDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the logging configuration of an app.
     *
     * Description for Gets the logging configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDiagnosticLogsConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig response = api.webAppsGetDiagnosticLogsConfiguration(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the logging configuration of an app.
     *
     * Description for Gets the logging configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDiagnosticLogsConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig response = api.webAppsGetDiagnosticLogsConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get domain ownership identifier for web app.
     *
     * Description for Get domain ownership identifier for web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDomainOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsGetDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get domain ownership identifier for web app.
     *
     * Description for Get domain ownership identifier for web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetDomainOwnershipIdentifierSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsGetDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     *
     * Description for Get function information by its ID for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetFunctionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelope response = api.webAppsGetFunction(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * Description for Fetch a short lived token that can be exchanged for a master key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetFunctionsAdminTokenTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String response = api.webAppsGetFunctionsAdminToken(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * Description for Fetch a short lived token that can be exchanged for a master key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetFunctionsAdminTokenSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String response = api.webAppsGetFunctionsAdminTokenSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding response = api.webAppsGetHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding response = api.webAppsGetHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response response = api.webAppsGetHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetHybridConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response response = api.webAppsGetHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function information by its ID for web site, or a deployment slot.
     *
     * Description for Get function information by its ID for web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceFunctionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelope response = api.webAppsGetInstanceFunctionSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all scale-out instances of an app.
     *
     * Description for Gets all scale-out instances of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceInfoTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebSiteInstanceStatus response = api.webAppsGetInstanceInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all scale-out instances of an app.
     *
     * Description for Gets all scale-out instances of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceInfoSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebSiteInstanceStatus response = api.webAppsGetInstanceInfoSlot(resourceGroupName, name, instanceId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceMSDeployLogTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployLog response = api.webAppsGetInstanceMSDeployLog(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceMSDeployLogSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployLog response = api.webAppsGetInstanceMSDeployLogSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the status of the last MSDeploy operation.
     *
     * Description for Get the status of the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceMsDeployStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployStatus response = api.webAppsGetInstanceMsDeployStatus(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the status of the last MSDeploy operation.
     *
     * Description for Get the status of the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceMsDeployStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployStatus response = api.webAppsGetInstanceMsDeployStatusSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfo response = api.webAppsGetInstanceProcess(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessDumpTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetInstanceProcessDump(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessDumpSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetInstanceProcessDumpSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessModuleTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String baseAddress = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfo response = api.webAppsGetInstanceProcessModule(resourceGroupName, name, processId, baseAddress, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessModuleSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String baseAddress = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfo response = api.webAppsGetInstanceProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetInstanceProcessSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfo response = api.webAppsGetInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMSDeployLogTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployLog response = api.webAppsGetMSDeployLog(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMSDeployLogSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployLog response = api.webAppsGetMSDeployLogSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the status of the last MSDeploy operation.
     *
     * Description for Get the status of the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMSDeployStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployStatus response = api.webAppsGetMSDeployStatus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the status of the last MSDeploy operation.
     *
     * Description for Get the status of the last MSDeploy operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMSDeployStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        MSDeployStatus response = api.webAppsGetMSDeployStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     *
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMigrateMySqlStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MigrateMySqlStatus response = api.webAppsGetMigrateMySqlStatus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     *
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetMigrateMySqlStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        MigrateMySqlStatus response = api.webAppsGetMigrateMySqlStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTraceOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTraceOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTraceOperationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTraceOperationSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTraceOperationSlotV2Test() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTraceOperationSlotV2(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTraceOperationV2Test() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTraceOperationV2(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTracesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTraces(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTracesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTracesSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTracesSlotV2Test() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTracesSlotV2(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetNetworkTracesV2Test() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<NetworkTrace> response = api.webAppsGetNetworkTracesV2(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named add-on of an app.
     *
     * Description for Gets a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn response = api.webAppsGetPremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a named add-on of an app.
     *
     * Description for Gets a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn response = api.webAppsGetPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPrivateAccessTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        PrivateAccess response = api.webAppsGetPrivateAccess(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPrivateAccessSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PrivateAccess response = api.webAppsGetPrivateAccessSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfo response = api.webAppsGetProcess(resourceGroupName, name, processId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessDumpTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetProcessDump(resourceGroupName, name, processId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessDumpSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetProcessDumpSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessModuleTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String baseAddress = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfo response = api.webAppsGetProcessModule(resourceGroupName, name, processId, baseAddress, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessModuleSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String baseAddress = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfo response = api.webAppsGetProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetProcessSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfo response = api.webAppsGetProcessSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     *
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPublicCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String publicCertificateName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificate response = api.webAppsGetPublicCertificate(resourceGroupName, name, publicCertificateName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     *
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetPublicCertificateSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String publicCertificateName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificate response = api.webAppsGetPublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a hybrid connection configuration by its name.
     *
     * Description for Gets a hybrid connection configuration by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.webAppsGetRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a hybrid connection configuration by its name.
     *
     * Description for Gets a hybrid connection configuration by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.webAppsGetRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     *
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSiteExtensionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfo response = api.webAppsGetSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     *
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSiteExtensionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfo response = api.webAppsGetSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets web app&#39;s event logs.
     *
     * Description for Gets web app&#39;s event logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSitePhpErrorLogFlagTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SitePhpErrorLogFlag response = api.webAppsGetSitePhpErrorLogFlag(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets web app&#39;s event logs.
     *
     * Description for Gets web app&#39;s event logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSitePhpErrorLogFlagSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SitePhpErrorLogFlag response = api.webAppsGetSitePhpErrorLogFlagSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of a web, mobile, or API app.
     *
     * Description for Gets the details of a web, mobile, or API app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGet200Response response = api.webAppsGetSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the source control configuration of an app.
     *
     * Description for Gets the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl response = api.webAppsGetSourceControl(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the source control configuration of an app.
     *
     * Description for Gets the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl response = api.webAppsGetSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a Swift Virtual Network connection.
     *
     * Description for Gets a Swift Virtual Network connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSwiftVirtualNetworkConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork response = api.webAppsGetSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a Swift Virtual Network connection.
     *
     * Description for Gets a Swift Virtual Network connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetSwiftVirtualNetworkConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork response = api.webAppsGetSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetTriggeredWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredWebJob response = api.webAppsGetTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     *
     * Description for Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetTriggeredWebJobHistoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredJobHistory response = api.webAppsGetTriggeredWebJobHistory(resourceGroupName, name, webJobName, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     *
     * Description for Gets a triggered web job&#39;s history by its ID for an app, , or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetTriggeredWebJobHistorySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredJobHistory response = api.webAppsGetTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetTriggeredWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredWebJob response = api.webAppsGetTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetVnetConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsGetVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     *
     * Description for Gets an app&#39;s Virtual Network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetVnetConnectionGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsGetVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an app&#39;s Virtual Network gateway.
     *
     * Description for Gets an app&#39;s Virtual Network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetVnetConnectionGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsGetVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetVnetConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsGetVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get webjob information for an app, or a deployment slot.
     *
     * Description for Get webjob information for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebJob response = api.webAppsGetWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get webjob information for an app, or a deployment slot.
     *
     * Description for Get webjob information for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebJob response = api.webAppsGetWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the last lines of docker logs for the given site
     *
     * Description for Gets the last lines of docker logs for the given site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetWebSiteContainerLogsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetWebSiteContainerLogs(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the last lines of docker logs for the given site
     *
     * Description for Gets the last lines of docker logs for the given site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsGetWebSiteContainerLogsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        File response = api.webAppsGetWebSiteContainerLogsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Install site extension on a web site, or a deployment slot.
     *
     * Description for Install site extension on a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsInstallSiteExtensionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfo response = api.webAppsInstallSiteExtension(resourceGroupName, name, siteExtensionId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Install site extension on a web site, or a deployment slot.
     *
     * Description for Install site extension on a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsInstallSiteExtensionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String siteExtensionId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfo response = api.webAppsInstallSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     *
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsIsCloneableTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCloneability response = api.webAppsIsCloneable(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     *
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsIsCloneableSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCloneability response = api.webAppsIsCloneableSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all apps for a subscription.
     *
     * Description for Get all apps for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsList200Response response = api.webAppsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the application settings of an app.
     *
     * Description for Gets the application settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListApplicationSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListApplicationSettings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the application settings of an app.
     *
     * Description for Gets the application settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListApplicationSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListApplicationSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Azure storage account configurations of an app.
     *
     * Description for Gets the Azure storage account configurations of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListAzureStorageAccountsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AzureStoragePropertyDictionaryResource response = api.webAppsListAzureStorageAccounts(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Azure storage account configurations of an app.
     *
     * Description for Gets the Azure storage account configurations of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListAzureStorageAccountsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        AzureStoragePropertyDictionaryResource response = api.webAppsListAzureStorageAccountsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListBackupStatusSecretsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.webAppsListBackupStatusSecrets(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListBackupStatusSecretsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.webAppsListBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Gets existing backups of an app.
     *
     * Description for Gets existing backups of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListBackupsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.webAppsListBackups(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets existing backups of an app.
     *
     * Description for Gets existing backups of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListBackupsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.webAppsListBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     *
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean includeSlots = null;
        WebAppsList200Response response = api.webAppsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, includeSlots);
        // TODO: test validations
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConfigurationSnapshotInfoTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigurationSnapshotInfoCollection response = api.webAppsListConfigurationSnapshotInfo(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConfigurationSnapshotInfoSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigurationSnapshotInfoCollection response = api.webAppsListConfigurationSnapshotInfoSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the configurations of an app
     *
     * Description for List the configurations of an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConfigurationsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResourceCollection response = api.webAppsListConfigurations(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the configurations of an app
     *
     * Description for List the configurations of an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConfigurationsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResourceCollection response = api.webAppsListConfigurationsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the connection strings of an app.
     *
     * Description for Gets the connection strings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConnectionStringsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary response = api.webAppsListConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the connection strings of an app.
     *
     * Description for Gets the connection strings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListConnectionStringsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary response = api.webAppsListConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     *
     * Description for List continuous web jobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListContinuousWebJobsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ContinuousWebJobCollection response = api.webAppsListContinuousWebJobs(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List continuous web jobs for an app, or a deployment slot.
     *
     * Description for List continuous web jobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListContinuousWebJobsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ContinuousWebJobCollection response = api.webAppsListContinuousWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     *
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDeploymentLogTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.webAppsListDeploymentLog(resourceGroupName, name, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     *
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDeploymentLogSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.webAppsListDeploymentLogSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments for an app, or a deployment slot.
     *
     * Description for List deployments for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDeploymentsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.webAppsListDeployments(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments for an app, or a deployment slot.
     *
     * Description for List deployments for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDeploymentsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.webAppsListDeploymentsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     *
     * Description for Lists ownership identifiers for domain associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDomainOwnershipIdentifiersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsListDomainOwnershipIdentifiers200Response response = api.webAppsListDomainOwnershipIdentifiers(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists ownership identifiers for domain associated with web app.
     *
     * Description for Lists ownership identifiers for domain associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListDomainOwnershipIdentifiersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsListDomainOwnershipIdentifiers200Response response = api.webAppsListDomainOwnershipIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     *
     * Description for Get function keys for a function in a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListFunctionKeysTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListFunctionKeys(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     *
     * Description for Get function keys for a function in a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListFunctionKeysSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListFunctionKeysSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListFunctionSecretsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionSecrets response = api.webAppsListFunctionSecrets(resourceGroupName, name, functionName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListFunctionSecretsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String functionName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionSecrets response = api.webAppsListFunctionSecretsSlot(resourceGroupName, name, functionName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the functions for a web site, or a deployment slot.
     *
     * Description for List the functions for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListFunctionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelopeCollection response = api.webAppsListFunctions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get host secrets for a function app.
     *
     * Description for Get host secrets for a function app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHostKeysTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostKeys response = api.webAppsListHostKeys(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get host secrets for a function app.
     *
     * Description for Get host secrets for a function app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHostKeysSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostKeys response = api.webAppsListHostKeysSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     *
     * Description for Get hostname bindings for an app or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHostNameBindingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBindingCollection response = api.webAppsListHostNameBindings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get hostname bindings for an app or a deployment slot.
     *
     * Description for Get hostname bindings for an app or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHostNameBindingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBindingCollection response = api.webAppsListHostNameBindingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHybridConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response response = api.webAppsListHybridConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListHybridConnectionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response response = api.webAppsListHybridConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the functions for a web site, or a deployment slot.
     *
     * Description for List the functions for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceFunctionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionEnvelopeCollection response = api.webAppsListInstanceFunctionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all scale-out instances of an app.
     *
     * Description for Gets all scale-out instances of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceIdentifiersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppInstanceCollection response = api.webAppsListInstanceIdentifiers(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all scale-out instances of an app.
     *
     * Description for Gets all scale-out instances of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceIdentifiersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppInstanceCollection response = api.webAppsListInstanceIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessModulesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfoCollection response = api.webAppsListInstanceProcessModules(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessModulesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfoCollection response = api.webAppsListInstanceProcessModulesSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessThreadsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessThreadInfoCollection response = api.webAppsListInstanceProcessThreads(resourceGroupName, name, processId, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessThreadsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessThreadInfoCollection response = api.webAppsListInstanceProcessThreadsSlot(resourceGroupName, name, processId, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfoCollection response = api.webAppsListInstanceProcesses(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListInstanceProcessesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfoCollection response = api.webAppsListInstanceProcessesSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the metadata of an app.
     *
     * Description for Gets the metadata of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListMetadataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListMetadata(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the metadata of an app.
     *
     * Description for Gets the metadata of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListMetadataSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.webAppsListMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     *
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListNetworkFeaturesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String view = null;
        String subscriptionId = null;
        String apiVersion = null;
        NetworkFeatures response = api.webAppsListNetworkFeatures(resourceGroupName, name, view, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     *
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListNetworkFeaturesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String view = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        NetworkFeatures response = api.webAppsListNetworkFeaturesSlot(resourceGroupName, name, view, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets perfmon counters for web app.
     *
     * Description for Gets perfmon counters for web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPerfMonCountersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        PerfMonCounterCollection response = api.webAppsListPerfMonCounters(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets perfmon counters for web app.
     *
     * Description for Gets perfmon counters for web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPerfMonCountersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        PerfMonCounterCollection response = api.webAppsListPerfMonCountersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets the premier add-ons of an app.
     *
     * Description for Gets the premier add-ons of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPremierAddOnsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn response = api.webAppsListPremierAddOns(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the premier add-ons of an app.
     *
     * Description for Gets the premier add-ons of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPremierAddOnsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOn response = api.webAppsListPremierAddOnsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessModulesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfoCollection response = api.webAppsListProcessModules(resourceGroupName, name, processId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessModulesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessModuleInfoCollection response = api.webAppsListProcessModulesSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessThreadsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessThreadInfoCollection response = api.webAppsListProcessThreads(resourceGroupName, name, processId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessThreadsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String processId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessThreadInfoCollection response = api.webAppsListProcessThreadsSlot(resourceGroupName, name, processId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfoCollection response = api.webAppsListProcesses(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListProcessesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ProcessInfoCollection response = api.webAppsListProcessesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get public certificates for an app or a deployment slot.
     *
     * Description for Get public certificates for an app or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublicCertificatesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificateCollection response = api.webAppsListPublicCertificates(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get public certificates for an app or a deployment slot.
     *
     * Description for Get public certificates for an app or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublicCertificatesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PublicCertificateCollection response = api.webAppsListPublicCertificatesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     *
     * Description for Gets the Git/FTP publishing credentials of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublishingCredentialsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsListPublishingCredentials200Response response = api.webAppsListPublishingCredentials(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Git/FTP publishing credentials of an app.
     *
     * Description for Gets the Git/FTP publishing credentials of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublishingCredentialsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsListPublishingCredentials200Response response = api.webAppsListPublishingCredentialsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublishingProfileXmlWithSecretsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmPublishingProfileOptions publishingProfileOptions = null;
        File response = api.webAppsListPublishingProfileXmlWithSecrets(resourceGroupName, name, subscriptionId, apiVersion, publishingProfileOptions);
        // TODO: test validations
    }

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListPublishingProfileXmlWithSecretsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmPublishingProfileOptions publishingProfileOptions = null;
        File response = api.webAppsListPublishingProfileXmlWithSecretsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, publishingProfileOptions);
        // TODO: test validations
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListRelayServiceConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.webAppsListRelayServiceConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListRelayServiceConnectionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.webAppsListRelayServiceConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets existing backups of an app.
     *
     * Description for Gets existing backups of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSiteBackupsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.webAppsListSiteBackups(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets existing backups of an app.
     *
     * Description for Gets existing backups of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSiteBackupsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.webAppsListSiteBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSiteExtensionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfoCollection response = api.webAppsListSiteExtensions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSiteExtensionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteExtensionInfoCollection response = api.webAppsListSiteExtensionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Push settings associated with web app.
     *
     * Description for Gets the Push settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSitePushSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsUpdateSitePushSettingsRequest response = api.webAppsListSitePushSettings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Push settings associated with web app.
     *
     * Description for Gets the Push settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSitePushSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsUpdateSitePushSettingsRequest response = api.webAppsListSitePushSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     *
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSlotConfigurationNamesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SlotConfigNamesResource response = api.webAppsListSlotConfigurationNames(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * Description for Get the difference in configuration settings between two web app slots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSlotDifferencesFromProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        SlotDifferenceCollection response = api.webAppsListSlotDifferencesFromProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Get the difference in configuration settings between two web app slots.
     *
     * Description for Get the difference in configuration settings between two web app slots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSlotDifferencesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        SlotDifferenceCollection response = api.webAppsListSlotDifferencesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Gets an app&#39;s deployment slots.
     *
     * Description for Gets an app&#39;s deployment slots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSlotsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsList200Response response = api.webAppsListSlots(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user.
     *
     * Description for Returns all Snapshots to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSnapshotsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotCollection response = api.webAppsListSnapshots(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSnapshotsFromDRSecondaryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotCollection response = api.webAppsListSnapshotsFromDRSecondary(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSnapshotsFromDRSecondarySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotCollection response = api.webAppsListSnapshotsFromDRSecondarySlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user.
     *
     * Description for Returns all Snapshots to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSnapshotsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotCollection response = api.webAppsListSnapshotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * This is to allow calling via powershell and ARM template.
     *
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSyncFunctionTriggersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionSecrets response = api.webAppsListSyncFunctionTriggers(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * This is to allow calling via powershell and ARM template.
     *
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSyncFunctionTriggersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        FunctionSecrets response = api.webAppsListSyncFunctionTriggersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * This is to allow calling via powershell and ARM template.
     *
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSyncStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsListSyncStatus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * This is to allow calling via powershell and ARM template.
     *
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListSyncStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsListSyncStatusSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     *
     * Description for List a triggered web job&#39;s history for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListTriggeredWebJobHistoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredJobHistoryCollection response = api.webAppsListTriggeredWebJobHistory(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List a triggered web job&#39;s history for an app, or a deployment slot.
     *
     * Description for List a triggered web job&#39;s history for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListTriggeredWebJobHistorySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredJobHistoryCollection response = api.webAppsListTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     *
     * Description for List triggered web jobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListTriggeredWebJobsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredWebJobCollection response = api.webAppsListTriggeredWebJobs(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List triggered web jobs for an app, or a deployment slot.
     *
     * Description for List triggered web jobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListTriggeredWebJobsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        TriggeredWebJobCollection response = api.webAppsListTriggeredWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        WebAppsListUsagesSlot200Response response = api.webAppsListUsages(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListUsagesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        WebAppsListUsagesSlot200Response response = api.webAppsListUsagesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListVnetConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<WebAppsListVnetConnectionsSlot200ResponseInner> response = api.webAppsListVnetConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListVnetConnectionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<WebAppsListVnetConnectionsSlot200ResponseInner> response = api.webAppsListVnetConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List webjobs for an app, or a deployment slot.
     *
     * Description for List webjobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListWebJobsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebJobCollection response = api.webAppsListWebJobs(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List webjobs for an app, or a deployment slot.
     *
     * Description for List webjobs for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsListWebJobsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebJobCollection response = api.webAppsListWebJobsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsMigrateMySqlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MigrateMySqlRequest migrationRequestEnvelope = null;
        WebAppsMigrateMySql200Response response = api.webAppsMigrateMySql(resourceGroupName, name, subscriptionId, apiVersion, migrationRequestEnvelope);
        // TODO: test validations
    }

    /**
     * Restores a web app.
     *
     * Description for Restores a web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsMigrateStorageTest() throws ApiException {
        String subscriptionName = null;
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StorageMigrationOptions migrationOptions = null;
        StorageMigrationResponse response = api.webAppsMigrateStorage(subscriptionName, resourceGroupName, name, subscriptionId, apiVersion, migrationOptions);
        // TODO: test validations
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsPutPrivateAccessVnetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        PrivateAccess access = null;
        PrivateAccess response = api.webAppsPutPrivateAccessVnet(resourceGroupName, name, subscriptionId, apiVersion, access);
        // TODO: test validations
    }

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsPutPrivateAccessVnetSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PrivateAccess access = null;
        PrivateAccess response = api.webAppsPutPrivateAccessVnetSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, access);
        // TODO: test validations
    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     *
     * Description for Reverts the configuration of an app to a previous snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRecoverSiteConfigurationSnapshotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String snapshotId = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsRecoverSiteConfigurationSnapshot(resourceGroupName, name, snapshotId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reverts the configuration of an app to a previous snapshot.
     *
     * Description for Reverts the configuration of an app to a previous snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRecoverSiteConfigurationSnapshotSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String snapshotId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsRecoverSiteConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsResetProductionSlotConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsResetProductionSlotConfig(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsResetSlotConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsResetSlotConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Restarts an app (or deployment slot, if specified).
     *
     * Description for Restarts an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestartTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        Boolean synchronous = null;
        api.webAppsRestart(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous);
        // TODO: test validations
    }

    /**
     * Restarts an app (or deployment slot, if specified).
     *
     * Description for Restarts an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestartSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        Boolean synchronous = null;
        api.webAppsRestartSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous);
        // TODO: test validations
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     *
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        api.webAppsRestore(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     *
     * Description for Restores an app from a backup blob in Azure Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreFromBackupBlobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        api.webAppsRestoreFromBackupBlob(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Restores an app from a backup blob in Azure Storage.
     *
     * Description for Restores an app from a backup blob in Azure Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreFromBackupBlobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        api.webAppsRestoreFromBackupBlobSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Restores a deleted web app to this web app.
     *
     * Description for Restores a deleted web app to this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreFromDeletedAppTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeletedAppRestoreRequest restoreRequest = null;
        api.webAppsRestoreFromDeletedApp(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest);
        // TODO: test validations
    }

    /**
     * Restores a deleted web app to this web app.
     *
     * Description for Restores a deleted web app to this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreFromDeletedAppSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeletedAppRestoreRequest restoreRequest = null;
        api.webAppsRestoreFromDeletedAppSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest);
        // TODO: test validations
    }

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     *
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        api.webAppsRestoreSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Restores a web app from a snapshot.
     *
     * Description for Restores a web app from a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreSnapshotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotRestoreRequest restoreRequest = null;
        api.webAppsRestoreSnapshot(resourceGroupName, name, subscriptionId, apiVersion, restoreRequest);
        // TODO: test validations
    }

    /**
     * Restores a web app from a snapshot.
     *
     * Description for Restores a web app from a snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRestoreSnapshotSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SnapshotRestoreRequest restoreRequest = null;
        api.webAppsRestoreSnapshotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, restoreRequest);
        // TODO: test validations
    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     *
     * Description for Run a triggered web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRunTriggeredWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsRunTriggeredWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Run a triggered web job for an app, or a deployment slot.
     *
     * Description for Run a triggered web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsRunTriggeredWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsRunTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Starts an app (or deployment slot, if specified).
     *
     * Description for Starts an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStart(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     *
     * Description for Start a continuous web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartContinuousWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStartContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Start a continuous web job for an app, or a deployment slot.
     *
     * Description for Start a continuous web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartContinuousWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStartContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site.
     *
     * Description for Start capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartNetworkTraceTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        List<NetworkTrace> response = api.webAppsStartNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site.
     *
     * Description for Start capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartNetworkTraceSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        List<NetworkTrace> response = api.webAppsStartNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Starts an app (or deployment slot, if specified).
     *
     * Description for Starts an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStartSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     *
     * Description for Start capturing network packets for the site (To be deprecated).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartWebSiteNetworkTraceTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        String response = api.webAppsStartWebSiteNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site.
     *
     * Description for Start capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartWebSiteNetworkTraceOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        List<NetworkTrace> response = api.webAppsStartWebSiteNetworkTraceOperation(resourceGroupName, name, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site.
     *
     * Description for Start capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartWebSiteNetworkTraceOperationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        List<NetworkTrace> response = api.webAppsStartWebSiteNetworkTraceOperationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Start capturing network packets for the site (To be deprecated).
     *
     * Description for Start capturing network packets for the site (To be deprecated).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStartWebSiteNetworkTraceSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer durationInSeconds = null;
        Integer maxFrameLength = null;
        String sasUrl = null;
        String response = api.webAppsStartWebSiteNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, durationInSeconds, maxFrameLength, sasUrl);
        // TODO: test validations
    }

    /**
     * Stops an app (or deployment slot, if specified).
     *
     * Description for Stops an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStop(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * Description for Stop a continuous web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopContinuousWebJobTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopContinuousWebJob(resourceGroupName, name, webJobName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * Description for Stop a continuous web job for an app, or a deployment slot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopContinuousWebJobSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String webJobName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopContinuousWebJobSlot(resourceGroupName, name, webJobName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop ongoing capturing network packets for the site.
     *
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopNetworkTraceTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop ongoing capturing network packets for the site.
     *
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopNetworkTraceSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops an app (or deployment slot, if specified).
     *
     * Description for Stops an app (or deployment slot, if specified).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop ongoing capturing network packets for the site.
     *
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopWebSiteNetworkTraceTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopWebSiteNetworkTrace(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop ongoing capturing network packets for the site.
     *
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsStopWebSiteNetworkTraceSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsStopWebSiteNetworkTraceSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Swaps two deployment slots of an app.
     *
     * Description for Swaps two deployment slots of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSwapSlotSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        api.webAppsSwapSlotSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Swaps two deployment slots of an app.
     *
     * Description for Swaps two deployment slots of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSwapSlotWithProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        api.webAppsSwapSlotWithProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Syncs function trigger metadata to the management database
     *
     * Description for Syncs function trigger metadata to the management database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncFunctionTriggersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncFunctionTriggers(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Syncs function trigger metadata to the management database
     *
     * Description for Syncs function trigger metadata to the management database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncFunctionTriggersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncFunctionTriggersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Syncs function trigger metadata to the management database
     *
     * Description for Syncs function trigger metadata to the management database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncFunctionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncFunctions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Syncs function trigger metadata to the management database
     *
     * Description for Syncs function trigger metadata to the management database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncFunctionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncFunctionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Sync web app repository.
     *
     * Description for Sync web app repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncRepositoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncRepository(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Sync web app repository.
     *
     * Description for Sync web app repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsSyncRepositorySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.webAppsSyncRepositorySlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SitePatchResource siteEnvelope = null;
        WebAppsGet200Response response = api.webAppsUpdate(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope);
        // TODO: test validations
    }

    /**
     * Replaces the application settings of an app.
     *
     * Description for Replaces the application settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateApplicationSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary appSettings = null;
        StringDictionary response = api.webAppsUpdateApplicationSettings(resourceGroupName, name, subscriptionId, apiVersion, appSettings);
        // TODO: test validations
    }

    /**
     * Replaces the application settings of an app.
     *
     * Description for Replaces the application settings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateApplicationSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary appSettings = null;
        StringDictionary response = api.webAppsUpdateApplicationSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings);
        // TODO: test validations
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * Description for Updates the Authentication / Authorization settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateAuthSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings siteAuthSettings = null;
        SiteAuthSettings response = api.webAppsUpdateAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings);
        // TODO: test validations
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * Description for Updates the Authentication / Authorization settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateAuthSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings siteAuthSettings = null;
        SiteAuthSettings response = api.webAppsUpdateAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings);
        // TODO: test validations
    }

    /**
     * Updates the Azure storage account configurations of an app.
     *
     * Description for Updates the Azure storage account configurations of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateAzureStorageAccountsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AzureStoragePropertyDictionaryResource azureStorageAccounts = null;
        AzureStoragePropertyDictionaryResource response = api.webAppsUpdateAzureStorageAccounts(resourceGroupName, name, subscriptionId, apiVersion, azureStorageAccounts);
        // TODO: test validations
    }

    /**
     * Updates the Azure storage account configurations of an app.
     *
     * Description for Updates the Azure storage account configurations of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateAzureStorageAccountsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        AzureStoragePropertyDictionaryResource azureStorageAccounts = null;
        AzureStoragePropertyDictionaryResource response = api.webAppsUpdateAzureStorageAccountsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, azureStorageAccounts);
        // TODO: test validations
    }

    /**
     * Updates the backup configuration of an app.
     *
     * Description for Updates the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateBackupConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupRequest response = api.webAppsUpdateBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Updates the backup configuration of an app.
     *
     * Description for Updates the backup configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateBackupConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupRequest response = api.webAppsUpdateBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an app.
     *
     * Description for Updates the configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource siteConfig = null;
        SiteConfigResource response = api.webAppsUpdateConfiguration(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an app.
     *
     * Description for Updates the configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfigResource siteConfig = null;
        SiteConfigResource response = api.webAppsUpdateConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Replaces the connection strings of an app.
     *
     * Description for Replaces the connection strings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateConnectionStringsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary connectionStrings = null;
        ConnectionStringDictionary response = api.webAppsUpdateConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings);
        // TODO: test validations
    }

    /**
     * Replaces the connection strings of an app.
     *
     * Description for Replaces the connection strings of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateConnectionStringsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary connectionStrings = null;
        ConnectionStringDictionary response = api.webAppsUpdateConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings);
        // TODO: test validations
    }

    /**
     * Updates the logging configuration of an app.
     *
     * Description for Updates the logging configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateDiagnosticLogsConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig siteLogsConfig = null;
        SiteLogsConfig response = api.webAppsUpdateDiagnosticLogsConfig(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig);
        // TODO: test validations
    }

    /**
     * Updates the logging configuration of an app.
     *
     * Description for Updates the logging configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateDiagnosticLogsConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig siteLogsConfig = null;
        SiteLogsConfig response = api.webAppsUpdateDiagnosticLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig);
        // TODO: test validations
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateDomainOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsUpdateDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateDomainOwnershipIdentifierSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String domainOwnershipIdentifierName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetDomainOwnershipIdentifier200Response domainOwnershipIdentifier = null;
        WebAppsGetDomainOwnershipIdentifier200Response response = api.webAppsUpdateDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response connectionEnvelope = null;
        WebAppsGetHybridConnection200Response response = api.webAppsUpdateHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateHybridConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetHybridConnection200Response connectionEnvelope = null;
        WebAppsGetHybridConnection200Response response = api.webAppsUpdateHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Replaces the metadata of an app.
     *
     * Description for Replaces the metadata of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateMetadataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary metadata = null;
        StringDictionary response = api.webAppsUpdateMetadata(resourceGroupName, name, subscriptionId, apiVersion, metadata);
        // TODO: test validations
    }

    /**
     * Replaces the metadata of an app.
     *
     * Description for Replaces the metadata of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateMetadataSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary metadata = null;
        StringDictionary response = api.webAppsUpdateMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata);
        // TODO: test validations
    }

    /**
     * Updates a named add-on of an app.
     *
     * Description for Updates a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdatePremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOnPatchResource premierAddOn = null;
        PremierAddOn response = api.webAppsUpdatePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * Updates a named add-on of an app.
     *
     * Description for Updates a named add-on of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdatePremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOnPatchResource premierAddOn = null;
        PremierAddOn response = api.webAppsUpdatePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.webAppsUpdateRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.webAppsUpdateRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the Push settings associated with web app.
     *
     * Description for Updates the Push settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSitePushSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsUpdateSitePushSettingsRequest pushSettings = null;
        WebAppsUpdateSitePushSettingsRequest response = api.webAppsUpdateSitePushSettings(resourceGroupName, name, subscriptionId, apiVersion, pushSettings);
        // TODO: test validations
    }

    /**
     * Updates the Push settings associated with web app.
     *
     * Description for Updates the Push settings associated with web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSitePushSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsUpdateSitePushSettingsRequest pushSettings = null;
        WebAppsUpdateSitePushSettingsRequest response = api.webAppsUpdateSitePushSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, pushSettings);
        // TODO: test validations
    }

    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SitePatchResource siteEnvelope = null;
        WebAppsGet200Response response = api.webAppsUpdateSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSlotConfigurationNamesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SlotConfigNamesResource slotConfigNames = null;
        SlotConfigNamesResource response = api.webAppsUpdateSlotConfigurationNames(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames);
        // TODO: test validations
    }

    /**
     * Updates the source control configuration of an app.
     *
     * Description for Updates the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.webAppsUpdateSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Updates the source control configuration of an app.
     *
     * Description for Updates the source control configuration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.webAppsUpdateSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     *
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSwiftVirtualNetworkConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork connectionEnvelope = null;
        SwiftVirtualNetwork response = api.webAppsUpdateSwiftVirtualNetworkConnection(resourceGroupName, name, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not  in use by another App Service Plan other than the one this App is in.
     *
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) \&quot;swiftSupported\&quot; is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not in use by another App Service Plan other than the one this App is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateSwiftVirtualNetworkConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SwiftVirtualNetwork connectionEnvelope = null;
        SwiftVirtualNetwork response = api.webAppsUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateVnetConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsUpdateVnetConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateVnetConnectionGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsUpdateVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateVnetConnectionGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionGatewaySlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionGatewaySlot200Response response = api.webAppsUpdateVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAppsUpdateVnetConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        WebAppsGetVnetConnectionSlot200Response connectionEnvelope = null;
        WebAppsGetVnetConnectionSlot200Response response = api.webAppsUpdateVnetConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

}
