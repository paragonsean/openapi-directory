/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:09.892764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner {
  public static final String SERIALIZED_NAME_ACTION_HOST_NAME = "actionHostName";
  @SerializedName(SERIALIZED_NAME_ACTION_HOST_NAME)
  private String actionHostName;

  public static final String SERIALIZED_NAME_CHANGE_DECISION_CALLBACK_URL = "changeDecisionCallbackUrl";
  @SerializedName(SERIALIZED_NAME_CHANGE_DECISION_CALLBACK_URL)
  private String changeDecisionCallbackUrl;

  public static final String SERIALIZED_NAME_CHANGE_INTERVAL_IN_MINUTES = "changeIntervalInMinutes";
  @SerializedName(SERIALIZED_NAME_CHANGE_INTERVAL_IN_MINUTES)
  private Integer changeIntervalInMinutes;

  public static final String SERIALIZED_NAME_CHANGE_STEP = "changeStep";
  @SerializedName(SERIALIZED_NAME_CHANGE_STEP)
  private Double changeStep;

  public static final String SERIALIZED_NAME_MAX_REROUTE_PERCENTAGE = "maxReroutePercentage";
  @SerializedName(SERIALIZED_NAME_MAX_REROUTE_PERCENTAGE)
  private Double maxReroutePercentage;

  public static final String SERIALIZED_NAME_MIN_REROUTE_PERCENTAGE = "minReroutePercentage";
  @SerializedName(SERIALIZED_NAME_MIN_REROUTE_PERCENTAGE)
  private Double minReroutePercentage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REROUTE_PERCENTAGE = "reroutePercentage";
  @SerializedName(SERIALIZED_NAME_REROUTE_PERCENTAGE)
  private Double reroutePercentage;

  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner() {
  }

  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner actionHostName(String actionHostName) {
    this.actionHostName = actionHostName;
    return this;
  }

  /**
   * Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
   * @return actionHostName
   */
  @javax.annotation.Nullable
  public String getActionHostName() {
    return actionHostName;
  }

  public void setActionHostName(String actionHostName) {
    this.actionHostName = actionHostName;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner changeDecisionCallbackUrl(String changeDecisionCallbackUrl) {
    this.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
    return this;
  }

  /**
   * Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts. https://www.siteextensions.net/packages/TiPCallback/
   * @return changeDecisionCallbackUrl
   */
  @javax.annotation.Nullable
  public String getChangeDecisionCallbackUrl() {
    return changeDecisionCallbackUrl;
  }

  public void setChangeDecisionCallbackUrl(String changeDecisionCallbackUrl) {
    this.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner changeIntervalInMinutes(Integer changeIntervalInMinutes) {
    this.changeIntervalInMinutes = changeIntervalInMinutes;
    return this;
  }

  /**
   * Specifies interval in minutes to reevaluate ReroutePercentage.
   * @return changeIntervalInMinutes
   */
  @javax.annotation.Nullable
  public Integer getChangeIntervalInMinutes() {
    return changeIntervalInMinutes;
  }

  public void setChangeIntervalInMinutes(Integer changeIntervalInMinutes) {
    this.changeIntervalInMinutes = changeIntervalInMinutes;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner changeStep(Double changeStep) {
    this.changeStep = changeStep;
    return this;
  }

  /**
   * In auto ramp up scenario this is the step to add/remove from &lt;code&gt;ReroutePercentage&lt;/code&gt; until it reaches \\n&lt;code&gt;MinReroutePercentage&lt;/code&gt; or  &lt;code&gt;MaxReroutePercentage&lt;/code&gt;. Site metrics are checked every N minutes specified in &lt;code&gt;ChangeIntervalInMinutes&lt;/code&gt;.\\nCustom decision algorithm  can be provided in TiPCallback site extension which URL can be specified in &lt;code&gt;ChangeDecisionCallbackUrl&lt;/code&gt;.
   * @return changeStep
   */
  @javax.annotation.Nullable
  public Double getChangeStep() {
    return changeStep;
  }

  public void setChangeStep(Double changeStep) {
    this.changeStep = changeStep;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner maxReroutePercentage(Double maxReroutePercentage) {
    this.maxReroutePercentage = maxReroutePercentage;
    return this;
  }

  /**
   * Specifies upper boundary below which ReroutePercentage will stay.
   * @return maxReroutePercentage
   */
  @javax.annotation.Nullable
  public Double getMaxReroutePercentage() {
    return maxReroutePercentage;
  }

  public void setMaxReroutePercentage(Double maxReroutePercentage) {
    this.maxReroutePercentage = maxReroutePercentage;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner minReroutePercentage(Double minReroutePercentage) {
    this.minReroutePercentage = minReroutePercentage;
    return this;
  }

  /**
   * Specifies lower boundary above which ReroutePercentage will stay.
   * @return minReroutePercentage
   */
  @javax.annotation.Nullable
  public Double getMinReroutePercentage() {
    return minReroutePercentage;
  }

  public void setMinReroutePercentage(Double minReroutePercentage) {
    this.minReroutePercentage = minReroutePercentage;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner reroutePercentage(Double reroutePercentage) {
    this.reroutePercentage = reroutePercentage;
    return this;
  }

  /**
   * Percentage of the traffic which will be redirected to &lt;code&gt;ActionHostName&lt;/code&gt;.
   * @return reroutePercentage
   */
  @javax.annotation.Nullable
  public Double getReroutePercentage() {
    return reroutePercentage;
  }

  public void setReroutePercentage(Double reroutePercentage) {
    this.reroutePercentage = reroutePercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner = (WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner) o;
    return Objects.equals(this.actionHostName, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.actionHostName) &&
        Objects.equals(this.changeDecisionCallbackUrl, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.changeDecisionCallbackUrl) &&
        Objects.equals(this.changeIntervalInMinutes, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.changeIntervalInMinutes) &&
        Objects.equals(this.changeStep, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.changeStep) &&
        Objects.equals(this.maxReroutePercentage, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.maxReroutePercentage) &&
        Objects.equals(this.minReroutePercentage, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.minReroutePercentage) &&
        Objects.equals(this.name, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.name) &&
        Objects.equals(this.reroutePercentage, webAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.reroutePercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionHostName, changeDecisionCallbackUrl, changeIntervalInMinutes, changeStep, maxReroutePercentage, minReroutePercentage, name, reroutePercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner {\n");
    sb.append("    actionHostName: ").append(toIndentedString(actionHostName)).append("\n");
    sb.append("    changeDecisionCallbackUrl: ").append(toIndentedString(changeDecisionCallbackUrl)).append("\n");
    sb.append("    changeIntervalInMinutes: ").append(toIndentedString(changeIntervalInMinutes)).append("\n");
    sb.append("    changeStep: ").append(toIndentedString(changeStep)).append("\n");
    sb.append("    maxReroutePercentage: ").append(toIndentedString(maxReroutePercentage)).append("\n");
    sb.append("    minReroutePercentage: ").append(toIndentedString(minReroutePercentage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reroutePercentage: ").append(toIndentedString(reroutePercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionHostName");
    openapiFields.add("changeDecisionCallbackUrl");
    openapiFields.add("changeIntervalInMinutes");
    openapiFields.add("changeStep");
    openapiFields.add("maxReroutePercentage");
    openapiFields.add("minReroutePercentage");
    openapiFields.add("name");
    openapiFields.add("reroutePercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner is not found in the empty JSON string", WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionHostName") != null && !jsonObj.get("actionHostName").isJsonNull()) && !jsonObj.get("actionHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionHostName").toString()));
      }
      if ((jsonObj.get("changeDecisionCallbackUrl") != null && !jsonObj.get("changeDecisionCallbackUrl").isJsonNull()) && !jsonObj.get("changeDecisionCallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeDecisionCallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeDecisionCallbackUrl").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner>() {
           @Override
           public void write(JsonWriter out, WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner
   * @throws IOException if the JSON string is invalid with respect to WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner
   */
  public static WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner.class);
  }

  /**
   * Convert an instance of WebAppsList200ResponseValueInnerPropertiesSiteConfigExperimentsRampUpRulesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

