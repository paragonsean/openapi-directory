/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ContainerCpuStatistics;
import org.openapitools.client.model.ContainerMemoryStatistics;
import org.openapitools.client.model.ContainerNetworkInterfaceStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:09.892764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerInfo {
  public static final String SERIALIZED_NAME_CURRENT_CPU_STATS = "currentCpuStats";
  @SerializedName(SERIALIZED_NAME_CURRENT_CPU_STATS)
  private ContainerCpuStatistics currentCpuStats;

  public static final String SERIALIZED_NAME_CURRENT_TIME_STAMP = "currentTimeStamp";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIME_STAMP)
  private OffsetDateTime currentTimeStamp;

  public static final String SERIALIZED_NAME_ETH0 = "eth0";
  @SerializedName(SERIALIZED_NAME_ETH0)
  private ContainerNetworkInterfaceStatistics eth0;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEMORY_STATS = "memoryStats";
  @SerializedName(SERIALIZED_NAME_MEMORY_STATS)
  private ContainerMemoryStatistics memoryStats;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIOUS_CPU_STATS = "previousCpuStats";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CPU_STATS)
  private ContainerCpuStatistics previousCpuStats;

  public static final String SERIALIZED_NAME_PREVIOUS_TIME_STAMP = "previousTimeStamp";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TIME_STAMP)
  private OffsetDateTime previousTimeStamp;

  public ContainerInfo() {
  }

  public ContainerInfo currentCpuStats(ContainerCpuStatistics currentCpuStats) {
    this.currentCpuStats = currentCpuStats;
    return this;
  }

  /**
   * Get currentCpuStats
   * @return currentCpuStats
   */
  @javax.annotation.Nullable
  public ContainerCpuStatistics getCurrentCpuStats() {
    return currentCpuStats;
  }

  public void setCurrentCpuStats(ContainerCpuStatistics currentCpuStats) {
    this.currentCpuStats = currentCpuStats;
  }


  public ContainerInfo currentTimeStamp(OffsetDateTime currentTimeStamp) {
    this.currentTimeStamp = currentTimeStamp;
    return this;
  }

  /**
   * Get currentTimeStamp
   * @return currentTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentTimeStamp() {
    return currentTimeStamp;
  }

  public void setCurrentTimeStamp(OffsetDateTime currentTimeStamp) {
    this.currentTimeStamp = currentTimeStamp;
  }


  public ContainerInfo eth0(ContainerNetworkInterfaceStatistics eth0) {
    this.eth0 = eth0;
    return this;
  }

  /**
   * Get eth0
   * @return eth0
   */
  @javax.annotation.Nullable
  public ContainerNetworkInterfaceStatistics getEth0() {
    return eth0;
  }

  public void setEth0(ContainerNetworkInterfaceStatistics eth0) {
    this.eth0 = eth0;
  }


  public ContainerInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContainerInfo memoryStats(ContainerMemoryStatistics memoryStats) {
    this.memoryStats = memoryStats;
    return this;
  }

  /**
   * Get memoryStats
   * @return memoryStats
   */
  @javax.annotation.Nullable
  public ContainerMemoryStatistics getMemoryStats() {
    return memoryStats;
  }

  public void setMemoryStats(ContainerMemoryStatistics memoryStats) {
    this.memoryStats = memoryStats;
  }


  public ContainerInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerInfo previousCpuStats(ContainerCpuStatistics previousCpuStats) {
    this.previousCpuStats = previousCpuStats;
    return this;
  }

  /**
   * Get previousCpuStats
   * @return previousCpuStats
   */
  @javax.annotation.Nullable
  public ContainerCpuStatistics getPreviousCpuStats() {
    return previousCpuStats;
  }

  public void setPreviousCpuStats(ContainerCpuStatistics previousCpuStats) {
    this.previousCpuStats = previousCpuStats;
  }


  public ContainerInfo previousTimeStamp(OffsetDateTime previousTimeStamp) {
    this.previousTimeStamp = previousTimeStamp;
    return this;
  }

  /**
   * Get previousTimeStamp
   * @return previousTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreviousTimeStamp() {
    return previousTimeStamp;
  }

  public void setPreviousTimeStamp(OffsetDateTime previousTimeStamp) {
    this.previousTimeStamp = previousTimeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerInfo containerInfo = (ContainerInfo) o;
    return Objects.equals(this.currentCpuStats, containerInfo.currentCpuStats) &&
        Objects.equals(this.currentTimeStamp, containerInfo.currentTimeStamp) &&
        Objects.equals(this.eth0, containerInfo.eth0) &&
        Objects.equals(this.id, containerInfo.id) &&
        Objects.equals(this.memoryStats, containerInfo.memoryStats) &&
        Objects.equals(this.name, containerInfo.name) &&
        Objects.equals(this.previousCpuStats, containerInfo.previousCpuStats) &&
        Objects.equals(this.previousTimeStamp, containerInfo.previousTimeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentCpuStats, currentTimeStamp, eth0, id, memoryStats, name, previousCpuStats, previousTimeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerInfo {\n");
    sb.append("    currentCpuStats: ").append(toIndentedString(currentCpuStats)).append("\n");
    sb.append("    currentTimeStamp: ").append(toIndentedString(currentTimeStamp)).append("\n");
    sb.append("    eth0: ").append(toIndentedString(eth0)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    memoryStats: ").append(toIndentedString(memoryStats)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previousCpuStats: ").append(toIndentedString(previousCpuStats)).append("\n");
    sb.append("    previousTimeStamp: ").append(toIndentedString(previousTimeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentCpuStats");
    openapiFields.add("currentTimeStamp");
    openapiFields.add("eth0");
    openapiFields.add("id");
    openapiFields.add("memoryStats");
    openapiFields.add("name");
    openapiFields.add("previousCpuStats");
    openapiFields.add("previousTimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerInfo is not found in the empty JSON string", ContainerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentCpuStats`
      if (jsonObj.get("currentCpuStats") != null && !jsonObj.get("currentCpuStats").isJsonNull()) {
        ContainerCpuStatistics.validateJsonElement(jsonObj.get("currentCpuStats"));
      }
      // validate the optional field `eth0`
      if (jsonObj.get("eth0") != null && !jsonObj.get("eth0").isJsonNull()) {
        ContainerNetworkInterfaceStatistics.validateJsonElement(jsonObj.get("eth0"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `memoryStats`
      if (jsonObj.get("memoryStats") != null && !jsonObj.get("memoryStats").isJsonNull()) {
        ContainerMemoryStatistics.validateJsonElement(jsonObj.get("memoryStats"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `previousCpuStats`
      if (jsonObj.get("previousCpuStats") != null && !jsonObj.get("previousCpuStats").isJsonNull()) {
        ContainerCpuStatistics.validateJsonElement(jsonObj.get("previousCpuStats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerInfo>() {
           @Override
           public void write(JsonWriter out, ContainerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerInfo
   * @throws IOException if the JSON string is invalid with respect to ContainerInfo
   */
  public static ContainerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerInfo.class);
  }

  /**
   * Convert an instance of ContainerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

