# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseBackupSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_string: str=None, connection_string_name: str=None, database_type: str=None, name: str=None):
        """DatabaseBackupSetting - a model defined in OpenAPI

        :param connection_string: The connection_string of this DatabaseBackupSetting.
        :param connection_string_name: The connection_string_name of this DatabaseBackupSetting.
        :param database_type: The database_type of this DatabaseBackupSetting.
        :param name: The name of this DatabaseBackupSetting.
        """
        self.openapi_types = {
            'connection_string': str,
            'connection_string_name': str,
            'database_type': str,
            'name': str
        }

        self.attribute_map = {
            'connection_string': 'connectionString',
            'connection_string_name': 'connectionStringName',
            'database_type': 'databaseType',
            'name': 'name'
        }

        self._connection_string = connection_string
        self._connection_string_name = connection_string_name
        self._database_type = database_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseBackupSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseBackupSetting of this DatabaseBackupSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_string(self):
        """Gets the connection_string of this DatabaseBackupSetting.

        Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.

        :return: The connection_string of this DatabaseBackupSetting.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this DatabaseBackupSetting.

        Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.

        :param connection_string: The connection_string of this DatabaseBackupSetting.
        :type connection_string: str
        """

        self._connection_string = connection_string

    @property
    def connection_string_name(self):
        """Gets the connection_string_name of this DatabaseBackupSetting.

        Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options.

        :return: The connection_string_name of this DatabaseBackupSetting.
        :rtype: str
        """
        return self._connection_string_name

    @connection_string_name.setter
    def connection_string_name(self, connection_string_name):
        """Sets the connection_string_name of this DatabaseBackupSetting.

        Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options.

        :param connection_string_name: The connection_string_name of this DatabaseBackupSetting.
        :type connection_string_name: str
        """

        self._connection_string_name = connection_string_name

    @property
    def database_type(self):
        """Gets the database_type of this DatabaseBackupSetting.

        Database type (e.g. SqlAzure / MySql).

        :return: The database_type of this DatabaseBackupSetting.
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this DatabaseBackupSetting.

        Database type (e.g. SqlAzure / MySql).

        :param database_type: The database_type of this DatabaseBackupSetting.
        :type database_type: str
        """
        allowed_values = ["SqlAzure", "MySql", "LocalMySql", "PostgreSql"]  # noqa: E501
        if database_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_type` ({0}), must be one of {1}"
                .format(database_type, allowed_values)
            )

        self._database_type = database_type

    @property
    def name(self):
        """Gets the name of this DatabaseBackupSetting.


        :return: The name of this DatabaseBackupSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseBackupSetting.


        :param name: The name of this DatabaseBackupSetting.
        :type name: str
        """

        self._name = name
