/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner model module.
 * @module model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner
 * @version 2016-08-01
 */
class WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner {
    /**
     * Constructs a new <code>WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner</code>.
     * SSL-enabled hostname.
     * @alias module:model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner
     */
    constructor() { 
        
        WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner} obj Optional instance to populate.
     * @return {module:model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner} The populated <code>WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner();

            if (data.hasOwnProperty('hostType')) {
                obj['hostType'] = ApiClient.convertToType(data['hostType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sslState')) {
                obj['sslState'] = ApiClient.convertToType(data['sslState'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('toUpdate')) {
                obj['toUpdate'] = ApiClient.convertToType(data['toUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('virtualIP')) {
                obj['virtualIP'] = ApiClient.convertToType(data['virtualIP'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostType'] && !(typeof data['hostType'] === 'string' || data['hostType'] instanceof String)) {
            throw new Error("Expected the field `hostType` to be a primitive type in the JSON string but got " + data['hostType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sslState'] && !(typeof data['sslState'] === 'string' || data['sslState'] instanceof String)) {
            throw new Error("Expected the field `sslState` to be a primitive type in the JSON string but got " + data['sslState']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['virtualIP'] && !(typeof data['virtualIP'] === 'string' || data['virtualIP'] instanceof String)) {
            throw new Error("Expected the field `virtualIP` to be a primitive type in the JSON string but got " + data['virtualIP']);
        }

        return true;
    }


}



/**
 * Indicates whether the hostname is a standard or repository hostname.
 * @member {module:model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.HostTypeEnum} hostType
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['hostType'] = undefined;

/**
 * Hostname.
 * @member {String} name
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['name'] = undefined;

/**
 * SSL type.
 * @member {module:model/WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.SslStateEnum} sslState
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['sslState'] = undefined;

/**
 * SSL certificate thumbprint.
 * @member {String} thumbprint
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['thumbprint'] = undefined;

/**
 * Set to <code>true</code> to update existing hostname.
 * @member {Boolean} toUpdate
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['toUpdate'] = undefined;

/**
 * Virtual IP address assigned to the hostname if IP based SSL is enabled.
 * @member {String} virtualIP
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner.prototype['virtualIP'] = undefined;





/**
 * Allowed values for the <code>hostType</code> property.
 * @enum {String}
 * @readonly
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner['HostTypeEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Repository"
     * @const
     */
    "Repository": "Repository"
};


/**
 * Allowed values for the <code>sslState</code> property.
 * @enum {String}
 * @readonly
 */
WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner['SslStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "SniEnabled"
     * @const
     */
    "SniEnabled": "SniEnabled",

    /**
     * value: "IpBasedEnabled"
     * @const
     */
    "IpBasedEnabled": "IpBasedEnabled"
};



export default WebAppsList200ResponseValueInnerPropertiesHostNameSslStatesInner;

