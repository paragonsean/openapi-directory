/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:18.189067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupSchedule {
  public static final String SERIALIZED_NAME_FREQUENCY_INTERVAL = "frequencyInterval";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_INTERVAL)
  private Integer frequencyInterval = 7;

  /**
   * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
   */
  @JsonAdapter(FrequencyUnitEnum.Adapter.class)
  public enum FrequencyUnitEnum {
    DAY("Day"),
    
    HOUR("Hour");

    private String value;

    FrequencyUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyUnitEnum fromValue(String value) {
      for (FrequencyUnitEnum b : FrequencyUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY_UNIT = "frequencyUnit";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_UNIT)
  private FrequencyUnitEnum frequencyUnit = FrequencyUnitEnum.DAY;

  public static final String SERIALIZED_NAME_KEEP_AT_LEAST_ONE_BACKUP = "keepAtLeastOneBackup";
  @SerializedName(SERIALIZED_NAME_KEEP_AT_LEAST_ONE_BACKUP)
  private Boolean keepAtLeastOneBackup = true;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_TIME = "lastExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_TIME)
  private OffsetDateTime lastExecutionTime;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD_IN_DAYS = "retentionPeriodInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD_IN_DAYS)
  private Integer retentionPeriodInDays = 30;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public BackupSchedule() {
  }

  public BackupSchedule(
     OffsetDateTime lastExecutionTime
  ) {
    this();
    this.lastExecutionTime = lastExecutionTime;
  }

  public BackupSchedule frequencyInterval(Integer frequencyInterval) {
    this.frequencyInterval = frequencyInterval;
    return this;
  }

  /**
   * How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
   * @return frequencyInterval
   */
  @javax.annotation.Nonnull
  public Integer getFrequencyInterval() {
    return frequencyInterval;
  }

  public void setFrequencyInterval(Integer frequencyInterval) {
    this.frequencyInterval = frequencyInterval;
  }


  public BackupSchedule frequencyUnit(FrequencyUnitEnum frequencyUnit) {
    this.frequencyUnit = frequencyUnit;
    return this;
  }

  /**
   * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
   * @return frequencyUnit
   */
  @javax.annotation.Nonnull
  public FrequencyUnitEnum getFrequencyUnit() {
    return frequencyUnit;
  }

  public void setFrequencyUnit(FrequencyUnitEnum frequencyUnit) {
    this.frequencyUnit = frequencyUnit;
  }


  public BackupSchedule keepAtLeastOneBackup(Boolean keepAtLeastOneBackup) {
    this.keepAtLeastOneBackup = keepAtLeastOneBackup;
    return this;
  }

  /**
   * True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
   * @return keepAtLeastOneBackup
   */
  @javax.annotation.Nonnull
  public Boolean getKeepAtLeastOneBackup() {
    return keepAtLeastOneBackup;
  }

  public void setKeepAtLeastOneBackup(Boolean keepAtLeastOneBackup) {
    this.keepAtLeastOneBackup = keepAtLeastOneBackup;
  }


  /**
   * Last time when this schedule was triggered.
   * @return lastExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionTime() {
    return lastExecutionTime;
  }



  public BackupSchedule retentionPeriodInDays(Integer retentionPeriodInDays) {
    this.retentionPeriodInDays = retentionPeriodInDays;
    return this;
  }

  /**
   * After how many days backups should be deleted.
   * @return retentionPeriodInDays
   */
  @javax.annotation.Nonnull
  public Integer getRetentionPeriodInDays() {
    return retentionPeriodInDays;
  }

  public void setRetentionPeriodInDays(Integer retentionPeriodInDays) {
    this.retentionPeriodInDays = retentionPeriodInDays;
  }


  public BackupSchedule startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * When the schedule should start working.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupSchedule backupSchedule = (BackupSchedule) o;
    return Objects.equals(this.frequencyInterval, backupSchedule.frequencyInterval) &&
        Objects.equals(this.frequencyUnit, backupSchedule.frequencyUnit) &&
        Objects.equals(this.keepAtLeastOneBackup, backupSchedule.keepAtLeastOneBackup) &&
        Objects.equals(this.lastExecutionTime, backupSchedule.lastExecutionTime) &&
        Objects.equals(this.retentionPeriodInDays, backupSchedule.retentionPeriodInDays) &&
        Objects.equals(this.startTime, backupSchedule.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frequencyInterval, frequencyUnit, keepAtLeastOneBackup, lastExecutionTime, retentionPeriodInDays, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupSchedule {\n");
    sb.append("    frequencyInterval: ").append(toIndentedString(frequencyInterval)).append("\n");
    sb.append("    frequencyUnit: ").append(toIndentedString(frequencyUnit)).append("\n");
    sb.append("    keepAtLeastOneBackup: ").append(toIndentedString(keepAtLeastOneBackup)).append("\n");
    sb.append("    lastExecutionTime: ").append(toIndentedString(lastExecutionTime)).append("\n");
    sb.append("    retentionPeriodInDays: ").append(toIndentedString(retentionPeriodInDays)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frequencyInterval");
    openapiFields.add("frequencyUnit");
    openapiFields.add("keepAtLeastOneBackup");
    openapiFields.add("lastExecutionTime");
    openapiFields.add("retentionPeriodInDays");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("frequencyInterval");
    openapiRequiredFields.add("frequencyUnit");
    openapiRequiredFields.add("keepAtLeastOneBackup");
    openapiRequiredFields.add("retentionPeriodInDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupSchedule is not found in the empty JSON string", BackupSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("frequencyUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequencyUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequencyUnit").toString()));
      }
      // validate the required field `frequencyUnit`
      FrequencyUnitEnum.validateJsonElement(jsonObj.get("frequencyUnit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupSchedule>() {
           @Override
           public void write(JsonWriter out, BackupSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupSchedule
   * @throws IOException if the JSON string is invalid with respect to BackupSchedule
   */
  public static BackupSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupSchedule.class);
  }

  /**
   * Convert an instance of BackupSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

