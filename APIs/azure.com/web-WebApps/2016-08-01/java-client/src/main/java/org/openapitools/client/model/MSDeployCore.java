/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MSDeploy ARM PUT core information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:18.189067-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MSDeployCore {
  public static final String SERIALIZED_NAME_APP_OFFLINE = "appOffline";
  @SerializedName(SERIALIZED_NAME_APP_OFFLINE)
  private Boolean appOffline;

  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_DB_TYPE = "dbType";
  @SerializedName(SERIALIZED_NAME_DB_TYPE)
  private String dbType;

  public static final String SERIALIZED_NAME_PACKAGE_URI = "packageUri";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URI)
  private String packageUri;

  public static final String SERIALIZED_NAME_SET_PARAMETERS = "setParameters";
  @SerializedName(SERIALIZED_NAME_SET_PARAMETERS)
  private Map<String, String> setParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_SET_PARAMETERS_XML_FILE_URI = "setParametersXmlFileUri";
  @SerializedName(SERIALIZED_NAME_SET_PARAMETERS_XML_FILE_URI)
  private String setParametersXmlFileUri;

  public static final String SERIALIZED_NAME_SKIP_APP_DATA = "skipAppData";
  @SerializedName(SERIALIZED_NAME_SKIP_APP_DATA)
  private Boolean skipAppData;

  public MSDeployCore() {
  }

  public MSDeployCore appOffline(Boolean appOffline) {
    this.appOffline = appOffline;
    return this;
  }

  /**
   * Sets the AppOffline rule while the MSDeploy operation executes. Setting is &lt;code&gt;false&lt;/code&gt; by default.
   * @return appOffline
   */
  @javax.annotation.Nullable
  public Boolean getAppOffline() {
    return appOffline;
  }

  public void setAppOffline(Boolean appOffline) {
    this.appOffline = appOffline;
  }


  public MSDeployCore connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * SQL Connection String
   * @return connectionString
   */
  @javax.annotation.Nullable
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public MSDeployCore dbType(String dbType) {
    this.dbType = dbType;
    return this;
  }

  /**
   * Database Type
   * @return dbType
   */
  @javax.annotation.Nullable
  public String getDbType() {
    return dbType;
  }

  public void setDbType(String dbType) {
    this.dbType = dbType;
  }


  public MSDeployCore packageUri(String packageUri) {
    this.packageUri = packageUri;
    return this;
  }

  /**
   * Package URI
   * @return packageUri
   */
  @javax.annotation.Nullable
  public String getPackageUri() {
    return packageUri;
  }

  public void setPackageUri(String packageUri) {
    this.packageUri = packageUri;
  }


  public MSDeployCore setParameters(Map<String, String> setParameters) {
    this.setParameters = setParameters;
    return this;
  }

  public MSDeployCore putSetParametersItem(String key, String setParametersItem) {
    if (this.setParameters == null) {
      this.setParameters = new HashMap<>();
    }
    this.setParameters.put(key, setParametersItem);
    return this;
  }

  /**
   * MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used.
   * @return setParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getSetParameters() {
    return setParameters;
  }

  public void setSetParameters(Map<String, String> setParameters) {
    this.setParameters = setParameters;
  }


  public MSDeployCore setParametersXmlFileUri(String setParametersXmlFileUri) {
    this.setParametersXmlFileUri = setParametersXmlFileUri;
    return this;
  }

  /**
   * URI of MSDeploy Parameters file. Must not be set if SetParameters is used.
   * @return setParametersXmlFileUri
   */
  @javax.annotation.Nullable
  public String getSetParametersXmlFileUri() {
    return setParametersXmlFileUri;
  }

  public void setSetParametersXmlFileUri(String setParametersXmlFileUri) {
    this.setParametersXmlFileUri = setParametersXmlFileUri;
  }


  public MSDeployCore skipAppData(Boolean skipAppData) {
    this.skipAppData = skipAppData;
    return this;
  }

  /**
   * Controls whether the MSDeploy operation skips the App_Data directory. If set to &lt;code&gt;true&lt;/code&gt;, the existing App_Data directory on the destination will not be deleted, and any App_Data directory in the source will be ignored. Setting is &lt;code&gt;false&lt;/code&gt; by default.
   * @return skipAppData
   */
  @javax.annotation.Nullable
  public Boolean getSkipAppData() {
    return skipAppData;
  }

  public void setSkipAppData(Boolean skipAppData) {
    this.skipAppData = skipAppData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MSDeployCore msDeployCore = (MSDeployCore) o;
    return Objects.equals(this.appOffline, msDeployCore.appOffline) &&
        Objects.equals(this.connectionString, msDeployCore.connectionString) &&
        Objects.equals(this.dbType, msDeployCore.dbType) &&
        Objects.equals(this.packageUri, msDeployCore.packageUri) &&
        Objects.equals(this.setParameters, msDeployCore.setParameters) &&
        Objects.equals(this.setParametersXmlFileUri, msDeployCore.setParametersXmlFileUri) &&
        Objects.equals(this.skipAppData, msDeployCore.skipAppData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appOffline, connectionString, dbType, packageUri, setParameters, setParametersXmlFileUri, skipAppData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MSDeployCore {\n");
    sb.append("    appOffline: ").append(toIndentedString(appOffline)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    dbType: ").append(toIndentedString(dbType)).append("\n");
    sb.append("    packageUri: ").append(toIndentedString(packageUri)).append("\n");
    sb.append("    setParameters: ").append(toIndentedString(setParameters)).append("\n");
    sb.append("    setParametersXmlFileUri: ").append(toIndentedString(setParametersXmlFileUri)).append("\n");
    sb.append("    skipAppData: ").append(toIndentedString(skipAppData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appOffline");
    openapiFields.add("connectionString");
    openapiFields.add("dbType");
    openapiFields.add("packageUri");
    openapiFields.add("setParameters");
    openapiFields.add("setParametersXmlFileUri");
    openapiFields.add("skipAppData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MSDeployCore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MSDeployCore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MSDeployCore is not found in the empty JSON string", MSDeployCore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MSDeployCore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MSDeployCore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionString") != null && !jsonObj.get("connectionString").isJsonNull()) && !jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      if ((jsonObj.get("dbType") != null && !jsonObj.get("dbType").isJsonNull()) && !jsonObj.get("dbType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbType").toString()));
      }
      if ((jsonObj.get("packageUri") != null && !jsonObj.get("packageUri").isJsonNull()) && !jsonObj.get("packageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageUri").toString()));
      }
      if ((jsonObj.get("setParametersXmlFileUri") != null && !jsonObj.get("setParametersXmlFileUri").isJsonNull()) && !jsonObj.get("setParametersXmlFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setParametersXmlFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setParametersXmlFileUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MSDeployCore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MSDeployCore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MSDeployCore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MSDeployCore.class));

       return (TypeAdapter<T>) new TypeAdapter<MSDeployCore>() {
           @Override
           public void write(JsonWriter out, MSDeployCore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MSDeployCore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MSDeployCore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MSDeployCore
   * @throws IOException if the JSON string is invalid with respect to MSDeployCore
   */
  public static MSDeployCore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MSDeployCore.class);
  }

  /**
   * Convert an instance of MSDeployCore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

