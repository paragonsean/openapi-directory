/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateAccessSubnet from './PrivateAccessSubnet';

/**
 * The PrivateAccessVirtualNetwork model module.
 * @module model/PrivateAccessVirtualNetwork
 * @version 2018-02-01
 */
class PrivateAccessVirtualNetwork {
    /**
     * Constructs a new <code>PrivateAccessVirtualNetwork</code>.
     * Description of a Virtual Network that is useable for private site access.
     * @alias module:model/PrivateAccessVirtualNetwork
     */
    constructor() { 
        
        PrivateAccessVirtualNetwork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateAccessVirtualNetwork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateAccessVirtualNetwork} obj Optional instance to populate.
     * @return {module:model/PrivateAccessVirtualNetwork} The populated <code>PrivateAccessVirtualNetwork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateAccessVirtualNetwork();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], [PrivateAccessSubnet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateAccessVirtualNetwork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateAccessVirtualNetwork</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        if (data['subnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnets'])) {
                throw new Error("Expected the field `subnets` to be an array in the JSON data but got " + data['subnets']);
            }
            // validate the optional field `subnets` (array)
            for (const item of data['subnets']) {
                PrivateAccessSubnet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The key (ID) of the Virtual Network.
 * @member {Number} key
 */
PrivateAccessVirtualNetwork.prototype['key'] = undefined;

/**
 * The name of the Virtual Network.
 * @member {String} name
 */
PrivateAccessVirtualNetwork.prototype['name'] = undefined;

/**
 * The ARM uri of the Virtual Network
 * @member {String} resourceId
 */
PrivateAccessVirtualNetwork.prototype['resourceId'] = undefined;

/**
 * A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network.
 * @member {Array.<module:model/PrivateAccessSubnet>} subnets
 */
PrivateAccessVirtualNetwork.prototype['subnets'] = undefined;






export default PrivateAccessVirtualNetwork;

