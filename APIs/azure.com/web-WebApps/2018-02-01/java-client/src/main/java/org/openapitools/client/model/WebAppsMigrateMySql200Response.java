/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.WebAppsMigrateMySql200ResponseErrorsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An operation on a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.228469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebAppsMigrateMySql200Response {
  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<WebAppsMigrateMySql200ResponseErrorsInner> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_GEO_MASTER_OPERATION_ID = "geoMasterOperationId";
  @SerializedName(SERIALIZED_NAME_GEO_MASTER_OPERATION_ID)
  private UUID geoMasterOperationId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modifiedTime";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private OffsetDateTime modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The current status of the operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("InProgress"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    TIMED_OUT("TimedOut"),
    
    CREATED("Created");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public WebAppsMigrateMySql200Response() {
  }

  public WebAppsMigrateMySql200Response createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Time when operation has started.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public WebAppsMigrateMySql200Response errors(List<WebAppsMigrateMySql200ResponseErrorsInner> errors) {
    this.errors = errors;
    return this;
  }

  public WebAppsMigrateMySql200Response addErrorsItem(WebAppsMigrateMySql200ResponseErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Any errors associate with the operation.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<WebAppsMigrateMySql200ResponseErrorsInner> getErrors() {
    return errors;
  }

  public void setErrors(List<WebAppsMigrateMySql200ResponseErrorsInner> errors) {
    this.errors = errors;
  }


  public WebAppsMigrateMySql200Response expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Time when operation will expire.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  public WebAppsMigrateMySql200Response geoMasterOperationId(UUID geoMasterOperationId) {
    this.geoMasterOperationId = geoMasterOperationId;
    return this;
  }

  /**
   * Applicable only for stamp operation ids.
   * @return geoMasterOperationId
   */
  @javax.annotation.Nullable
  public UUID getGeoMasterOperationId() {
    return geoMasterOperationId;
  }

  public void setGeoMasterOperationId(UUID geoMasterOperationId) {
    this.geoMasterOperationId = geoMasterOperationId;
  }


  public WebAppsMigrateMySql200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Operation ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WebAppsMigrateMySql200Response modifiedTime(OffsetDateTime modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * Time when operation has been updated.
   * @return modifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(OffsetDateTime modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public WebAppsMigrateMySql200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Operation name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebAppsMigrateMySql200Response status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebAppsMigrateMySql200Response webAppsMigrateMySql200Response = (WebAppsMigrateMySql200Response) o;
    return Objects.equals(this.createdTime, webAppsMigrateMySql200Response.createdTime) &&
        Objects.equals(this.errors, webAppsMigrateMySql200Response.errors) &&
        Objects.equals(this.expirationTime, webAppsMigrateMySql200Response.expirationTime) &&
        Objects.equals(this.geoMasterOperationId, webAppsMigrateMySql200Response.geoMasterOperationId) &&
        Objects.equals(this.id, webAppsMigrateMySql200Response.id) &&
        Objects.equals(this.modifiedTime, webAppsMigrateMySql200Response.modifiedTime) &&
        Objects.equals(this.name, webAppsMigrateMySql200Response.name) &&
        Objects.equals(this.status, webAppsMigrateMySql200Response.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, errors, expirationTime, geoMasterOperationId, id, modifiedTime, name, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebAppsMigrateMySql200Response {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    geoMasterOperationId: ").append(toIndentedString(geoMasterOperationId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTime");
    openapiFields.add("errors");
    openapiFields.add("expirationTime");
    openapiFields.add("geoMasterOperationId");
    openapiFields.add("id");
    openapiFields.add("modifiedTime");
    openapiFields.add("name");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebAppsMigrateMySql200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebAppsMigrateMySql200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebAppsMigrateMySql200Response is not found in the empty JSON string", WebAppsMigrateMySql200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebAppsMigrateMySql200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebAppsMigrateMySql200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            WebAppsMigrateMySql200ResponseErrorsInner.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("geoMasterOperationId") != null && !jsonObj.get("geoMasterOperationId").isJsonNull()) && !jsonObj.get("geoMasterOperationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoMasterOperationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoMasterOperationId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebAppsMigrateMySql200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebAppsMigrateMySql200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebAppsMigrateMySql200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebAppsMigrateMySql200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<WebAppsMigrateMySql200Response>() {
           @Override
           public void write(JsonWriter out, WebAppsMigrateMySql200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebAppsMigrateMySql200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebAppsMigrateMySql200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebAppsMigrateMySql200Response
   * @throws IOException if the JSON string is invalid with respect to WebAppsMigrateMySql200Response
   */
  public static WebAppsMigrateMySql200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebAppsMigrateMySql200Response.class);
  }

  /**
   * Convert an instance of WebAppsMigrateMySql200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

