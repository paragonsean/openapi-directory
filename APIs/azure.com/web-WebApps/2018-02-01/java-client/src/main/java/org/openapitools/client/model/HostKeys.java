/*
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Functions host level keys.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:02.228469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HostKeys {
  public static final String SERIALIZED_NAME_FUNCTION_KEYS = "functionKeys";
  @SerializedName(SERIALIZED_NAME_FUNCTION_KEYS)
  private Map<String, String> functionKeys = new HashMap<>();

  public static final String SERIALIZED_NAME_MASTER_KEY = "masterKey";
  @SerializedName(SERIALIZED_NAME_MASTER_KEY)
  private String masterKey;

  public static final String SERIALIZED_NAME_SYSTEM_KEYS = "systemKeys";
  @SerializedName(SERIALIZED_NAME_SYSTEM_KEYS)
  private Map<String, String> systemKeys = new HashMap<>();

  public HostKeys() {
  }

  public HostKeys functionKeys(Map<String, String> functionKeys) {
    this.functionKeys = functionKeys;
    return this;
  }

  public HostKeys putFunctionKeysItem(String key, String functionKeysItem) {
    if (this.functionKeys == null) {
      this.functionKeys = new HashMap<>();
    }
    this.functionKeys.put(key, functionKeysItem);
    return this;
  }

  /**
   * Host level function keys.
   * @return functionKeys
   */
  @javax.annotation.Nullable
  public Map<String, String> getFunctionKeys() {
    return functionKeys;
  }

  public void setFunctionKeys(Map<String, String> functionKeys) {
    this.functionKeys = functionKeys;
  }


  public HostKeys masterKey(String masterKey) {
    this.masterKey = masterKey;
    return this;
  }

  /**
   * Secret key.
   * @return masterKey
   */
  @javax.annotation.Nullable
  public String getMasterKey() {
    return masterKey;
  }

  public void setMasterKey(String masterKey) {
    this.masterKey = masterKey;
  }


  public HostKeys systemKeys(Map<String, String> systemKeys) {
    this.systemKeys = systemKeys;
    return this;
  }

  public HostKeys putSystemKeysItem(String key, String systemKeysItem) {
    if (this.systemKeys == null) {
      this.systemKeys = new HashMap<>();
    }
    this.systemKeys.put(key, systemKeysItem);
    return this;
  }

  /**
   * System keys.
   * @return systemKeys
   */
  @javax.annotation.Nullable
  public Map<String, String> getSystemKeys() {
    return systemKeys;
  }

  public void setSystemKeys(Map<String, String> systemKeys) {
    this.systemKeys = systemKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostKeys hostKeys = (HostKeys) o;
    return Objects.equals(this.functionKeys, hostKeys.functionKeys) &&
        Objects.equals(this.masterKey, hostKeys.masterKey) &&
        Objects.equals(this.systemKeys, hostKeys.systemKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionKeys, masterKey, systemKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostKeys {\n");
    sb.append("    functionKeys: ").append(toIndentedString(functionKeys)).append("\n");
    sb.append("    masterKey: ").append(toIndentedString(masterKey)).append("\n");
    sb.append("    systemKeys: ").append(toIndentedString(systemKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionKeys");
    openapiFields.add("masterKey");
    openapiFields.add("systemKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HostKeys
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HostKeys.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostKeys is not found in the empty JSON string", HostKeys.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HostKeys.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HostKeys` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("masterKey") != null && !jsonObj.get("masterKey").isJsonNull()) && !jsonObj.get("masterKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostKeys.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostKeys' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostKeys> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostKeys.class));

       return (TypeAdapter<T>) new TypeAdapter<HostKeys>() {
           @Override
           public void write(JsonWriter out, HostKeys value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HostKeys read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HostKeys given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostKeys
   * @throws IOException if the JSON string is invalid with respect to HostKeys
   */
  public static HostKeys fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostKeys.class);
  }

  /**
   * Convert an instance of HostKeys to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

