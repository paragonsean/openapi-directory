/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotConfigNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotConfigNames::OAISlotConfigNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotConfigNames::OAISlotConfigNames() {
    this->initializeModel();
}

OAISlotConfigNames::~OAISlotConfigNames() {}

void OAISlotConfigNames::initializeModel() {

    m_app_setting_names_isSet = false;
    m_app_setting_names_isValid = false;

    m_azure_storage_config_names_isSet = false;
    m_azure_storage_config_names_isValid = false;

    m_connection_string_names_isSet = false;
    m_connection_string_names_isValid = false;
}

void OAISlotConfigNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotConfigNames::fromJsonObject(QJsonObject json) {

    m_app_setting_names_isValid = ::OpenAPI::fromJsonValue(m_app_setting_names, json[QString("appSettingNames")]);
    m_app_setting_names_isSet = !json[QString("appSettingNames")].isNull() && m_app_setting_names_isValid;

    m_azure_storage_config_names_isValid = ::OpenAPI::fromJsonValue(m_azure_storage_config_names, json[QString("azureStorageConfigNames")]);
    m_azure_storage_config_names_isSet = !json[QString("azureStorageConfigNames")].isNull() && m_azure_storage_config_names_isValid;

    m_connection_string_names_isValid = ::OpenAPI::fromJsonValue(m_connection_string_names, json[QString("connectionStringNames")]);
    m_connection_string_names_isSet = !json[QString("connectionStringNames")].isNull() && m_connection_string_names_isValid;
}

QString OAISlotConfigNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotConfigNames::asJsonObject() const {
    QJsonObject obj;
    if (m_app_setting_names.size() > 0) {
        obj.insert(QString("appSettingNames"), ::OpenAPI::toJsonValue(m_app_setting_names));
    }
    if (m_azure_storage_config_names.size() > 0) {
        obj.insert(QString("azureStorageConfigNames"), ::OpenAPI::toJsonValue(m_azure_storage_config_names));
    }
    if (m_connection_string_names.size() > 0) {
        obj.insert(QString("connectionStringNames"), ::OpenAPI::toJsonValue(m_connection_string_names));
    }
    return obj;
}

QList<QString> OAISlotConfigNames::getAppSettingNames() const {
    return m_app_setting_names;
}
void OAISlotConfigNames::setAppSettingNames(const QList<QString> &app_setting_names) {
    m_app_setting_names = app_setting_names;
    m_app_setting_names_isSet = true;
}

bool OAISlotConfigNames::is_app_setting_names_Set() const{
    return m_app_setting_names_isSet;
}

bool OAISlotConfigNames::is_app_setting_names_Valid() const{
    return m_app_setting_names_isValid;
}

QList<QString> OAISlotConfigNames::getAzureStorageConfigNames() const {
    return m_azure_storage_config_names;
}
void OAISlotConfigNames::setAzureStorageConfigNames(const QList<QString> &azure_storage_config_names) {
    m_azure_storage_config_names = azure_storage_config_names;
    m_azure_storage_config_names_isSet = true;
}

bool OAISlotConfigNames::is_azure_storage_config_names_Set() const{
    return m_azure_storage_config_names_isSet;
}

bool OAISlotConfigNames::is_azure_storage_config_names_Valid() const{
    return m_azure_storage_config_names_isValid;
}

QList<QString> OAISlotConfigNames::getConnectionStringNames() const {
    return m_connection_string_names;
}
void OAISlotConfigNames::setConnectionStringNames(const QList<QString> &connection_string_names) {
    m_connection_string_names = connection_string_names;
    m_connection_string_names_isSet = true;
}

bool OAISlotConfigNames::is_connection_string_names_Set() const{
    return m_connection_string_names_isSet;
}

bool OAISlotConfigNames::is_connection_string_names_Valid() const{
    return m_connection_string_names_isValid;
}

bool OAISlotConfigNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_setting_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_storage_config_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_string_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotConfigNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
