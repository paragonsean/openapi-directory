/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebApps_List_200_response_value_inner_properties_siteConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebApps_List_200_response_value_inner_properties_siteConfig::OAIWebApps_List_200_response_value_inner_properties_siteConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig::OAIWebApps_List_200_response_value_inner_properties_siteConfig() {
    this->initializeModel();
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig::~OAIWebApps_List_200_response_value_inner_properties_siteConfig() {}

void OAIWebApps_List_200_response_value_inner_properties_siteConfig::initializeModel() {

    m_always_on_isSet = false;
    m_always_on_isValid = false;

    m_api_definition_isSet = false;
    m_api_definition_isValid = false;

    m_app_command_line_isSet = false;
    m_app_command_line_isValid = false;

    m_app_settings_isSet = false;
    m_app_settings_isValid = false;

    m_auto_heal_enabled_isSet = false;
    m_auto_heal_enabled_isValid = false;

    m_auto_heal_rules_isSet = false;
    m_auto_heal_rules_isValid = false;

    m_auto_swap_slot_name_isSet = false;
    m_auto_swap_slot_name_isValid = false;

    m_azure_storage_accounts_isSet = false;
    m_azure_storage_accounts_isValid = false;

    m_connection_strings_isSet = false;
    m_connection_strings_isValid = false;

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_default_documents_isSet = false;
    m_default_documents_isValid = false;

    m_detailed_error_logging_enabled_isSet = false;
    m_detailed_error_logging_enabled_isValid = false;

    m_document_root_isSet = false;
    m_document_root_isValid = false;

    m_experiments_isSet = false;
    m_experiments_isValid = false;

    m_ftps_state_isSet = false;
    m_ftps_state_isValid = false;

    m_handler_mappings_isSet = false;
    m_handler_mappings_isValid = false;

    m_http20_enabled_isSet = false;
    m_http20_enabled_isValid = false;

    m_http_logging_enabled_isSet = false;
    m_http_logging_enabled_isValid = false;

    m_ip_security_restrictions_isSet = false;
    m_ip_security_restrictions_isValid = false;

    m_java_container_isSet = false;
    m_java_container_isValid = false;

    m_java_container_version_isSet = false;
    m_java_container_version_isValid = false;

    m_java_version_isSet = false;
    m_java_version_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_linux_fx_version_isSet = false;
    m_linux_fx_version_isValid = false;

    m_load_balancing_isSet = false;
    m_load_balancing_isValid = false;

    m_local_my_sql_enabled_isSet = false;
    m_local_my_sql_enabled_isValid = false;

    m_logs_directory_size_limit_isSet = false;
    m_logs_directory_size_limit_isValid = false;

    m_machine_key_isSet = false;
    m_machine_key_isValid = false;

    m_managed_pipeline_mode_isSet = false;
    m_managed_pipeline_mode_isValid = false;

    m_managed_service_identity_id_isSet = false;
    m_managed_service_identity_id_isValid = false;

    m_min_tls_version_isSet = false;
    m_min_tls_version_isValid = false;

    m_net_framework_version_isSet = false;
    m_net_framework_version_isValid = false;

    m_node_version_isSet = false;
    m_node_version_isValid = false;

    m_number_of_workers_isSet = false;
    m_number_of_workers_isValid = false;

    m_php_version_isSet = false;
    m_php_version_isValid = false;

    m_publishing_username_isSet = false;
    m_publishing_username_isValid = false;

    m_push_isSet = false;
    m_push_isValid = false;

    m_python_version_isSet = false;
    m_python_version_isValid = false;

    m_remote_debugging_enabled_isSet = false;
    m_remote_debugging_enabled_isValid = false;

    m_remote_debugging_version_isSet = false;
    m_remote_debugging_version_isValid = false;

    m_request_tracing_enabled_isSet = false;
    m_request_tracing_enabled_isValid = false;

    m_request_tracing_expiration_time_isSet = false;
    m_request_tracing_expiration_time_isValid = false;

    m_reserved_instance_count_isSet = false;
    m_reserved_instance_count_isValid = false;

    m_scm_ip_security_restrictions_isSet = false;
    m_scm_ip_security_restrictions_isValid = false;

    m_scm_ip_security_restrictions_use_main_isSet = false;
    m_scm_ip_security_restrictions_use_main_isValid = false;

    m_scm_type_isSet = false;
    m_scm_type_isValid = false;

    m_tracing_options_isSet = false;
    m_tracing_options_isValid = false;

    m_use32_bit_worker_process_isSet = false;
    m_use32_bit_worker_process_isValid = false;

    m_virtual_applications_isSet = false;
    m_virtual_applications_isValid = false;

    m_vnet_name_isSet = false;
    m_vnet_name_isValid = false;

    m_web_sockets_enabled_isSet = false;
    m_web_sockets_enabled_isValid = false;

    m_windows_fx_version_isSet = false;
    m_windows_fx_version_isValid = false;

    m_x_managed_service_identity_id_isSet = false;
    m_x_managed_service_identity_id_isValid = false;
}

void OAIWebApps_List_200_response_value_inner_properties_siteConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebApps_List_200_response_value_inner_properties_siteConfig::fromJsonObject(QJsonObject json) {

    m_always_on_isValid = ::OpenAPI::fromJsonValue(m_always_on, json[QString("alwaysOn")]);
    m_always_on_isSet = !json[QString("alwaysOn")].isNull() && m_always_on_isValid;

    m_api_definition_isValid = ::OpenAPI::fromJsonValue(m_api_definition, json[QString("apiDefinition")]);
    m_api_definition_isSet = !json[QString("apiDefinition")].isNull() && m_api_definition_isValid;

    m_app_command_line_isValid = ::OpenAPI::fromJsonValue(m_app_command_line, json[QString("appCommandLine")]);
    m_app_command_line_isSet = !json[QString("appCommandLine")].isNull() && m_app_command_line_isValid;

    m_app_settings_isValid = ::OpenAPI::fromJsonValue(m_app_settings, json[QString("appSettings")]);
    m_app_settings_isSet = !json[QString("appSettings")].isNull() && m_app_settings_isValid;

    m_auto_heal_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_heal_enabled, json[QString("autoHealEnabled")]);
    m_auto_heal_enabled_isSet = !json[QString("autoHealEnabled")].isNull() && m_auto_heal_enabled_isValid;

    m_auto_heal_rules_isValid = ::OpenAPI::fromJsonValue(m_auto_heal_rules, json[QString("autoHealRules")]);
    m_auto_heal_rules_isSet = !json[QString("autoHealRules")].isNull() && m_auto_heal_rules_isValid;

    m_auto_swap_slot_name_isValid = ::OpenAPI::fromJsonValue(m_auto_swap_slot_name, json[QString("autoSwapSlotName")]);
    m_auto_swap_slot_name_isSet = !json[QString("autoSwapSlotName")].isNull() && m_auto_swap_slot_name_isValid;

    m_azure_storage_accounts_isValid = ::OpenAPI::fromJsonValue(m_azure_storage_accounts, json[QString("azureStorageAccounts")]);
    m_azure_storage_accounts_isSet = !json[QString("azureStorageAccounts")].isNull() && m_azure_storage_accounts_isValid;

    m_connection_strings_isValid = ::OpenAPI::fromJsonValue(m_connection_strings, json[QString("connectionStrings")]);
    m_connection_strings_isSet = !json[QString("connectionStrings")].isNull() && m_connection_strings_isValid;

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("cors")]);
    m_cors_isSet = !json[QString("cors")].isNull() && m_cors_isValid;

    m_default_documents_isValid = ::OpenAPI::fromJsonValue(m_default_documents, json[QString("defaultDocuments")]);
    m_default_documents_isSet = !json[QString("defaultDocuments")].isNull() && m_default_documents_isValid;

    m_detailed_error_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_detailed_error_logging_enabled, json[QString("detailedErrorLoggingEnabled")]);
    m_detailed_error_logging_enabled_isSet = !json[QString("detailedErrorLoggingEnabled")].isNull() && m_detailed_error_logging_enabled_isValid;

    m_document_root_isValid = ::OpenAPI::fromJsonValue(m_document_root, json[QString("documentRoot")]);
    m_document_root_isSet = !json[QString("documentRoot")].isNull() && m_document_root_isValid;

    m_experiments_isValid = ::OpenAPI::fromJsonValue(m_experiments, json[QString("experiments")]);
    m_experiments_isSet = !json[QString("experiments")].isNull() && m_experiments_isValid;

    m_ftps_state_isValid = ::OpenAPI::fromJsonValue(m_ftps_state, json[QString("ftpsState")]);
    m_ftps_state_isSet = !json[QString("ftpsState")].isNull() && m_ftps_state_isValid;

    m_handler_mappings_isValid = ::OpenAPI::fromJsonValue(m_handler_mappings, json[QString("handlerMappings")]);
    m_handler_mappings_isSet = !json[QString("handlerMappings")].isNull() && m_handler_mappings_isValid;

    m_http20_enabled_isValid = ::OpenAPI::fromJsonValue(m_http20_enabled, json[QString("http20Enabled")]);
    m_http20_enabled_isSet = !json[QString("http20Enabled")].isNull() && m_http20_enabled_isValid;

    m_http_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_http_logging_enabled, json[QString("httpLoggingEnabled")]);
    m_http_logging_enabled_isSet = !json[QString("httpLoggingEnabled")].isNull() && m_http_logging_enabled_isValid;

    m_ip_security_restrictions_isValid = ::OpenAPI::fromJsonValue(m_ip_security_restrictions, json[QString("ipSecurityRestrictions")]);
    m_ip_security_restrictions_isSet = !json[QString("ipSecurityRestrictions")].isNull() && m_ip_security_restrictions_isValid;

    m_java_container_isValid = ::OpenAPI::fromJsonValue(m_java_container, json[QString("javaContainer")]);
    m_java_container_isSet = !json[QString("javaContainer")].isNull() && m_java_container_isValid;

    m_java_container_version_isValid = ::OpenAPI::fromJsonValue(m_java_container_version, json[QString("javaContainerVersion")]);
    m_java_container_version_isSet = !json[QString("javaContainerVersion")].isNull() && m_java_container_version_isValid;

    m_java_version_isValid = ::OpenAPI::fromJsonValue(m_java_version, json[QString("javaVersion")]);
    m_java_version_isSet = !json[QString("javaVersion")].isNull() && m_java_version_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_linux_fx_version_isValid = ::OpenAPI::fromJsonValue(m_linux_fx_version, json[QString("linuxFxVersion")]);
    m_linux_fx_version_isSet = !json[QString("linuxFxVersion")].isNull() && m_linux_fx_version_isValid;

    m_load_balancing_isValid = ::OpenAPI::fromJsonValue(m_load_balancing, json[QString("loadBalancing")]);
    m_load_balancing_isSet = !json[QString("loadBalancing")].isNull() && m_load_balancing_isValid;

    m_local_my_sql_enabled_isValid = ::OpenAPI::fromJsonValue(m_local_my_sql_enabled, json[QString("localMySqlEnabled")]);
    m_local_my_sql_enabled_isSet = !json[QString("localMySqlEnabled")].isNull() && m_local_my_sql_enabled_isValid;

    m_logs_directory_size_limit_isValid = ::OpenAPI::fromJsonValue(m_logs_directory_size_limit, json[QString("logsDirectorySizeLimit")]);
    m_logs_directory_size_limit_isSet = !json[QString("logsDirectorySizeLimit")].isNull() && m_logs_directory_size_limit_isValid;

    m_machine_key_isValid = ::OpenAPI::fromJsonValue(m_machine_key, json[QString("machineKey")]);
    m_machine_key_isSet = !json[QString("machineKey")].isNull() && m_machine_key_isValid;

    m_managed_pipeline_mode_isValid = ::OpenAPI::fromJsonValue(m_managed_pipeline_mode, json[QString("managedPipelineMode")]);
    m_managed_pipeline_mode_isSet = !json[QString("managedPipelineMode")].isNull() && m_managed_pipeline_mode_isValid;

    m_managed_service_identity_id_isValid = ::OpenAPI::fromJsonValue(m_managed_service_identity_id, json[QString("managedServiceIdentityId")]);
    m_managed_service_identity_id_isSet = !json[QString("managedServiceIdentityId")].isNull() && m_managed_service_identity_id_isValid;

    m_min_tls_version_isValid = ::OpenAPI::fromJsonValue(m_min_tls_version, json[QString("minTlsVersion")]);
    m_min_tls_version_isSet = !json[QString("minTlsVersion")].isNull() && m_min_tls_version_isValid;

    m_net_framework_version_isValid = ::OpenAPI::fromJsonValue(m_net_framework_version, json[QString("netFrameworkVersion")]);
    m_net_framework_version_isSet = !json[QString("netFrameworkVersion")].isNull() && m_net_framework_version_isValid;

    m_node_version_isValid = ::OpenAPI::fromJsonValue(m_node_version, json[QString("nodeVersion")]);
    m_node_version_isSet = !json[QString("nodeVersion")].isNull() && m_node_version_isValid;

    m_number_of_workers_isValid = ::OpenAPI::fromJsonValue(m_number_of_workers, json[QString("numberOfWorkers")]);
    m_number_of_workers_isSet = !json[QString("numberOfWorkers")].isNull() && m_number_of_workers_isValid;

    m_php_version_isValid = ::OpenAPI::fromJsonValue(m_php_version, json[QString("phpVersion")]);
    m_php_version_isSet = !json[QString("phpVersion")].isNull() && m_php_version_isValid;

    m_publishing_username_isValid = ::OpenAPI::fromJsonValue(m_publishing_username, json[QString("publishingUsername")]);
    m_publishing_username_isSet = !json[QString("publishingUsername")].isNull() && m_publishing_username_isValid;

    m_push_isValid = ::OpenAPI::fromJsonValue(m_push, json[QString("push")]);
    m_push_isSet = !json[QString("push")].isNull() && m_push_isValid;

    m_python_version_isValid = ::OpenAPI::fromJsonValue(m_python_version, json[QString("pythonVersion")]);
    m_python_version_isSet = !json[QString("pythonVersion")].isNull() && m_python_version_isValid;

    m_remote_debugging_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_debugging_enabled, json[QString("remoteDebuggingEnabled")]);
    m_remote_debugging_enabled_isSet = !json[QString("remoteDebuggingEnabled")].isNull() && m_remote_debugging_enabled_isValid;

    m_remote_debugging_version_isValid = ::OpenAPI::fromJsonValue(m_remote_debugging_version, json[QString("remoteDebuggingVersion")]);
    m_remote_debugging_version_isSet = !json[QString("remoteDebuggingVersion")].isNull() && m_remote_debugging_version_isValid;

    m_request_tracing_enabled_isValid = ::OpenAPI::fromJsonValue(m_request_tracing_enabled, json[QString("requestTracingEnabled")]);
    m_request_tracing_enabled_isSet = !json[QString("requestTracingEnabled")].isNull() && m_request_tracing_enabled_isValid;

    m_request_tracing_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_request_tracing_expiration_time, json[QString("requestTracingExpirationTime")]);
    m_request_tracing_expiration_time_isSet = !json[QString("requestTracingExpirationTime")].isNull() && m_request_tracing_expiration_time_isValid;

    m_reserved_instance_count_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_count, json[QString("reservedInstanceCount")]);
    m_reserved_instance_count_isSet = !json[QString("reservedInstanceCount")].isNull() && m_reserved_instance_count_isValid;

    m_scm_ip_security_restrictions_isValid = ::OpenAPI::fromJsonValue(m_scm_ip_security_restrictions, json[QString("scmIpSecurityRestrictions")]);
    m_scm_ip_security_restrictions_isSet = !json[QString("scmIpSecurityRestrictions")].isNull() && m_scm_ip_security_restrictions_isValid;

    m_scm_ip_security_restrictions_use_main_isValid = ::OpenAPI::fromJsonValue(m_scm_ip_security_restrictions_use_main, json[QString("scmIpSecurityRestrictionsUseMain")]);
    m_scm_ip_security_restrictions_use_main_isSet = !json[QString("scmIpSecurityRestrictionsUseMain")].isNull() && m_scm_ip_security_restrictions_use_main_isValid;

    m_scm_type_isValid = ::OpenAPI::fromJsonValue(m_scm_type, json[QString("scmType")]);
    m_scm_type_isSet = !json[QString("scmType")].isNull() && m_scm_type_isValid;

    m_tracing_options_isValid = ::OpenAPI::fromJsonValue(m_tracing_options, json[QString("tracingOptions")]);
    m_tracing_options_isSet = !json[QString("tracingOptions")].isNull() && m_tracing_options_isValid;

    m_use32_bit_worker_process_isValid = ::OpenAPI::fromJsonValue(m_use32_bit_worker_process, json[QString("use32BitWorkerProcess")]);
    m_use32_bit_worker_process_isSet = !json[QString("use32BitWorkerProcess")].isNull() && m_use32_bit_worker_process_isValid;

    m_virtual_applications_isValid = ::OpenAPI::fromJsonValue(m_virtual_applications, json[QString("virtualApplications")]);
    m_virtual_applications_isSet = !json[QString("virtualApplications")].isNull() && m_virtual_applications_isValid;

    m_vnet_name_isValid = ::OpenAPI::fromJsonValue(m_vnet_name, json[QString("vnetName")]);
    m_vnet_name_isSet = !json[QString("vnetName")].isNull() && m_vnet_name_isValid;

    m_web_sockets_enabled_isValid = ::OpenAPI::fromJsonValue(m_web_sockets_enabled, json[QString("webSocketsEnabled")]);
    m_web_sockets_enabled_isSet = !json[QString("webSocketsEnabled")].isNull() && m_web_sockets_enabled_isValid;

    m_windows_fx_version_isValid = ::OpenAPI::fromJsonValue(m_windows_fx_version, json[QString("windowsFxVersion")]);
    m_windows_fx_version_isSet = !json[QString("windowsFxVersion")].isNull() && m_windows_fx_version_isValid;

    m_x_managed_service_identity_id_isValid = ::OpenAPI::fromJsonValue(m_x_managed_service_identity_id, json[QString("xManagedServiceIdentityId")]);
    m_x_managed_service_identity_id_isSet = !json[QString("xManagedServiceIdentityId")].isNull() && m_x_managed_service_identity_id_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebApps_List_200_response_value_inner_properties_siteConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_always_on_isSet) {
        obj.insert(QString("alwaysOn"), ::OpenAPI::toJsonValue(m_always_on));
    }
    if (m_api_definition.isSet()) {
        obj.insert(QString("apiDefinition"), ::OpenAPI::toJsonValue(m_api_definition));
    }
    if (m_app_command_line_isSet) {
        obj.insert(QString("appCommandLine"), ::OpenAPI::toJsonValue(m_app_command_line));
    }
    if (m_app_settings.size() > 0) {
        obj.insert(QString("appSettings"), ::OpenAPI::toJsonValue(m_app_settings));
    }
    if (m_auto_heal_enabled_isSet) {
        obj.insert(QString("autoHealEnabled"), ::OpenAPI::toJsonValue(m_auto_heal_enabled));
    }
    if (m_auto_heal_rules.isSet()) {
        obj.insert(QString("autoHealRules"), ::OpenAPI::toJsonValue(m_auto_heal_rules));
    }
    if (m_auto_swap_slot_name_isSet) {
        obj.insert(QString("autoSwapSlotName"), ::OpenAPI::toJsonValue(m_auto_swap_slot_name));
    }
    if (m_azure_storage_accounts.size() > 0) {
        obj.insert(QString("azureStorageAccounts"), ::OpenAPI::toJsonValue(m_azure_storage_accounts));
    }
    if (m_connection_strings.size() > 0) {
        obj.insert(QString("connectionStrings"), ::OpenAPI::toJsonValue(m_connection_strings));
    }
    if (m_cors.isSet()) {
        obj.insert(QString("cors"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_default_documents.size() > 0) {
        obj.insert(QString("defaultDocuments"), ::OpenAPI::toJsonValue(m_default_documents));
    }
    if (m_detailed_error_logging_enabled_isSet) {
        obj.insert(QString("detailedErrorLoggingEnabled"), ::OpenAPI::toJsonValue(m_detailed_error_logging_enabled));
    }
    if (m_document_root_isSet) {
        obj.insert(QString("documentRoot"), ::OpenAPI::toJsonValue(m_document_root));
    }
    if (m_experiments.isSet()) {
        obj.insert(QString("experiments"), ::OpenAPI::toJsonValue(m_experiments));
    }
    if (m_ftps_state_isSet) {
        obj.insert(QString("ftpsState"), ::OpenAPI::toJsonValue(m_ftps_state));
    }
    if (m_handler_mappings.size() > 0) {
        obj.insert(QString("handlerMappings"), ::OpenAPI::toJsonValue(m_handler_mappings));
    }
    if (m_http20_enabled_isSet) {
        obj.insert(QString("http20Enabled"), ::OpenAPI::toJsonValue(m_http20_enabled));
    }
    if (m_http_logging_enabled_isSet) {
        obj.insert(QString("httpLoggingEnabled"), ::OpenAPI::toJsonValue(m_http_logging_enabled));
    }
    if (m_ip_security_restrictions.size() > 0) {
        obj.insert(QString("ipSecurityRestrictions"), ::OpenAPI::toJsonValue(m_ip_security_restrictions));
    }
    if (m_java_container_isSet) {
        obj.insert(QString("javaContainer"), ::OpenAPI::toJsonValue(m_java_container));
    }
    if (m_java_container_version_isSet) {
        obj.insert(QString("javaContainerVersion"), ::OpenAPI::toJsonValue(m_java_container_version));
    }
    if (m_java_version_isSet) {
        obj.insert(QString("javaVersion"), ::OpenAPI::toJsonValue(m_java_version));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_linux_fx_version_isSet) {
        obj.insert(QString("linuxFxVersion"), ::OpenAPI::toJsonValue(m_linux_fx_version));
    }
    if (m_load_balancing_isSet) {
        obj.insert(QString("loadBalancing"), ::OpenAPI::toJsonValue(m_load_balancing));
    }
    if (m_local_my_sql_enabled_isSet) {
        obj.insert(QString("localMySqlEnabled"), ::OpenAPI::toJsonValue(m_local_my_sql_enabled));
    }
    if (m_logs_directory_size_limit_isSet) {
        obj.insert(QString("logsDirectorySizeLimit"), ::OpenAPI::toJsonValue(m_logs_directory_size_limit));
    }
    if (m_machine_key.isSet()) {
        obj.insert(QString("machineKey"), ::OpenAPI::toJsonValue(m_machine_key));
    }
    if (m_managed_pipeline_mode_isSet) {
        obj.insert(QString("managedPipelineMode"), ::OpenAPI::toJsonValue(m_managed_pipeline_mode));
    }
    if (m_managed_service_identity_id_isSet) {
        obj.insert(QString("managedServiceIdentityId"), ::OpenAPI::toJsonValue(m_managed_service_identity_id));
    }
    if (m_min_tls_version_isSet) {
        obj.insert(QString("minTlsVersion"), ::OpenAPI::toJsonValue(m_min_tls_version));
    }
    if (m_net_framework_version_isSet) {
        obj.insert(QString("netFrameworkVersion"), ::OpenAPI::toJsonValue(m_net_framework_version));
    }
    if (m_node_version_isSet) {
        obj.insert(QString("nodeVersion"), ::OpenAPI::toJsonValue(m_node_version));
    }
    if (m_number_of_workers_isSet) {
        obj.insert(QString("numberOfWorkers"), ::OpenAPI::toJsonValue(m_number_of_workers));
    }
    if (m_php_version_isSet) {
        obj.insert(QString("phpVersion"), ::OpenAPI::toJsonValue(m_php_version));
    }
    if (m_publishing_username_isSet) {
        obj.insert(QString("publishingUsername"), ::OpenAPI::toJsonValue(m_publishing_username));
    }
    if (m_push.isSet()) {
        obj.insert(QString("push"), ::OpenAPI::toJsonValue(m_push));
    }
    if (m_python_version_isSet) {
        obj.insert(QString("pythonVersion"), ::OpenAPI::toJsonValue(m_python_version));
    }
    if (m_remote_debugging_enabled_isSet) {
        obj.insert(QString("remoteDebuggingEnabled"), ::OpenAPI::toJsonValue(m_remote_debugging_enabled));
    }
    if (m_remote_debugging_version_isSet) {
        obj.insert(QString("remoteDebuggingVersion"), ::OpenAPI::toJsonValue(m_remote_debugging_version));
    }
    if (m_request_tracing_enabled_isSet) {
        obj.insert(QString("requestTracingEnabled"), ::OpenAPI::toJsonValue(m_request_tracing_enabled));
    }
    if (m_request_tracing_expiration_time_isSet) {
        obj.insert(QString("requestTracingExpirationTime"), ::OpenAPI::toJsonValue(m_request_tracing_expiration_time));
    }
    if (m_reserved_instance_count_isSet) {
        obj.insert(QString("reservedInstanceCount"), ::OpenAPI::toJsonValue(m_reserved_instance_count));
    }
    if (m_scm_ip_security_restrictions.size() > 0) {
        obj.insert(QString("scmIpSecurityRestrictions"), ::OpenAPI::toJsonValue(m_scm_ip_security_restrictions));
    }
    if (m_scm_ip_security_restrictions_use_main_isSet) {
        obj.insert(QString("scmIpSecurityRestrictionsUseMain"), ::OpenAPI::toJsonValue(m_scm_ip_security_restrictions_use_main));
    }
    if (m_scm_type_isSet) {
        obj.insert(QString("scmType"), ::OpenAPI::toJsonValue(m_scm_type));
    }
    if (m_tracing_options_isSet) {
        obj.insert(QString("tracingOptions"), ::OpenAPI::toJsonValue(m_tracing_options));
    }
    if (m_use32_bit_worker_process_isSet) {
        obj.insert(QString("use32BitWorkerProcess"), ::OpenAPI::toJsonValue(m_use32_bit_worker_process));
    }
    if (m_virtual_applications.size() > 0) {
        obj.insert(QString("virtualApplications"), ::OpenAPI::toJsonValue(m_virtual_applications));
    }
    if (m_vnet_name_isSet) {
        obj.insert(QString("vnetName"), ::OpenAPI::toJsonValue(m_vnet_name));
    }
    if (m_web_sockets_enabled_isSet) {
        obj.insert(QString("webSocketsEnabled"), ::OpenAPI::toJsonValue(m_web_sockets_enabled));
    }
    if (m_windows_fx_version_isSet) {
        obj.insert(QString("windowsFxVersion"), ::OpenAPI::toJsonValue(m_windows_fx_version));
    }
    if (m_x_managed_service_identity_id_isSet) {
        obj.insert(QString("xManagedServiceIdentityId"), ::OpenAPI::toJsonValue(m_x_managed_service_identity_id));
    }
    return obj;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isAlwaysOn() const {
    return m_always_on;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAlwaysOn(const bool &always_on) {
    m_always_on = always_on;
    m_always_on_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_always_on_Set() const{
    return m_always_on_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_always_on_Valid() const{
    return m_always_on_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_apiDefinition OAIWebApps_List_200_response_value_inner_properties_siteConfig::getApiDefinition() const {
    return m_api_definition;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setApiDefinition(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_apiDefinition &api_definition) {
    m_api_definition = api_definition;
    m_api_definition_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_api_definition_Set() const{
    return m_api_definition_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_api_definition_Valid() const{
    return m_api_definition_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getAppCommandLine() const {
    return m_app_command_line;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAppCommandLine(const QString &app_command_line) {
    m_app_command_line = app_command_line;
    m_app_command_line_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_app_command_line_Set() const{
    return m_app_command_line_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_app_command_line_Valid() const{
    return m_app_command_line_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_appSettings_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getAppSettings() const {
    return m_app_settings;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAppSettings(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_appSettings_inner> &app_settings) {
    m_app_settings = app_settings;
    m_app_settings_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_app_settings_Set() const{
    return m_app_settings_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_app_settings_Valid() const{
    return m_app_settings_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isAutoHealEnabled() const {
    return m_auto_heal_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAutoHealEnabled(const bool &auto_heal_enabled) {
    m_auto_heal_enabled = auto_heal_enabled;
    m_auto_heal_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_heal_enabled_Set() const{
    return m_auto_heal_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_heal_enabled_Valid() const{
    return m_auto_heal_enabled_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules OAIWebApps_List_200_response_value_inner_properties_siteConfig::getAutoHealRules() const {
    return m_auto_heal_rules;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAutoHealRules(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_autoHealRules &auto_heal_rules) {
    m_auto_heal_rules = auto_heal_rules;
    m_auto_heal_rules_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_heal_rules_Set() const{
    return m_auto_heal_rules_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_heal_rules_Valid() const{
    return m_auto_heal_rules_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getAutoSwapSlotName() const {
    return m_auto_swap_slot_name;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAutoSwapSlotName(const QString &auto_swap_slot_name) {
    m_auto_swap_slot_name = auto_swap_slot_name;
    m_auto_swap_slot_name_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_swap_slot_name_Set() const{
    return m_auto_swap_slot_name_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_auto_swap_slot_name_Valid() const{
    return m_auto_swap_slot_name_isValid;
}

QMap<QString, OAIWebApps_List_200_response_value_inner_properties_siteConfig_azureStorageAccounts_value> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getAzureStorageAccounts() const {
    return m_azure_storage_accounts;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setAzureStorageAccounts(const QMap<QString, OAIWebApps_List_200_response_value_inner_properties_siteConfig_azureStorageAccounts_value> &azure_storage_accounts) {
    m_azure_storage_accounts = azure_storage_accounts;
    m_azure_storage_accounts_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_azure_storage_accounts_Set() const{
    return m_azure_storage_accounts_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_azure_storage_accounts_Valid() const{
    return m_azure_storage_accounts_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_connectionStrings_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getConnectionStrings() const {
    return m_connection_strings;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setConnectionStrings(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_connectionStrings_inner> &connection_strings) {
    m_connection_strings = connection_strings;
    m_connection_strings_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_connection_strings_Set() const{
    return m_connection_strings_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_connection_strings_Valid() const{
    return m_connection_strings_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_cors OAIWebApps_List_200_response_value_inner_properties_siteConfig::getCors() const {
    return m_cors;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setCors(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_cors &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_cors_Valid() const{
    return m_cors_isValid;
}

QList<QString> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getDefaultDocuments() const {
    return m_default_documents;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setDefaultDocuments(const QList<QString> &default_documents) {
    m_default_documents = default_documents;
    m_default_documents_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_default_documents_Set() const{
    return m_default_documents_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_default_documents_Valid() const{
    return m_default_documents_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isDetailedErrorLoggingEnabled() const {
    return m_detailed_error_logging_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setDetailedErrorLoggingEnabled(const bool &detailed_error_logging_enabled) {
    m_detailed_error_logging_enabled = detailed_error_logging_enabled;
    m_detailed_error_logging_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_detailed_error_logging_enabled_Set() const{
    return m_detailed_error_logging_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_detailed_error_logging_enabled_Valid() const{
    return m_detailed_error_logging_enabled_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getDocumentRoot() const {
    return m_document_root;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setDocumentRoot(const QString &document_root) {
    m_document_root = document_root;
    m_document_root_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_document_root_Set() const{
    return m_document_root_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_document_root_Valid() const{
    return m_document_root_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_experiments OAIWebApps_List_200_response_value_inner_properties_siteConfig::getExperiments() const {
    return m_experiments;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setExperiments(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_experiments &experiments) {
    m_experiments = experiments;
    m_experiments_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_experiments_Set() const{
    return m_experiments_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_experiments_Valid() const{
    return m_experiments_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getFtpsState() const {
    return m_ftps_state;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setFtpsState(const QString &ftps_state) {
    m_ftps_state = ftps_state;
    m_ftps_state_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_ftps_state_Set() const{
    return m_ftps_state_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_ftps_state_Valid() const{
    return m_ftps_state_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_handlerMappings_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getHandlerMappings() const {
    return m_handler_mappings;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setHandlerMappings(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_handlerMappings_inner> &handler_mappings) {
    m_handler_mappings = handler_mappings;
    m_handler_mappings_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_handler_mappings_Set() const{
    return m_handler_mappings_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_handler_mappings_Valid() const{
    return m_handler_mappings_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isHttp20Enabled() const {
    return m_http20_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setHttp20Enabled(const bool &http20_enabled) {
    m_http20_enabled = http20_enabled;
    m_http20_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_http20_enabled_Set() const{
    return m_http20_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_http20_enabled_Valid() const{
    return m_http20_enabled_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isHttpLoggingEnabled() const {
    return m_http_logging_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setHttpLoggingEnabled(const bool &http_logging_enabled) {
    m_http_logging_enabled = http_logging_enabled;
    m_http_logging_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_http_logging_enabled_Set() const{
    return m_http_logging_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_http_logging_enabled_Valid() const{
    return m_http_logging_enabled_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_ipSecurityRestrictions_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getIpSecurityRestrictions() const {
    return m_ip_security_restrictions;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setIpSecurityRestrictions(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_ipSecurityRestrictions_inner> &ip_security_restrictions) {
    m_ip_security_restrictions = ip_security_restrictions;
    m_ip_security_restrictions_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_ip_security_restrictions_Set() const{
    return m_ip_security_restrictions_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_ip_security_restrictions_Valid() const{
    return m_ip_security_restrictions_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getJavaContainer() const {
    return m_java_container;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setJavaContainer(const QString &java_container) {
    m_java_container = java_container;
    m_java_container_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_container_Set() const{
    return m_java_container_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_container_Valid() const{
    return m_java_container_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getJavaContainerVersion() const {
    return m_java_container_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setJavaContainerVersion(const QString &java_container_version) {
    m_java_container_version = java_container_version;
    m_java_container_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_container_version_Set() const{
    return m_java_container_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_container_version_Valid() const{
    return m_java_container_version_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getJavaVersion() const {
    return m_java_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setJavaVersion(const QString &java_version) {
    m_java_version = java_version;
    m_java_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_version_Set() const{
    return m_java_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_java_version_Valid() const{
    return m_java_version_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_limits OAIWebApps_List_200_response_value_inner_properties_siteConfig::getLimits() const {
    return m_limits;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setLimits(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_limits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_limits_Valid() const{
    return m_limits_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getLinuxFxVersion() const {
    return m_linux_fx_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setLinuxFxVersion(const QString &linux_fx_version) {
    m_linux_fx_version = linux_fx_version;
    m_linux_fx_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_linux_fx_version_Set() const{
    return m_linux_fx_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_linux_fx_version_Valid() const{
    return m_linux_fx_version_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getLoadBalancing() const {
    return m_load_balancing;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setLoadBalancing(const QString &load_balancing) {
    m_load_balancing = load_balancing;
    m_load_balancing_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_load_balancing_Set() const{
    return m_load_balancing_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_load_balancing_Valid() const{
    return m_load_balancing_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isLocalMySqlEnabled() const {
    return m_local_my_sql_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setLocalMySqlEnabled(const bool &local_my_sql_enabled) {
    m_local_my_sql_enabled = local_my_sql_enabled;
    m_local_my_sql_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_local_my_sql_enabled_Set() const{
    return m_local_my_sql_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_local_my_sql_enabled_Valid() const{
    return m_local_my_sql_enabled_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties_siteConfig::getLogsDirectorySizeLimit() const {
    return m_logs_directory_size_limit;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setLogsDirectorySizeLimit(const qint32 &logs_directory_size_limit) {
    m_logs_directory_size_limit = logs_directory_size_limit;
    m_logs_directory_size_limit_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_logs_directory_size_limit_Set() const{
    return m_logs_directory_size_limit_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_logs_directory_size_limit_Valid() const{
    return m_logs_directory_size_limit_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_machineKey OAIWebApps_List_200_response_value_inner_properties_siteConfig::getMachineKey() const {
    return m_machine_key;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setMachineKey(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_machineKey &machine_key) {
    m_machine_key = machine_key;
    m_machine_key_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_machine_key_Set() const{
    return m_machine_key_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_machine_key_Valid() const{
    return m_machine_key_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getManagedPipelineMode() const {
    return m_managed_pipeline_mode;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setManagedPipelineMode(const QString &managed_pipeline_mode) {
    m_managed_pipeline_mode = managed_pipeline_mode;
    m_managed_pipeline_mode_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_managed_pipeline_mode_Set() const{
    return m_managed_pipeline_mode_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_managed_pipeline_mode_Valid() const{
    return m_managed_pipeline_mode_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties_siteConfig::getManagedServiceIdentityId() const {
    return m_managed_service_identity_id;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setManagedServiceIdentityId(const qint32 &managed_service_identity_id) {
    m_managed_service_identity_id = managed_service_identity_id;
    m_managed_service_identity_id_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_managed_service_identity_id_Set() const{
    return m_managed_service_identity_id_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_managed_service_identity_id_Valid() const{
    return m_managed_service_identity_id_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getMinTlsVersion() const {
    return m_min_tls_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setMinTlsVersion(const QString &min_tls_version) {
    m_min_tls_version = min_tls_version;
    m_min_tls_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_min_tls_version_Set() const{
    return m_min_tls_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_min_tls_version_Valid() const{
    return m_min_tls_version_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getNetFrameworkVersion() const {
    return m_net_framework_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setNetFrameworkVersion(const QString &net_framework_version) {
    m_net_framework_version = net_framework_version;
    m_net_framework_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_net_framework_version_Set() const{
    return m_net_framework_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_net_framework_version_Valid() const{
    return m_net_framework_version_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getNodeVersion() const {
    return m_node_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setNodeVersion(const QString &node_version) {
    m_node_version = node_version;
    m_node_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_node_version_Set() const{
    return m_node_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_node_version_Valid() const{
    return m_node_version_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties_siteConfig::getNumberOfWorkers() const {
    return m_number_of_workers;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setNumberOfWorkers(const qint32 &number_of_workers) {
    m_number_of_workers = number_of_workers;
    m_number_of_workers_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_number_of_workers_Set() const{
    return m_number_of_workers_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_number_of_workers_Valid() const{
    return m_number_of_workers_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getPhpVersion() const {
    return m_php_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setPhpVersion(const QString &php_version) {
    m_php_version = php_version;
    m_php_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_php_version_Set() const{
    return m_php_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_php_version_Valid() const{
    return m_php_version_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getPublishingUsername() const {
    return m_publishing_username;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setPublishingUsername(const QString &publishing_username) {
    m_publishing_username = publishing_username;
    m_publishing_username_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_publishing_username_Set() const{
    return m_publishing_username_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_publishing_username_Valid() const{
    return m_publishing_username_isValid;
}

OAIWebApps_List_200_response_value_inner_properties_siteConfig_push OAIWebApps_List_200_response_value_inner_properties_siteConfig::getPush() const {
    return m_push;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setPush(const OAIWebApps_List_200_response_value_inner_properties_siteConfig_push &push) {
    m_push = push;
    m_push_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_push_Set() const{
    return m_push_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_push_Valid() const{
    return m_push_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getPythonVersion() const {
    return m_python_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setPythonVersion(const QString &python_version) {
    m_python_version = python_version;
    m_python_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_python_version_Set() const{
    return m_python_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_python_version_Valid() const{
    return m_python_version_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isRemoteDebuggingEnabled() const {
    return m_remote_debugging_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setRemoteDebuggingEnabled(const bool &remote_debugging_enabled) {
    m_remote_debugging_enabled = remote_debugging_enabled;
    m_remote_debugging_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_remote_debugging_enabled_Set() const{
    return m_remote_debugging_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_remote_debugging_enabled_Valid() const{
    return m_remote_debugging_enabled_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getRemoteDebuggingVersion() const {
    return m_remote_debugging_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setRemoteDebuggingVersion(const QString &remote_debugging_version) {
    m_remote_debugging_version = remote_debugging_version;
    m_remote_debugging_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_remote_debugging_version_Set() const{
    return m_remote_debugging_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_remote_debugging_version_Valid() const{
    return m_remote_debugging_version_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isRequestTracingEnabled() const {
    return m_request_tracing_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setRequestTracingEnabled(const bool &request_tracing_enabled) {
    m_request_tracing_enabled = request_tracing_enabled;
    m_request_tracing_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_request_tracing_enabled_Set() const{
    return m_request_tracing_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_request_tracing_enabled_Valid() const{
    return m_request_tracing_enabled_isValid;
}

QDateTime OAIWebApps_List_200_response_value_inner_properties_siteConfig::getRequestTracingExpirationTime() const {
    return m_request_tracing_expiration_time;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setRequestTracingExpirationTime(const QDateTime &request_tracing_expiration_time) {
    m_request_tracing_expiration_time = request_tracing_expiration_time;
    m_request_tracing_expiration_time_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_request_tracing_expiration_time_Set() const{
    return m_request_tracing_expiration_time_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_request_tracing_expiration_time_Valid() const{
    return m_request_tracing_expiration_time_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties_siteConfig::getReservedInstanceCount() const {
    return m_reserved_instance_count;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setReservedInstanceCount(const qint32 &reserved_instance_count) {
    m_reserved_instance_count = reserved_instance_count;
    m_reserved_instance_count_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_reserved_instance_count_Set() const{
    return m_reserved_instance_count_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_reserved_instance_count_Valid() const{
    return m_reserved_instance_count_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_ipSecurityRestrictions_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getScmIpSecurityRestrictions() const {
    return m_scm_ip_security_restrictions;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setScmIpSecurityRestrictions(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_ipSecurityRestrictions_inner> &scm_ip_security_restrictions) {
    m_scm_ip_security_restrictions = scm_ip_security_restrictions;
    m_scm_ip_security_restrictions_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_ip_security_restrictions_Set() const{
    return m_scm_ip_security_restrictions_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_ip_security_restrictions_Valid() const{
    return m_scm_ip_security_restrictions_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isScmIpSecurityRestrictionsUseMain() const {
    return m_scm_ip_security_restrictions_use_main;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setScmIpSecurityRestrictionsUseMain(const bool &scm_ip_security_restrictions_use_main) {
    m_scm_ip_security_restrictions_use_main = scm_ip_security_restrictions_use_main;
    m_scm_ip_security_restrictions_use_main_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_ip_security_restrictions_use_main_Set() const{
    return m_scm_ip_security_restrictions_use_main_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_ip_security_restrictions_use_main_Valid() const{
    return m_scm_ip_security_restrictions_use_main_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getScmType() const {
    return m_scm_type;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setScmType(const QString &scm_type) {
    m_scm_type = scm_type;
    m_scm_type_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_type_Set() const{
    return m_scm_type_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_scm_type_Valid() const{
    return m_scm_type_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getTracingOptions() const {
    return m_tracing_options;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setTracingOptions(const QString &tracing_options) {
    m_tracing_options = tracing_options;
    m_tracing_options_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_tracing_options_Set() const{
    return m_tracing_options_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_tracing_options_Valid() const{
    return m_tracing_options_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isUse32BitWorkerProcess() const {
    return m_use32_bit_worker_process;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setUse32BitWorkerProcess(const bool &use32_bit_worker_process) {
    m_use32_bit_worker_process = use32_bit_worker_process;
    m_use32_bit_worker_process_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_use32_bit_worker_process_Set() const{
    return m_use32_bit_worker_process_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_use32_bit_worker_process_Valid() const{
    return m_use32_bit_worker_process_isValid;
}

QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_virtualApplications_inner> OAIWebApps_List_200_response_value_inner_properties_siteConfig::getVirtualApplications() const {
    return m_virtual_applications;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setVirtualApplications(const QList<OAIWebApps_List_200_response_value_inner_properties_siteConfig_virtualApplications_inner> &virtual_applications) {
    m_virtual_applications = virtual_applications;
    m_virtual_applications_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_virtual_applications_Set() const{
    return m_virtual_applications_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_virtual_applications_Valid() const{
    return m_virtual_applications_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getVnetName() const {
    return m_vnet_name;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setVnetName(const QString &vnet_name) {
    m_vnet_name = vnet_name;
    m_vnet_name_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_vnet_name_Set() const{
    return m_vnet_name_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_vnet_name_Valid() const{
    return m_vnet_name_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isWebSocketsEnabled() const {
    return m_web_sockets_enabled;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setWebSocketsEnabled(const bool &web_sockets_enabled) {
    m_web_sockets_enabled = web_sockets_enabled;
    m_web_sockets_enabled_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_web_sockets_enabled_Set() const{
    return m_web_sockets_enabled_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_web_sockets_enabled_Valid() const{
    return m_web_sockets_enabled_isValid;
}

QString OAIWebApps_List_200_response_value_inner_properties_siteConfig::getWindowsFxVersion() const {
    return m_windows_fx_version;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setWindowsFxVersion(const QString &windows_fx_version) {
    m_windows_fx_version = windows_fx_version;
    m_windows_fx_version_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_windows_fx_version_Set() const{
    return m_windows_fx_version_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_windows_fx_version_Valid() const{
    return m_windows_fx_version_isValid;
}

qint32 OAIWebApps_List_200_response_value_inner_properties_siteConfig::getXManagedServiceIdentityId() const {
    return m_x_managed_service_identity_id;
}
void OAIWebApps_List_200_response_value_inner_properties_siteConfig::setXManagedServiceIdentityId(const qint32 &x_managed_service_identity_id) {
    m_x_managed_service_identity_id = x_managed_service_identity_id;
    m_x_managed_service_identity_id_isSet = true;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_x_managed_service_identity_id_Set() const{
    return m_x_managed_service_identity_id_isSet;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::is_x_managed_service_identity_id_Valid() const{
    return m_x_managed_service_identity_id_isValid;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_heal_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_heal_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_swap_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_storage_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_error_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftps_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handler_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http20_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_security_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_container_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_fx_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_my_sql_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_directory_size_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_pipeline_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_service_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_tls_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_framework_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_php_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_debugging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_debugging_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_tracing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_tracing_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_ip_security_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_ip_security_restrictions_use_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracing_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use32_bit_worker_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_sockets_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_fx_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_managed_service_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebApps_List_200_response_value_inner_properties_siteConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
