/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupSchedule::OAIBackupSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupSchedule::OAIBackupSchedule() {
    this->initializeModel();
}

OAIBackupSchedule::~OAIBackupSchedule() {}

void OAIBackupSchedule::initializeModel() {

    m_frequency_interval_isSet = false;
    m_frequency_interval_isValid = false;

    m_frequency_unit_isSet = false;
    m_frequency_unit_isValid = false;

    m_keep_at_least_one_backup_isSet = false;
    m_keep_at_least_one_backup_isValid = false;

    m_last_execution_time_isSet = false;
    m_last_execution_time_isValid = false;

    m_retention_period_in_days_isSet = false;
    m_retention_period_in_days_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIBackupSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupSchedule::fromJsonObject(QJsonObject json) {

    m_frequency_interval_isValid = ::OpenAPI::fromJsonValue(m_frequency_interval, json[QString("frequencyInterval")]);
    m_frequency_interval_isSet = !json[QString("frequencyInterval")].isNull() && m_frequency_interval_isValid;

    m_frequency_unit_isValid = ::OpenAPI::fromJsonValue(m_frequency_unit, json[QString("frequencyUnit")]);
    m_frequency_unit_isSet = !json[QString("frequencyUnit")].isNull() && m_frequency_unit_isValid;

    m_keep_at_least_one_backup_isValid = ::OpenAPI::fromJsonValue(m_keep_at_least_one_backup, json[QString("keepAtLeastOneBackup")]);
    m_keep_at_least_one_backup_isSet = !json[QString("keepAtLeastOneBackup")].isNull() && m_keep_at_least_one_backup_isValid;

    m_last_execution_time_isValid = ::OpenAPI::fromJsonValue(m_last_execution_time, json[QString("lastExecutionTime")]);
    m_last_execution_time_isSet = !json[QString("lastExecutionTime")].isNull() && m_last_execution_time_isValid;

    m_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_period_in_days, json[QString("retentionPeriodInDays")]);
    m_retention_period_in_days_isSet = !json[QString("retentionPeriodInDays")].isNull() && m_retention_period_in_days_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIBackupSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_interval_isSet) {
        obj.insert(QString("frequencyInterval"), ::OpenAPI::toJsonValue(m_frequency_interval));
    }
    if (m_frequency_unit_isSet) {
        obj.insert(QString("frequencyUnit"), ::OpenAPI::toJsonValue(m_frequency_unit));
    }
    if (m_keep_at_least_one_backup_isSet) {
        obj.insert(QString("keepAtLeastOneBackup"), ::OpenAPI::toJsonValue(m_keep_at_least_one_backup));
    }
    if (m_last_execution_time_isSet) {
        obj.insert(QString("lastExecutionTime"), ::OpenAPI::toJsonValue(m_last_execution_time));
    }
    if (m_retention_period_in_days_isSet) {
        obj.insert(QString("retentionPeriodInDays"), ::OpenAPI::toJsonValue(m_retention_period_in_days));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

qint32 OAIBackupSchedule::getFrequencyInterval() const {
    return m_frequency_interval;
}
void OAIBackupSchedule::setFrequencyInterval(const qint32 &frequency_interval) {
    m_frequency_interval = frequency_interval;
    m_frequency_interval_isSet = true;
}

bool OAIBackupSchedule::is_frequency_interval_Set() const{
    return m_frequency_interval_isSet;
}

bool OAIBackupSchedule::is_frequency_interval_Valid() const{
    return m_frequency_interval_isValid;
}

QString OAIBackupSchedule::getFrequencyUnit() const {
    return m_frequency_unit;
}
void OAIBackupSchedule::setFrequencyUnit(const QString &frequency_unit) {
    m_frequency_unit = frequency_unit;
    m_frequency_unit_isSet = true;
}

bool OAIBackupSchedule::is_frequency_unit_Set() const{
    return m_frequency_unit_isSet;
}

bool OAIBackupSchedule::is_frequency_unit_Valid() const{
    return m_frequency_unit_isValid;
}

bool OAIBackupSchedule::isKeepAtLeastOneBackup() const {
    return m_keep_at_least_one_backup;
}
void OAIBackupSchedule::setKeepAtLeastOneBackup(const bool &keep_at_least_one_backup) {
    m_keep_at_least_one_backup = keep_at_least_one_backup;
    m_keep_at_least_one_backup_isSet = true;
}

bool OAIBackupSchedule::is_keep_at_least_one_backup_Set() const{
    return m_keep_at_least_one_backup_isSet;
}

bool OAIBackupSchedule::is_keep_at_least_one_backup_Valid() const{
    return m_keep_at_least_one_backup_isValid;
}

QDateTime OAIBackupSchedule::getLastExecutionTime() const {
    return m_last_execution_time;
}
void OAIBackupSchedule::setLastExecutionTime(const QDateTime &last_execution_time) {
    m_last_execution_time = last_execution_time;
    m_last_execution_time_isSet = true;
}

bool OAIBackupSchedule::is_last_execution_time_Set() const{
    return m_last_execution_time_isSet;
}

bool OAIBackupSchedule::is_last_execution_time_Valid() const{
    return m_last_execution_time_isValid;
}

qint32 OAIBackupSchedule::getRetentionPeriodInDays() const {
    return m_retention_period_in_days;
}
void OAIBackupSchedule::setRetentionPeriodInDays(const qint32 &retention_period_in_days) {
    m_retention_period_in_days = retention_period_in_days;
    m_retention_period_in_days_isSet = true;
}

bool OAIBackupSchedule::is_retention_period_in_days_Set() const{
    return m_retention_period_in_days_isSet;
}

bool OAIBackupSchedule::is_retention_period_in_days_Valid() const{
    return m_retention_period_in_days_isValid;
}

QDateTime OAIBackupSchedule::getStartTime() const {
    return m_start_time;
}
void OAIBackupSchedule::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBackupSchedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBackupSchedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIBackupSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_at_least_one_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frequency_interval_isValid && m_frequency_unit_isValid && m_keep_at_least_one_backup_isValid && m_retention_period_in_days_isValid && true;
}

} // namespace OpenAPI
