/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostKeys::OAIHostKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostKeys::OAIHostKeys() {
    this->initializeModel();
}

OAIHostKeys::~OAIHostKeys() {}

void OAIHostKeys::initializeModel() {

    m_function_keys_isSet = false;
    m_function_keys_isValid = false;

    m_master_key_isSet = false;
    m_master_key_isValid = false;

    m_system_keys_isSet = false;
    m_system_keys_isValid = false;
}

void OAIHostKeys::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostKeys::fromJsonObject(QJsonObject json) {

    m_function_keys_isValid = ::OpenAPI::fromJsonValue(m_function_keys, json[QString("functionKeys")]);
    m_function_keys_isSet = !json[QString("functionKeys")].isNull() && m_function_keys_isValid;

    m_master_key_isValid = ::OpenAPI::fromJsonValue(m_master_key, json[QString("masterKey")]);
    m_master_key_isSet = !json[QString("masterKey")].isNull() && m_master_key_isValid;

    m_system_keys_isValid = ::OpenAPI::fromJsonValue(m_system_keys, json[QString("systemKeys")]);
    m_system_keys_isSet = !json[QString("systemKeys")].isNull() && m_system_keys_isValid;
}

QString OAIHostKeys::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostKeys::asJsonObject() const {
    QJsonObject obj;
    if (m_function_keys.size() > 0) {
        obj.insert(QString("functionKeys"), ::OpenAPI::toJsonValue(m_function_keys));
    }
    if (m_master_key_isSet) {
        obj.insert(QString("masterKey"), ::OpenAPI::toJsonValue(m_master_key));
    }
    if (m_system_keys.size() > 0) {
        obj.insert(QString("systemKeys"), ::OpenAPI::toJsonValue(m_system_keys));
    }
    return obj;
}

QMap<QString, QString> OAIHostKeys::getFunctionKeys() const {
    return m_function_keys;
}
void OAIHostKeys::setFunctionKeys(const QMap<QString, QString> &function_keys) {
    m_function_keys = function_keys;
    m_function_keys_isSet = true;
}

bool OAIHostKeys::is_function_keys_Set() const{
    return m_function_keys_isSet;
}

bool OAIHostKeys::is_function_keys_Valid() const{
    return m_function_keys_isValid;
}

QString OAIHostKeys::getMasterKey() const {
    return m_master_key;
}
void OAIHostKeys::setMasterKey(const QString &master_key) {
    m_master_key = master_key;
    m_master_key_isSet = true;
}

bool OAIHostKeys::is_master_key_Set() const{
    return m_master_key_isSet;
}

bool OAIHostKeys::is_master_key_Valid() const{
    return m_master_key_isValid;
}

QMap<QString, QString> OAIHostKeys::getSystemKeys() const {
    return m_system_keys;
}
void OAIHostKeys::setSystemKeys(const QMap<QString, QString> &system_keys) {
    m_system_keys = system_keys;
    m_system_keys_isSet = true;
}

bool OAIHostKeys::is_system_keys_Set() const{
    return m_system_keys_isSet;
}

bool OAIHostKeys::is_system_keys_Valid() const{
    return m_system_keys_isValid;
}

bool OAIHostKeys::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
