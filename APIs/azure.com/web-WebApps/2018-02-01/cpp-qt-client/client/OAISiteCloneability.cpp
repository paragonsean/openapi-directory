/**
 * WebApps API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteCloneability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteCloneability::OAISiteCloneability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteCloneability::OAISiteCloneability() {
    this->initializeModel();
}

OAISiteCloneability::~OAISiteCloneability() {}

void OAISiteCloneability::initializeModel() {

    m_blocking_characteristics_isSet = false;
    m_blocking_characteristics_isValid = false;

    m_blocking_features_isSet = false;
    m_blocking_features_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_unsupported_features_isSet = false;
    m_unsupported_features_isValid = false;
}

void OAISiteCloneability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteCloneability::fromJsonObject(QJsonObject json) {

    m_blocking_characteristics_isValid = ::OpenAPI::fromJsonValue(m_blocking_characteristics, json[QString("blockingCharacteristics")]);
    m_blocking_characteristics_isSet = !json[QString("blockingCharacteristics")].isNull() && m_blocking_characteristics_isValid;

    m_blocking_features_isValid = ::OpenAPI::fromJsonValue(m_blocking_features, json[QString("blockingFeatures")]);
    m_blocking_features_isSet = !json[QString("blockingFeatures")].isNull() && m_blocking_features_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_unsupported_features_isValid = ::OpenAPI::fromJsonValue(m_unsupported_features, json[QString("unsupportedFeatures")]);
    m_unsupported_features_isSet = !json[QString("unsupportedFeatures")].isNull() && m_unsupported_features_isValid;
}

QString OAISiteCloneability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteCloneability::asJsonObject() const {
    QJsonObject obj;
    if (m_blocking_characteristics.size() > 0) {
        obj.insert(QString("blockingCharacteristics"), ::OpenAPI::toJsonValue(m_blocking_characteristics));
    }
    if (m_blocking_features.size() > 0) {
        obj.insert(QString("blockingFeatures"), ::OpenAPI::toJsonValue(m_blocking_features));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_unsupported_features.size() > 0) {
        obj.insert(QString("unsupportedFeatures"), ::OpenAPI::toJsonValue(m_unsupported_features));
    }
    return obj;
}

QList<OAISiteCloneabilityCriterion> OAISiteCloneability::getBlockingCharacteristics() const {
    return m_blocking_characteristics;
}
void OAISiteCloneability::setBlockingCharacteristics(const QList<OAISiteCloneabilityCriterion> &blocking_characteristics) {
    m_blocking_characteristics = blocking_characteristics;
    m_blocking_characteristics_isSet = true;
}

bool OAISiteCloneability::is_blocking_characteristics_Set() const{
    return m_blocking_characteristics_isSet;
}

bool OAISiteCloneability::is_blocking_characteristics_Valid() const{
    return m_blocking_characteristics_isValid;
}

QList<OAISiteCloneabilityCriterion> OAISiteCloneability::getBlockingFeatures() const {
    return m_blocking_features;
}
void OAISiteCloneability::setBlockingFeatures(const QList<OAISiteCloneabilityCriterion> &blocking_features) {
    m_blocking_features = blocking_features;
    m_blocking_features_isSet = true;
}

bool OAISiteCloneability::is_blocking_features_Set() const{
    return m_blocking_features_isSet;
}

bool OAISiteCloneability::is_blocking_features_Valid() const{
    return m_blocking_features_isValid;
}

QString OAISiteCloneability::getResult() const {
    return m_result;
}
void OAISiteCloneability::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAISiteCloneability::is_result_Set() const{
    return m_result_isSet;
}

bool OAISiteCloneability::is_result_Valid() const{
    return m_result_isValid;
}

QList<OAISiteCloneabilityCriterion> OAISiteCloneability::getUnsupportedFeatures() const {
    return m_unsupported_features;
}
void OAISiteCloneability::setUnsupportedFeatures(const QList<OAISiteCloneabilityCriterion> &unsupported_features) {
    m_unsupported_features = unsupported_features;
    m_unsupported_features_isSet = true;
}

bool OAISiteCloneability::is_unsupported_features_Set() const{
    return m_unsupported_features_isSet;
}

bool OAISiteCloneability::is_unsupported_features_Valid() const{
    return m_unsupported_features_isValid;
}

bool OAISiteCloneability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocking_characteristics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocking_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteCloneability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
