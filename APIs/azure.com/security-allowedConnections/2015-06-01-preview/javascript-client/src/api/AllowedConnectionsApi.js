/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllowedConnectionsList from '../model/AllowedConnectionsList';
import AllowedConnectionsListDefaultResponse from '../model/AllowedConnectionsListDefaultResponse';
import AllowedConnectionsResource from '../model/AllowedConnectionsResource';

/**
* AllowedConnections service.
* @module api/AllowedConnectionsApi
* @version 2015-06-01-preview
*/
export default class AllowedConnectionsApi {

    /**
    * Constructs a new AllowedConnectionsApi. 
    * @alias module:api/AllowedConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allowedConnectionsGet operation.
     * @callback module:api/AllowedConnectionsApi~allowedConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllowedConnectionsResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all possible traffic between resources for the subscription and location, based on connection type.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {module:model/String} connectionType The type of allowed connections (Internal, External)
     * @param {String} apiVersion API version for the operation
     * @param {module:api/AllowedConnectionsApi~allowedConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllowedConnectionsResource}
     */
    allowedConnectionsGet(subscriptionId, resourceGroupName, ascLocation, connectionType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling allowedConnectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling allowedConnectionsGet");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling allowedConnectionsGet");
      }
      // verify the required parameter 'connectionType' is set
      if (connectionType === undefined || connectionType === null) {
        throw new Error("Missing the required parameter 'connectionType' when calling allowedConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling allowedConnectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'connectionType': connectionType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllowedConnectionsResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections/{connectionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowedConnectionsList operation.
     * @callback module:api/AllowedConnectionsApi~allowedConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllowedConnectionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all possible traffic between resources for the subscription
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} apiVersion API version for the operation
     * @param {module:api/AllowedConnectionsApi~allowedConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllowedConnectionsList}
     */
    allowedConnectionsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling allowedConnectionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling allowedConnectionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllowedConnectionsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowedConnectionsListByHomeRegion operation.
     * @callback module:api/AllowedConnectionsApi~allowedConnectionsListByHomeRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllowedConnectionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all possible traffic between resources for the subscription and location.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} apiVersion API version for the operation
     * @param {module:api/AllowedConnectionsApi~allowedConnectionsListByHomeRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllowedConnectionsList}
     */
    allowedConnectionsListByHomeRegion(subscriptionId, ascLocation, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling allowedConnectionsListByHomeRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling allowedConnectionsListByHomeRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling allowedConnectionsListByHomeRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllowedConnectionsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
