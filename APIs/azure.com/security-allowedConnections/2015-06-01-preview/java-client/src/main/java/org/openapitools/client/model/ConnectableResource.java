/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the allowed inbound and outbound traffic of an Azure resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:21.604826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectableResource {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INBOUND_CONNECTED_RESOURCES = "inboundConnectedResources";
  @SerializedName(SERIALIZED_NAME_INBOUND_CONNECTED_RESOURCES)
  private List<ConnectedResource> inboundConnectedResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTBOUND_CONNECTED_RESOURCES = "outboundConnectedResources";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_CONNECTED_RESOURCES)
  private List<ConnectedResource> outboundConnectedResources = new ArrayList<>();

  public ConnectableResource() {
  }

  public ConnectableResource(
     String id, 
     List<ConnectedResource> inboundConnectedResources, 
     List<ConnectedResource> outboundConnectedResources
  ) {
    this();
    this.id = id;
    this.inboundConnectedResources = inboundConnectedResources;
    this.outboundConnectedResources = outboundConnectedResources;
  }

  /**
   * The Azure resource id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The list of Azure resources that the resource has inbound allowed connection from
   * @return inboundConnectedResources
   */
  @javax.annotation.Nullable
  public List<ConnectedResource> getInboundConnectedResources() {
    return inboundConnectedResources;
  }



  /**
   * The list of Azure resources that the resource has outbound allowed connection to
   * @return outboundConnectedResources
   */
  @javax.annotation.Nullable
  public List<ConnectedResource> getOutboundConnectedResources() {
    return outboundConnectedResources;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectableResource connectableResource = (ConnectableResource) o;
    return Objects.equals(this.id, connectableResource.id) &&
        Objects.equals(this.inboundConnectedResources, connectableResource.inboundConnectedResources) &&
        Objects.equals(this.outboundConnectedResources, connectableResource.outboundConnectedResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inboundConnectedResources, outboundConnectedResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectableResource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inboundConnectedResources: ").append(toIndentedString(inboundConnectedResources)).append("\n");
    sb.append("    outboundConnectedResources: ").append(toIndentedString(outboundConnectedResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("inboundConnectedResources");
    openapiFields.add("outboundConnectedResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectableResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectableResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectableResource is not found in the empty JSON string", ConnectableResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectableResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectableResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inboundConnectedResources") != null && !jsonObj.get("inboundConnectedResources").isJsonNull()) {
        JsonArray jsonArrayinboundConnectedResources = jsonObj.getAsJsonArray("inboundConnectedResources");
        if (jsonArrayinboundConnectedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inboundConnectedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inboundConnectedResources` to be an array in the JSON string but got `%s`", jsonObj.get("inboundConnectedResources").toString()));
          }

          // validate the optional field `inboundConnectedResources` (array)
          for (int i = 0; i < jsonArrayinboundConnectedResources.size(); i++) {
            ConnectedResource.validateJsonElement(jsonArrayinboundConnectedResources.get(i));
          };
        }
      }
      if (jsonObj.get("outboundConnectedResources") != null && !jsonObj.get("outboundConnectedResources").isJsonNull()) {
        JsonArray jsonArrayoutboundConnectedResources = jsonObj.getAsJsonArray("outboundConnectedResources");
        if (jsonArrayoutboundConnectedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outboundConnectedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outboundConnectedResources` to be an array in the JSON string but got `%s`", jsonObj.get("outboundConnectedResources").toString()));
          }

          // validate the optional field `outboundConnectedResources` (array)
          for (int i = 0; i < jsonArrayoutboundConnectedResources.size(); i++) {
            ConnectedResource.validateJsonElement(jsonArrayoutboundConnectedResources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectableResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectableResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectableResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectableResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectableResource>() {
           @Override
           public void write(JsonWriter out, ConnectableResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectableResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectableResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectableResource
   * @throws IOException if the JSON string is invalid with respect to ConnectableResource
   */
  public static ConnectableResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectableResource.class);
  }

  /**
   * Convert an instance of ConnectableResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

