/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabPropertiesFragment model module.
 * @module model/LabPropertiesFragment
 * @version 2018-10-15
 */
class LabPropertiesFragment {
    /**
     * Constructs a new <code>LabPropertiesFragment</code>.
     * Properties of a Lab.
     * @alias module:model/LabPropertiesFragment
     */
    constructor() { 
        
        LabPropertiesFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabPropertiesFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabPropertiesFragment} obj Optional instance to populate.
     * @return {module:model/LabPropertiesFragment} The populated <code>LabPropertiesFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabPropertiesFragment();

            if (data.hasOwnProperty('maxUsersInLab')) {
                obj['maxUsersInLab'] = ApiClient.convertToType(data['maxUsersInLab'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('uniqueIdentifier')) {
                obj['uniqueIdentifier'] = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('usageQuota')) {
                obj['usageQuota'] = ApiClient.convertToType(data['usageQuota'], 'String');
            }
            if (data.hasOwnProperty('userAccessMode')) {
                obj['userAccessMode'] = ApiClient.convertToType(data['userAccessMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabPropertiesFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabPropertiesFragment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['uniqueIdentifier'] && !(typeof data['uniqueIdentifier'] === 'string' || data['uniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got " + data['uniqueIdentifier']);
        }
        // ensure the json data is a string
        if (data['usageQuota'] && !(typeof data['usageQuota'] === 'string' || data['usageQuota'] instanceof String)) {
            throw new Error("Expected the field `usageQuota` to be a primitive type in the JSON string but got " + data['usageQuota']);
        }
        // ensure the json data is a string
        if (data['userAccessMode'] && !(typeof data['userAccessMode'] === 'string' || data['userAccessMode'] instanceof String)) {
            throw new Error("Expected the field `userAccessMode` to be a primitive type in the JSON string but got " + data['userAccessMode']);
        }

        return true;
    }


}



/**
 * Maximum number of users allowed in the lab.
 * @member {Number} maxUsersInLab
 */
LabPropertiesFragment.prototype['maxUsersInLab'] = undefined;

/**
 * The provisioning status of the resource.
 * @member {String} provisioningState
 */
LabPropertiesFragment.prototype['provisioningState'] = undefined;

/**
 * The unique immutable identifier of a resource (Guid).
 * @member {String} uniqueIdentifier
 */
LabPropertiesFragment.prototype['uniqueIdentifier'] = undefined;

/**
 * Maximum duration a user can use an environment for in the lab.
 * @member {String} usageQuota
 */
LabPropertiesFragment.prototype['usageQuota'] = undefined;

/**
 * Lab user access mode (open to all vs. restricted to those listed on the lab).
 * @member {module:model/LabPropertiesFragment.UserAccessModeEnum} userAccessMode
 */
LabPropertiesFragment.prototype['userAccessMode'] = undefined;





/**
 * Allowed values for the <code>userAccessMode</code> property.
 * @enum {String}
 * @readonly
 */
LabPropertiesFragment['UserAccessModeEnum'] = {

    /**
     * value: "Restricted"
     * @const
     */
    "Restricted": "Restricted",

    /**
     * value: "Open"
     * @const
     */
    "Open": "Open"
};



export default LabPropertiesFragment;

