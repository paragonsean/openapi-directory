/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferenceVm from './ReferenceVm';

/**
 * The ResourceSettings model module.
 * @module model/ResourceSettings
 * @version 2018-10-15
 */
class ResourceSettings {
    /**
     * Constructs a new <code>ResourceSettings</code>.
     * Represents resource specific settings
     * @alias module:model/ResourceSettings
     * @param referenceVm {module:model/ReferenceVm} 
     */
    constructor(referenceVm) { 
        
        ResourceSettings.initialize(this, referenceVm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, referenceVm) { 
        obj['referenceVm'] = referenceVm;
    }

    /**
     * Constructs a <code>ResourceSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceSettings} obj Optional instance to populate.
     * @return {module:model/ResourceSettings} The populated <code>ResourceSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceSettings();

            if (data.hasOwnProperty('cores')) {
                obj['cores'] = ApiClient.convertToType(data['cores'], 'Number');
            }
            if (data.hasOwnProperty('galleryImageResourceId')) {
                obj['galleryImageResourceId'] = ApiClient.convertToType(data['galleryImageResourceId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageName')) {
                obj['imageName'] = ApiClient.convertToType(data['imageName'], 'String');
            }
            if (data.hasOwnProperty('referenceVm')) {
                obj['referenceVm'] = ReferenceVm.constructFromObject(data['referenceVm']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['galleryImageResourceId'] && !(typeof data['galleryImageResourceId'] === 'string' || data['galleryImageResourceId'] instanceof String)) {
            throw new Error("Expected the field `galleryImageResourceId` to be a primitive type in the JSON string but got " + data['galleryImageResourceId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageName'] && !(typeof data['imageName'] === 'string' || data['imageName'] instanceof String)) {
            throw new Error("Expected the field `imageName` to be a primitive type in the JSON string but got " + data['imageName']);
        }
        // validate the optional field `referenceVm`
        if (data['referenceVm']) { // data not null
          ReferenceVm.validateJSON(data['referenceVm']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

ResourceSettings.RequiredProperties = ["referenceVm"];

/**
 * The translated compute cores of the virtual machine
 * @member {Number} cores
 */
ResourceSettings.prototype['cores'] = undefined;

/**
 * The resource id of the gallery image used for creating the virtual machine
 * @member {String} galleryImageResourceId
 */
ResourceSettings.prototype['galleryImageResourceId'] = undefined;

/**
 * The unique id of the resource setting
 * @member {String} id
 */
ResourceSettings.prototype['id'] = undefined;

/**
 * The name of the image used to created the environment setting
 * @member {String} imageName
 */
ResourceSettings.prototype['imageName'] = undefined;

/**
 * @member {module:model/ReferenceVm} referenceVm
 */
ResourceSettings.prototype['referenceVm'] = undefined;

/**
 * The size of the virtual machine
 * @member {module:model/ResourceSettings.SizeEnum} size
 */
ResourceSettings.prototype['size'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
ResourceSettings['SizeEnum'] = {

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Performance"
     * @const
     */
    "Performance": "Performance"
};



export default ResourceSettings;

