/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import Environment from '../model/Environment';
import EnvironmentFragment from '../model/EnvironmentFragment';
import ResetPasswordPayload from '../model/ResetPasswordPayload';
import ResponseWithContinuationEnvironment from '../model/ResponseWithContinuationEnvironment';

/**
* Environments service.
* @module api/EnvironmentsApi
* @version 2018-10-15
*/
export default class EnvironmentsApi {

    /**
    * Constructs a new EnvironmentsApi. 
    * @alias module:api/EnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the environmentsClaim operation.
     * @callback module:api/EnvironmentsApi~environmentsClaimCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claims the environment and assigns it to the user
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:api/EnvironmentsApi~environmentsClaimCallback} callback The callback function, accepting three arguments: error, data, response
     */
    environmentsClaim(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsClaim");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsClaim");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsClaim");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsClaim");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsClaim");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsClaim");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsClaim");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsCreateOrUpdate operation.
     * @callback module:api/EnvironmentsApi~environmentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing Environment.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:model/Environment} environment Represents an environment instance
     * @param {module:api/EnvironmentsApi~environmentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    environmentsCreateOrUpdate(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, callback) {
      let postBody = environment;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsCreateOrUpdate");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling environmentsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsDelete operation.
     * @callback module:api/EnvironmentsApi~environmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete environment. This operation can take a while to complete
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:api/EnvironmentsApi~environmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    environmentsDelete(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsDelete");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsDelete");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsDelete");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsDelete");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsGet operation.
     * @callback module:api/EnvironmentsApi~environmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environment
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param {module:api/EnvironmentsApi~environmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    environmentsGet(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsGet");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsGet");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsGet");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsGet");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsList operation.
     * @callback module:api/EnvironmentsApi~environmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environments in a given environment setting.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=networkInterface)'
     * @param {String} [filter] The filter to apply to the operation.
     * @param {Number} [top] The maximum number of resources to return from the operation.
     * @param {String} [orderby] The ordering expression for the results, using OData notation.
     * @param {module:api/EnvironmentsApi~environmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationEnvironment}
     */
    environmentsList(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsList");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsList");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsList");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseWithContinuationEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsResetPassword operation.
     * @callback module:api/EnvironmentsApi~environmentsResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the user password on an environment This operation can take a while to complete
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ResetPasswordPayload} resetPasswordPayload Represents the payload for resetting passwords.
     * @param {module:api/EnvironmentsApi~environmentsResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    environmentsResetPassword(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, resetPasswordPayload, callback) {
      let postBody = resetPasswordPayload;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsResetPassword");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsResetPassword");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsResetPassword");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsResetPassword");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsResetPassword");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsResetPassword");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsResetPassword");
      }
      // verify the required parameter 'resetPasswordPayload' is set
      if (resetPasswordPayload === undefined || resetPasswordPayload === null) {
        throw new Error("Missing the required parameter 'resetPasswordPayload' when calling environmentsResetPassword");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsStart operation.
     * @callback module:api/EnvironmentsApi~environmentsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:api/EnvironmentsApi~environmentsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    environmentsStart(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsStart");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsStart");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsStart");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsStart");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsStop operation.
     * @callback module:api/EnvironmentsApi~environmentsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:api/EnvironmentsApi~environmentsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    environmentsStop(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsStop");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsStop");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsStop");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsStop");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsUpdate operation.
     * @callback module:api/EnvironmentsApi~environmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify properties of environments.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} labName The name of the lab.
     * @param {String} environmentSettingName The name of the environment Setting.
     * @param {String} environmentName The name of the environment.
     * @param {String} apiVersion Client API version.
     * @param {module:model/EnvironmentFragment} environment Represents an environment instance
     * @param {module:api/EnvironmentsApi~environmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    environmentsUpdate(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, callback) {
      let postBody = environment;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling environmentsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling environmentsUpdate");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling environmentsUpdate");
      }
      // verify the required parameter 'labName' is set
      if (labName === undefined || labName === null) {
        throw new Error("Missing the required parameter 'labName' when calling environmentsUpdate");
      }
      // verify the required parameter 'environmentSettingName' is set
      if (environmentSettingName === undefined || environmentSettingName === null) {
        throw new Error("Missing the required parameter 'environmentSettingName' when calling environmentsUpdate");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling environmentsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling environmentsUpdate");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling environmentsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName,
        'labName': labName,
        'environmentSettingName': environmentSettingName,
        'environmentName': environmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
