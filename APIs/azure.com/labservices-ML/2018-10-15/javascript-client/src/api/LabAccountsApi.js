/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import CreateLabProperties from '../model/CreateLabProperties';
import GetRegionalAvailabilityResponse from '../model/GetRegionalAvailabilityResponse';
import LabAccount from '../model/LabAccount';
import LabAccountFragment from '../model/LabAccountFragment';
import ResponseWithContinuationLabAccount from '../model/ResponseWithContinuationLabAccount';

/**
* LabAccounts service.
* @module api/LabAccountsApi
* @version 2018-10-15
*/
export default class LabAccountsApi {

    /**
    * Constructs a new LabAccountsApi. 
    * @alias module:api/LabAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the labAccountsCreateLab operation.
     * @callback module:api/LabAccountsApi~labAccountsCreateLabCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a lab in a lab account.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CreateLabProperties} createLabProperties Properties for creating a managed lab and a default environment setting
     * @param {module:api/LabAccountsApi~labAccountsCreateLabCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labAccountsCreateLab(subscriptionId, resourceGroupName, labAccountName, apiVersion, createLabProperties, callback) {
      let postBody = createLabProperties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsCreateLab");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsCreateLab");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsCreateLab");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsCreateLab");
      }
      // verify the required parameter 'createLabProperties' is set
      if (createLabProperties === undefined || createLabProperties === null) {
        throw new Error("Missing the required parameter 'createLabProperties' when calling labAccountsCreateLab");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/createLab', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsCreateOrUpdate operation.
     * @callback module:api/LabAccountsApi~labAccountsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace an existing Lab Account.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabAccount} labAccount Represents a lab account.
     * @param {module:api/LabAccountsApi~labAccountsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabAccount}
     */
    labAccountsCreateOrUpdate(subscriptionId, resourceGroupName, labAccountName, apiVersion, labAccount, callback) {
      let postBody = labAccount;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsCreateOrUpdate");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsCreateOrUpdate");
      }
      // verify the required parameter 'labAccount' is set
      if (labAccount === undefined || labAccount === null) {
        throw new Error("Missing the required parameter 'labAccount' when calling labAccountsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsDelete operation.
     * @callback module:api/LabAccountsApi~labAccountsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete lab account. This operation can take a while to complete
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabAccountsApi~labAccountsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    labAccountsDelete(subscriptionId, resourceGroupName, labAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsDelete");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsGet operation.
     * @callback module:api/LabAccountsApi~labAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lab account
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param {module:api/LabAccountsApi~labAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabAccount}
     */
    labAccountsGet(subscriptionId, resourceGroupName, labAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsGet");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsGetRegionalAvailability operation.
     * @callback module:api/LabAccountsApi~labAccountsGetRegionalAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegionalAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get regional availability information for each size category configured under a lab account
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/LabAccountsApi~labAccountsGetRegionalAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegionalAvailabilityResponse}
     */
    labAccountsGetRegionalAvailability(subscriptionId, resourceGroupName, labAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsGetRegionalAvailability");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsGetRegionalAvailability");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsGetRegionalAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsGetRegionalAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRegionalAvailabilityResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/getRegionalAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsListByResourceGroup operation.
     * @callback module:api/LabAccountsApi~labAccountsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLabAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lab accounts in a resource group.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param {String} [filter] The filter to apply to the operation.
     * @param {Number} [top] The maximum number of resources to return from the operation.
     * @param {String} [orderby] The ordering expression for the results, using OData notation.
     * @param {module:api/LabAccountsApi~labAccountsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLabAccount}
     */
    labAccountsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseWithContinuationLabAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsListBySubscription operation.
     * @callback module:api/LabAccountsApi~labAccountsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithContinuationLabAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lab accounts in a subscription.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=sizeConfiguration)'
     * @param {String} [filter] The filter to apply to the operation.
     * @param {Number} [top] The maximum number of resources to return from the operation.
     * @param {String} [orderby] The ordering expression for the results, using OData notation.
     * @param {module:api/LabAccountsApi~labAccountsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithContinuationLabAccount}
     */
    labAccountsListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseWithContinuationLabAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labAccountsUpdate operation.
     * @callback module:api/LabAccountsApi~labAccountsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify properties of lab accounts.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} labAccountName The name of the lab Account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/LabAccountFragment} labAccount Represents a lab account.
     * @param {module:api/LabAccountsApi~labAccountsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabAccount}
     */
    labAccountsUpdate(subscriptionId, resourceGroupName, labAccountName, apiVersion, labAccount, callback) {
      let postBody = labAccount;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling labAccountsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling labAccountsUpdate");
      }
      // verify the required parameter 'labAccountName' is set
      if (labAccountName === undefined || labAccountName === null) {
        throw new Error("Missing the required parameter 'labAccountName' when calling labAccountsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling labAccountsUpdate");
      }
      // verify the required parameter 'labAccount' is set
      if (labAccount === undefined || labAccount === null) {
        throw new Error("Missing the required parameter 'labAccount' when calling labAccountsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'labAccountName': labAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
