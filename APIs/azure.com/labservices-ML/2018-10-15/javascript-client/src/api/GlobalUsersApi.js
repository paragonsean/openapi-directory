/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import EnvironmentOperationsPayload from '../model/EnvironmentOperationsPayload';
import GetEnvironmentResponse from '../model/GetEnvironmentResponse';
import GetPersonalPreferencesResponse from '../model/GetPersonalPreferencesResponse';
import ListEnvironmentsPayload from '../model/ListEnvironmentsPayload';
import ListEnvironmentsResponse from '../model/ListEnvironmentsResponse';
import ListLabsResponse from '../model/ListLabsResponse';
import OperationBatchStatusPayload from '../model/OperationBatchStatusPayload';
import OperationBatchStatusResponse from '../model/OperationBatchStatusResponse';
import OperationStatusPayload from '../model/OperationStatusPayload';
import OperationStatusResponse from '../model/OperationStatusResponse';
import PersonalPreferencesOperationsPayload from '../model/PersonalPreferencesOperationsPayload';
import RegisterPayload from '../model/RegisterPayload';
import ResetPasswordPayload from '../model/ResetPasswordPayload';

/**
* GlobalUsers service.
* @module api/GlobalUsersApi
* @version 2018-10-15
*/
export default class GlobalUsersApi {

    /**
    * Constructs a new GlobalUsersApi. 
    * @alias module:api/GlobalUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the globalUsersGetEnvironment operation.
     * @callback module:api/GlobalUsersApi~globalUsersGetEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the virtual machine details
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/EnvironmentOperationsPayload} environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify the $expand query. Example: 'properties($expand=environment)'
     * @param {module:api/GlobalUsersApi~globalUsersGetEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEnvironmentResponse}
     */
    globalUsersGetEnvironment(userName, apiVersion, environmentOperationsPayload, opts, callback) {
      opts = opts || {};
      let postBody = environmentOperationsPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersGetEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersGetEnvironment");
      }
      // verify the required parameter 'environmentOperationsPayload' is set
      if (environmentOperationsPayload === undefined || environmentOperationsPayload === null) {
        throw new Error("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersGetEnvironment");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        '$expand': opts['expand'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEnvironmentResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/getEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersGetOperationBatchStatus operation.
     * @callback module:api/GlobalUsersApi~globalUsersGetOperationBatchStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationBatchStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get batch operation status
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/OperationBatchStatusPayload} operationBatchStatusPayload Payload to get the status of an operation
     * @param {module:api/GlobalUsersApi~globalUsersGetOperationBatchStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationBatchStatusResponse}
     */
    globalUsersGetOperationBatchStatus(userName, apiVersion, operationBatchStatusPayload, callback) {
      let postBody = operationBatchStatusPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersGetOperationBatchStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersGetOperationBatchStatus");
      }
      // verify the required parameter 'operationBatchStatusPayload' is set
      if (operationBatchStatusPayload === undefined || operationBatchStatusPayload === null) {
        throw new Error("Missing the required parameter 'operationBatchStatusPayload' when calling globalUsersGetOperationBatchStatus");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationBatchStatusResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/getOperationBatchStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersGetOperationStatus operation.
     * @callback module:api/GlobalUsersApi~globalUsersGetOperationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of long running operation
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/OperationStatusPayload} operationStatusPayload Payload to get the status of an operation
     * @param {module:api/GlobalUsersApi~globalUsersGetOperationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatusResponse}
     */
    globalUsersGetOperationStatus(userName, apiVersion, operationStatusPayload, callback) {
      let postBody = operationStatusPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersGetOperationStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersGetOperationStatus");
      }
      // verify the required parameter 'operationStatusPayload' is set
      if (operationStatusPayload === undefined || operationStatusPayload === null) {
        throw new Error("Missing the required parameter 'operationStatusPayload' when calling globalUsersGetOperationStatus");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatusResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/getOperationStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersGetPersonalPreferences operation.
     * @callback module:api/GlobalUsersApi~globalUsersGetPersonalPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPersonalPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get personal preferences for a user
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/PersonalPreferencesOperationsPayload} personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect
     * @param {module:api/GlobalUsersApi~globalUsersGetPersonalPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPersonalPreferencesResponse}
     */
    globalUsersGetPersonalPreferences(userName, apiVersion, personalPreferencesOperationsPayload, callback) {
      let postBody = personalPreferencesOperationsPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersGetPersonalPreferences");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersGetPersonalPreferences");
      }
      // verify the required parameter 'personalPreferencesOperationsPayload' is set
      if (personalPreferencesOperationsPayload === undefined || personalPreferencesOperationsPayload === null) {
        throw new Error("Missing the required parameter 'personalPreferencesOperationsPayload' when calling globalUsersGetPersonalPreferences");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPersonalPreferencesResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/getPersonalPreferences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersListEnvironments operation.
     * @callback module:api/GlobalUsersApi~globalUsersListEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnvironmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Environments for the user
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ListEnvironmentsPayload} listEnvironmentsPayload Represents the payload to list environments owned by a user
     * @param {module:api/GlobalUsersApi~globalUsersListEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnvironmentsResponse}
     */
    globalUsersListEnvironments(userName, apiVersion, listEnvironmentsPayload, callback) {
      let postBody = listEnvironmentsPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersListEnvironments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersListEnvironments");
      }
      // verify the required parameter 'listEnvironmentsPayload' is set
      if (listEnvironmentsPayload === undefined || listEnvironmentsPayload === null) {
        throw new Error("Missing the required parameter 'listEnvironmentsPayload' when calling globalUsersListEnvironments");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEnvironmentsResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/listEnvironments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersListLabs operation.
     * @callback module:api/GlobalUsersApi~globalUsersListLabsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labs for the user.
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:api/GlobalUsersApi~globalUsersListLabsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabsResponse}
     */
    globalUsersListLabs(userName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersListLabs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersListLabs");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLabsResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/listLabs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersRegister operation.
     * @callback module:api/GlobalUsersApi~globalUsersRegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user to a managed lab
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/RegisterPayload} registerPayload Represents payload for Register action.
     * @param {module:api/GlobalUsersApi~globalUsersRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalUsersRegister(userName, apiVersion, registerPayload, callback) {
      let postBody = registerPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersRegister");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersRegister");
      }
      // verify the required parameter 'registerPayload' is set
      if (registerPayload === undefined || registerPayload === null) {
        throw new Error("Missing the required parameter 'registerPayload' when calling globalUsersRegister");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersResetPassword operation.
     * @callback module:api/GlobalUsersApi~globalUsersResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the user password on an environment This operation can take a while to complete
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ResetPasswordPayload} resetPasswordPayload Represents the payload for resetting passwords.
     * @param {module:api/GlobalUsersApi~globalUsersResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalUsersResetPassword(userName, apiVersion, resetPasswordPayload, callback) {
      let postBody = resetPasswordPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersResetPassword");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersResetPassword");
      }
      // verify the required parameter 'resetPasswordPayload' is set
      if (resetPasswordPayload === undefined || resetPasswordPayload === null) {
        throw new Error("Missing the required parameter 'resetPasswordPayload' when calling globalUsersResetPassword");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersStartEnvironment operation.
     * @callback module:api/GlobalUsersApi~globalUsersStartEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/EnvironmentOperationsPayload} environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect
     * @param {module:api/GlobalUsersApi~globalUsersStartEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalUsersStartEnvironment(userName, apiVersion, environmentOperationsPayload, callback) {
      let postBody = environmentOperationsPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersStartEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersStartEnvironment");
      }
      // verify the required parameter 'environmentOperationsPayload' is set
      if (environmentOperationsPayload === undefined || environmentOperationsPayload === null) {
        throw new Error("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersStartEnvironment");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/startEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUsersStopEnvironment operation.
     * @callback module:api/GlobalUsersApi~globalUsersStopEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param {String} userName The name of the user.
     * @param {String} apiVersion Client API version.
     * @param {module:model/EnvironmentOperationsPayload} environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect
     * @param {module:api/GlobalUsersApi~globalUsersStopEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalUsersStopEnvironment(userName, apiVersion, environmentOperationsPayload, callback) {
      let postBody = environmentOperationsPayload;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling globalUsersStopEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUsersStopEnvironment");
      }
      // verify the required parameter 'environmentOperationsPayload' is set
      if (environmentOperationsPayload === undefined || environmentOperationsPayload === null) {
        throw new Error("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersStopEnvironment");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.LabServices/users/{userName}/stopEnvironment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
