# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SizeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_size: str=None, memory: float=None, number_of_cores: int=None, price: float=None):
        """SizeInfo - a model defined in OpenAPI

        :param compute_size: The compute_size of this SizeInfo.
        :param memory: The memory of this SizeInfo.
        :param number_of_cores: The number_of_cores of this SizeInfo.
        :param price: The price of this SizeInfo.
        """
        self.openapi_types = {
            'compute_size': str,
            'memory': float,
            'number_of_cores': int,
            'price': float
        }

        self.attribute_map = {
            'compute_size': 'computeSize',
            'memory': 'memory',
            'number_of_cores': 'numberOfCores',
            'price': 'price'
        }

        self._compute_size = compute_size
        self._memory = memory
        self._number_of_cores = number_of_cores
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SizeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SizeInfo of this SizeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_size(self):
        """Gets the compute_size of this SizeInfo.

        Represents the actual compute size, e.g. Standard_A2_v2.

        :return: The compute_size of this SizeInfo.
        :rtype: str
        """
        return self._compute_size

    @compute_size.setter
    def compute_size(self, compute_size):
        """Sets the compute_size of this SizeInfo.

        Represents the actual compute size, e.g. Standard_A2_v2.

        :param compute_size: The compute_size of this SizeInfo.
        :type compute_size: str
        """

        self._compute_size = compute_size

    @property
    def memory(self):
        """Gets the memory of this SizeInfo.

        The amount of memory available (in GB).

        :return: The memory of this SizeInfo.
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this SizeInfo.

        The amount of memory available (in GB).

        :param memory: The memory of this SizeInfo.
        :type memory: float
        """

        self._memory = memory

    @property
    def number_of_cores(self):
        """Gets the number_of_cores of this SizeInfo.

        The number of cores a VM of this size has.

        :return: The number_of_cores of this SizeInfo.
        :rtype: int
        """
        return self._number_of_cores

    @number_of_cores.setter
    def number_of_cores(self, number_of_cores):
        """Sets the number_of_cores of this SizeInfo.

        The number of cores a VM of this size has.

        :param number_of_cores: The number_of_cores of this SizeInfo.
        :type number_of_cores: int
        """

        self._number_of_cores = number_of_cores

    @property
    def price(self):
        """Gets the price of this SizeInfo.

        The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.

        :return: The price of this SizeInfo.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SizeInfo.

        The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.

        :param price: The price of this SizeInfo.
        :type price: float
        """

        self._price = price
