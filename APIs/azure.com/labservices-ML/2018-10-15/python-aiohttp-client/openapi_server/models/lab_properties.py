# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.latest_operation_result import LatestOperationResult
from openapi_server import util


class LabProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by_object_id: str=None, created_by_user_principal_name: str=None, created_date: datetime=None, invitation_code: str=None, latest_operation_result: LatestOperationResult=None, max_users_in_lab: int=None, provisioning_state: str=None, unique_identifier: str=None, usage_quota: str=None, user_access_mode: str=None, user_quota: int=None):
        """LabProperties - a model defined in OpenAPI

        :param created_by_object_id: The created_by_object_id of this LabProperties.
        :param created_by_user_principal_name: The created_by_user_principal_name of this LabProperties.
        :param created_date: The created_date of this LabProperties.
        :param invitation_code: The invitation_code of this LabProperties.
        :param latest_operation_result: The latest_operation_result of this LabProperties.
        :param max_users_in_lab: The max_users_in_lab of this LabProperties.
        :param provisioning_state: The provisioning_state of this LabProperties.
        :param unique_identifier: The unique_identifier of this LabProperties.
        :param usage_quota: The usage_quota of this LabProperties.
        :param user_access_mode: The user_access_mode of this LabProperties.
        :param user_quota: The user_quota of this LabProperties.
        """
        self.openapi_types = {
            'created_by_object_id': str,
            'created_by_user_principal_name': str,
            'created_date': datetime,
            'invitation_code': str,
            'latest_operation_result': LatestOperationResult,
            'max_users_in_lab': int,
            'provisioning_state': str,
            'unique_identifier': str,
            'usage_quota': str,
            'user_access_mode': str,
            'user_quota': int
        }

        self.attribute_map = {
            'created_by_object_id': 'createdByObjectId',
            'created_by_user_principal_name': 'createdByUserPrincipalName',
            'created_date': 'createdDate',
            'invitation_code': 'invitationCode',
            'latest_operation_result': 'latestOperationResult',
            'max_users_in_lab': 'maxUsersInLab',
            'provisioning_state': 'provisioningState',
            'unique_identifier': 'uniqueIdentifier',
            'usage_quota': 'usageQuota',
            'user_access_mode': 'userAccessMode',
            'user_quota': 'userQuota'
        }

        self._created_by_object_id = created_by_object_id
        self._created_by_user_principal_name = created_by_user_principal_name
        self._created_date = created_date
        self._invitation_code = invitation_code
        self._latest_operation_result = latest_operation_result
        self._max_users_in_lab = max_users_in_lab
        self._provisioning_state = provisioning_state
        self._unique_identifier = unique_identifier
        self._usage_quota = usage_quota
        self._user_access_mode = user_access_mode
        self._user_quota = user_quota

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabProperties of this LabProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by_object_id(self):
        """Gets the created_by_object_id of this LabProperties.

        Object id of the user that created the lab.

        :return: The created_by_object_id of this LabProperties.
        :rtype: str
        """
        return self._created_by_object_id

    @created_by_object_id.setter
    def created_by_object_id(self, created_by_object_id):
        """Sets the created_by_object_id of this LabProperties.

        Object id of the user that created the lab.

        :param created_by_object_id: The created_by_object_id of this LabProperties.
        :type created_by_object_id: str
        """

        self._created_by_object_id = created_by_object_id

    @property
    def created_by_user_principal_name(self):
        """Gets the created_by_user_principal_name of this LabProperties.

        Lab creator name

        :return: The created_by_user_principal_name of this LabProperties.
        :rtype: str
        """
        return self._created_by_user_principal_name

    @created_by_user_principal_name.setter
    def created_by_user_principal_name(self, created_by_user_principal_name):
        """Sets the created_by_user_principal_name of this LabProperties.

        Lab creator name

        :param created_by_user_principal_name: The created_by_user_principal_name of this LabProperties.
        :type created_by_user_principal_name: str
        """

        self._created_by_user_principal_name = created_by_user_principal_name

    @property
    def created_date(self):
        """Gets the created_date of this LabProperties.

        Creation date for the lab

        :return: The created_date of this LabProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this LabProperties.

        Creation date for the lab

        :param created_date: The created_date of this LabProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def invitation_code(self):
        """Gets the invitation_code of this LabProperties.

        Invitation code that users can use to join a lab.

        :return: The invitation_code of this LabProperties.
        :rtype: str
        """
        return self._invitation_code

    @invitation_code.setter
    def invitation_code(self, invitation_code):
        """Sets the invitation_code of this LabProperties.

        Invitation code that users can use to join a lab.

        :param invitation_code: The invitation_code of this LabProperties.
        :type invitation_code: str
        """

        self._invitation_code = invitation_code

    @property
    def latest_operation_result(self):
        """Gets the latest_operation_result of this LabProperties.


        :return: The latest_operation_result of this LabProperties.
        :rtype: LatestOperationResult
        """
        return self._latest_operation_result

    @latest_operation_result.setter
    def latest_operation_result(self, latest_operation_result):
        """Sets the latest_operation_result of this LabProperties.


        :param latest_operation_result: The latest_operation_result of this LabProperties.
        :type latest_operation_result: LatestOperationResult
        """

        self._latest_operation_result = latest_operation_result

    @property
    def max_users_in_lab(self):
        """Gets the max_users_in_lab of this LabProperties.

        Maximum number of users allowed in the lab.

        :return: The max_users_in_lab of this LabProperties.
        :rtype: int
        """
        return self._max_users_in_lab

    @max_users_in_lab.setter
    def max_users_in_lab(self, max_users_in_lab):
        """Sets the max_users_in_lab of this LabProperties.

        Maximum number of users allowed in the lab.

        :param max_users_in_lab: The max_users_in_lab of this LabProperties.
        :type max_users_in_lab: int
        """

        self._max_users_in_lab = max_users_in_lab

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this LabProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LabProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this LabProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this LabProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this LabProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this LabProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def usage_quota(self):
        """Gets the usage_quota of this LabProperties.

        Maximum duration a user can use an environment for in the lab.

        :return: The usage_quota of this LabProperties.
        :rtype: str
        """
        return self._usage_quota

    @usage_quota.setter
    def usage_quota(self, usage_quota):
        """Sets the usage_quota of this LabProperties.

        Maximum duration a user can use an environment for in the lab.

        :param usage_quota: The usage_quota of this LabProperties.
        :type usage_quota: str
        """

        self._usage_quota = usage_quota

    @property
    def user_access_mode(self):
        """Gets the user_access_mode of this LabProperties.

        Lab user access mode (open to all vs. restricted to those listed on the lab).

        :return: The user_access_mode of this LabProperties.
        :rtype: str
        """
        return self._user_access_mode

    @user_access_mode.setter
    def user_access_mode(self, user_access_mode):
        """Sets the user_access_mode of this LabProperties.

        Lab user access mode (open to all vs. restricted to those listed on the lab).

        :param user_access_mode: The user_access_mode of this LabProperties.
        :type user_access_mode: str
        """
        allowed_values = ["Restricted", "Open"]  # noqa: E501
        if user_access_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `user_access_mode` ({0}), must be one of {1}"
                .format(user_access_mode, allowed_values)
            )

        self._user_access_mode = user_access_mode

    @property
    def user_quota(self):
        """Gets the user_quota of this LabProperties.

        Maximum value MaxUsersInLab can be set to, as specified by the service

        :return: The user_quota of this LabProperties.
        :rtype: int
        """
        return self._user_quota

    @user_quota.setter
    def user_quota(self, user_quota):
        """Sets the user_quota of this LabProperties.

        Maximum value MaxUsersInLab can be set to, as specified by the service

        :param user_quota: The user_quota of this LabProperties.
        :type user_quota: int
        """

        self._user_quota = user_quota
