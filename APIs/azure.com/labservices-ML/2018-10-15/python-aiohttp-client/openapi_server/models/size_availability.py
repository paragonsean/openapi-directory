# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SizeAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_available: bool=None, size_category: str=None):
        """SizeAvailability - a model defined in OpenAPI

        :param is_available: The is_available of this SizeAvailability.
        :param size_category: The size_category of this SizeAvailability.
        """
        self.openapi_types = {
            'is_available': bool,
            'size_category': str
        }

        self.attribute_map = {
            'is_available': 'isAvailable',
            'size_category': 'sizeCategory'
        }

        self._is_available = is_available
        self._size_category = size_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SizeAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SizeAvailability of this SizeAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_available(self):
        """Gets the is_available of this SizeAvailability.

        Whether or not this size category is available

        :return: The is_available of this SizeAvailability.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this SizeAvailability.

        Whether or not this size category is available

        :param is_available: The is_available of this SizeAvailability.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def size_category(self):
        """Gets the size_category of this SizeAvailability.

        The category of the size (Basic, Standard, Performance).

        :return: The size_category of this SizeAvailability.
        :rtype: str
        """
        return self._size_category

    @size_category.setter
    def size_category(self, size_category):
        """Sets the size_category of this SizeAvailability.

        The category of the size (Basic, Standard, Performance).

        :param size_category: The size_category of this SizeAvailability.
        :type size_category: str
        """
        allowed_values = ["Basic", "Standard", "Performance"]  # noqa: E501
        if size_category not in allowed_values:
            raise ValueError(
                "Invalid value for `size_category` ({0}), must be one of {1}"
                .format(size_category, allowed_values)
            )

        self._size_category = size_category
