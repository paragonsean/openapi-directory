# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_vm import ReferenceVm
from openapi_server import util


class ResourceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cores: int=None, gallery_image_resource_id: str=None, id: str=None, image_name: str=None, reference_vm: ReferenceVm=None, size: str=None):
        """ResourceSettings - a model defined in OpenAPI

        :param cores: The cores of this ResourceSettings.
        :param gallery_image_resource_id: The gallery_image_resource_id of this ResourceSettings.
        :param id: The id of this ResourceSettings.
        :param image_name: The image_name of this ResourceSettings.
        :param reference_vm: The reference_vm of this ResourceSettings.
        :param size: The size of this ResourceSettings.
        """
        self.openapi_types = {
            'cores': int,
            'gallery_image_resource_id': str,
            'id': str,
            'image_name': str,
            'reference_vm': ReferenceVm,
            'size': str
        }

        self.attribute_map = {
            'cores': 'cores',
            'gallery_image_resource_id': 'galleryImageResourceId',
            'id': 'id',
            'image_name': 'imageName',
            'reference_vm': 'referenceVm',
            'size': 'size'
        }

        self._cores = cores
        self._gallery_image_resource_id = gallery_image_resource_id
        self._id = id
        self._image_name = image_name
        self._reference_vm = reference_vm
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSettings of this ResourceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cores(self):
        """Gets the cores of this ResourceSettings.

        The translated compute cores of the virtual machine

        :return: The cores of this ResourceSettings.
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this ResourceSettings.

        The translated compute cores of the virtual machine

        :param cores: The cores of this ResourceSettings.
        :type cores: int
        """

        self._cores = cores

    @property
    def gallery_image_resource_id(self):
        """Gets the gallery_image_resource_id of this ResourceSettings.

        The resource id of the gallery image used for creating the virtual machine

        :return: The gallery_image_resource_id of this ResourceSettings.
        :rtype: str
        """
        return self._gallery_image_resource_id

    @gallery_image_resource_id.setter
    def gallery_image_resource_id(self, gallery_image_resource_id):
        """Sets the gallery_image_resource_id of this ResourceSettings.

        The resource id of the gallery image used for creating the virtual machine

        :param gallery_image_resource_id: The gallery_image_resource_id of this ResourceSettings.
        :type gallery_image_resource_id: str
        """

        self._gallery_image_resource_id = gallery_image_resource_id

    @property
    def id(self):
        """Gets the id of this ResourceSettings.

        The unique id of the resource setting

        :return: The id of this ResourceSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceSettings.

        The unique id of the resource setting

        :param id: The id of this ResourceSettings.
        :type id: str
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this ResourceSettings.

        The name of the image used to created the environment setting

        :return: The image_name of this ResourceSettings.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ResourceSettings.

        The name of the image used to created the environment setting

        :param image_name: The image_name of this ResourceSettings.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def reference_vm(self):
        """Gets the reference_vm of this ResourceSettings.


        :return: The reference_vm of this ResourceSettings.
        :rtype: ReferenceVm
        """
        return self._reference_vm

    @reference_vm.setter
    def reference_vm(self, reference_vm):
        """Sets the reference_vm of this ResourceSettings.


        :param reference_vm: The reference_vm of this ResourceSettings.
        :type reference_vm: ReferenceVm
        """
        if reference_vm is None:
            raise ValueError("Invalid value for `reference_vm`, must not be `None`")

        self._reference_vm = reference_vm

    @property
    def size(self):
        """Gets the size of this ResourceSettings.

        The size of the virtual machine

        :return: The size of this ResourceSettings.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResourceSettings.

        The size of the virtual machine

        :param size: The size of this ResourceSettings.
        :type size: str
        """
        allowed_values = ["Basic", "Standard", "Performance"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size
