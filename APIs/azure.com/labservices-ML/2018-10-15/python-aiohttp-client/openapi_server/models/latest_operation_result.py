# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatestOperationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, error_message: str=None, http_method: str=None, operation_url: str=None, request_uri: str=None, status: str=None):
        """LatestOperationResult - a model defined in OpenAPI

        :param error_code: The error_code of this LatestOperationResult.
        :param error_message: The error_message of this LatestOperationResult.
        :param http_method: The http_method of this LatestOperationResult.
        :param operation_url: The operation_url of this LatestOperationResult.
        :param request_uri: The request_uri of this LatestOperationResult.
        :param status: The status of this LatestOperationResult.
        """
        self.openapi_types = {
            'error_code': str,
            'error_message': str,
            'http_method': str,
            'operation_url': str,
            'request_uri': str,
            'status': str
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'http_method': 'httpMethod',
            'operation_url': 'operationUrl',
            'request_uri': 'requestUri',
            'status': 'status'
        }

        self._error_code = error_code
        self._error_message = error_message
        self._http_method = http_method
        self._operation_url = operation_url
        self._request_uri = request_uri
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatestOperationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatestOperationResult of this LatestOperationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this LatestOperationResult.

        Error code on failure.

        :return: The error_code of this LatestOperationResult.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this LatestOperationResult.

        Error code on failure.

        :param error_code: The error_code of this LatestOperationResult.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this LatestOperationResult.

        The error message.

        :return: The error_message of this LatestOperationResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this LatestOperationResult.

        The error message.

        :param error_message: The error_message of this LatestOperationResult.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def http_method(self):
        """Gets the http_method of this LatestOperationResult.

        The HttpMethod - PUT/POST/DELETE for the operation.

        :return: The http_method of this LatestOperationResult.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this LatestOperationResult.

        The HttpMethod - PUT/POST/DELETE for the operation.

        :param http_method: The http_method of this LatestOperationResult.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def operation_url(self):
        """Gets the operation_url of this LatestOperationResult.

        The URL to use to check long-running operation status

        :return: The operation_url of this LatestOperationResult.
        :rtype: str
        """
        return self._operation_url

    @operation_url.setter
    def operation_url(self, operation_url):
        """Sets the operation_url of this LatestOperationResult.

        The URL to use to check long-running operation status

        :param operation_url: The operation_url of this LatestOperationResult.
        :type operation_url: str
        """

        self._operation_url = operation_url

    @property
    def request_uri(self):
        """Gets the request_uri of this LatestOperationResult.

        Request URI of the operation.

        :return: The request_uri of this LatestOperationResult.
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this LatestOperationResult.

        Request URI of the operation.

        :param request_uri: The request_uri of this LatestOperationResult.
        :type request_uri: str
        """

        self._request_uri = request_uri

    @property
    def status(self):
        """Gets the status of this LatestOperationResult.

        The current status of the operation.

        :return: The status of this LatestOperationResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LatestOperationResult.

        The current status of the operation.

        :param status: The status of this LatestOperationResult.
        :type status: str
        """

        self._status = status
