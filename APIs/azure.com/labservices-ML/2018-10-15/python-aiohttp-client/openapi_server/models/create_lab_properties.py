# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting_creation_parameters import EnvironmentSettingCreationParameters
from openapi_server.models.lab_creation_parameters import LabCreationParameters
from openapi_server import util


class CreateLabProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_setting_creation_parameters: EnvironmentSettingCreationParameters=None, lab_creation_parameters: LabCreationParameters=None, location: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateLabProperties - a model defined in OpenAPI

        :param environment_setting_creation_parameters: The environment_setting_creation_parameters of this CreateLabProperties.
        :param lab_creation_parameters: The lab_creation_parameters of this CreateLabProperties.
        :param location: The location of this CreateLabProperties.
        :param name: The name of this CreateLabProperties.
        :param tags: The tags of this CreateLabProperties.
        """
        self.openapi_types = {
            'environment_setting_creation_parameters': EnvironmentSettingCreationParameters,
            'lab_creation_parameters': LabCreationParameters,
            'location': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'environment_setting_creation_parameters': 'environmentSettingCreationParameters',
            'lab_creation_parameters': 'labCreationParameters',
            'location': 'location',
            'name': 'name',
            'tags': 'tags'
        }

        self._environment_setting_creation_parameters = environment_setting_creation_parameters
        self._lab_creation_parameters = lab_creation_parameters
        self._location = location
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLabProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLabProperties of this CreateLabProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_setting_creation_parameters(self):
        """Gets the environment_setting_creation_parameters of this CreateLabProperties.


        :return: The environment_setting_creation_parameters of this CreateLabProperties.
        :rtype: EnvironmentSettingCreationParameters
        """
        return self._environment_setting_creation_parameters

    @environment_setting_creation_parameters.setter
    def environment_setting_creation_parameters(self, environment_setting_creation_parameters):
        """Sets the environment_setting_creation_parameters of this CreateLabProperties.


        :param environment_setting_creation_parameters: The environment_setting_creation_parameters of this CreateLabProperties.
        :type environment_setting_creation_parameters: EnvironmentSettingCreationParameters
        """

        self._environment_setting_creation_parameters = environment_setting_creation_parameters

    @property
    def lab_creation_parameters(self):
        """Gets the lab_creation_parameters of this CreateLabProperties.


        :return: The lab_creation_parameters of this CreateLabProperties.
        :rtype: LabCreationParameters
        """
        return self._lab_creation_parameters

    @lab_creation_parameters.setter
    def lab_creation_parameters(self, lab_creation_parameters):
        """Sets the lab_creation_parameters of this CreateLabProperties.


        :param lab_creation_parameters: The lab_creation_parameters of this CreateLabProperties.
        :type lab_creation_parameters: LabCreationParameters
        """
        if lab_creation_parameters is None:
            raise ValueError("Invalid value for `lab_creation_parameters`, must not be `None`")

        self._lab_creation_parameters = lab_creation_parameters

    @property
    def location(self):
        """Gets the location of this CreateLabProperties.

        The location of the resource

        :return: The location of this CreateLabProperties.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateLabProperties.

        The location of the resource

        :param location: The location of this CreateLabProperties.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this CreateLabProperties.

        The name of the resource

        :return: The name of this CreateLabProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLabProperties.

        The name of the resource

        :param name: The name of this CreateLabProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateLabProperties.

        The tags of the resource.

        :return: The tags of this CreateLabProperties.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLabProperties.

        The tags of the resource.

        :param tags: The tags of this CreateLabProperties.
        :type tags: Dict[str, str]
        """

        self._tags = tags
