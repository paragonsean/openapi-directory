# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddUsersPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_addresses: List[str]=None):
        """AddUsersPayload - a model defined in OpenAPI

        :param email_addresses: The email_addresses of this AddUsersPayload.
        """
        self.openapi_types = {
            'email_addresses': List[str]
        }

        self.attribute_map = {
            'email_addresses': 'emailAddresses'
        }

        self._email_addresses = email_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUsersPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUsersPayload of this AddUsersPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_addresses(self):
        """Gets the email_addresses of this AddUsersPayload.

        List of user emails addresses to add to the lab.

        :return: The email_addresses of this AddUsersPayload.
        :rtype: List[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this AddUsersPayload.

        List of user emails addresses to add to the lab.

        :param email_addresses: The email_addresses of this AddUsersPayload.
        :type email_addresses: List[str]
        """
        if email_addresses is None:
            raise ValueError("Invalid value for `email_addresses`, must not be `None`")

        self._email_addresses = email_addresses
