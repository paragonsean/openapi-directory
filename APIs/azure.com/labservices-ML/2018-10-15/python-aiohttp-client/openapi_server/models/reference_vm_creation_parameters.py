# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReferenceVmCreationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, user_name: str=None):
        """ReferenceVmCreationParameters - a model defined in OpenAPI

        :param password: The password of this ReferenceVmCreationParameters.
        :param user_name: The user_name of this ReferenceVmCreationParameters.
        """
        self.openapi_types = {
            'password': str,
            'user_name': str
        }

        self.attribute_map = {
            'password': 'password',
            'user_name': 'userName'
        }

        self._password = password
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceVmCreationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceVmCreationParameters of this ReferenceVmCreationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this ReferenceVmCreationParameters.

        The password of the virtual machine.

        :return: The password of this ReferenceVmCreationParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ReferenceVmCreationParameters.

        The password of the virtual machine.

        :param password: The password of this ReferenceVmCreationParameters.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def user_name(self):
        """Gets the user_name of this ReferenceVmCreationParameters.

        The username of the virtual machine

        :return: The user_name of this ReferenceVmCreationParameters.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ReferenceVmCreationParameters.

        The username of the virtual machine

        :param user_name: The user_name of this ReferenceVmCreationParameters.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
