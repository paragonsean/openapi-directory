# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.latest_operation_result import LatestOperationResult
from openapi_server import util


class UserProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, family_name: str=None, given_name: str=None, latest_operation_result: LatestOperationResult=None, provisioning_state: str=None, tenant_id: str=None, total_usage: str=None, unique_identifier: str=None):
        """UserProperties - a model defined in OpenAPI

        :param email: The email of this UserProperties.
        :param family_name: The family_name of this UserProperties.
        :param given_name: The given_name of this UserProperties.
        :param latest_operation_result: The latest_operation_result of this UserProperties.
        :param provisioning_state: The provisioning_state of this UserProperties.
        :param tenant_id: The tenant_id of this UserProperties.
        :param total_usage: The total_usage of this UserProperties.
        :param unique_identifier: The unique_identifier of this UserProperties.
        """
        self.openapi_types = {
            'email': str,
            'family_name': str,
            'given_name': str,
            'latest_operation_result': LatestOperationResult,
            'provisioning_state': str,
            'tenant_id': str,
            'total_usage': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'email': 'email',
            'family_name': 'familyName',
            'given_name': 'givenName',
            'latest_operation_result': 'latestOperationResult',
            'provisioning_state': 'provisioningState',
            'tenant_id': 'tenantId',
            'total_usage': 'totalUsage',
            'unique_identifier': 'uniqueIdentifier'
        }

        self._email = email
        self._family_name = family_name
        self._given_name = given_name
        self._latest_operation_result = latest_operation_result
        self._provisioning_state = provisioning_state
        self._tenant_id = tenant_id
        self._total_usage = total_usage
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProperties of this UserProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserProperties.

        The user email address, as it was specified during registration.

        :return: The email of this UserProperties.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProperties.

        The user email address, as it was specified during registration.

        :param email: The email of this UserProperties.
        :type email: str
        """

        self._email = email

    @property
    def family_name(self):
        """Gets the family_name of this UserProperties.

        The user family name, as it was specified during registration.

        :return: The family_name of this UserProperties.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserProperties.

        The user family name, as it was specified during registration.

        :param family_name: The family_name of this UserProperties.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this UserProperties.

        The user given name, as it was specified during registration.

        :return: The given_name of this UserProperties.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserProperties.

        The user given name, as it was specified during registration.

        :param given_name: The given_name of this UserProperties.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def latest_operation_result(self):
        """Gets the latest_operation_result of this UserProperties.


        :return: The latest_operation_result of this UserProperties.
        :rtype: LatestOperationResult
        """
        return self._latest_operation_result

    @latest_operation_result.setter
    def latest_operation_result(self, latest_operation_result):
        """Sets the latest_operation_result of this UserProperties.


        :param latest_operation_result: The latest_operation_result of this UserProperties.
        :type latest_operation_result: LatestOperationResult
        """

        self._latest_operation_result = latest_operation_result

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this UserProperties.

        The provisioning status of the resource.

        :return: The provisioning_state of this UserProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this UserProperties.

        The provisioning status of the resource.

        :param provisioning_state: The provisioning_state of this UserProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserProperties.

        The user tenant ID, as it was specified during registration.

        :return: The tenant_id of this UserProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserProperties.

        The user tenant ID, as it was specified during registration.

        :param tenant_id: The tenant_id of this UserProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def total_usage(self):
        """Gets the total_usage of this UserProperties.

        How long the user has used his VMs in this lab

        :return: The total_usage of this UserProperties.
        :rtype: str
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this UserProperties.

        How long the user has used his VMs in this lab

        :param total_usage: The total_usage of this UserProperties.
        :type total_usage: str
        """

        self._total_usage = total_usage

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this UserProperties.

        The unique immutable identifier of a resource (Guid).

        :return: The unique_identifier of this UserProperties.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this UserProperties.

        The unique immutable identifier of a resource (Guid).

        :param unique_identifier: The unique_identifier of this UserProperties.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
