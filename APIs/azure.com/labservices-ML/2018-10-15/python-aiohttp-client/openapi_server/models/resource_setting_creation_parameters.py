# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_vm_creation_parameters import ReferenceVmCreationParameters
from openapi_server import util


class ResourceSettingCreationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gallery_image_resource_id: str=None, location: str=None, name: str=None, reference_vm_creation_parameters: ReferenceVmCreationParameters=None, size: str=None):
        """ResourceSettingCreationParameters - a model defined in OpenAPI

        :param gallery_image_resource_id: The gallery_image_resource_id of this ResourceSettingCreationParameters.
        :param location: The location of this ResourceSettingCreationParameters.
        :param name: The name of this ResourceSettingCreationParameters.
        :param reference_vm_creation_parameters: The reference_vm_creation_parameters of this ResourceSettingCreationParameters.
        :param size: The size of this ResourceSettingCreationParameters.
        """
        self.openapi_types = {
            'gallery_image_resource_id': str,
            'location': str,
            'name': str,
            'reference_vm_creation_parameters': ReferenceVmCreationParameters,
            'size': str
        }

        self.attribute_map = {
            'gallery_image_resource_id': 'galleryImageResourceId',
            'location': 'location',
            'name': 'name',
            'reference_vm_creation_parameters': 'referenceVmCreationParameters',
            'size': 'size'
        }

        self._gallery_image_resource_id = gallery_image_resource_id
        self._location = location
        self._name = name
        self._reference_vm_creation_parameters = reference_vm_creation_parameters
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSettingCreationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSettingCreationParameters of this ResourceSettingCreationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gallery_image_resource_id(self):
        """Gets the gallery_image_resource_id of this ResourceSettingCreationParameters.

        The resource id of the gallery image used for creating the virtual machine

        :return: The gallery_image_resource_id of this ResourceSettingCreationParameters.
        :rtype: str
        """
        return self._gallery_image_resource_id

    @gallery_image_resource_id.setter
    def gallery_image_resource_id(self, gallery_image_resource_id):
        """Sets the gallery_image_resource_id of this ResourceSettingCreationParameters.

        The resource id of the gallery image used for creating the virtual machine

        :param gallery_image_resource_id: The gallery_image_resource_id of this ResourceSettingCreationParameters.
        :type gallery_image_resource_id: str
        """
        if gallery_image_resource_id is None:
            raise ValueError("Invalid value for `gallery_image_resource_id`, must not be `None`")

        self._gallery_image_resource_id = gallery_image_resource_id

    @property
    def location(self):
        """Gets the location of this ResourceSettingCreationParameters.

        The location where the virtual machine will live

        :return: The location of this ResourceSettingCreationParameters.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResourceSettingCreationParameters.

        The location where the virtual machine will live

        :param location: The location of this ResourceSettingCreationParameters.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ResourceSettingCreationParameters.

        The name of the resource setting

        :return: The name of this ResourceSettingCreationParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSettingCreationParameters.

        The name of the resource setting

        :param name: The name of this ResourceSettingCreationParameters.
        :type name: str
        """

        self._name = name

    @property
    def reference_vm_creation_parameters(self):
        """Gets the reference_vm_creation_parameters of this ResourceSettingCreationParameters.


        :return: The reference_vm_creation_parameters of this ResourceSettingCreationParameters.
        :rtype: ReferenceVmCreationParameters
        """
        return self._reference_vm_creation_parameters

    @reference_vm_creation_parameters.setter
    def reference_vm_creation_parameters(self, reference_vm_creation_parameters):
        """Sets the reference_vm_creation_parameters of this ResourceSettingCreationParameters.


        :param reference_vm_creation_parameters: The reference_vm_creation_parameters of this ResourceSettingCreationParameters.
        :type reference_vm_creation_parameters: ReferenceVmCreationParameters
        """
        if reference_vm_creation_parameters is None:
            raise ValueError("Invalid value for `reference_vm_creation_parameters`, must not be `None`")

        self._reference_vm_creation_parameters = reference_vm_creation_parameters

    @property
    def size(self):
        """Gets the size of this ResourceSettingCreationParameters.

        The size of the virtual machine

        :return: The size of this ResourceSettingCreationParameters.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResourceSettingCreationParameters.

        The size of the virtual machine

        :param size: The size of this ResourceSettingCreationParameters.
        :type size: str
        """
        allowed_values = ["Basic", "Standard", "Performance"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size
