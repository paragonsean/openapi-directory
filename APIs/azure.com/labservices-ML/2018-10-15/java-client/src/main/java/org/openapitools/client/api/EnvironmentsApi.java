/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.EnvironmentFragment;
import org.openapitools.client.model.ResetPasswordPayload;
import org.openapitools.client.model.ResponseWithContinuationEnvironment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for environmentsClaim
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsClaimCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/claim"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsClaimValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsClaim(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsClaim(Async)");
        }

        return environmentsClaimCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Claims the environment and assigns it to the user
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsClaim(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        environmentsClaimWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion);
    }

    /**
     * 
     * Claims the environment and assigns it to the user
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsClaimWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsClaimValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Claims the environment and assigns it to the user
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsClaimAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsClaimValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, Environment environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, Environment environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling environmentsCreateOrUpdate(Async)");
        }

        return environmentsCreateOrUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, _callback);

    }

    /**
     * 
     * Create or replace an existing Environment.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Environment environmentsCreateOrUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, Environment environment) throws ApiException {
        ApiResponse<Environment> localVarResp = environmentsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or replace an existing Environment.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> environmentsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, Environment environment) throws ApiException {
        okhttp3.Call localVarCall = environmentsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or replace an existing Environment.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, Environment environment, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsDeleteCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsDelete(Async)");
        }

        return environmentsDeleteCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Delete environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsDelete(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        environmentsDeleteWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion);
    }

    /**
     * 
     * Delete environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsDeleteAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsGetCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsGet(Async)");
        }

        return environmentsGetCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Get environment
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Environment environmentsGet(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<Environment> localVarResp = environmentsGetWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Get environment
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> environmentsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = environmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get environment
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsGetAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, String $expand, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsList
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsList(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsList(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsList(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsList(Async)");
        }

        return environmentsListCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, $filter, $top, $orderby, _callback);

    }

    /**
     * 
     * List environments in a given environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ResponseWithContinuationEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ResponseWithContinuationEnvironment environmentsList(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<ResponseWithContinuationEnvironment> localVarResp = environmentsListWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * List environments in a given environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ApiResponse&lt;ResponseWithContinuationEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseWithContinuationEnvironment> environmentsListWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = environmentsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List environments in a given environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;networkInterface)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsListAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback<ResponseWithContinuationEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsResetPassword
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsResetPasswordCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetPasswordPayload;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/resetPassword"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsResetPasswordValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsResetPassword(Async)");
        }

        // verify the required parameter 'resetPasswordPayload' is set
        if (resetPasswordPayload == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordPayload' when calling environmentsResetPassword(Async)");
        }

        return environmentsResetPasswordCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, resetPasswordPayload, _callback);

    }

    /**
     * 
     * Resets the user password on an environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsResetPassword(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, ResetPasswordPayload resetPasswordPayload) throws ApiException {
        environmentsResetPasswordWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, resetPasswordPayload);
    }

    /**
     * 
     * Resets the user password on an environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsResetPasswordWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, ResetPasswordPayload resetPasswordPayload) throws ApiException {
        okhttp3.Call localVarCall = environmentsResetPasswordValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, resetPasswordPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resets the user password on an environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsResetPasswordAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsResetPasswordValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, resetPasswordPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsStart
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsStartCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsStart(Async)");
        }

        return environmentsStartCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsStart(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        environmentsStartWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion);
    }

    /**
     * 
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsStartWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsStartValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsStartAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsStartValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsStop
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsStopCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsStop(Async)");
        }

        return environmentsStopCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);

    }

    /**
     * 
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentsStop(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        environmentsStopWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion);
    }

    /**
     * 
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentsStopWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentsStopValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsStopAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsStopValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentsUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, EnvironmentFragment environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/environments/{environmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()))
            .replace("{" + "environmentName" + "}", localVarApiClient.escapeString(environmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, EnvironmentFragment environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentsUpdate(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling environmentsUpdate(Async)");
        }

        return environmentsUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, _callback);

    }

    /**
     * 
     * Modify properties of environments.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Environment environmentsUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, EnvironmentFragment environment) throws ApiException {
        ApiResponse<Environment> localVarResp = environmentsUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify properties of environments.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> environmentsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, EnvironmentFragment environment) throws ApiException {
        okhttp3.Call localVarCall = environmentsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify properties of environments.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param environmentName The name of the environment. (required)
     * @param apiVersion Client API version. (required)
     * @param environment Represents an environment instance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentsUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String environmentName, String apiVersion, EnvironmentFragment environment, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, environmentName, apiVersion, environment, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
