/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddUsersPayload;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Lab;
import org.openapitools.client.model.LabFragment;
import org.openapitools.client.model.ResponseWithContinuationLab;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LabsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LabsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LabsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for labsAddUsers
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param addUsersPayload Payload for Add Users operation on a Lab. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsAddUsersCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, AddUsersPayload addUsersPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addUsersPayload;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/addUsers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsAddUsersValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, AddUsersPayload addUsersPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsAddUsers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsAddUsers(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsAddUsers(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsAddUsers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsAddUsers(Async)");
        }

        // verify the required parameter 'addUsersPayload' is set
        if (addUsersPayload == null) {
            throw new ApiException("Missing the required parameter 'addUsersPayload' when calling labsAddUsers(Async)");
        }

        return labsAddUsersCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, addUsersPayload, _callback);

    }

    /**
     * 
     * Add users to a lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param addUsersPayload Payload for Add Users operation on a Lab. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void labsAddUsers(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, AddUsersPayload addUsersPayload) throws ApiException {
        labsAddUsersWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, addUsersPayload);
    }

    /**
     * 
     * Add users to a lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param addUsersPayload Payload for Add Users operation on a Lab. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> labsAddUsersWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, AddUsersPayload addUsersPayload) throws ApiException {
        okhttp3.Call localVarCall = labsAddUsersValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, addUsersPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add users to a lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param addUsersPayload Payload for Add Users operation on a Lab. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsAddUsersAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, AddUsersPayload addUsersPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsAddUsersValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, addUsersPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, Lab lab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lab;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, Lab lab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'lab' is set
        if (lab == null) {
            throw new ApiException("Missing the required parameter 'lab' when calling labsCreateOrUpdate(Async)");
        }

        return labsCreateOrUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, _callback);

    }

    /**
     * 
     * Create or replace an existing Lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @return Lab
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Lab labsCreateOrUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, Lab lab) throws ApiException {
        ApiResponse<Lab> localVarResp = labsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or replace an existing Lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @return ApiResponse&lt;Lab&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Lab> labsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, Lab lab) throws ApiException {
        okhttp3.Call localVarCall = labsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, null);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or replace an existing Lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, Lab lab, final ApiCallback<Lab> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, _callback);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsDeleteCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsDelete(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsDelete(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsDelete(Async)");
        }

        return labsDeleteCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, _callback);

    }

    /**
     * 
     * Delete lab. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void labsDelete(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion) throws ApiException {
        labsDeleteWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion);
    }

    /**
     * 
     * Delete lab. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> labsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = labsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete lab. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsDeleteAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsGetCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsGet(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsGet(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsGet(Async)");
        }

        return labsGetCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Get lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @return Lab
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Lab labsGet(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<Lab> localVarResp = labsGetWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Get lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @return ApiResponse&lt;Lab&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Lab> labsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = labsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get lab
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsGetAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, final ApiCallback<Lab> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsList
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsListCall(String subscriptionId, String resourceGroupName, String labAccountName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsList(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsList(Async)");
        }

        return labsListCall(subscriptionId, resourceGroupName, labAccountName, apiVersion, $expand, $filter, $top, $orderby, _callback);

    }

    /**
     * 
     * List labs in a given lab account.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ResponseWithContinuationLab
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ResponseWithContinuationLab labsList(String subscriptionId, String resourceGroupName, String labAccountName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<ResponseWithContinuationLab> localVarResp = labsListWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, apiVersion, $expand, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * List labs in a given lab account.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ApiResponse&lt;ResponseWithContinuationLab&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseWithContinuationLab> labsListWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = labsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, apiVersion, $expand, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationLab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List labs in a given lab account.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;maxUsersInLab)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsListAsync(String subscriptionId, String resourceGroupName, String labAccountName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback<ResponseWithContinuationLab> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, apiVersion, $expand, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationLab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsRegister
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsRegisterCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/register"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsRegisterValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsRegister(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsRegister(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsRegister(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsRegister(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsRegister(Async)");
        }

        return labsRegisterCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, _callback);

    }

    /**
     * 
     * Register to managed lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void labsRegister(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion) throws ApiException {
        labsRegisterWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion);
    }

    /**
     * 
     * Register to managed lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> labsRegisterWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = labsRegisterValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Register to managed lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsRegisterAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsRegisterValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for labsUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, LabFragment lab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lab;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, LabFragment lab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling labsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling labsUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling labsUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling labsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling labsUpdate(Async)");
        }

        // verify the required parameter 'lab' is set
        if (lab == null) {
            throw new ApiException("Missing the required parameter 'lab' when calling labsUpdate(Async)");
        }

        return labsUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, _callback);

    }

    /**
     * 
     * Modify properties of labs.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @return Lab
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public Lab labsUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, LabFragment lab) throws ApiException {
        ApiResponse<Lab> localVarResp = labsUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify properties of labs.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @return ApiResponse&lt;Lab&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Lab> labsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, LabFragment lab) throws ApiException {
        okhttp3.Call localVarCall = labsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, null);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify properties of labs.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param lab Represents a lab. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labsUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, LabFragment lab, final ApiCallback<Lab> _callback) throws ApiException {

        okhttp3.Call localVarCall = labsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, lab, _callback);
        Type localVarReturnType = new TypeToken<Lab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
