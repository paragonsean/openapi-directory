/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SizeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a size category supported by this Lab Account (small, medium or large)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.069739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentSize {
  public static final String SERIALIZED_NAME_MAX_PRICE = "maxPrice";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private BigDecimal maxPrice;

  public static final String SERIALIZED_NAME_MIN_MEMORY = "minMemory";
  @SerializedName(SERIALIZED_NAME_MIN_MEMORY)
  private Double minMemory;

  public static final String SERIALIZED_NAME_MIN_NUMBER_OF_CORES = "minNumberOfCores";
  @SerializedName(SERIALIZED_NAME_MIN_NUMBER_OF_CORES)
  private Integer minNumberOfCores;

  /**
   * The size category
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    BASIC("Basic"),
    
    STANDARD("Standard"),
    
    PERFORMANCE("Performance");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_VM_SIZES = "vmSizes";
  @SerializedName(SERIALIZED_NAME_VM_SIZES)
  private List<SizeInfo> vmSizes = new ArrayList<>();

  public EnvironmentSize() {
  }

  public EnvironmentSize(
     BigDecimal maxPrice, 
     Double minMemory, 
     Integer minNumberOfCores
  ) {
    this();
    this.maxPrice = maxPrice;
    this.minMemory = minMemory;
    this.minNumberOfCores = minNumberOfCores;
  }

  /**
   * The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
   * @return maxPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxPrice() {
    return maxPrice;
  }



  /**
   * The amount of memory available (in GB). This is the minimum amount of memory within this tier.
   * @return minMemory
   */
  @javax.annotation.Nullable
  public Double getMinMemory() {
    return minMemory;
  }



  /**
   * The number of cores a VM of this size has. This is the minimum number of cores within this tier.
   * @return minNumberOfCores
   */
  @javax.annotation.Nullable
  public Integer getMinNumberOfCores() {
    return minNumberOfCores;
  }



  public EnvironmentSize name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * The size category
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }


  public EnvironmentSize vmSizes(List<SizeInfo> vmSizes) {
    this.vmSizes = vmSizes;
    return this;
  }

  public EnvironmentSize addVmSizesItem(SizeInfo vmSizesItem) {
    if (this.vmSizes == null) {
      this.vmSizes = new ArrayList<>();
    }
    this.vmSizes.add(vmSizesItem);
    return this;
  }

  /**
   * Represents a set of compute sizes that can serve this given size type
   * @return vmSizes
   */
  @javax.annotation.Nullable
  public List<SizeInfo> getVmSizes() {
    return vmSizes;
  }

  public void setVmSizes(List<SizeInfo> vmSizes) {
    this.vmSizes = vmSizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentSize environmentSize = (EnvironmentSize) o;
    return Objects.equals(this.maxPrice, environmentSize.maxPrice) &&
        Objects.equals(this.minMemory, environmentSize.minMemory) &&
        Objects.equals(this.minNumberOfCores, environmentSize.minNumberOfCores) &&
        Objects.equals(this.name, environmentSize.name) &&
        Objects.equals(this.vmSizes, environmentSize.vmSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPrice, minMemory, minNumberOfCores, name, vmSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentSize {\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    minMemory: ").append(toIndentedString(minMemory)).append("\n");
    sb.append("    minNumberOfCores: ").append(toIndentedString(minNumberOfCores)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vmSizes: ").append(toIndentedString(vmSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPrice");
    openapiFields.add("minMemory");
    openapiFields.add("minNumberOfCores");
    openapiFields.add("name");
    openapiFields.add("vmSizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentSize is not found in the empty JSON string", EnvironmentSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
      if (jsonObj.get("vmSizes") != null && !jsonObj.get("vmSizes").isJsonNull()) {
        JsonArray jsonArrayvmSizes = jsonObj.getAsJsonArray("vmSizes");
        if (jsonArrayvmSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vmSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vmSizes` to be an array in the JSON string but got `%s`", jsonObj.get("vmSizes").toString()));
          }

          // validate the optional field `vmSizes` (array)
          for (int i = 0; i < jsonArrayvmSizes.size(); i++) {
            SizeInfo.validateJsonElement(jsonArrayvmSizes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentSize.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentSize>() {
           @Override
           public void write(JsonWriter out, EnvironmentSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentSize
   * @throws IOException if the JSON string is invalid with respect to EnvironmentSize
   */
  public static EnvironmentSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentSize.class);
  }

  /**
   * Convert an instance of EnvironmentSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

