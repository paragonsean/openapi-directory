/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LatestOperationResult;
import org.openapitools.client.model.NetworkInterface;
import org.openapitools.client.model.ResourceSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an environment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.069739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentProperties {
  public static final String SERIALIZED_NAME_CLAIMED_BY_USER_NAME = "claimedByUserName";
  @SerializedName(SERIALIZED_NAME_CLAIMED_BY_USER_NAME)
  private String claimedByUserName;

  public static final String SERIALIZED_NAME_CLAIMED_BY_USER_OBJECT_ID = "claimedByUserObjectId";
  @SerializedName(SERIALIZED_NAME_CLAIMED_BY_USER_OBJECT_ID)
  private String claimedByUserObjectId;

  public static final String SERIALIZED_NAME_CLAIMED_BY_USER_PRINCIPAL_ID = "claimedByUserPrincipalId";
  @SerializedName(SERIALIZED_NAME_CLAIMED_BY_USER_PRINCIPAL_ID)
  private String claimedByUserPrincipalId;

  public static final String SERIALIZED_NAME_IS_CLAIMED = "isClaimed";
  @SerializedName(SERIALIZED_NAME_IS_CLAIMED)
  private Boolean isClaimed;

  public static final String SERIALIZED_NAME_LAST_KNOWN_POWER_STATE = "lastKnownPowerState";
  @SerializedName(SERIALIZED_NAME_LAST_KNOWN_POWER_STATE)
  private String lastKnownPowerState;

  public static final String SERIALIZED_NAME_LATEST_OPERATION_RESULT = "latestOperationResult";
  @SerializedName(SERIALIZED_NAME_LATEST_OPERATION_RESULT)
  private LatestOperationResult latestOperationResult;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE = "networkInterface";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE)
  private NetworkInterface networkInterface;

  public static final String SERIALIZED_NAME_PASSWORD_LAST_RESET = "passwordLastReset";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LAST_RESET)
  private OffsetDateTime passwordLastReset;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_SETS = "resourceSets";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SETS)
  private ResourceSet resourceSets;

  public static final String SERIALIZED_NAME_TOTAL_USAGE = "totalUsage";
  @SerializedName(SERIALIZED_NAME_TOTAL_USAGE)
  private String totalUsage;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public EnvironmentProperties() {
  }

  public EnvironmentProperties(
     String claimedByUserName, 
     String claimedByUserObjectId, 
     String claimedByUserPrincipalId, 
     Boolean isClaimed, 
     String lastKnownPowerState, 
     OffsetDateTime passwordLastReset, 
     String totalUsage
  ) {
    this();
    this.claimedByUserName = claimedByUserName;
    this.claimedByUserObjectId = claimedByUserObjectId;
    this.claimedByUserPrincipalId = claimedByUserPrincipalId;
    this.isClaimed = isClaimed;
    this.lastKnownPowerState = lastKnownPowerState;
    this.passwordLastReset = passwordLastReset;
    this.totalUsage = totalUsage;
  }

  /**
   * The name or email address of the user who has claimed the environment
   * @return claimedByUserName
   */
  @javax.annotation.Nullable
  public String getClaimedByUserName() {
    return claimedByUserName;
  }



  /**
   * The AAD object Id of the user who has claimed the environment
   * @return claimedByUserObjectId
   */
  @javax.annotation.Nullable
  public String getClaimedByUserObjectId() {
    return claimedByUserObjectId;
  }



  /**
   * The user principal Id of the user who has claimed the environment
   * @return claimedByUserPrincipalId
   */
  @javax.annotation.Nullable
  public String getClaimedByUserPrincipalId() {
    return claimedByUserPrincipalId;
  }



  /**
   * Is the environment claimed or not
   * @return isClaimed
   */
  @javax.annotation.Nullable
  public Boolean getIsClaimed() {
    return isClaimed;
  }



  /**
   * Last known power state of the environment
   * @return lastKnownPowerState
   */
  @javax.annotation.Nullable
  public String getLastKnownPowerState() {
    return lastKnownPowerState;
  }



  public EnvironmentProperties latestOperationResult(LatestOperationResult latestOperationResult) {
    this.latestOperationResult = latestOperationResult;
    return this;
  }

  /**
   * Get latestOperationResult
   * @return latestOperationResult
   */
  @javax.annotation.Nullable
  public LatestOperationResult getLatestOperationResult() {
    return latestOperationResult;
  }

  public void setLatestOperationResult(LatestOperationResult latestOperationResult) {
    this.latestOperationResult = latestOperationResult;
  }


  public EnvironmentProperties networkInterface(NetworkInterface networkInterface) {
    this.networkInterface = networkInterface;
    return this;
  }

  /**
   * Get networkInterface
   * @return networkInterface
   */
  @javax.annotation.Nullable
  public NetworkInterface getNetworkInterface() {
    return networkInterface;
  }

  public void setNetworkInterface(NetworkInterface networkInterface) {
    this.networkInterface = networkInterface;
  }


  /**
   * When the password was last reset on the environment.
   * @return passwordLastReset
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPasswordLastReset() {
    return passwordLastReset;
  }



  public EnvironmentProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public EnvironmentProperties resourceSets(ResourceSet resourceSets) {
    this.resourceSets = resourceSets;
    return this;
  }

  /**
   * Get resourceSets
   * @return resourceSets
   */
  @javax.annotation.Nullable
  public ResourceSet getResourceSets() {
    return resourceSets;
  }

  public void setResourceSets(ResourceSet resourceSets) {
    this.resourceSets = resourceSets;
  }


  /**
   * How long the environment has been used by a lab user
   * @return totalUsage
   */
  @javax.annotation.Nullable
  public String getTotalUsage() {
    return totalUsage;
  }



  public EnvironmentProperties uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentProperties environmentProperties = (EnvironmentProperties) o;
    return Objects.equals(this.claimedByUserName, environmentProperties.claimedByUserName) &&
        Objects.equals(this.claimedByUserObjectId, environmentProperties.claimedByUserObjectId) &&
        Objects.equals(this.claimedByUserPrincipalId, environmentProperties.claimedByUserPrincipalId) &&
        Objects.equals(this.isClaimed, environmentProperties.isClaimed) &&
        Objects.equals(this.lastKnownPowerState, environmentProperties.lastKnownPowerState) &&
        Objects.equals(this.latestOperationResult, environmentProperties.latestOperationResult) &&
        Objects.equals(this.networkInterface, environmentProperties.networkInterface) &&
        Objects.equals(this.passwordLastReset, environmentProperties.passwordLastReset) &&
        Objects.equals(this.provisioningState, environmentProperties.provisioningState) &&
        Objects.equals(this.resourceSets, environmentProperties.resourceSets) &&
        Objects.equals(this.totalUsage, environmentProperties.totalUsage) &&
        Objects.equals(this.uniqueIdentifier, environmentProperties.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimedByUserName, claimedByUserObjectId, claimedByUserPrincipalId, isClaimed, lastKnownPowerState, latestOperationResult, networkInterface, passwordLastReset, provisioningState, resourceSets, totalUsage, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentProperties {\n");
    sb.append("    claimedByUserName: ").append(toIndentedString(claimedByUserName)).append("\n");
    sb.append("    claimedByUserObjectId: ").append(toIndentedString(claimedByUserObjectId)).append("\n");
    sb.append("    claimedByUserPrincipalId: ").append(toIndentedString(claimedByUserPrincipalId)).append("\n");
    sb.append("    isClaimed: ").append(toIndentedString(isClaimed)).append("\n");
    sb.append("    lastKnownPowerState: ").append(toIndentedString(lastKnownPowerState)).append("\n");
    sb.append("    latestOperationResult: ").append(toIndentedString(latestOperationResult)).append("\n");
    sb.append("    networkInterface: ").append(toIndentedString(networkInterface)).append("\n");
    sb.append("    passwordLastReset: ").append(toIndentedString(passwordLastReset)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceSets: ").append(toIndentedString(resourceSets)).append("\n");
    sb.append("    totalUsage: ").append(toIndentedString(totalUsage)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimedByUserName");
    openapiFields.add("claimedByUserObjectId");
    openapiFields.add("claimedByUserPrincipalId");
    openapiFields.add("isClaimed");
    openapiFields.add("lastKnownPowerState");
    openapiFields.add("latestOperationResult");
    openapiFields.add("networkInterface");
    openapiFields.add("passwordLastReset");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceSets");
    openapiFields.add("totalUsage");
    openapiFields.add("uniqueIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentProperties is not found in the empty JSON string", EnvironmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("claimedByUserName") != null && !jsonObj.get("claimedByUserName").isJsonNull()) && !jsonObj.get("claimedByUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimedByUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimedByUserName").toString()));
      }
      if ((jsonObj.get("claimedByUserObjectId") != null && !jsonObj.get("claimedByUserObjectId").isJsonNull()) && !jsonObj.get("claimedByUserObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimedByUserObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimedByUserObjectId").toString()));
      }
      if ((jsonObj.get("claimedByUserPrincipalId") != null && !jsonObj.get("claimedByUserPrincipalId").isJsonNull()) && !jsonObj.get("claimedByUserPrincipalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimedByUserPrincipalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimedByUserPrincipalId").toString()));
      }
      if ((jsonObj.get("lastKnownPowerState") != null && !jsonObj.get("lastKnownPowerState").isJsonNull()) && !jsonObj.get("lastKnownPowerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastKnownPowerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastKnownPowerState").toString()));
      }
      // validate the optional field `latestOperationResult`
      if (jsonObj.get("latestOperationResult") != null && !jsonObj.get("latestOperationResult").isJsonNull()) {
        LatestOperationResult.validateJsonElement(jsonObj.get("latestOperationResult"));
      }
      // validate the optional field `networkInterface`
      if (jsonObj.get("networkInterface") != null && !jsonObj.get("networkInterface").isJsonNull()) {
        NetworkInterface.validateJsonElement(jsonObj.get("networkInterface"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `resourceSets`
      if (jsonObj.get("resourceSets") != null && !jsonObj.get("resourceSets").isJsonNull()) {
        ResourceSet.validateJsonElement(jsonObj.get("resourceSets"));
      }
      if ((jsonObj.get("totalUsage") != null && !jsonObj.get("totalUsage").isJsonNull()) && !jsonObj.get("totalUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalUsage").toString()));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentProperties>() {
           @Override
           public void write(JsonWriter out, EnvironmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentProperties
   * @throws IOException if the JSON string is invalid with respect to EnvironmentProperties
   */
  public static EnvironmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentProperties.class);
  }

  /**
   * Convert an instance of EnvironmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

