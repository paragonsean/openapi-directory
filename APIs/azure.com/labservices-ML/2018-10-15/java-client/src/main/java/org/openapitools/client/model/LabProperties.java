/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LatestOperationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a Lab.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.069739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabProperties {
  public static final String SERIALIZED_NAME_CREATED_BY_OBJECT_ID = "createdByObjectId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_OBJECT_ID)
  private String createdByObjectId;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_PRINCIPAL_NAME = "createdByUserPrincipalName";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_PRINCIPAL_NAME)
  private String createdByUserPrincipalName;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_INVITATION_CODE = "invitationCode";
  @SerializedName(SERIALIZED_NAME_INVITATION_CODE)
  private String invitationCode;

  public static final String SERIALIZED_NAME_LATEST_OPERATION_RESULT = "latestOperationResult";
  @SerializedName(SERIALIZED_NAME_LATEST_OPERATION_RESULT)
  private LatestOperationResult latestOperationResult;

  public static final String SERIALIZED_NAME_MAX_USERS_IN_LAB = "maxUsersInLab";
  @SerializedName(SERIALIZED_NAME_MAX_USERS_IN_LAB)
  private Integer maxUsersInLab;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_USAGE_QUOTA = "usageQuota";
  @SerializedName(SERIALIZED_NAME_USAGE_QUOTA)
  private String usageQuota;

  /**
   * Lab user access mode (open to all vs. restricted to those listed on the lab).
   */
  @JsonAdapter(UserAccessModeEnum.Adapter.class)
  public enum UserAccessModeEnum {
    RESTRICTED("Restricted"),
    
    OPEN("Open");

    private String value;

    UserAccessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserAccessModeEnum fromValue(String value) {
      for (UserAccessModeEnum b : UserAccessModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserAccessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserAccessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserAccessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserAccessModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserAccessModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_ACCESS_MODE = "userAccessMode";
  @SerializedName(SERIALIZED_NAME_USER_ACCESS_MODE)
  private UserAccessModeEnum userAccessMode;

  public static final String SERIALIZED_NAME_USER_QUOTA = "userQuota";
  @SerializedName(SERIALIZED_NAME_USER_QUOTA)
  private Integer userQuota;

  public LabProperties() {
  }

  public LabProperties(
     String createdByObjectId, 
     String createdByUserPrincipalName, 
     OffsetDateTime createdDate, 
     String invitationCode, 
     Integer userQuota
  ) {
    this();
    this.createdByObjectId = createdByObjectId;
    this.createdByUserPrincipalName = createdByUserPrincipalName;
    this.createdDate = createdDate;
    this.invitationCode = invitationCode;
    this.userQuota = userQuota;
  }

  /**
   * Object id of the user that created the lab.
   * @return createdByObjectId
   */
  @javax.annotation.Nullable
  public String getCreatedByObjectId() {
    return createdByObjectId;
  }



  /**
   * Lab creator name
   * @return createdByUserPrincipalName
   */
  @javax.annotation.Nullable
  public String getCreatedByUserPrincipalName() {
    return createdByUserPrincipalName;
  }



  /**
   * Creation date for the lab
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  /**
   * Invitation code that users can use to join a lab.
   * @return invitationCode
   */
  @javax.annotation.Nullable
  public String getInvitationCode() {
    return invitationCode;
  }



  public LabProperties latestOperationResult(LatestOperationResult latestOperationResult) {
    this.latestOperationResult = latestOperationResult;
    return this;
  }

  /**
   * Get latestOperationResult
   * @return latestOperationResult
   */
  @javax.annotation.Nullable
  public LatestOperationResult getLatestOperationResult() {
    return latestOperationResult;
  }

  public void setLatestOperationResult(LatestOperationResult latestOperationResult) {
    this.latestOperationResult = latestOperationResult;
  }


  public LabProperties maxUsersInLab(Integer maxUsersInLab) {
    this.maxUsersInLab = maxUsersInLab;
    return this;
  }

  /**
   * Maximum number of users allowed in the lab.
   * @return maxUsersInLab
   */
  @javax.annotation.Nullable
  public Integer getMaxUsersInLab() {
    return maxUsersInLab;
  }

  public void setMaxUsersInLab(Integer maxUsersInLab) {
    this.maxUsersInLab = maxUsersInLab;
  }


  public LabProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning status of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LabProperties uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The unique immutable identifier of a resource (Guid).
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public LabProperties usageQuota(String usageQuota) {
    this.usageQuota = usageQuota;
    return this;
  }

  /**
   * Maximum duration a user can use an environment for in the lab.
   * @return usageQuota
   */
  @javax.annotation.Nullable
  public String getUsageQuota() {
    return usageQuota;
  }

  public void setUsageQuota(String usageQuota) {
    this.usageQuota = usageQuota;
  }


  public LabProperties userAccessMode(UserAccessModeEnum userAccessMode) {
    this.userAccessMode = userAccessMode;
    return this;
  }

  /**
   * Lab user access mode (open to all vs. restricted to those listed on the lab).
   * @return userAccessMode
   */
  @javax.annotation.Nullable
  public UserAccessModeEnum getUserAccessMode() {
    return userAccessMode;
  }

  public void setUserAccessMode(UserAccessModeEnum userAccessMode) {
    this.userAccessMode = userAccessMode;
  }


  /**
   * Maximum value MaxUsersInLab can be set to, as specified by the service
   * @return userQuota
   */
  @javax.annotation.Nullable
  public Integer getUserQuota() {
    return userQuota;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabProperties labProperties = (LabProperties) o;
    return Objects.equals(this.createdByObjectId, labProperties.createdByObjectId) &&
        Objects.equals(this.createdByUserPrincipalName, labProperties.createdByUserPrincipalName) &&
        Objects.equals(this.createdDate, labProperties.createdDate) &&
        Objects.equals(this.invitationCode, labProperties.invitationCode) &&
        Objects.equals(this.latestOperationResult, labProperties.latestOperationResult) &&
        Objects.equals(this.maxUsersInLab, labProperties.maxUsersInLab) &&
        Objects.equals(this.provisioningState, labProperties.provisioningState) &&
        Objects.equals(this.uniqueIdentifier, labProperties.uniqueIdentifier) &&
        Objects.equals(this.usageQuota, labProperties.usageQuota) &&
        Objects.equals(this.userAccessMode, labProperties.userAccessMode) &&
        Objects.equals(this.userQuota, labProperties.userQuota);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdByObjectId, createdByUserPrincipalName, createdDate, invitationCode, latestOperationResult, maxUsersInLab, provisioningState, uniqueIdentifier, usageQuota, userAccessMode, userQuota);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabProperties {\n");
    sb.append("    createdByObjectId: ").append(toIndentedString(createdByObjectId)).append("\n");
    sb.append("    createdByUserPrincipalName: ").append(toIndentedString(createdByUserPrincipalName)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    invitationCode: ").append(toIndentedString(invitationCode)).append("\n");
    sb.append("    latestOperationResult: ").append(toIndentedString(latestOperationResult)).append("\n");
    sb.append("    maxUsersInLab: ").append(toIndentedString(maxUsersInLab)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    usageQuota: ").append(toIndentedString(usageQuota)).append("\n");
    sb.append("    userAccessMode: ").append(toIndentedString(userAccessMode)).append("\n");
    sb.append("    userQuota: ").append(toIndentedString(userQuota)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdByObjectId");
    openapiFields.add("createdByUserPrincipalName");
    openapiFields.add("createdDate");
    openapiFields.add("invitationCode");
    openapiFields.add("latestOperationResult");
    openapiFields.add("maxUsersInLab");
    openapiFields.add("provisioningState");
    openapiFields.add("uniqueIdentifier");
    openapiFields.add("usageQuota");
    openapiFields.add("userAccessMode");
    openapiFields.add("userQuota");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabProperties is not found in the empty JSON string", LabProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdByObjectId") != null && !jsonObj.get("createdByObjectId").isJsonNull()) && !jsonObj.get("createdByObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByObjectId").toString()));
      }
      if ((jsonObj.get("createdByUserPrincipalName") != null && !jsonObj.get("createdByUserPrincipalName").isJsonNull()) && !jsonObj.get("createdByUserPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserPrincipalName").toString()));
      }
      if ((jsonObj.get("invitationCode") != null && !jsonObj.get("invitationCode").isJsonNull()) && !jsonObj.get("invitationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationCode").toString()));
      }
      // validate the optional field `latestOperationResult`
      if (jsonObj.get("latestOperationResult") != null && !jsonObj.get("latestOperationResult").isJsonNull()) {
        LatestOperationResult.validateJsonElement(jsonObj.get("latestOperationResult"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("uniqueIdentifier") != null && !jsonObj.get("uniqueIdentifier").isJsonNull()) && !jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
      if ((jsonObj.get("usageQuota") != null && !jsonObj.get("usageQuota").isJsonNull()) && !jsonObj.get("usageQuota").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageQuota` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageQuota").toString()));
      }
      if ((jsonObj.get("userAccessMode") != null && !jsonObj.get("userAccessMode").isJsonNull()) && !jsonObj.get("userAccessMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAccessMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAccessMode").toString()));
      }
      // validate the optional field `userAccessMode`
      if (jsonObj.get("userAccessMode") != null && !jsonObj.get("userAccessMode").isJsonNull()) {
        UserAccessModeEnum.validateJsonElement(jsonObj.get("userAccessMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LabProperties>() {
           @Override
           public void write(JsonWriter out, LabProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabProperties
   * @throws IOException if the JSON string is invalid with respect to LabProperties
   */
  public static LabProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabProperties.class);
  }

  /**
   * Convert an instance of LabProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

