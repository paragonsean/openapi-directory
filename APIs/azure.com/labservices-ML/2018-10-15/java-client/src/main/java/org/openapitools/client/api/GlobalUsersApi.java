/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.EnvironmentOperationsPayload;
import org.openapitools.client.model.GetEnvironmentResponse;
import org.openapitools.client.model.GetPersonalPreferencesResponse;
import org.openapitools.client.model.ListEnvironmentsPayload;
import org.openapitools.client.model.ListEnvironmentsResponse;
import org.openapitools.client.model.ListLabsResponse;
import org.openapitools.client.model.OperationBatchStatusPayload;
import org.openapitools.client.model.OperationBatchStatusResponse;
import org.openapitools.client.model.OperationStatusPayload;
import org.openapitools.client.model.OperationStatusResponse;
import org.openapitools.client.model.PersonalPreferencesOperationsPayload;
import org.openapitools.client.model.RegisterPayload;
import org.openapitools.client.model.ResetPasswordPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for globalUsersGetEnvironment
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;environment)&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetEnvironmentCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentOperationsPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/getEnvironment"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersGetEnvironmentValidateBeforeCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersGetEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersGetEnvironment(Async)");
        }

        // verify the required parameter 'environmentOperationsPayload' is set
        if (environmentOperationsPayload == null) {
            throw new ApiException("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersGetEnvironment(Async)");
        }

        return globalUsersGetEnvironmentCall(userName, apiVersion, environmentOperationsPayload, $expand, _callback);

    }

    /**
     * 
     * Gets the virtual machine details
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;environment)&#39; (optional)
     * @return GetEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public GetEnvironmentResponse globalUsersGetEnvironment(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, String $expand) throws ApiException {
        ApiResponse<GetEnvironmentResponse> localVarResp = globalUsersGetEnvironmentWithHttpInfo(userName, apiVersion, environmentOperationsPayload, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the virtual machine details
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;environment)&#39; (optional)
     * @return ApiResponse&lt;GetEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEnvironmentResponse> globalUsersGetEnvironmentWithHttpInfo(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, String $expand) throws ApiException {
        okhttp3.Call localVarCall = globalUsersGetEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, $expand, null);
        Type localVarReturnType = new TypeToken<GetEnvironmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the virtual machine details
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($expand&#x3D;environment)&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetEnvironmentAsync(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, String $expand, final ApiCallback<GetEnvironmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersGetEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, $expand, _callback);
        Type localVarReturnType = new TypeToken<GetEnvironmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersGetOperationBatchStatus
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationBatchStatusPayload Payload to get the status of an operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetOperationBatchStatusCall(String userName, String apiVersion, OperationBatchStatusPayload operationBatchStatusPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operationBatchStatusPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/getOperationBatchStatus"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersGetOperationBatchStatusValidateBeforeCall(String userName, String apiVersion, OperationBatchStatusPayload operationBatchStatusPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersGetOperationBatchStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersGetOperationBatchStatus(Async)");
        }

        // verify the required parameter 'operationBatchStatusPayload' is set
        if (operationBatchStatusPayload == null) {
            throw new ApiException("Missing the required parameter 'operationBatchStatusPayload' when calling globalUsersGetOperationBatchStatus(Async)");
        }

        return globalUsersGetOperationBatchStatusCall(userName, apiVersion, operationBatchStatusPayload, _callback);

    }

    /**
     * 
     * Get batch operation status
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationBatchStatusPayload Payload to get the status of an operation (required)
     * @return OperationBatchStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public OperationBatchStatusResponse globalUsersGetOperationBatchStatus(String userName, String apiVersion, OperationBatchStatusPayload operationBatchStatusPayload) throws ApiException {
        ApiResponse<OperationBatchStatusResponse> localVarResp = globalUsersGetOperationBatchStatusWithHttpInfo(userName, apiVersion, operationBatchStatusPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * Get batch operation status
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationBatchStatusPayload Payload to get the status of an operation (required)
     * @return ApiResponse&lt;OperationBatchStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationBatchStatusResponse> globalUsersGetOperationBatchStatusWithHttpInfo(String userName, String apiVersion, OperationBatchStatusPayload operationBatchStatusPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersGetOperationBatchStatusValidateBeforeCall(userName, apiVersion, operationBatchStatusPayload, null);
        Type localVarReturnType = new TypeToken<OperationBatchStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get batch operation status
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationBatchStatusPayload Payload to get the status of an operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetOperationBatchStatusAsync(String userName, String apiVersion, OperationBatchStatusPayload operationBatchStatusPayload, final ApiCallback<OperationBatchStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersGetOperationBatchStatusValidateBeforeCall(userName, apiVersion, operationBatchStatusPayload, _callback);
        Type localVarReturnType = new TypeToken<OperationBatchStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersGetOperationStatus
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationStatusPayload Payload to get the status of an operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetOperationStatusCall(String userName, String apiVersion, OperationStatusPayload operationStatusPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operationStatusPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/getOperationStatus"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersGetOperationStatusValidateBeforeCall(String userName, String apiVersion, OperationStatusPayload operationStatusPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersGetOperationStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersGetOperationStatus(Async)");
        }

        // verify the required parameter 'operationStatusPayload' is set
        if (operationStatusPayload == null) {
            throw new ApiException("Missing the required parameter 'operationStatusPayload' when calling globalUsersGetOperationStatus(Async)");
        }

        return globalUsersGetOperationStatusCall(userName, apiVersion, operationStatusPayload, _callback);

    }

    /**
     * 
     * Gets the status of long running operation
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationStatusPayload Payload to get the status of an operation (required)
     * @return OperationStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatusResponse globalUsersGetOperationStatus(String userName, String apiVersion, OperationStatusPayload operationStatusPayload) throws ApiException {
        ApiResponse<OperationStatusResponse> localVarResp = globalUsersGetOperationStatusWithHttpInfo(userName, apiVersion, operationStatusPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the status of long running operation
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationStatusPayload Payload to get the status of an operation (required)
     * @return ApiResponse&lt;OperationStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatusResponse> globalUsersGetOperationStatusWithHttpInfo(String userName, String apiVersion, OperationStatusPayload operationStatusPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersGetOperationStatusValidateBeforeCall(userName, apiVersion, operationStatusPayload, null);
        Type localVarReturnType = new TypeToken<OperationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the status of long running operation
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param operationStatusPayload Payload to get the status of an operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetOperationStatusAsync(String userName, String apiVersion, OperationStatusPayload operationStatusPayload, final ApiCallback<OperationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersGetOperationStatusValidateBeforeCall(userName, apiVersion, operationStatusPayload, _callback);
        Type localVarReturnType = new TypeToken<OperationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersGetPersonalPreferences
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetPersonalPreferencesCall(String userName, String apiVersion, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personalPreferencesOperationsPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/getPersonalPreferences"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersGetPersonalPreferencesValidateBeforeCall(String userName, String apiVersion, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersGetPersonalPreferences(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersGetPersonalPreferences(Async)");
        }

        // verify the required parameter 'personalPreferencesOperationsPayload' is set
        if (personalPreferencesOperationsPayload == null) {
            throw new ApiException("Missing the required parameter 'personalPreferencesOperationsPayload' when calling globalUsersGetPersonalPreferences(Async)");
        }

        return globalUsersGetPersonalPreferencesCall(userName, apiVersion, personalPreferencesOperationsPayload, _callback);

    }

    /**
     * 
     * Get personal preferences for a user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @return GetPersonalPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalPreferencesResponse globalUsersGetPersonalPreferences(String userName, String apiVersion, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) throws ApiException {
        ApiResponse<GetPersonalPreferencesResponse> localVarResp = globalUsersGetPersonalPreferencesWithHttpInfo(userName, apiVersion, personalPreferencesOperationsPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * Get personal preferences for a user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @return ApiResponse&lt;GetPersonalPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPersonalPreferencesResponse> globalUsersGetPersonalPreferencesWithHttpInfo(String userName, String apiVersion, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersGetPersonalPreferencesValidateBeforeCall(userName, apiVersion, personalPreferencesOperationsPayload, null);
        Type localVarReturnType = new TypeToken<GetPersonalPreferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get personal preferences for a user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param personalPreferencesOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersGetPersonalPreferencesAsync(String userName, String apiVersion, PersonalPreferencesOperationsPayload personalPreferencesOperationsPayload, final ApiCallback<GetPersonalPreferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersGetPersonalPreferencesValidateBeforeCall(userName, apiVersion, personalPreferencesOperationsPayload, _callback);
        Type localVarReturnType = new TypeToken<GetPersonalPreferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersListEnvironments
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersListEnvironmentsCall(String userName, String apiVersion, ListEnvironmentsPayload listEnvironmentsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listEnvironmentsPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/listEnvironments"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersListEnvironmentsValidateBeforeCall(String userName, String apiVersion, ListEnvironmentsPayload listEnvironmentsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersListEnvironments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersListEnvironments(Async)");
        }

        // verify the required parameter 'listEnvironmentsPayload' is set
        if (listEnvironmentsPayload == null) {
            throw new ApiException("Missing the required parameter 'listEnvironmentsPayload' when calling globalUsersListEnvironments(Async)");
        }

        return globalUsersListEnvironmentsCall(userName, apiVersion, listEnvironmentsPayload, _callback);

    }

    /**
     * 
     * List Environments for the user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user (required)
     * @return ListEnvironmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ListEnvironmentsResponse globalUsersListEnvironments(String userName, String apiVersion, ListEnvironmentsPayload listEnvironmentsPayload) throws ApiException {
        ApiResponse<ListEnvironmentsResponse> localVarResp = globalUsersListEnvironmentsWithHttpInfo(userName, apiVersion, listEnvironmentsPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * List Environments for the user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user (required)
     * @return ApiResponse&lt;ListEnvironmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnvironmentsResponse> globalUsersListEnvironmentsWithHttpInfo(String userName, String apiVersion, ListEnvironmentsPayload listEnvironmentsPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersListEnvironmentsValidateBeforeCall(userName, apiVersion, listEnvironmentsPayload, null);
        Type localVarReturnType = new TypeToken<ListEnvironmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Environments for the user
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param listEnvironmentsPayload Represents the payload to list environments owned by a user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersListEnvironmentsAsync(String userName, String apiVersion, ListEnvironmentsPayload listEnvironmentsPayload, final ApiCallback<ListEnvironmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersListEnvironmentsValidateBeforeCall(userName, apiVersion, listEnvironmentsPayload, _callback);
        Type localVarReturnType = new TypeToken<ListEnvironmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersListLabs
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersListLabsCall(String userName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/listLabs"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersListLabsValidateBeforeCall(String userName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersListLabs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersListLabs(Async)");
        }

        return globalUsersListLabsCall(userName, apiVersion, _callback);

    }

    /**
     * 
     * List labs for the user.
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @return ListLabsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ListLabsResponse globalUsersListLabs(String userName, String apiVersion) throws ApiException {
        ApiResponse<ListLabsResponse> localVarResp = globalUsersListLabsWithHttpInfo(userName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List labs for the user.
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ListLabsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListLabsResponse> globalUsersListLabsWithHttpInfo(String userName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = globalUsersListLabsValidateBeforeCall(userName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListLabsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List labs for the user.
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersListLabsAsync(String userName, String apiVersion, final ApiCallback<ListLabsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersListLabsValidateBeforeCall(userName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListLabsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersRegister
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param registerPayload Represents payload for Register action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersRegisterCall(String userName, String apiVersion, RegisterPayload registerPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/register"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersRegisterValidateBeforeCall(String userName, String apiVersion, RegisterPayload registerPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersRegister(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersRegister(Async)");
        }

        // verify the required parameter 'registerPayload' is set
        if (registerPayload == null) {
            throw new ApiException("Missing the required parameter 'registerPayload' when calling globalUsersRegister(Async)");
        }

        return globalUsersRegisterCall(userName, apiVersion, registerPayload, _callback);

    }

    /**
     * 
     * Register a user to a managed lab
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param registerPayload Represents payload for Register action. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void globalUsersRegister(String userName, String apiVersion, RegisterPayload registerPayload) throws ApiException {
        globalUsersRegisterWithHttpInfo(userName, apiVersion, registerPayload);
    }

    /**
     * 
     * Register a user to a managed lab
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param registerPayload Represents payload for Register action. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalUsersRegisterWithHttpInfo(String userName, String apiVersion, RegisterPayload registerPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersRegisterValidateBeforeCall(userName, apiVersion, registerPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Register a user to a managed lab
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param registerPayload Represents payload for Register action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersRegisterAsync(String userName, String apiVersion, RegisterPayload registerPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersRegisterValidateBeforeCall(userName, apiVersion, registerPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersResetPassword
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersResetPasswordCall(String userName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetPasswordPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/resetPassword"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersResetPasswordValidateBeforeCall(String userName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersResetPassword(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersResetPassword(Async)");
        }

        // verify the required parameter 'resetPasswordPayload' is set
        if (resetPasswordPayload == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordPayload' when calling globalUsersResetPassword(Async)");
        }

        return globalUsersResetPasswordCall(userName, apiVersion, resetPasswordPayload, _callback);

    }

    /**
     * 
     * Resets the user password on an environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void globalUsersResetPassword(String userName, String apiVersion, ResetPasswordPayload resetPasswordPayload) throws ApiException {
        globalUsersResetPasswordWithHttpInfo(userName, apiVersion, resetPasswordPayload);
    }

    /**
     * 
     * Resets the user password on an environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalUsersResetPasswordWithHttpInfo(String userName, String apiVersion, ResetPasswordPayload resetPasswordPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersResetPasswordValidateBeforeCall(userName, apiVersion, resetPasswordPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resets the user password on an environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param resetPasswordPayload Represents the payload for resetting passwords. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersResetPasswordAsync(String userName, String apiVersion, ResetPasswordPayload resetPasswordPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersResetPasswordValidateBeforeCall(userName, apiVersion, resetPasswordPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersStartEnvironment
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersStartEnvironmentCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentOperationsPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/startEnvironment"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersStartEnvironmentValidateBeforeCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersStartEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersStartEnvironment(Async)");
        }

        // verify the required parameter 'environmentOperationsPayload' is set
        if (environmentOperationsPayload == null) {
            throw new ApiException("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersStartEnvironment(Async)");
        }

        return globalUsersStartEnvironmentCall(userName, apiVersion, environmentOperationsPayload, _callback);

    }

    /**
     * 
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void globalUsersStartEnvironment(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload) throws ApiException {
        globalUsersStartEnvironmentWithHttpInfo(userName, apiVersion, environmentOperationsPayload);
    }

    /**
     * 
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalUsersStartEnvironmentWithHttpInfo(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersStartEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts an environment by starting all resources inside the environment. This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersStartEnvironmentAsync(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersStartEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalUsersStopEnvironment
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersStopEnvironmentCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentOperationsPayload;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LabServices/users/{userName}/stopEnvironment"
            .replace("{" + "userName" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalUsersStopEnvironmentValidateBeforeCall(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling globalUsersStopEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalUsersStopEnvironment(Async)");
        }

        // verify the required parameter 'environmentOperationsPayload' is set
        if (environmentOperationsPayload == null) {
            throw new ApiException("Missing the required parameter 'environmentOperationsPayload' when calling globalUsersStopEnvironment(Async)");
        }

        return globalUsersStopEnvironmentCall(userName, apiVersion, environmentOperationsPayload, _callback);

    }

    /**
     * 
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void globalUsersStopEnvironment(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload) throws ApiException {
        globalUsersStopEnvironmentWithHttpInfo(userName, apiVersion, environmentOperationsPayload);
    }

    /**
     * 
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalUsersStopEnvironmentWithHttpInfo(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload) throws ApiException {
        okhttp3.Call localVarCall = globalUsersStopEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops an environment by stopping all resources inside the environment This operation can take a while to complete
     * @param userName The name of the user. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentOperationsPayload Represents payload for any Environment operations like get, start, stop, connect (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalUsersStopEnvironmentAsync(String userName, String apiVersion, EnvironmentOperationsPayload environmentOperationsPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalUsersStopEnvironmentValidateBeforeCall(userName, apiVersion, environmentOperationsPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
