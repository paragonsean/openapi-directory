/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network details of the environment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.069739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterface {
  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_RDP_AUTHORITY = "rdpAuthority";
  @SerializedName(SERIALIZED_NAME_RDP_AUTHORITY)
  private String rdpAuthority;

  public static final String SERIALIZED_NAME_SSH_AUTHORITY = "sshAuthority";
  @SerializedName(SERIALIZED_NAME_SSH_AUTHORITY)
  private String sshAuthority;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public NetworkInterface() {
  }

  public NetworkInterface(
     String privateIpAddress, 
     String rdpAuthority, 
     String sshAuthority, 
     String username
  ) {
    this();
    this.privateIpAddress = privateIpAddress;
    this.rdpAuthority = rdpAuthority;
    this.sshAuthority = sshAuthority;
    this.username = username;
  }

  /**
   * PrivateIp address of the Compute VM
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }



  /**
   * Connection information for Windows
   * @return rdpAuthority
   */
  @javax.annotation.Nullable
  public String getRdpAuthority() {
    return rdpAuthority;
  }



  /**
   * Connection information for Linux
   * @return sshAuthority
   */
  @javax.annotation.Nullable
  public String getSshAuthority() {
    return sshAuthority;
  }



  /**
   * Username of the VM
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterface networkInterface = (NetworkInterface) o;
    return Objects.equals(this.privateIpAddress, networkInterface.privateIpAddress) &&
        Objects.equals(this.rdpAuthority, networkInterface.rdpAuthority) &&
        Objects.equals(this.sshAuthority, networkInterface.sshAuthority) &&
        Objects.equals(this.username, networkInterface.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateIpAddress, rdpAuthority, sshAuthority, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterface {\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    rdpAuthority: ").append(toIndentedString(rdpAuthority)).append("\n");
    sb.append("    sshAuthority: ").append(toIndentedString(sshAuthority)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privateIpAddress");
    openapiFields.add("rdpAuthority");
    openapiFields.add("sshAuthority");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterface is not found in the empty JSON string", NetworkInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) && !jsonObj.get("privateIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIpAddress").toString()));
      }
      if ((jsonObj.get("rdpAuthority") != null && !jsonObj.get("rdpAuthority").isJsonNull()) && !jsonObj.get("rdpAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdpAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdpAuthority").toString()));
      }
      if ((jsonObj.get("sshAuthority") != null && !jsonObj.get("sshAuthority").isJsonNull()) && !jsonObj.get("sshAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshAuthority").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterface>() {
           @Override
           public void write(JsonWriter out, NetworkInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterface
   * @throws IOException if the JSON string is invalid with respect to NetworkInterface
   */
  public static NetworkInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterface.class);
  }

  /**
   * Convert an instance of NetworkInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

