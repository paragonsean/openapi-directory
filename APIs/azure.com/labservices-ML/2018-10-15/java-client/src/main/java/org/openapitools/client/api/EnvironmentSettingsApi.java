/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.EnvironmentSettingFragment;
import org.openapitools.client.model.PublishPayload;
import org.openapitools.client.model.ResponseWithContinuationEnvironmentSetting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvironmentSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for environmentSettingsClaimAny
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsClaimAnyCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/claimAny"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsClaimAnyValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsClaimAny(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsClaimAny(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsClaimAny(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsClaimAny(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsClaimAny(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsClaimAny(Async)");
        }

        return environmentSettingsClaimAnyCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);

    }

    /**
     * 
     * Claims a random environment for a user in an environment settings
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentSettingsClaimAny(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        environmentSettingsClaimAnyWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion);
    }

    /**
     * 
     * Claims a random environment for a user in an environment settings
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentSettingsClaimAnyWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsClaimAnyValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Claims a random environment for a user in an environment settings
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsClaimAnyAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsClaimAnyValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSetting environmentSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentSetting;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSetting environmentSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'environmentSetting' is set
        if (environmentSetting == null) {
            throw new ApiException("Missing the required parameter 'environmentSetting' when calling environmentSettingsCreateOrUpdate(Async)");
        }

        return environmentSettingsCreateOrUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, _callback);

    }

    /**
     * 
     * Create or replace an existing Environment Setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @return EnvironmentSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentSetting environmentSettingsCreateOrUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSetting environmentSetting) throws ApiException {
        ApiResponse<EnvironmentSetting> localVarResp = environmentSettingsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or replace an existing Environment Setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @return ApiResponse&lt;EnvironmentSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentSetting> environmentSettingsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSetting environmentSetting) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, null);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or replace an existing Environment Setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSetting environmentSetting, final ApiCallback<EnvironmentSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsDeleteCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsDelete(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsDelete(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsDelete(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsDelete(Async)");
        }

        return environmentSettingsDeleteCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);

    }

    /**
     * 
     * Delete environment setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentSettingsDelete(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        environmentSettingsDeleteWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion);
    }

    /**
     * 
     * Delete environment setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentSettingsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete environment setting. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsDeleteAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsGetCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsGet(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsGet(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsGet(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsGet(Async)");
        }

        return environmentSettingsGetCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Get environment setting
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @return EnvironmentSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentSetting environmentSettingsGet(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<EnvironmentSetting> localVarResp = environmentSettingsGetWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Get environment setting
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @return ApiResponse&lt;EnvironmentSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentSetting> environmentSettingsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get environment setting
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsGetAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, String $expand, final ApiCallback<EnvironmentSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsGetValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsList
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsListCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsList(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsList(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsList(Async)");
        }

        return environmentSettingsListCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, $filter, $top, $orderby, _callback);

    }

    /**
     * 
     * List environment setting in a given lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ResponseWithContinuationEnvironmentSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ResponseWithContinuationEnvironmentSetting environmentSettingsList(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<ResponseWithContinuationEnvironmentSetting> localVarResp = environmentSettingsListWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * List environment setting in a given lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @return ApiResponse&lt;ResponseWithContinuationEnvironmentSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseWithContinuationEnvironmentSetting> environmentSettingsListWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationEnvironmentSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List environment setting in a given lab.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param apiVersion Client API version. (required)
     * @param $expand Specify the $expand query. Example: &#39;properties($select&#x3D;publishingState)&#39; (optional)
     * @param $filter The filter to apply to the operation. (optional)
     * @param $top The maximum number of resources to return from the operation. (optional)
     * @param $orderby The ordering expression for the results, using OData notation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsListAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String apiVersion, String $expand, String $filter, Integer $top, String $orderby, final ApiCallback<ResponseWithContinuationEnvironmentSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsListValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, apiVersion, $expand, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<ResponseWithContinuationEnvironmentSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsPublish
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param publishPayload Payload for Publish operation on EnvironmentSetting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsPublishCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, PublishPayload publishPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishPayload;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/publish"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsPublishValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, PublishPayload publishPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsPublish(Async)");
        }

        // verify the required parameter 'publishPayload' is set
        if (publishPayload == null) {
            throw new ApiException("Missing the required parameter 'publishPayload' when calling environmentSettingsPublish(Async)");
        }

        return environmentSettingsPublishCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, publishPayload, _callback);

    }

    /**
     * 
     * Provisions/deprovisions required resources for an environment setting based on current state of the lab/environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param publishPayload Payload for Publish operation on EnvironmentSetting. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentSettingsPublish(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, PublishPayload publishPayload) throws ApiException {
        environmentSettingsPublishWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, publishPayload);
    }

    /**
     * 
     * Provisions/deprovisions required resources for an environment setting based on current state of the lab/environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param publishPayload Payload for Publish operation on EnvironmentSetting. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentSettingsPublishWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, PublishPayload publishPayload) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsPublishValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, publishPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provisions/deprovisions required resources for an environment setting based on current state of the lab/environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param publishPayload Payload for Publish operation on EnvironmentSetting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsPublishAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, PublishPayload publishPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsPublishValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, publishPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsStart
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsStartCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsStart(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsStart(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsStart(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsStart(Async)");
        }

        return environmentSettingsStartCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);

    }

    /**
     * 
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentSettingsStart(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        environmentSettingsStartWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion);
    }

    /**
     * 
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentSettingsStartWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsStartValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsStartAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsStartValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsStop
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsStopCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsStop(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsStop(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsStop(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsStop(Async)");
        }

        return environmentSettingsStopCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);

    }

    /**
     * 
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void environmentSettingsStop(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        environmentSettingsStopWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion);
    }

    /**
     * 
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> environmentSettingsStopWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsStopValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts a template by starting all resources inside the template. This operation can take a while to complete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsStopAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsStopValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for environmentSettingsUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsUpdateCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSettingFragment environmentSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = environmentSetting;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "labAccountName" + "}", localVarApiClient.escapeString(labAccountName.toString()))
            .replace("{" + "labName" + "}", localVarApiClient.escapeString(labName.toString()))
            .replace("{" + "environmentSettingName" + "}", localVarApiClient.escapeString(environmentSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call environmentSettingsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSettingFragment environmentSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'labAccountName' is set
        if (labAccountName == null) {
            throw new ApiException("Missing the required parameter 'labAccountName' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'labName' is set
        if (labName == null) {
            throw new ApiException("Missing the required parameter 'labName' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'environmentSettingName' is set
        if (environmentSettingName == null) {
            throw new ApiException("Missing the required parameter 'environmentSettingName' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling environmentSettingsUpdate(Async)");
        }

        // verify the required parameter 'environmentSetting' is set
        if (environmentSetting == null) {
            throw new ApiException("Missing the required parameter 'environmentSetting' when calling environmentSettingsUpdate(Async)");
        }

        return environmentSettingsUpdateCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, _callback);

    }

    /**
     * 
     * Modify properties of environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @return EnvironmentSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentSetting environmentSettingsUpdate(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSettingFragment environmentSetting) throws ApiException {
        ApiResponse<EnvironmentSetting> localVarResp = environmentSettingsUpdateWithHttpInfo(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify properties of environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @return ApiResponse&lt;EnvironmentSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentSetting> environmentSettingsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSettingFragment environmentSetting) throws ApiException {
        okhttp3.Call localVarCall = environmentSettingsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, null);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify properties of environment setting.
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param labAccountName The name of the lab Account. (required)
     * @param labName The name of the lab. (required)
     * @param environmentSettingName The name of the environment Setting. (required)
     * @param apiVersion Client API version. (required)
     * @param environmentSetting Represents settings of an environment, from which environment instances would be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call environmentSettingsUpdateAsync(String subscriptionId, String resourceGroupName, String labAccountName, String labName, String environmentSettingName, String apiVersion, EnvironmentSettingFragment environmentSetting, final ApiCallback<EnvironmentSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = environmentSettingsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, labAccountName, labName, environmentSettingName, apiVersion, environmentSetting, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
