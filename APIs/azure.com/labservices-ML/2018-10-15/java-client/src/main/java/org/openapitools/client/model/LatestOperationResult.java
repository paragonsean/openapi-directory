/*
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the status of an operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.069739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LatestOperationResult {
  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_OPERATION_URL = "operationUrl";
  @SerializedName(SERIALIZED_NAME_OPERATION_URL)
  private String operationUrl;

  public static final String SERIALIZED_NAME_REQUEST_URI = "requestUri";
  @SerializedName(SERIALIZED_NAME_REQUEST_URI)
  private String requestUri;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public LatestOperationResult() {
  }

  public LatestOperationResult(
     String errorCode, 
     String errorMessage, 
     String httpMethod, 
     String operationUrl, 
     String requestUri, 
     String status
  ) {
    this();
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
    this.httpMethod = httpMethod;
    this.operationUrl = operationUrl;
    this.requestUri = requestUri;
    this.status = status;
  }

  /**
   * Error code on failure.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }



  /**
   * The error message.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * The HttpMethod - PUT/POST/DELETE for the operation.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }



  /**
   * The URL to use to check long-running operation status
   * @return operationUrl
   */
  @javax.annotation.Nullable
  public String getOperationUrl() {
    return operationUrl;
  }



  /**
   * Request URI of the operation.
   * @return requestUri
   */
  @javax.annotation.Nullable
  public String getRequestUri() {
    return requestUri;
  }



  /**
   * The current status of the operation.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LatestOperationResult latestOperationResult = (LatestOperationResult) o;
    return Objects.equals(this.errorCode, latestOperationResult.errorCode) &&
        Objects.equals(this.errorMessage, latestOperationResult.errorMessage) &&
        Objects.equals(this.httpMethod, latestOperationResult.httpMethod) &&
        Objects.equals(this.operationUrl, latestOperationResult.operationUrl) &&
        Objects.equals(this.requestUri, latestOperationResult.requestUri) &&
        Objects.equals(this.status, latestOperationResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorMessage, httpMethod, operationUrl, requestUri, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LatestOperationResult {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    operationUrl: ").append(toIndentedString(operationUrl)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("httpMethod");
    openapiFields.add("operationUrl");
    openapiFields.add("requestUri");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LatestOperationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LatestOperationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LatestOperationResult is not found in the empty JSON string", LatestOperationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LatestOperationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LatestOperationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      if ((jsonObj.get("operationUrl") != null && !jsonObj.get("operationUrl").isJsonNull()) && !jsonObj.get("operationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationUrl").toString()));
      }
      if ((jsonObj.get("requestUri") != null && !jsonObj.get("requestUri").isJsonNull()) && !jsonObj.get("requestUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestUri").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LatestOperationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LatestOperationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LatestOperationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LatestOperationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LatestOperationResult>() {
           @Override
           public void write(JsonWriter out, LatestOperationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LatestOperationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LatestOperationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LatestOperationResult
   * @throws IOException if the JSON string is invalid with respect to LatestOperationResult
   */
  public static LatestOperationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LatestOperationResult.class);
  }

  /**
   * Convert an instance of LatestOperationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

