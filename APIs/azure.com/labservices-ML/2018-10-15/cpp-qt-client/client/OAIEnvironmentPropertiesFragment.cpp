/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentPropertiesFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentPropertiesFragment::OAIEnvironmentPropertiesFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentPropertiesFragment::OAIEnvironmentPropertiesFragment() {
    this->initializeModel();
}

OAIEnvironmentPropertiesFragment::~OAIEnvironmentPropertiesFragment() {}

void OAIEnvironmentPropertiesFragment::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_sets_isSet = false;
    m_resource_sets_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIEnvironmentPropertiesFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentPropertiesFragment::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_sets_isValid = ::OpenAPI::fromJsonValue(m_resource_sets, json[QString("resourceSets")]);
    m_resource_sets_isSet = !json[QString("resourceSets")].isNull() && m_resource_sets_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIEnvironmentPropertiesFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentPropertiesFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_sets.isSet()) {
        obj.insert(QString("resourceSets"), ::OpenAPI::toJsonValue(m_resource_sets));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAIEnvironmentPropertiesFragment::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEnvironmentPropertiesFragment::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEnvironmentPropertiesFragment::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEnvironmentPropertiesFragment::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIResourceSetFragment OAIEnvironmentPropertiesFragment::getResourceSets() const {
    return m_resource_sets;
}
void OAIEnvironmentPropertiesFragment::setResourceSets(const OAIResourceSetFragment &resource_sets) {
    m_resource_sets = resource_sets;
    m_resource_sets_isSet = true;
}

bool OAIEnvironmentPropertiesFragment::is_resource_sets_Set() const{
    return m_resource_sets_isSet;
}

bool OAIEnvironmentPropertiesFragment::is_resource_sets_Valid() const{
    return m_resource_sets_isValid;
}

QString OAIEnvironmentPropertiesFragment::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIEnvironmentPropertiesFragment::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIEnvironmentPropertiesFragment::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIEnvironmentPropertiesFragment::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIEnvironmentPropertiesFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentPropertiesFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
