/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabAccountProperties::OAILabAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabAccountProperties::OAILabAccountProperties() {
    this->initializeModel();
}

OAILabAccountProperties::~OAILabAccountProperties() {}

void OAILabAccountProperties::initializeModel() {

    m_enabled_region_selection_isSet = false;
    m_enabled_region_selection_isValid = false;

    m_latest_operation_result_isSet = false;
    m_latest_operation_result_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_size_configuration_isSet = false;
    m_size_configuration_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAILabAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabAccountProperties::fromJsonObject(QJsonObject json) {

    m_enabled_region_selection_isValid = ::OpenAPI::fromJsonValue(m_enabled_region_selection, json[QString("enabledRegionSelection")]);
    m_enabled_region_selection_isSet = !json[QString("enabledRegionSelection")].isNull() && m_enabled_region_selection_isValid;

    m_latest_operation_result_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_result, json[QString("latestOperationResult")]);
    m_latest_operation_result_isSet = !json[QString("latestOperationResult")].isNull() && m_latest_operation_result_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_size_configuration_isValid = ::OpenAPI::fromJsonValue(m_size_configuration, json[QString("sizeConfiguration")]);
    m_size_configuration_isSet = !json[QString("sizeConfiguration")].isNull() && m_size_configuration_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAILabAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_region_selection_isSet) {
        obj.insert(QString("enabledRegionSelection"), ::OpenAPI::toJsonValue(m_enabled_region_selection));
    }
    if (m_latest_operation_result.isSet()) {
        obj.insert(QString("latestOperationResult"), ::OpenAPI::toJsonValue(m_latest_operation_result));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_size_configuration.isSet()) {
        obj.insert(QString("sizeConfiguration"), ::OpenAPI::toJsonValue(m_size_configuration));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

bool OAILabAccountProperties::isEnabledRegionSelection() const {
    return m_enabled_region_selection;
}
void OAILabAccountProperties::setEnabledRegionSelection(const bool &enabled_region_selection) {
    m_enabled_region_selection = enabled_region_selection;
    m_enabled_region_selection_isSet = true;
}

bool OAILabAccountProperties::is_enabled_region_selection_Set() const{
    return m_enabled_region_selection_isSet;
}

bool OAILabAccountProperties::is_enabled_region_selection_Valid() const{
    return m_enabled_region_selection_isValid;
}

OAILatestOperationResult OAILabAccountProperties::getLatestOperationResult() const {
    return m_latest_operation_result;
}
void OAILabAccountProperties::setLatestOperationResult(const OAILatestOperationResult &latest_operation_result) {
    m_latest_operation_result = latest_operation_result;
    m_latest_operation_result_isSet = true;
}

bool OAILabAccountProperties::is_latest_operation_result_Set() const{
    return m_latest_operation_result_isSet;
}

bool OAILabAccountProperties::is_latest_operation_result_Valid() const{
    return m_latest_operation_result_isValid;
}

QString OAILabAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISizeConfigurationProperties OAILabAccountProperties::getSizeConfiguration() const {
    return m_size_configuration;
}
void OAILabAccountProperties::setSizeConfiguration(const OAISizeConfigurationProperties &size_configuration) {
    m_size_configuration = size_configuration;
    m_size_configuration_isSet = true;
}

bool OAILabAccountProperties::is_size_configuration_Set() const{
    return m_size_configuration_isSet;
}

bool OAILabAccountProperties::is_size_configuration_Valid() const{
    return m_size_configuration_isValid;
}

QString OAILabAccountProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAILabAccountProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAILabAccountProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAILabAccountProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAILabAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_region_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
