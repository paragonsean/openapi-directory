/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceVm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceVm::OAIReferenceVm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceVm::OAIReferenceVm() {
    this->initializeModel();
}

OAIReferenceVm::~OAIReferenceVm() {}

void OAIReferenceVm::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_vm_resource_id_isSet = false;
    m_vm_resource_id_isValid = false;

    m_vm_state_details_isSet = false;
    m_vm_state_details_isValid = false;
}

void OAIReferenceVm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceVm::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_vm_resource_id_isValid = ::OpenAPI::fromJsonValue(m_vm_resource_id, json[QString("vmResourceId")]);
    m_vm_resource_id_isSet = !json[QString("vmResourceId")].isNull() && m_vm_resource_id_isValid;

    m_vm_state_details_isValid = ::OpenAPI::fromJsonValue(m_vm_state_details, json[QString("vmStateDetails")]);
    m_vm_state_details_isSet = !json[QString("vmStateDetails")].isNull() && m_vm_state_details_isValid;
}

QString OAIReferenceVm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceVm::asJsonObject() const {
    QJsonObject obj;
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_vm_resource_id_isSet) {
        obj.insert(QString("vmResourceId"), ::OpenAPI::toJsonValue(m_vm_resource_id));
    }
    if (m_vm_state_details.isSet()) {
        obj.insert(QString("vmStateDetails"), ::OpenAPI::toJsonValue(m_vm_state_details));
    }
    return obj;
}

QString OAIReferenceVm::getPassword() const {
    return m_password;
}
void OAIReferenceVm::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIReferenceVm::is_password_Set() const{
    return m_password_isSet;
}

bool OAIReferenceVm::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIReferenceVm::getUserName() const {
    return m_user_name;
}
void OAIReferenceVm::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIReferenceVm::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIReferenceVm::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIReferenceVm::getVmResourceId() const {
    return m_vm_resource_id;
}
void OAIReferenceVm::setVmResourceId(const QString &vm_resource_id) {
    m_vm_resource_id = vm_resource_id;
    m_vm_resource_id_isSet = true;
}

bool OAIReferenceVm::is_vm_resource_id_Set() const{
    return m_vm_resource_id_isSet;
}

bool OAIReferenceVm::is_vm_resource_id_Valid() const{
    return m_vm_resource_id_isValid;
}

OAIVmStateDetails OAIReferenceVm::getVmStateDetails() const {
    return m_vm_state_details;
}
void OAIReferenceVm::setVmStateDetails(const OAIVmStateDetails &vm_state_details) {
    m_vm_state_details = vm_state_details;
    m_vm_state_details_isSet = true;
}

bool OAIReferenceVm::is_vm_state_details_Set() const{
    return m_vm_state_details_isSet;
}

bool OAIReferenceVm::is_vm_state_details_Valid() const{
    return m_vm_state_details_isValid;
}

bool OAIReferenceVm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_state_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceVm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_name_isValid && true;
}

} // namespace OpenAPI
