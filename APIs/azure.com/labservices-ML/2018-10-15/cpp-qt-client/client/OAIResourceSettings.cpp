/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSettings::OAIResourceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSettings::OAIResourceSettings() {
    this->initializeModel();
}

OAIResourceSettings::~OAIResourceSettings() {}

void OAIResourceSettings::initializeModel() {

    m_cores_isSet = false;
    m_cores_isValid = false;

    m_gallery_image_resource_id_isSet = false;
    m_gallery_image_resource_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_reference_vm_isSet = false;
    m_reference_vm_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIResourceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSettings::fromJsonObject(QJsonObject json) {

    m_cores_isValid = ::OpenAPI::fromJsonValue(m_cores, json[QString("cores")]);
    m_cores_isSet = !json[QString("cores")].isNull() && m_cores_isValid;

    m_gallery_image_resource_id_isValid = ::OpenAPI::fromJsonValue(m_gallery_image_resource_id, json[QString("galleryImageResourceId")]);
    m_gallery_image_resource_id_isSet = !json[QString("galleryImageResourceId")].isNull() && m_gallery_image_resource_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("imageName")]);
    m_image_name_isSet = !json[QString("imageName")].isNull() && m_image_name_isValid;

    m_reference_vm_isValid = ::OpenAPI::fromJsonValue(m_reference_vm, json[QString("referenceVm")]);
    m_reference_vm_isSet = !json[QString("referenceVm")].isNull() && m_reference_vm_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIResourceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_cores_isSet) {
        obj.insert(QString("cores"), ::OpenAPI::toJsonValue(m_cores));
    }
    if (m_gallery_image_resource_id_isSet) {
        obj.insert(QString("galleryImageResourceId"), ::OpenAPI::toJsonValue(m_gallery_image_resource_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("imageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_reference_vm.isSet()) {
        obj.insert(QString("referenceVm"), ::OpenAPI::toJsonValue(m_reference_vm));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

qint32 OAIResourceSettings::getCores() const {
    return m_cores;
}
void OAIResourceSettings::setCores(const qint32 &cores) {
    m_cores = cores;
    m_cores_isSet = true;
}

bool OAIResourceSettings::is_cores_Set() const{
    return m_cores_isSet;
}

bool OAIResourceSettings::is_cores_Valid() const{
    return m_cores_isValid;
}

QString OAIResourceSettings::getGalleryImageResourceId() const {
    return m_gallery_image_resource_id;
}
void OAIResourceSettings::setGalleryImageResourceId(const QString &gallery_image_resource_id) {
    m_gallery_image_resource_id = gallery_image_resource_id;
    m_gallery_image_resource_id_isSet = true;
}

bool OAIResourceSettings::is_gallery_image_resource_id_Set() const{
    return m_gallery_image_resource_id_isSet;
}

bool OAIResourceSettings::is_gallery_image_resource_id_Valid() const{
    return m_gallery_image_resource_id_isValid;
}

QString OAIResourceSettings::getId() const {
    return m_id;
}
void OAIResourceSettings::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceSettings::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceSettings::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceSettings::getImageName() const {
    return m_image_name;
}
void OAIResourceSettings::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIResourceSettings::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIResourceSettings::is_image_name_Valid() const{
    return m_image_name_isValid;
}

OAIReferenceVm OAIResourceSettings::getReferenceVm() const {
    return m_reference_vm;
}
void OAIResourceSettings::setReferenceVm(const OAIReferenceVm &reference_vm) {
    m_reference_vm = reference_vm;
    m_reference_vm_isSet = true;
}

bool OAIResourceSettings::is_reference_vm_Set() const{
    return m_reference_vm_isSet;
}

bool OAIResourceSettings::is_reference_vm_Valid() const{
    return m_reference_vm_isValid;
}

QString OAIResourceSettings::getSize() const {
    return m_size;
}
void OAIResourceSettings::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIResourceSettings::is_size_Set() const{
    return m_size_isSet;
}

bool OAIResourceSettings::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIResourceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gallery_image_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_vm_isValid && true;
}

} // namespace OpenAPI
