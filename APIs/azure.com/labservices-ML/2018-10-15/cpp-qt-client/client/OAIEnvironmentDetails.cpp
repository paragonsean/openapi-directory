/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentDetails::OAIEnvironmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentDetails::OAIEnvironmentDetails() {
    this->initializeModel();
}

OAIEnvironmentDetails::~OAIEnvironmentDetails() {}

void OAIEnvironmentDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_state_isSet = false;
    m_environment_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_operation_result_isSet = false;
    m_latest_operation_result_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_last_reset_isSet = false;
    m_password_last_reset_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_total_usage_isSet = false;
    m_total_usage_isValid = false;

    m_virtual_machine_details_isSet = false;
    m_virtual_machine_details_isValid = false;
}

void OAIEnvironmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_state_isValid = ::OpenAPI::fromJsonValue(m_environment_state, json[QString("environmentState")]);
    m_environment_state_isSet = !json[QString("environmentState")].isNull() && m_environment_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_operation_result_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_result, json[QString("latestOperationResult")]);
    m_latest_operation_result_isSet = !json[QString("latestOperationResult")].isNull() && m_latest_operation_result_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_last_reset_isValid = ::OpenAPI::fromJsonValue(m_password_last_reset, json[QString("passwordLastReset")]);
    m_password_last_reset_isSet = !json[QString("passwordLastReset")].isNull() && m_password_last_reset_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_total_usage_isValid = ::OpenAPI::fromJsonValue(m_total_usage, json[QString("totalUsage")]);
    m_total_usage_isSet = !json[QString("totalUsage")].isNull() && m_total_usage_isValid;

    m_virtual_machine_details_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_details, json[QString("virtualMachineDetails")]);
    m_virtual_machine_details_isSet = !json[QString("virtualMachineDetails")].isNull() && m_virtual_machine_details_isValid;
}

QString OAIEnvironmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_state_isSet) {
        obj.insert(QString("environmentState"), ::OpenAPI::toJsonValue(m_environment_state));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_operation_result.isSet()) {
        obj.insert(QString("latestOperationResult"), ::OpenAPI::toJsonValue(m_latest_operation_result));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_last_reset_isSet) {
        obj.insert(QString("passwordLastReset"), ::OpenAPI::toJsonValue(m_password_last_reset));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_total_usage_isSet) {
        obj.insert(QString("totalUsage"), ::OpenAPI::toJsonValue(m_total_usage));
    }
    if (m_virtual_machine_details.isSet()) {
        obj.insert(QString("virtualMachineDetails"), ::OpenAPI::toJsonValue(m_virtual_machine_details));
    }
    return obj;
}

QString OAIEnvironmentDetails::getDescription() const {
    return m_description;
}
void OAIEnvironmentDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnvironmentDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnvironmentDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEnvironmentDetails::getEnvironmentState() const {
    return m_environment_state;
}
void OAIEnvironmentDetails::setEnvironmentState(const QString &environment_state) {
    m_environment_state = environment_state;
    m_environment_state_isSet = true;
}

bool OAIEnvironmentDetails::is_environment_state_Set() const{
    return m_environment_state_isSet;
}

bool OAIEnvironmentDetails::is_environment_state_Valid() const{
    return m_environment_state_isValid;
}

QString OAIEnvironmentDetails::getId() const {
    return m_id;
}
void OAIEnvironmentDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnvironmentDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnvironmentDetails::is_id_Valid() const{
    return m_id_isValid;
}

OAILatestOperationResult OAIEnvironmentDetails::getLatestOperationResult() const {
    return m_latest_operation_result;
}
void OAIEnvironmentDetails::setLatestOperationResult(const OAILatestOperationResult &latest_operation_result) {
    m_latest_operation_result = latest_operation_result;
    m_latest_operation_result_isSet = true;
}

bool OAIEnvironmentDetails::is_latest_operation_result_Set() const{
    return m_latest_operation_result_isSet;
}

bool OAIEnvironmentDetails::is_latest_operation_result_Valid() const{
    return m_latest_operation_result_isValid;
}

QString OAIEnvironmentDetails::getName() const {
    return m_name;
}
void OAIEnvironmentDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironmentDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironmentDetails::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIEnvironmentDetails::getPasswordLastReset() const {
    return m_password_last_reset;
}
void OAIEnvironmentDetails::setPasswordLastReset(const QDateTime &password_last_reset) {
    m_password_last_reset = password_last_reset;
    m_password_last_reset_isSet = true;
}

bool OAIEnvironmentDetails::is_password_last_reset_Set() const{
    return m_password_last_reset_isSet;
}

bool OAIEnvironmentDetails::is_password_last_reset_Valid() const{
    return m_password_last_reset_isValid;
}

QString OAIEnvironmentDetails::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEnvironmentDetails::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEnvironmentDetails::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEnvironmentDetails::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIEnvironmentDetails::getTotalUsage() const {
    return m_total_usage;
}
void OAIEnvironmentDetails::setTotalUsage(const QString &total_usage) {
    m_total_usage = total_usage;
    m_total_usage_isSet = true;
}

bool OAIEnvironmentDetails::is_total_usage_Set() const{
    return m_total_usage_isSet;
}

bool OAIEnvironmentDetails::is_total_usage_Valid() const{
    return m_total_usage_isValid;
}

OAIVirtualMachineDetails OAIEnvironmentDetails::getVirtualMachineDetails() const {
    return m_virtual_machine_details;
}
void OAIEnvironmentDetails::setVirtualMachineDetails(const OAIVirtualMachineDetails &virtual_machine_details) {
    m_virtual_machine_details = virtual_machine_details;
    m_virtual_machine_details_isSet = true;
}

bool OAIEnvironmentDetails::is_virtual_machine_details_Set() const{
    return m_virtual_machine_details_isSet;
}

bool OAIEnvironmentDetails::is_virtual_machine_details_Valid() const{
    return m_virtual_machine_details_isValid;
}

bool OAIEnvironmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_last_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
