/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalUsersApi_H
#define OAI_OAIGlobalUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIEnvironmentOperationsPayload.h"
#include "OAIGetEnvironmentResponse.h"
#include "OAIGetPersonalPreferencesResponse.h"
#include "OAIListEnvironmentsPayload.h"
#include "OAIListEnvironmentsResponse.h"
#include "OAIListLabsResponse.h"
#include "OAIOperationBatchStatusPayload.h"
#include "OAIOperationBatchStatusResponse.h"
#include "OAIOperationStatusPayload.h"
#include "OAIOperationStatusResponse.h"
#include "OAIPersonalPreferencesOperationsPayload.h"
#include "OAIRegisterPayload.h"
#include "OAIResetPasswordPayload.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalUsersApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalUsersApi(const int timeOut = 0);
    ~OAIGlobalUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_operations_payload OAIEnvironmentOperationsPayload [required]
    * @param[in]  expand QString [optional]
    */
    virtual void globalUsersGetEnvironment(const QString &user_name, const QString &api_version, const OAIEnvironmentOperationsPayload &environment_operations_payload, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  operation_batch_status_payload OAIOperationBatchStatusPayload [required]
    */
    virtual void globalUsersGetOperationBatchStatus(const QString &user_name, const QString &api_version, const OAIOperationBatchStatusPayload &operation_batch_status_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  operation_status_payload OAIOperationStatusPayload [required]
    */
    virtual void globalUsersGetOperationStatus(const QString &user_name, const QString &api_version, const OAIOperationStatusPayload &operation_status_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  personal_preferences_operations_payload OAIPersonalPreferencesOperationsPayload [required]
    */
    virtual void globalUsersGetPersonalPreferences(const QString &user_name, const QString &api_version, const OAIPersonalPreferencesOperationsPayload &personal_preferences_operations_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_environments_payload OAIListEnvironmentsPayload [required]
    */
    virtual void globalUsersListEnvironments(const QString &user_name, const QString &api_version, const OAIListEnvironmentsPayload &list_environments_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalUsersListLabs(const QString &user_name, const QString &api_version);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  register_payload OAIRegisterPayload [required]
    */
    virtual void globalUsersRegister(const QString &user_name, const QString &api_version, const OAIRegisterPayload &register_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  reset_password_payload OAIResetPasswordPayload [required]
    */
    virtual void globalUsersResetPassword(const QString &user_name, const QString &api_version, const OAIResetPasswordPayload &reset_password_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_operations_payload OAIEnvironmentOperationsPayload [required]
    */
    virtual void globalUsersStartEnvironment(const QString &user_name, const QString &api_version, const OAIEnvironmentOperationsPayload &environment_operations_payload);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_operations_payload OAIEnvironmentOperationsPayload [required]
    */
    virtual void globalUsersStopEnvironment(const QString &user_name, const QString &api_version, const OAIEnvironmentOperationsPayload &environment_operations_payload);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalUsersGetEnvironmentCallback(OAIHttpRequestWorker *worker);
    void globalUsersGetOperationBatchStatusCallback(OAIHttpRequestWorker *worker);
    void globalUsersGetOperationStatusCallback(OAIHttpRequestWorker *worker);
    void globalUsersGetPersonalPreferencesCallback(OAIHttpRequestWorker *worker);
    void globalUsersListEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void globalUsersListLabsCallback(OAIHttpRequestWorker *worker);
    void globalUsersRegisterCallback(OAIHttpRequestWorker *worker);
    void globalUsersResetPasswordCallback(OAIHttpRequestWorker *worker);
    void globalUsersStartEnvironmentCallback(OAIHttpRequestWorker *worker);
    void globalUsersStopEnvironmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalUsersGetEnvironmentSignal(OAIGetEnvironmentResponse summary);
    void globalUsersGetOperationBatchStatusSignal(OAIOperationBatchStatusResponse summary);
    void globalUsersGetOperationStatusSignal(OAIOperationStatusResponse summary);
    void globalUsersGetPersonalPreferencesSignal(OAIGetPersonalPreferencesResponse summary);
    void globalUsersListEnvironmentsSignal(OAIListEnvironmentsResponse summary);
    void globalUsersListLabsSignal(OAIListLabsResponse summary);
    void globalUsersRegisterSignal();
    void globalUsersResetPasswordSignal();
    void globalUsersStartEnvironmentSignal();
    void globalUsersStopEnvironmentSignal();


    void globalUsersGetEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIGetEnvironmentResponse summary);
    void globalUsersGetOperationBatchStatusSignalFull(OAIHttpRequestWorker *worker, OAIOperationBatchStatusResponse summary);
    void globalUsersGetOperationStatusSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatusResponse summary);
    void globalUsersGetPersonalPreferencesSignalFull(OAIHttpRequestWorker *worker, OAIGetPersonalPreferencesResponse summary);
    void globalUsersListEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIListEnvironmentsResponse summary);
    void globalUsersListLabsSignalFull(OAIHttpRequestWorker *worker, OAIListLabsResponse summary);
    void globalUsersRegisterSignalFull(OAIHttpRequestWorker *worker);
    void globalUsersResetPasswordSignalFull(OAIHttpRequestWorker *worker);
    void globalUsersStartEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void globalUsersStopEnvironmentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use globalUsersGetEnvironmentSignalError() instead")
    void globalUsersGetEnvironmentSignalE(OAIGetEnvironmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetEnvironmentSignalError(OAIGetEnvironmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetOperationBatchStatusSignalError() instead")
    void globalUsersGetOperationBatchStatusSignalE(OAIOperationBatchStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetOperationBatchStatusSignalError(OAIOperationBatchStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetOperationStatusSignalError() instead")
    void globalUsersGetOperationStatusSignalE(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetOperationStatusSignalError(OAIOperationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetPersonalPreferencesSignalError() instead")
    void globalUsersGetPersonalPreferencesSignalE(OAIGetPersonalPreferencesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetPersonalPreferencesSignalError(OAIGetPersonalPreferencesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersListEnvironmentsSignalError() instead")
    void globalUsersListEnvironmentsSignalE(OAIListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersListEnvironmentsSignalError(OAIListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersListLabsSignalError() instead")
    void globalUsersListLabsSignalE(OAIListLabsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersListLabsSignalError(OAIListLabsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersRegisterSignalError() instead")
    void globalUsersRegisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersRegisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersResetPasswordSignalError() instead")
    void globalUsersResetPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersResetPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersStartEnvironmentSignalError() instead")
    void globalUsersStartEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersStartEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersStopEnvironmentSignalError() instead")
    void globalUsersStopEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersStopEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalUsersGetEnvironmentSignalErrorFull() instead")
    void globalUsersGetEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetOperationBatchStatusSignalErrorFull() instead")
    void globalUsersGetOperationBatchStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetOperationBatchStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetOperationStatusSignalErrorFull() instead")
    void globalUsersGetOperationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetOperationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersGetPersonalPreferencesSignalErrorFull() instead")
    void globalUsersGetPersonalPreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersGetPersonalPreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersListEnvironmentsSignalErrorFull() instead")
    void globalUsersListEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersListEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersListLabsSignalErrorFull() instead")
    void globalUsersListLabsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersListLabsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersRegisterSignalErrorFull() instead")
    void globalUsersRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersResetPasswordSignalErrorFull() instead")
    void globalUsersResetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersResetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersStartEnvironmentSignalErrorFull() instead")
    void globalUsersStartEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersStartEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUsersStopEnvironmentSignalErrorFull() instead")
    void globalUsersStopEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUsersStopEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
