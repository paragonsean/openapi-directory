/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISizeInfoFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISizeInfoFragment::OAISizeInfoFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISizeInfoFragment::OAISizeInfoFragment() {
    this->initializeModel();
}

OAISizeInfoFragment::~OAISizeInfoFragment() {}

void OAISizeInfoFragment::initializeModel() {

    m_compute_size_isSet = false;
    m_compute_size_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAISizeInfoFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISizeInfoFragment::fromJsonObject(QJsonObject json) {

    m_compute_size_isValid = ::OpenAPI::fromJsonValue(m_compute_size, json[QString("computeSize")]);
    m_compute_size_isSet = !json[QString("computeSize")].isNull() && m_compute_size_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAISizeInfoFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISizeInfoFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_size_isSet) {
        obj.insert(QString("computeSize"), ::OpenAPI::toJsonValue(m_compute_size));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAISizeInfoFragment::getComputeSize() const {
    return m_compute_size;
}
void OAISizeInfoFragment::setComputeSize(const QString &compute_size) {
    m_compute_size = compute_size;
    m_compute_size_isSet = true;
}

bool OAISizeInfoFragment::is_compute_size_Set() const{
    return m_compute_size_isSet;
}

bool OAISizeInfoFragment::is_compute_size_Valid() const{
    return m_compute_size_isValid;
}

double OAISizeInfoFragment::getMemory() const {
    return m_memory;
}
void OAISizeInfoFragment::setMemory(const double &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAISizeInfoFragment::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAISizeInfoFragment::is_memory_Valid() const{
    return m_memory_isValid;
}

qint32 OAISizeInfoFragment::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAISizeInfoFragment::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAISizeInfoFragment::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAISizeInfoFragment::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

double OAISizeInfoFragment::getPrice() const {
    return m_price;
}
void OAISizeInfoFragment::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISizeInfoFragment::is_price_Set() const{
    return m_price_isSet;
}

bool OAISizeInfoFragment::is_price_Valid() const{
    return m_price_isValid;
}

bool OAISizeInfoFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISizeInfoFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
