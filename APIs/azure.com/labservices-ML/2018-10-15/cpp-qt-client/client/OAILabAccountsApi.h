/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabAccountsApi_H
#define OAI_OAILabAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAICreateLabProperties.h"
#include "OAIGetRegionalAvailabilityResponse.h"
#include "OAILabAccount.h"
#include "OAILabAccountFragment.h"
#include "OAIResponseWithContinuation_LabAccount.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabAccountsApi : public QObject {
    Q_OBJECT

public:
    OAILabAccountsApi(const int timeOut = 0);
    ~OAILabAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_lab_properties OAICreateLabProperties [required]
    */
    virtual void labAccountsCreateLab(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version, const OAICreateLabProperties &create_lab_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_account OAILabAccount [required]
    */
    virtual void labAccountsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version, const OAILabAccount &lab_account);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labAccountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void labAccountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labAccountsGetRegionalAvailability(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void labAccountsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void labAccountsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab_account OAILabAccountFragment [required]
    */
    virtual void labAccountsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version, const OAILabAccountFragment &lab_account);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void labAccountsCreateLabCallback(OAIHttpRequestWorker *worker);
    void labAccountsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void labAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void labAccountsGetCallback(OAIHttpRequestWorker *worker);
    void labAccountsGetRegionalAvailabilityCallback(OAIHttpRequestWorker *worker);
    void labAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void labAccountsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void labAccountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void labAccountsCreateLabSignal();
    void labAccountsCreateOrUpdateSignal(OAILabAccount summary);
    void labAccountsDeleteSignal();
    void labAccountsGetSignal(OAILabAccount summary);
    void labAccountsGetRegionalAvailabilitySignal(OAIGetRegionalAvailabilityResponse summary);
    void labAccountsListByResourceGroupSignal(OAIResponseWithContinuation_LabAccount summary);
    void labAccountsListBySubscriptionSignal(OAIResponseWithContinuation_LabAccount summary);
    void labAccountsUpdateSignal(OAILabAccount summary);


    void labAccountsCreateLabSignalFull(OAIHttpRequestWorker *worker);
    void labAccountsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILabAccount summary);
    void labAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void labAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAILabAccount summary);
    void labAccountsGetRegionalAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIGetRegionalAvailabilityResponse summary);
    void labAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_LabAccount summary);
    void labAccountsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_LabAccount summary);
    void labAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAILabAccount summary);

    Q_DECL_DEPRECATED_X("Use labAccountsCreateLabSignalError() instead")
    void labAccountsCreateLabSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsCreateLabSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsCreateOrUpdateSignalError() instead")
    void labAccountsCreateOrUpdateSignalE(OAILabAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsCreateOrUpdateSignalError(OAILabAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsDeleteSignalError() instead")
    void labAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsGetSignalError() instead")
    void labAccountsGetSignalE(OAILabAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsGetSignalError(OAILabAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsGetRegionalAvailabilitySignalError() instead")
    void labAccountsGetRegionalAvailabilitySignalE(OAIGetRegionalAvailabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsGetRegionalAvailabilitySignalError(OAIGetRegionalAvailabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsListByResourceGroupSignalError() instead")
    void labAccountsListByResourceGroupSignalE(OAIResponseWithContinuation_LabAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsListByResourceGroupSignalError(OAIResponseWithContinuation_LabAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsListBySubscriptionSignalError() instead")
    void labAccountsListBySubscriptionSignalE(OAIResponseWithContinuation_LabAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsListBySubscriptionSignalError(OAIResponseWithContinuation_LabAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsUpdateSignalError() instead")
    void labAccountsUpdateSignalE(OAILabAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsUpdateSignalError(OAILabAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use labAccountsCreateLabSignalErrorFull() instead")
    void labAccountsCreateLabSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsCreateLabSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsCreateOrUpdateSignalErrorFull() instead")
    void labAccountsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsDeleteSignalErrorFull() instead")
    void labAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsGetSignalErrorFull() instead")
    void labAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsGetRegionalAvailabilitySignalErrorFull() instead")
    void labAccountsGetRegionalAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsGetRegionalAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsListByResourceGroupSignalErrorFull() instead")
    void labAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsListBySubscriptionSignalErrorFull() instead")
    void labAccountsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labAccountsUpdateSignalErrorFull() instead")
    void labAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
