/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentSettingsApi_H
#define OAI_OAIEnvironmentSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIEnvironmentSetting.h"
#include "OAIEnvironmentSettingFragment.h"
#include "OAIPublishPayload.h"
#include "OAIResponseWithContinuation_EnvironmentSetting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentSettingsApi(const int timeOut = 0);
    ~OAIEnvironmentSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentSettingsClaimAny(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_setting OAIEnvironmentSetting [required]
    */
    virtual void environmentSettingsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version, const OAIEnvironmentSetting &environment_setting);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentSettingsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void environmentSettingsGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void environmentSettingsList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  publish_payload OAIPublishPayload [required]
    */
    virtual void environmentSettingsPublish(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version, const OAIPublishPayload &publish_payload);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentSettingsStart(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void environmentSettingsStop(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  environment_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  environment_setting OAIEnvironmentSettingFragment [required]
    */
    virtual void environmentSettingsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &environment_setting_name, const QString &api_version, const OAIEnvironmentSettingFragment &environment_setting);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void environmentSettingsClaimAnyCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsDeleteCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsGetCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsListCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsPublishCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsStartCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsStopCallback(OAIHttpRequestWorker *worker);
    void environmentSettingsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void environmentSettingsClaimAnySignal();
    void environmentSettingsCreateOrUpdateSignal(OAIEnvironmentSetting summary);
    void environmentSettingsDeleteSignal();
    void environmentSettingsGetSignal(OAIEnvironmentSetting summary);
    void environmentSettingsListSignal(OAIResponseWithContinuation_EnvironmentSetting summary);
    void environmentSettingsPublishSignal();
    void environmentSettingsStartSignal();
    void environmentSettingsStopSignal();
    void environmentSettingsUpdateSignal(OAIEnvironmentSetting summary);


    void environmentSettingsClaimAnySignalFull(OAIHttpRequestWorker *worker);
    void environmentSettingsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentSetting summary);
    void environmentSettingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void environmentSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentSetting summary);
    void environmentSettingsListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_EnvironmentSetting summary);
    void environmentSettingsPublishSignalFull(OAIHttpRequestWorker *worker);
    void environmentSettingsStartSignalFull(OAIHttpRequestWorker *worker);
    void environmentSettingsStopSignalFull(OAIHttpRequestWorker *worker);
    void environmentSettingsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentSetting summary);

    Q_DECL_DEPRECATED_X("Use environmentSettingsClaimAnySignalError() instead")
    void environmentSettingsClaimAnySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsClaimAnySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsCreateOrUpdateSignalError() instead")
    void environmentSettingsCreateOrUpdateSignalE(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsCreateOrUpdateSignalError(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsDeleteSignalError() instead")
    void environmentSettingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsGetSignalError() instead")
    void environmentSettingsGetSignalE(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsGetSignalError(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsListSignalError() instead")
    void environmentSettingsListSignalE(OAIResponseWithContinuation_EnvironmentSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsListSignalError(OAIResponseWithContinuation_EnvironmentSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsPublishSignalError() instead")
    void environmentSettingsPublishSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsPublishSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsStartSignalError() instead")
    void environmentSettingsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsStopSignalError() instead")
    void environmentSettingsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsUpdateSignalError() instead")
    void environmentSettingsUpdateSignalE(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsUpdateSignalError(OAIEnvironmentSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use environmentSettingsClaimAnySignalErrorFull() instead")
    void environmentSettingsClaimAnySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsClaimAnySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsCreateOrUpdateSignalErrorFull() instead")
    void environmentSettingsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsDeleteSignalErrorFull() instead")
    void environmentSettingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsGetSignalErrorFull() instead")
    void environmentSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsListSignalErrorFull() instead")
    void environmentSettingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsPublishSignalErrorFull() instead")
    void environmentSettingsPublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsPublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsStartSignalErrorFull() instead")
    void environmentSettingsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsStopSignalErrorFull() instead")
    void environmentSettingsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use environmentSettingsUpdateSignalErrorFull() instead")
    void environmentSettingsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void environmentSettingsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
