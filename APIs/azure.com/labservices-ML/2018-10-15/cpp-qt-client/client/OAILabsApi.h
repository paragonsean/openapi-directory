/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabsApi_H
#define OAI_OAILabsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddUsersPayload.h"
#include "OAICloudError.h"
#include "OAILab.h"
#include "OAILabFragment.h"
#include "OAIResponseWithContinuation_Lab.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabsApi : public QObject {
    Q_OBJECT

public:
    OAILabsApi(const int timeOut = 0);
    ~OAILabsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  add_users_payload OAIAddUsersPayload [required]
    */
    virtual void labsAddUsers(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version, const OAIAddUsersPayload &add_users_payload);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILab [required]
    */
    virtual void labsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version, const OAILab &lab);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void labsGet(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void labsList(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void labsRegister(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lab_account_name QString [required]
    * @param[in]  lab_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  lab OAILabFragment [required]
    */
    virtual void labsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &lab_account_name, const QString &lab_name, const QString &api_version, const OAILabFragment &lab);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void labsAddUsersCallback(OAIHttpRequestWorker *worker);
    void labsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void labsDeleteCallback(OAIHttpRequestWorker *worker);
    void labsGetCallback(OAIHttpRequestWorker *worker);
    void labsListCallback(OAIHttpRequestWorker *worker);
    void labsRegisterCallback(OAIHttpRequestWorker *worker);
    void labsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void labsAddUsersSignal();
    void labsCreateOrUpdateSignal(OAILab summary);
    void labsDeleteSignal();
    void labsGetSignal(OAILab summary);
    void labsListSignal(OAIResponseWithContinuation_Lab summary);
    void labsRegisterSignal();
    void labsUpdateSignal(OAILab summary);


    void labsAddUsersSignalFull(OAIHttpRequestWorker *worker);
    void labsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void labsGetSignalFull(OAIHttpRequestWorker *worker, OAILab summary);
    void labsListSignalFull(OAIHttpRequestWorker *worker, OAIResponseWithContinuation_Lab summary);
    void labsRegisterSignalFull(OAIHttpRequestWorker *worker);
    void labsUpdateSignalFull(OAIHttpRequestWorker *worker, OAILab summary);

    Q_DECL_DEPRECATED_X("Use labsAddUsersSignalError() instead")
    void labsAddUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsAddUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateOrUpdateSignalError() instead")
    void labsCreateOrUpdateSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateOrUpdateSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsDeleteSignalError() instead")
    void labsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGetSignalError() instead")
    void labsGetSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGetSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListSignalError() instead")
    void labsListSignalE(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListSignalError(OAIResponseWithContinuation_Lab summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsRegisterSignalError() instead")
    void labsRegisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void labsRegisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsUpdateSignalError() instead")
    void labsUpdateSignalE(OAILab summary, QNetworkReply::NetworkError error_type, QString error_str);
    void labsUpdateSignalError(OAILab summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use labsAddUsersSignalErrorFull() instead")
    void labsAddUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsAddUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsCreateOrUpdateSignalErrorFull() instead")
    void labsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsDeleteSignalErrorFull() instead")
    void labsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsGetSignalErrorFull() instead")
    void labsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsListSignalErrorFull() instead")
    void labsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsRegisterSignalErrorFull() instead")
    void labsRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use labsUpdateSignalErrorFull() instead")
    void labsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void labsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
