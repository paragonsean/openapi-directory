/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabProperties::OAILabProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabProperties::OAILabProperties() {
    this->initializeModel();
}

OAILabProperties::~OAILabProperties() {}

void OAILabProperties::initializeModel() {

    m_created_by_object_id_isSet = false;
    m_created_by_object_id_isValid = false;

    m_created_by_user_principal_name_isSet = false;
    m_created_by_user_principal_name_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_invitation_code_isSet = false;
    m_invitation_code_isValid = false;

    m_latest_operation_result_isSet = false;
    m_latest_operation_result_isValid = false;

    m_max_users_in_lab_isSet = false;
    m_max_users_in_lab_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_usage_quota_isSet = false;
    m_usage_quota_isValid = false;

    m_user_access_mode_isSet = false;
    m_user_access_mode_isValid = false;

    m_user_quota_isSet = false;
    m_user_quota_isValid = false;
}

void OAILabProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabProperties::fromJsonObject(QJsonObject json) {

    m_created_by_object_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_object_id, json[QString("createdByObjectId")]);
    m_created_by_object_id_isSet = !json[QString("createdByObjectId")].isNull() && m_created_by_object_id_isValid;

    m_created_by_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_created_by_user_principal_name, json[QString("createdByUserPrincipalName")]);
    m_created_by_user_principal_name_isSet = !json[QString("createdByUserPrincipalName")].isNull() && m_created_by_user_principal_name_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_invitation_code_isValid = ::OpenAPI::fromJsonValue(m_invitation_code, json[QString("invitationCode")]);
    m_invitation_code_isSet = !json[QString("invitationCode")].isNull() && m_invitation_code_isValid;

    m_latest_operation_result_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_result, json[QString("latestOperationResult")]);
    m_latest_operation_result_isSet = !json[QString("latestOperationResult")].isNull() && m_latest_operation_result_isValid;

    m_max_users_in_lab_isValid = ::OpenAPI::fromJsonValue(m_max_users_in_lab, json[QString("maxUsersInLab")]);
    m_max_users_in_lab_isSet = !json[QString("maxUsersInLab")].isNull() && m_max_users_in_lab_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;

    m_usage_quota_isValid = ::OpenAPI::fromJsonValue(m_usage_quota, json[QString("usageQuota")]);
    m_usage_quota_isSet = !json[QString("usageQuota")].isNull() && m_usage_quota_isValid;

    m_user_access_mode_isValid = ::OpenAPI::fromJsonValue(m_user_access_mode, json[QString("userAccessMode")]);
    m_user_access_mode_isSet = !json[QString("userAccessMode")].isNull() && m_user_access_mode_isValid;

    m_user_quota_isValid = ::OpenAPI::fromJsonValue(m_user_quota, json[QString("userQuota")]);
    m_user_quota_isSet = !json[QString("userQuota")].isNull() && m_user_quota_isValid;
}

QString OAILabProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_object_id_isSet) {
        obj.insert(QString("createdByObjectId"), ::OpenAPI::toJsonValue(m_created_by_object_id));
    }
    if (m_created_by_user_principal_name_isSet) {
        obj.insert(QString("createdByUserPrincipalName"), ::OpenAPI::toJsonValue(m_created_by_user_principal_name));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_invitation_code_isSet) {
        obj.insert(QString("invitationCode"), ::OpenAPI::toJsonValue(m_invitation_code));
    }
    if (m_latest_operation_result.isSet()) {
        obj.insert(QString("latestOperationResult"), ::OpenAPI::toJsonValue(m_latest_operation_result));
    }
    if (m_max_users_in_lab_isSet) {
        obj.insert(QString("maxUsersInLab"), ::OpenAPI::toJsonValue(m_max_users_in_lab));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_usage_quota_isSet) {
        obj.insert(QString("usageQuota"), ::OpenAPI::toJsonValue(m_usage_quota));
    }
    if (m_user_access_mode_isSet) {
        obj.insert(QString("userAccessMode"), ::OpenAPI::toJsonValue(m_user_access_mode));
    }
    if (m_user_quota_isSet) {
        obj.insert(QString("userQuota"), ::OpenAPI::toJsonValue(m_user_quota));
    }
    return obj;
}

QString OAILabProperties::getCreatedByObjectId() const {
    return m_created_by_object_id;
}
void OAILabProperties::setCreatedByObjectId(const QString &created_by_object_id) {
    m_created_by_object_id = created_by_object_id;
    m_created_by_object_id_isSet = true;
}

bool OAILabProperties::is_created_by_object_id_Set() const{
    return m_created_by_object_id_isSet;
}

bool OAILabProperties::is_created_by_object_id_Valid() const{
    return m_created_by_object_id_isValid;
}

QString OAILabProperties::getCreatedByUserPrincipalName() const {
    return m_created_by_user_principal_name;
}
void OAILabProperties::setCreatedByUserPrincipalName(const QString &created_by_user_principal_name) {
    m_created_by_user_principal_name = created_by_user_principal_name;
    m_created_by_user_principal_name_isSet = true;
}

bool OAILabProperties::is_created_by_user_principal_name_Set() const{
    return m_created_by_user_principal_name_isSet;
}

bool OAILabProperties::is_created_by_user_principal_name_Valid() const{
    return m_created_by_user_principal_name_isValid;
}

QDateTime OAILabProperties::getCreatedDate() const {
    return m_created_date;
}
void OAILabProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAILabProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAILabProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAILabProperties::getInvitationCode() const {
    return m_invitation_code;
}
void OAILabProperties::setInvitationCode(const QString &invitation_code) {
    m_invitation_code = invitation_code;
    m_invitation_code_isSet = true;
}

bool OAILabProperties::is_invitation_code_Set() const{
    return m_invitation_code_isSet;
}

bool OAILabProperties::is_invitation_code_Valid() const{
    return m_invitation_code_isValid;
}

OAILatestOperationResult OAILabProperties::getLatestOperationResult() const {
    return m_latest_operation_result;
}
void OAILabProperties::setLatestOperationResult(const OAILatestOperationResult &latest_operation_result) {
    m_latest_operation_result = latest_operation_result;
    m_latest_operation_result_isSet = true;
}

bool OAILabProperties::is_latest_operation_result_Set() const{
    return m_latest_operation_result_isSet;
}

bool OAILabProperties::is_latest_operation_result_Valid() const{
    return m_latest_operation_result_isValid;
}

qint32 OAILabProperties::getMaxUsersInLab() const {
    return m_max_users_in_lab;
}
void OAILabProperties::setMaxUsersInLab(const qint32 &max_users_in_lab) {
    m_max_users_in_lab = max_users_in_lab;
    m_max_users_in_lab_isSet = true;
}

bool OAILabProperties::is_max_users_in_lab_Set() const{
    return m_max_users_in_lab_isSet;
}

bool OAILabProperties::is_max_users_in_lab_Valid() const{
    return m_max_users_in_lab_isValid;
}

QString OAILabProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILabProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILabProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILabProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILabProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAILabProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAILabProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAILabProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

QString OAILabProperties::getUsageQuota() const {
    return m_usage_quota;
}
void OAILabProperties::setUsageQuota(const QString &usage_quota) {
    m_usage_quota = usage_quota;
    m_usage_quota_isSet = true;
}

bool OAILabProperties::is_usage_quota_Set() const{
    return m_usage_quota_isSet;
}

bool OAILabProperties::is_usage_quota_Valid() const{
    return m_usage_quota_isValid;
}

QString OAILabProperties::getUserAccessMode() const {
    return m_user_access_mode;
}
void OAILabProperties::setUserAccessMode(const QString &user_access_mode) {
    m_user_access_mode = user_access_mode;
    m_user_access_mode_isSet = true;
}

bool OAILabProperties::is_user_access_mode_Set() const{
    return m_user_access_mode_isSet;
}

bool OAILabProperties::is_user_access_mode_Valid() const{
    return m_user_access_mode_isValid;
}

qint32 OAILabProperties::getUserQuota() const {
    return m_user_quota;
}
void OAILabProperties::setUserQuota(const qint32 &user_quota) {
    m_user_quota = user_quota;
    m_user_quota_isSet = true;
}

bool OAILabProperties::is_user_quota_Set() const{
    return m_user_quota_isSet;
}

bool OAILabProperties::is_user_quota_Valid() const{
    return m_user_quota_isValid;
}

bool OAILabProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_users_in_lab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_access_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_quota_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
