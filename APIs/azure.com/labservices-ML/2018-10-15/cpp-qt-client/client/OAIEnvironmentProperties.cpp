/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentProperties::OAIEnvironmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentProperties::OAIEnvironmentProperties() {
    this->initializeModel();
}

OAIEnvironmentProperties::~OAIEnvironmentProperties() {}

void OAIEnvironmentProperties::initializeModel() {

    m_claimed_by_user_name_isSet = false;
    m_claimed_by_user_name_isValid = false;

    m_claimed_by_user_object_id_isSet = false;
    m_claimed_by_user_object_id_isValid = false;

    m_claimed_by_user_principal_id_isSet = false;
    m_claimed_by_user_principal_id_isValid = false;

    m_is_claimed_isSet = false;
    m_is_claimed_isValid = false;

    m_last_known_power_state_isSet = false;
    m_last_known_power_state_isValid = false;

    m_latest_operation_result_isSet = false;
    m_latest_operation_result_isValid = false;

    m_network_interface_isSet = false;
    m_network_interface_isValid = false;

    m_password_last_reset_isSet = false;
    m_password_last_reset_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_sets_isSet = false;
    m_resource_sets_isValid = false;

    m_total_usage_isSet = false;
    m_total_usage_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIEnvironmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentProperties::fromJsonObject(QJsonObject json) {

    m_claimed_by_user_name_isValid = ::OpenAPI::fromJsonValue(m_claimed_by_user_name, json[QString("claimedByUserName")]);
    m_claimed_by_user_name_isSet = !json[QString("claimedByUserName")].isNull() && m_claimed_by_user_name_isValid;

    m_claimed_by_user_object_id_isValid = ::OpenAPI::fromJsonValue(m_claimed_by_user_object_id, json[QString("claimedByUserObjectId")]);
    m_claimed_by_user_object_id_isSet = !json[QString("claimedByUserObjectId")].isNull() && m_claimed_by_user_object_id_isValid;

    m_claimed_by_user_principal_id_isValid = ::OpenAPI::fromJsonValue(m_claimed_by_user_principal_id, json[QString("claimedByUserPrincipalId")]);
    m_claimed_by_user_principal_id_isSet = !json[QString("claimedByUserPrincipalId")].isNull() && m_claimed_by_user_principal_id_isValid;

    m_is_claimed_isValid = ::OpenAPI::fromJsonValue(m_is_claimed, json[QString("isClaimed")]);
    m_is_claimed_isSet = !json[QString("isClaimed")].isNull() && m_is_claimed_isValid;

    m_last_known_power_state_isValid = ::OpenAPI::fromJsonValue(m_last_known_power_state, json[QString("lastKnownPowerState")]);
    m_last_known_power_state_isSet = !json[QString("lastKnownPowerState")].isNull() && m_last_known_power_state_isValid;

    m_latest_operation_result_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_result, json[QString("latestOperationResult")]);
    m_latest_operation_result_isSet = !json[QString("latestOperationResult")].isNull() && m_latest_operation_result_isValid;

    m_network_interface_isValid = ::OpenAPI::fromJsonValue(m_network_interface, json[QString("networkInterface")]);
    m_network_interface_isSet = !json[QString("networkInterface")].isNull() && m_network_interface_isValid;

    m_password_last_reset_isValid = ::OpenAPI::fromJsonValue(m_password_last_reset, json[QString("passwordLastReset")]);
    m_password_last_reset_isSet = !json[QString("passwordLastReset")].isNull() && m_password_last_reset_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_sets_isValid = ::OpenAPI::fromJsonValue(m_resource_sets, json[QString("resourceSets")]);
    m_resource_sets_isSet = !json[QString("resourceSets")].isNull() && m_resource_sets_isValid;

    m_total_usage_isValid = ::OpenAPI::fromJsonValue(m_total_usage, json[QString("totalUsage")]);
    m_total_usage_isSet = !json[QString("totalUsage")].isNull() && m_total_usage_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIEnvironmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_claimed_by_user_name_isSet) {
        obj.insert(QString("claimedByUserName"), ::OpenAPI::toJsonValue(m_claimed_by_user_name));
    }
    if (m_claimed_by_user_object_id_isSet) {
        obj.insert(QString("claimedByUserObjectId"), ::OpenAPI::toJsonValue(m_claimed_by_user_object_id));
    }
    if (m_claimed_by_user_principal_id_isSet) {
        obj.insert(QString("claimedByUserPrincipalId"), ::OpenAPI::toJsonValue(m_claimed_by_user_principal_id));
    }
    if (m_is_claimed_isSet) {
        obj.insert(QString("isClaimed"), ::OpenAPI::toJsonValue(m_is_claimed));
    }
    if (m_last_known_power_state_isSet) {
        obj.insert(QString("lastKnownPowerState"), ::OpenAPI::toJsonValue(m_last_known_power_state));
    }
    if (m_latest_operation_result.isSet()) {
        obj.insert(QString("latestOperationResult"), ::OpenAPI::toJsonValue(m_latest_operation_result));
    }
    if (m_network_interface.isSet()) {
        obj.insert(QString("networkInterface"), ::OpenAPI::toJsonValue(m_network_interface));
    }
    if (m_password_last_reset_isSet) {
        obj.insert(QString("passwordLastReset"), ::OpenAPI::toJsonValue(m_password_last_reset));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_sets.isSet()) {
        obj.insert(QString("resourceSets"), ::OpenAPI::toJsonValue(m_resource_sets));
    }
    if (m_total_usage_isSet) {
        obj.insert(QString("totalUsage"), ::OpenAPI::toJsonValue(m_total_usage));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAIEnvironmentProperties::getClaimedByUserName() const {
    return m_claimed_by_user_name;
}
void OAIEnvironmentProperties::setClaimedByUserName(const QString &claimed_by_user_name) {
    m_claimed_by_user_name = claimed_by_user_name;
    m_claimed_by_user_name_isSet = true;
}

bool OAIEnvironmentProperties::is_claimed_by_user_name_Set() const{
    return m_claimed_by_user_name_isSet;
}

bool OAIEnvironmentProperties::is_claimed_by_user_name_Valid() const{
    return m_claimed_by_user_name_isValid;
}

QString OAIEnvironmentProperties::getClaimedByUserObjectId() const {
    return m_claimed_by_user_object_id;
}
void OAIEnvironmentProperties::setClaimedByUserObjectId(const QString &claimed_by_user_object_id) {
    m_claimed_by_user_object_id = claimed_by_user_object_id;
    m_claimed_by_user_object_id_isSet = true;
}

bool OAIEnvironmentProperties::is_claimed_by_user_object_id_Set() const{
    return m_claimed_by_user_object_id_isSet;
}

bool OAIEnvironmentProperties::is_claimed_by_user_object_id_Valid() const{
    return m_claimed_by_user_object_id_isValid;
}

QString OAIEnvironmentProperties::getClaimedByUserPrincipalId() const {
    return m_claimed_by_user_principal_id;
}
void OAIEnvironmentProperties::setClaimedByUserPrincipalId(const QString &claimed_by_user_principal_id) {
    m_claimed_by_user_principal_id = claimed_by_user_principal_id;
    m_claimed_by_user_principal_id_isSet = true;
}

bool OAIEnvironmentProperties::is_claimed_by_user_principal_id_Set() const{
    return m_claimed_by_user_principal_id_isSet;
}

bool OAIEnvironmentProperties::is_claimed_by_user_principal_id_Valid() const{
    return m_claimed_by_user_principal_id_isValid;
}

bool OAIEnvironmentProperties::isIsClaimed() const {
    return m_is_claimed;
}
void OAIEnvironmentProperties::setIsClaimed(const bool &is_claimed) {
    m_is_claimed = is_claimed;
    m_is_claimed_isSet = true;
}

bool OAIEnvironmentProperties::is_is_claimed_Set() const{
    return m_is_claimed_isSet;
}

bool OAIEnvironmentProperties::is_is_claimed_Valid() const{
    return m_is_claimed_isValid;
}

QString OAIEnvironmentProperties::getLastKnownPowerState() const {
    return m_last_known_power_state;
}
void OAIEnvironmentProperties::setLastKnownPowerState(const QString &last_known_power_state) {
    m_last_known_power_state = last_known_power_state;
    m_last_known_power_state_isSet = true;
}

bool OAIEnvironmentProperties::is_last_known_power_state_Set() const{
    return m_last_known_power_state_isSet;
}

bool OAIEnvironmentProperties::is_last_known_power_state_Valid() const{
    return m_last_known_power_state_isValid;
}

OAILatestOperationResult OAIEnvironmentProperties::getLatestOperationResult() const {
    return m_latest_operation_result;
}
void OAIEnvironmentProperties::setLatestOperationResult(const OAILatestOperationResult &latest_operation_result) {
    m_latest_operation_result = latest_operation_result;
    m_latest_operation_result_isSet = true;
}

bool OAIEnvironmentProperties::is_latest_operation_result_Set() const{
    return m_latest_operation_result_isSet;
}

bool OAIEnvironmentProperties::is_latest_operation_result_Valid() const{
    return m_latest_operation_result_isValid;
}

OAINetworkInterface OAIEnvironmentProperties::getNetworkInterface() const {
    return m_network_interface;
}
void OAIEnvironmentProperties::setNetworkInterface(const OAINetworkInterface &network_interface) {
    m_network_interface = network_interface;
    m_network_interface_isSet = true;
}

bool OAIEnvironmentProperties::is_network_interface_Set() const{
    return m_network_interface_isSet;
}

bool OAIEnvironmentProperties::is_network_interface_Valid() const{
    return m_network_interface_isValid;
}

QDateTime OAIEnvironmentProperties::getPasswordLastReset() const {
    return m_password_last_reset;
}
void OAIEnvironmentProperties::setPasswordLastReset(const QDateTime &password_last_reset) {
    m_password_last_reset = password_last_reset;
    m_password_last_reset_isSet = true;
}

bool OAIEnvironmentProperties::is_password_last_reset_Set() const{
    return m_password_last_reset_isSet;
}

bool OAIEnvironmentProperties::is_password_last_reset_Valid() const{
    return m_password_last_reset_isValid;
}

QString OAIEnvironmentProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEnvironmentProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEnvironmentProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEnvironmentProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIResourceSet OAIEnvironmentProperties::getResourceSets() const {
    return m_resource_sets;
}
void OAIEnvironmentProperties::setResourceSets(const OAIResourceSet &resource_sets) {
    m_resource_sets = resource_sets;
    m_resource_sets_isSet = true;
}

bool OAIEnvironmentProperties::is_resource_sets_Set() const{
    return m_resource_sets_isSet;
}

bool OAIEnvironmentProperties::is_resource_sets_Valid() const{
    return m_resource_sets_isValid;
}

QString OAIEnvironmentProperties::getTotalUsage() const {
    return m_total_usage;
}
void OAIEnvironmentProperties::setTotalUsage(const QString &total_usage) {
    m_total_usage = total_usage;
    m_total_usage_isSet = true;
}

bool OAIEnvironmentProperties::is_total_usage_Set() const{
    return m_total_usage_isSet;
}

bool OAIEnvironmentProperties::is_total_usage_Valid() const{
    return m_total_usage_isValid;
}

QString OAIEnvironmentProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIEnvironmentProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIEnvironmentProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIEnvironmentProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIEnvironmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claimed_by_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimed_by_user_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimed_by_user_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_claimed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_known_power_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_last_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
