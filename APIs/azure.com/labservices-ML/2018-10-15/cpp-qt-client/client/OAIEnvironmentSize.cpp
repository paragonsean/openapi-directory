/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentSize::OAIEnvironmentSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentSize::OAIEnvironmentSize() {
    this->initializeModel();
}

OAIEnvironmentSize::~OAIEnvironmentSize() {}

void OAIEnvironmentSize::initializeModel() {

    m_max_price_isSet = false;
    m_max_price_isValid = false;

    m_min_memory_isSet = false;
    m_min_memory_isValid = false;

    m_min_number_of_cores_isSet = false;
    m_min_number_of_cores_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_vm_sizes_isSet = false;
    m_vm_sizes_isValid = false;
}

void OAIEnvironmentSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentSize::fromJsonObject(QJsonObject json) {

    m_max_price_isValid = ::OpenAPI::fromJsonValue(m_max_price, json[QString("maxPrice")]);
    m_max_price_isSet = !json[QString("maxPrice")].isNull() && m_max_price_isValid;

    m_min_memory_isValid = ::OpenAPI::fromJsonValue(m_min_memory, json[QString("minMemory")]);
    m_min_memory_isSet = !json[QString("minMemory")].isNull() && m_min_memory_isValid;

    m_min_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_min_number_of_cores, json[QString("minNumberOfCores")]);
    m_min_number_of_cores_isSet = !json[QString("minNumberOfCores")].isNull() && m_min_number_of_cores_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_vm_sizes_isValid = ::OpenAPI::fromJsonValue(m_vm_sizes, json[QString("vmSizes")]);
    m_vm_sizes_isSet = !json[QString("vmSizes")].isNull() && m_vm_sizes_isValid;
}

QString OAIEnvironmentSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentSize::asJsonObject() const {
    QJsonObject obj;
    if (m_max_price_isSet) {
        obj.insert(QString("maxPrice"), ::OpenAPI::toJsonValue(m_max_price));
    }
    if (m_min_memory_isSet) {
        obj.insert(QString("minMemory"), ::OpenAPI::toJsonValue(m_min_memory));
    }
    if (m_min_number_of_cores_isSet) {
        obj.insert(QString("minNumberOfCores"), ::OpenAPI::toJsonValue(m_min_number_of_cores));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_vm_sizes.size() > 0) {
        obj.insert(QString("vmSizes"), ::OpenAPI::toJsonValue(m_vm_sizes));
    }
    return obj;
}

double OAIEnvironmentSize::getMaxPrice() const {
    return m_max_price;
}
void OAIEnvironmentSize::setMaxPrice(const double &max_price) {
    m_max_price = max_price;
    m_max_price_isSet = true;
}

bool OAIEnvironmentSize::is_max_price_Set() const{
    return m_max_price_isSet;
}

bool OAIEnvironmentSize::is_max_price_Valid() const{
    return m_max_price_isValid;
}

double OAIEnvironmentSize::getMinMemory() const {
    return m_min_memory;
}
void OAIEnvironmentSize::setMinMemory(const double &min_memory) {
    m_min_memory = min_memory;
    m_min_memory_isSet = true;
}

bool OAIEnvironmentSize::is_min_memory_Set() const{
    return m_min_memory_isSet;
}

bool OAIEnvironmentSize::is_min_memory_Valid() const{
    return m_min_memory_isValid;
}

qint32 OAIEnvironmentSize::getMinNumberOfCores() const {
    return m_min_number_of_cores;
}
void OAIEnvironmentSize::setMinNumberOfCores(const qint32 &min_number_of_cores) {
    m_min_number_of_cores = min_number_of_cores;
    m_min_number_of_cores_isSet = true;
}

bool OAIEnvironmentSize::is_min_number_of_cores_Set() const{
    return m_min_number_of_cores_isSet;
}

bool OAIEnvironmentSize::is_min_number_of_cores_Valid() const{
    return m_min_number_of_cores_isValid;
}

QString OAIEnvironmentSize::getName() const {
    return m_name;
}
void OAIEnvironmentSize::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironmentSize::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironmentSize::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISizeInfo> OAIEnvironmentSize::getVmSizes() const {
    return m_vm_sizes;
}
void OAIEnvironmentSize::setVmSizes(const QList<OAISizeInfo> &vm_sizes) {
    m_vm_sizes = vm_sizes;
    m_vm_sizes_isSet = true;
}

bool OAIEnvironmentSize::is_vm_sizes_Set() const{
    return m_vm_sizes_isSet;
}

bool OAIEnvironmentSize::is_vm_sizes_Valid() const{
    return m_vm_sizes_isValid;
}

bool OAIEnvironmentSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
