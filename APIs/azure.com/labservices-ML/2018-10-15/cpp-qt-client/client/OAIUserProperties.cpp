/**
 * ManagedLabsClient
 * The Managed Labs Client.
 *
 * The version of the OpenAPI document: 2018-10-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProperties::OAIUserProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProperties::OAIUserProperties() {
    this->initializeModel();
}

OAIUserProperties::~OAIUserProperties() {}

void OAIUserProperties::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_latest_operation_result_isSet = false;
    m_latest_operation_result_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_total_usage_isSet = false;
    m_total_usage_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;
}

void OAIUserProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProperties::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_latest_operation_result_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_result, json[QString("latestOperationResult")]);
    m_latest_operation_result_isSet = !json[QString("latestOperationResult")].isNull() && m_latest_operation_result_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_total_usage_isValid = ::OpenAPI::fromJsonValue(m_total_usage, json[QString("totalUsage")]);
    m_total_usage_isSet = !json[QString("totalUsage")].isNull() && m_total_usage_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("uniqueIdentifier")]);
    m_unique_identifier_isSet = !json[QString("uniqueIdentifier")].isNull() && m_unique_identifier_isValid;
}

QString OAIUserProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_latest_operation_result.isSet()) {
        obj.insert(QString("latestOperationResult"), ::OpenAPI::toJsonValue(m_latest_operation_result));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_total_usage_isSet) {
        obj.insert(QString("totalUsage"), ::OpenAPI::toJsonValue(m_total_usage));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("uniqueIdentifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    return obj;
}

QString OAIUserProperties::getEmail() const {
    return m_email;
}
void OAIUserProperties::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserProperties::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserProperties::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserProperties::getFamilyName() const {
    return m_family_name;
}
void OAIUserProperties::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIUserProperties::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIUserProperties::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAIUserProperties::getGivenName() const {
    return m_given_name;
}
void OAIUserProperties::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIUserProperties::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIUserProperties::is_given_name_Valid() const{
    return m_given_name_isValid;
}

OAILatestOperationResult OAIUserProperties::getLatestOperationResult() const {
    return m_latest_operation_result;
}
void OAIUserProperties::setLatestOperationResult(const OAILatestOperationResult &latest_operation_result) {
    m_latest_operation_result = latest_operation_result;
    m_latest_operation_result_isSet = true;
}

bool OAIUserProperties::is_latest_operation_result_Set() const{
    return m_latest_operation_result_isSet;
}

bool OAIUserProperties::is_latest_operation_result_Valid() const{
    return m_latest_operation_result_isValid;
}

QString OAIUserProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIUserProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIUserProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIUserProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIUserProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIUserProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIUserProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIUserProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIUserProperties::getTotalUsage() const {
    return m_total_usage;
}
void OAIUserProperties::setTotalUsage(const QString &total_usage) {
    m_total_usage = total_usage;
    m_total_usage_isSet = true;
}

bool OAIUserProperties::is_total_usage_Set() const{
    return m_total_usage_isSet;
}

bool OAIUserProperties::is_total_usage_Valid() const{
    return m_total_usage_isValid;
}

QString OAIUserProperties::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIUserProperties::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIUserProperties::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIUserProperties::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

bool OAIUserProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
