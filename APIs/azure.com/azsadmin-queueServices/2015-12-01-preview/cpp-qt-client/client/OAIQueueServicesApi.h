/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueueServicesApi_H
#define OAI_OAIQueueServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQueueService.h"
#include "OAIQueueServices_ListMetricDefinitions_200_response.h"
#include "OAIQueueServices_ListMetrics_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueueServicesApi : public QObject {
    Q_OBJECT

public:
    OAIQueueServicesApi(const int timeOut = 0);
    ~OAIQueueServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  service_type QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void queueServicesGet(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &service_type, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  service_type QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void queueServicesListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &service_type, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  service_type QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void queueServicesListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &service_type, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queueServicesGetCallback(OAIHttpRequestWorker *worker);
    void queueServicesListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void queueServicesListMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queueServicesGetSignal(OAIQueueService summary);
    void queueServicesListMetricDefinitionsSignal(OAIQueueServices_ListMetricDefinitions_200_response summary);
    void queueServicesListMetricsSignal(OAIQueueServices_ListMetrics_200_response summary);


    void queueServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIQueueService summary);
    void queueServicesListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIQueueServices_ListMetricDefinitions_200_response summary);
    void queueServicesListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIQueueServices_ListMetrics_200_response summary);

    Q_DECL_DEPRECATED_X("Use queueServicesGetSignalError() instead")
    void queueServicesGetSignalE(OAIQueueService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesGetSignalError(OAIQueueService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueServicesListMetricDefinitionsSignalError() instead")
    void queueServicesListMetricDefinitionsSignalE(OAIQueueServices_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesListMetricDefinitionsSignalError(OAIQueueServices_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueServicesListMetricsSignalError() instead")
    void queueServicesListMetricsSignalE(OAIQueueServices_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesListMetricsSignalError(OAIQueueServices_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queueServicesGetSignalErrorFull() instead")
    void queueServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueServicesListMetricDefinitionsSignalErrorFull() instead")
    void queueServicesListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queueServicesListMetricsSignalErrorFull() instead")
    void queueServicesListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queueServicesListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
