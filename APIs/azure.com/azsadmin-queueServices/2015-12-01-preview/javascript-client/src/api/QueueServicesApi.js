/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueueService from '../model/QueueService';
import QueueServicesListMetricDefinitions200Response from '../model/QueueServicesListMetricDefinitions200Response';
import QueueServicesListMetrics200Response from '../model/QueueServicesListMetrics200Response';

/**
* QueueServices service.
* @module api/QueueServicesApi
* @version 2015-12-01-preview
*/
export default class QueueServicesApi {

    /**
    * Constructs a new QueueServicesApi. 
    * @alias module:api/QueueServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queueServicesGet operation.
     * @callback module:api/QueueServicesApi~queueServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the queue service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/QueueServicesApi~queueServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueService}
     */
    queueServicesGet(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesGet");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling queueServicesGet");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling queueServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/queueservices/{serviceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueServicesListMetricDefinitions operation.
     * @callback module:api/QueueServicesApi~queueServicesListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueServicesListMetricDefinitions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metric definitions for queue service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/QueueServicesApi~queueServicesListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueServicesListMetricDefinitions200Response}
     */
    queueServicesListMetricDefinitions(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesListMetricDefinitions");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling queueServicesListMetricDefinitions");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling queueServicesListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueServicesListMetricDefinitions200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/queueservices/{serviceType}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueServicesListMetrics operation.
     * @callback module:api/QueueServicesApi~queueServicesListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueServicesListMetrics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metrics for the queue service.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/String} serviceType The service type.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/QueueServicesApi~queueServicesListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueServicesListMetrics200Response}
     */
    queueServicesListMetrics(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queueServicesListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queueServicesListMetrics");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling queueServicesListMetrics");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling queueServicesListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queueServicesListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'serviceType': serviceType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueueServicesListMetrics200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/queueservices/{serviceType}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
