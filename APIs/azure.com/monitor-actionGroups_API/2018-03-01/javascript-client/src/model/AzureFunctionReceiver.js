/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AzureFunctionReceiver model module.
 * @module model/AzureFunctionReceiver
 * @version 2018-03-01
 */
class AzureFunctionReceiver {
    /**
     * Constructs a new <code>AzureFunctionReceiver</code>.
     * An azure function receiver.
     * @alias module:model/AzureFunctionReceiver
     * @param functionAppResourceId {String} The azure resource id of the function app.
     * @param functionName {String} The function name in the function app.
     * @param httpTriggerUrl {String} The http trigger url where http request sent to.
     * @param name {String} The name of the azure function receiver. Names must be unique across all receivers within an action group.
     */
    constructor(functionAppResourceId, functionName, httpTriggerUrl, name) { 
        
        AzureFunctionReceiver.initialize(this, functionAppResourceId, functionName, httpTriggerUrl, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, functionAppResourceId, functionName, httpTriggerUrl, name) { 
        obj['functionAppResourceId'] = functionAppResourceId;
        obj['functionName'] = functionName;
        obj['httpTriggerUrl'] = httpTriggerUrl;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AzureFunctionReceiver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureFunctionReceiver} obj Optional instance to populate.
     * @return {module:model/AzureFunctionReceiver} The populated <code>AzureFunctionReceiver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureFunctionReceiver();

            if (data.hasOwnProperty('functionAppResourceId')) {
                obj['functionAppResourceId'] = ApiClient.convertToType(data['functionAppResourceId'], 'String');
            }
            if (data.hasOwnProperty('functionName')) {
                obj['functionName'] = ApiClient.convertToType(data['functionName'], 'String');
            }
            if (data.hasOwnProperty('httpTriggerUrl')) {
                obj['httpTriggerUrl'] = ApiClient.convertToType(data['httpTriggerUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureFunctionReceiver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureFunctionReceiver</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureFunctionReceiver.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['functionAppResourceId'] && !(typeof data['functionAppResourceId'] === 'string' || data['functionAppResourceId'] instanceof String)) {
            throw new Error("Expected the field `functionAppResourceId` to be a primitive type in the JSON string but got " + data['functionAppResourceId']);
        }
        // ensure the json data is a string
        if (data['functionName'] && !(typeof data['functionName'] === 'string' || data['functionName'] instanceof String)) {
            throw new Error("Expected the field `functionName` to be a primitive type in the JSON string but got " + data['functionName']);
        }
        // ensure the json data is a string
        if (data['httpTriggerUrl'] && !(typeof data['httpTriggerUrl'] === 'string' || data['httpTriggerUrl'] instanceof String)) {
            throw new Error("Expected the field `httpTriggerUrl` to be a primitive type in the JSON string but got " + data['httpTriggerUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

AzureFunctionReceiver.RequiredProperties = ["functionAppResourceId", "functionName", "httpTriggerUrl", "name"];

/**
 * The azure resource id of the function app.
 * @member {String} functionAppResourceId
 */
AzureFunctionReceiver.prototype['functionAppResourceId'] = undefined;

/**
 * The function name in the function app.
 * @member {String} functionName
 */
AzureFunctionReceiver.prototype['functionName'] = undefined;

/**
 * The http trigger url where http request sent to.
 * @member {String} httpTriggerUrl
 */
AzureFunctionReceiver.prototype['httpTriggerUrl'] = undefined;

/**
 * The name of the azure function receiver. Names must be unique across all receivers within an action group.
 * @member {String} name
 */
AzureFunctionReceiver.prototype['name'] = undefined;






export default AzureFunctionReceiver;

