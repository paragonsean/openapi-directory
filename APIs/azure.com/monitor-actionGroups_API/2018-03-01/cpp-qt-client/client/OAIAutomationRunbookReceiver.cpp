/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationRunbookReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationRunbookReceiver::OAIAutomationRunbookReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationRunbookReceiver::OAIAutomationRunbookReceiver() {
    this->initializeModel();
}

OAIAutomationRunbookReceiver::~OAIAutomationRunbookReceiver() {}

void OAIAutomationRunbookReceiver::initializeModel() {

    m_automation_account_id_isSet = false;
    m_automation_account_id_isValid = false;

    m_is_global_runbook_isSet = false;
    m_is_global_runbook_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runbook_name_isSet = false;
    m_runbook_name_isValid = false;

    m_service_uri_isSet = false;
    m_service_uri_isValid = false;

    m_webhook_resource_id_isSet = false;
    m_webhook_resource_id_isValid = false;
}

void OAIAutomationRunbookReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationRunbookReceiver::fromJsonObject(QJsonObject json) {

    m_automation_account_id_isValid = ::OpenAPI::fromJsonValue(m_automation_account_id, json[QString("automationAccountId")]);
    m_automation_account_id_isSet = !json[QString("automationAccountId")].isNull() && m_automation_account_id_isValid;

    m_is_global_runbook_isValid = ::OpenAPI::fromJsonValue(m_is_global_runbook, json[QString("isGlobalRunbook")]);
    m_is_global_runbook_isSet = !json[QString("isGlobalRunbook")].isNull() && m_is_global_runbook_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runbook_name_isValid = ::OpenAPI::fromJsonValue(m_runbook_name, json[QString("runbookName")]);
    m_runbook_name_isSet = !json[QString("runbookName")].isNull() && m_runbook_name_isValid;

    m_service_uri_isValid = ::OpenAPI::fromJsonValue(m_service_uri, json[QString("serviceUri")]);
    m_service_uri_isSet = !json[QString("serviceUri")].isNull() && m_service_uri_isValid;

    m_webhook_resource_id_isValid = ::OpenAPI::fromJsonValue(m_webhook_resource_id, json[QString("webhookResourceId")]);
    m_webhook_resource_id_isSet = !json[QString("webhookResourceId")].isNull() && m_webhook_resource_id_isValid;
}

QString OAIAutomationRunbookReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationRunbookReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_account_id_isSet) {
        obj.insert(QString("automationAccountId"), ::OpenAPI::toJsonValue(m_automation_account_id));
    }
    if (m_is_global_runbook_isSet) {
        obj.insert(QString("isGlobalRunbook"), ::OpenAPI::toJsonValue(m_is_global_runbook));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runbook_name_isSet) {
        obj.insert(QString("runbookName"), ::OpenAPI::toJsonValue(m_runbook_name));
    }
    if (m_service_uri_isSet) {
        obj.insert(QString("serviceUri"), ::OpenAPI::toJsonValue(m_service_uri));
    }
    if (m_webhook_resource_id_isSet) {
        obj.insert(QString("webhookResourceId"), ::OpenAPI::toJsonValue(m_webhook_resource_id));
    }
    return obj;
}

QString OAIAutomationRunbookReceiver::getAutomationAccountId() const {
    return m_automation_account_id;
}
void OAIAutomationRunbookReceiver::setAutomationAccountId(const QString &automation_account_id) {
    m_automation_account_id = automation_account_id;
    m_automation_account_id_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_automation_account_id_Set() const{
    return m_automation_account_id_isSet;
}

bool OAIAutomationRunbookReceiver::is_automation_account_id_Valid() const{
    return m_automation_account_id_isValid;
}

bool OAIAutomationRunbookReceiver::isIsGlobalRunbook() const {
    return m_is_global_runbook;
}
void OAIAutomationRunbookReceiver::setIsGlobalRunbook(const bool &is_global_runbook) {
    m_is_global_runbook = is_global_runbook;
    m_is_global_runbook_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_is_global_runbook_Set() const{
    return m_is_global_runbook_isSet;
}

bool OAIAutomationRunbookReceiver::is_is_global_runbook_Valid() const{
    return m_is_global_runbook_isValid;
}

QString OAIAutomationRunbookReceiver::getName() const {
    return m_name;
}
void OAIAutomationRunbookReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutomationRunbookReceiver::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAutomationRunbookReceiver::getRunbookName() const {
    return m_runbook_name;
}
void OAIAutomationRunbookReceiver::setRunbookName(const QString &runbook_name) {
    m_runbook_name = runbook_name;
    m_runbook_name_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_runbook_name_Set() const{
    return m_runbook_name_isSet;
}

bool OAIAutomationRunbookReceiver::is_runbook_name_Valid() const{
    return m_runbook_name_isValid;
}

QString OAIAutomationRunbookReceiver::getServiceUri() const {
    return m_service_uri;
}
void OAIAutomationRunbookReceiver::setServiceUri(const QString &service_uri) {
    m_service_uri = service_uri;
    m_service_uri_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_service_uri_Set() const{
    return m_service_uri_isSet;
}

bool OAIAutomationRunbookReceiver::is_service_uri_Valid() const{
    return m_service_uri_isValid;
}

QString OAIAutomationRunbookReceiver::getWebhookResourceId() const {
    return m_webhook_resource_id;
}
void OAIAutomationRunbookReceiver::setWebhookResourceId(const QString &webhook_resource_id) {
    m_webhook_resource_id = webhook_resource_id;
    m_webhook_resource_id_isSet = true;
}

bool OAIAutomationRunbookReceiver::is_webhook_resource_id_Set() const{
    return m_webhook_resource_id_isSet;
}

bool OAIAutomationRunbookReceiver::is_webhook_resource_id_Valid() const{
    return m_webhook_resource_id_isValid;
}

bool OAIAutomationRunbookReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_runbook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runbook_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationRunbookReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_automation_account_id_isValid && m_is_global_runbook_isValid && m_runbook_name_isValid && m_webhook_resource_id_isValid && true;
}

} // namespace OpenAPI
