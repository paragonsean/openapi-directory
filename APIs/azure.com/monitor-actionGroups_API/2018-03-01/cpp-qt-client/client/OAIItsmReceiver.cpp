/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItsmReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItsmReceiver::OAIItsmReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItsmReceiver::OAIItsmReceiver() {
    this->initializeModel();
}

OAIItsmReceiver::~OAIItsmReceiver() {}

void OAIItsmReceiver::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_ticket_configuration_isSet = false;
    m_ticket_configuration_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIItsmReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItsmReceiver::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_ticket_configuration_isValid = ::OpenAPI::fromJsonValue(m_ticket_configuration, json[QString("ticketConfiguration")]);
    m_ticket_configuration_isSet = !json[QString("ticketConfiguration")].isNull() && m_ticket_configuration_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIItsmReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItsmReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_ticket_configuration_isSet) {
        obj.insert(QString("ticketConfiguration"), ::OpenAPI::toJsonValue(m_ticket_configuration));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIItsmReceiver::getConnectionId() const {
    return m_connection_id;
}
void OAIItsmReceiver::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIItsmReceiver::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIItsmReceiver::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAIItsmReceiver::getName() const {
    return m_name;
}
void OAIItsmReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItsmReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItsmReceiver::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItsmReceiver::getRegion() const {
    return m_region;
}
void OAIItsmReceiver::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIItsmReceiver::is_region_Set() const{
    return m_region_isSet;
}

bool OAIItsmReceiver::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIItsmReceiver::getTicketConfiguration() const {
    return m_ticket_configuration;
}
void OAIItsmReceiver::setTicketConfiguration(const QString &ticket_configuration) {
    m_ticket_configuration = ticket_configuration;
    m_ticket_configuration_isSet = true;
}

bool OAIItsmReceiver::is_ticket_configuration_Set() const{
    return m_ticket_configuration_isSet;
}

bool OAIItsmReceiver::is_ticket_configuration_Valid() const{
    return m_ticket_configuration_isValid;
}

QString OAIItsmReceiver::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIItsmReceiver::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIItsmReceiver::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIItsmReceiver::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIItsmReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItsmReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_id_isValid && m_name_isValid && m_region_isValid && m_ticket_configuration_isValid && m_workspace_id_isValid && true;
}

} // namespace OpenAPI
