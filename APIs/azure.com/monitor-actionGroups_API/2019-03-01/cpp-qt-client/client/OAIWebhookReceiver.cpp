/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookReceiver::OAIWebhookReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookReceiver::OAIWebhookReceiver() {
    this->initializeModel();
}

OAIWebhookReceiver::~OAIWebhookReceiver() {}

void OAIWebhookReceiver::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_uri_isSet = false;
    m_service_uri_isValid = false;

    m_use_common_alert_schema_isSet = false;
    m_use_common_alert_schema_isValid = false;
}

void OAIWebhookReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookReceiver::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_uri_isValid = ::OpenAPI::fromJsonValue(m_service_uri, json[QString("serviceUri")]);
    m_service_uri_isSet = !json[QString("serviceUri")].isNull() && m_service_uri_isValid;

    m_use_common_alert_schema_isValid = ::OpenAPI::fromJsonValue(m_use_common_alert_schema, json[QString("useCommonAlertSchema")]);
    m_use_common_alert_schema_isSet = !json[QString("useCommonAlertSchema")].isNull() && m_use_common_alert_schema_isValid;
}

QString OAIWebhookReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_uri_isSet) {
        obj.insert(QString("serviceUri"), ::OpenAPI::toJsonValue(m_service_uri));
    }
    if (m_use_common_alert_schema_isSet) {
        obj.insert(QString("useCommonAlertSchema"), ::OpenAPI::toJsonValue(m_use_common_alert_schema));
    }
    return obj;
}

QString OAIWebhookReceiver::getName() const {
    return m_name;
}
void OAIWebhookReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhookReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhookReceiver::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhookReceiver::getServiceUri() const {
    return m_service_uri;
}
void OAIWebhookReceiver::setServiceUri(const QString &service_uri) {
    m_service_uri = service_uri;
    m_service_uri_isSet = true;
}

bool OAIWebhookReceiver::is_service_uri_Set() const{
    return m_service_uri_isSet;
}

bool OAIWebhookReceiver::is_service_uri_Valid() const{
    return m_service_uri_isValid;
}

bool OAIWebhookReceiver::isUseCommonAlertSchema() const {
    return m_use_common_alert_schema;
}
void OAIWebhookReceiver::setUseCommonAlertSchema(const bool &use_common_alert_schema) {
    m_use_common_alert_schema = use_common_alert_schema;
    m_use_common_alert_schema_isSet = true;
}

bool OAIWebhookReceiver::is_use_common_alert_schema_Set() const{
    return m_use_common_alert_schema_isSet;
}

bool OAIWebhookReceiver::is_use_common_alert_schema_Valid() const{
    return m_use_common_alert_schema_isValid;
}

bool OAIWebhookReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_common_alert_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_service_uri_isValid && m_use_common_alert_schema_isValid && true;
}

} // namespace OpenAPI
