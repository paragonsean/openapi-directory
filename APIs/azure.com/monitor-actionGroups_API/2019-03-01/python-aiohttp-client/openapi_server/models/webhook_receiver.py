# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, service_uri: str=None, use_common_alert_schema: bool=None):
        """WebhookReceiver - a model defined in OpenAPI

        :param name: The name of this WebhookReceiver.
        :param service_uri: The service_uri of this WebhookReceiver.
        :param use_common_alert_schema: The use_common_alert_schema of this WebhookReceiver.
        """
        self.openapi_types = {
            'name': str,
            'service_uri': str,
            'use_common_alert_schema': bool
        }

        self.attribute_map = {
            'name': 'name',
            'service_uri': 'serviceUri',
            'use_common_alert_schema': 'useCommonAlertSchema'
        }

        self._name = name
        self._service_uri = service_uri
        self._use_common_alert_schema = use_common_alert_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookReceiver of this WebhookReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WebhookReceiver.

        The name of the webhook receiver. Names must be unique across all receivers within an action group.

        :return: The name of this WebhookReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookReceiver.

        The name of the webhook receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this WebhookReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def service_uri(self):
        """Gets the service_uri of this WebhookReceiver.

        The URI where webhooks should be sent.

        :return: The service_uri of this WebhookReceiver.
        :rtype: str
        """
        return self._service_uri

    @service_uri.setter
    def service_uri(self, service_uri):
        """Sets the service_uri of this WebhookReceiver.

        The URI where webhooks should be sent.

        :param service_uri: The service_uri of this WebhookReceiver.
        :type service_uri: str
        """
        if service_uri is None:
            raise ValueError("Invalid value for `service_uri`, must not be `None`")

        self._service_uri = service_uri

    @property
    def use_common_alert_schema(self):
        """Gets the use_common_alert_schema of this WebhookReceiver.

        Indicates whether to use common alert schema.

        :return: The use_common_alert_schema of this WebhookReceiver.
        :rtype: bool
        """
        return self._use_common_alert_schema

    @use_common_alert_schema.setter
    def use_common_alert_schema(self, use_common_alert_schema):
        """Sets the use_common_alert_schema of this WebhookReceiver.

        Indicates whether to use common alert schema.

        :param use_common_alert_schema: The use_common_alert_schema of this WebhookReceiver.
        :type use_common_alert_schema: bool
        """
        if use_common_alert_schema is None:
            raise ValueError("Invalid value for `use_common_alert_schema`, must not be `None`")

        self._use_common_alert_schema = use_common_alert_schema
