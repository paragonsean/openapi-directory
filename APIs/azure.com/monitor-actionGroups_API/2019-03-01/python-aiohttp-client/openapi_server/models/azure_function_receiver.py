# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureFunctionReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_app_resource_id: str=None, function_name: str=None, http_trigger_url: str=None, name: str=None, use_common_alert_schema: bool=None):
        """AzureFunctionReceiver - a model defined in OpenAPI

        :param function_app_resource_id: The function_app_resource_id of this AzureFunctionReceiver.
        :param function_name: The function_name of this AzureFunctionReceiver.
        :param http_trigger_url: The http_trigger_url of this AzureFunctionReceiver.
        :param name: The name of this AzureFunctionReceiver.
        :param use_common_alert_schema: The use_common_alert_schema of this AzureFunctionReceiver.
        """
        self.openapi_types = {
            'function_app_resource_id': str,
            'function_name': str,
            'http_trigger_url': str,
            'name': str,
            'use_common_alert_schema': bool
        }

        self.attribute_map = {
            'function_app_resource_id': 'functionAppResourceId',
            'function_name': 'functionName',
            'http_trigger_url': 'httpTriggerUrl',
            'name': 'name',
            'use_common_alert_schema': 'useCommonAlertSchema'
        }

        self._function_app_resource_id = function_app_resource_id
        self._function_name = function_name
        self._http_trigger_url = http_trigger_url
        self._name = name
        self._use_common_alert_schema = use_common_alert_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureFunctionReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureFunctionReceiver of this AzureFunctionReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_app_resource_id(self):
        """Gets the function_app_resource_id of this AzureFunctionReceiver.

        The azure resource id of the function app.

        :return: The function_app_resource_id of this AzureFunctionReceiver.
        :rtype: str
        """
        return self._function_app_resource_id

    @function_app_resource_id.setter
    def function_app_resource_id(self, function_app_resource_id):
        """Sets the function_app_resource_id of this AzureFunctionReceiver.

        The azure resource id of the function app.

        :param function_app_resource_id: The function_app_resource_id of this AzureFunctionReceiver.
        :type function_app_resource_id: str
        """
        if function_app_resource_id is None:
            raise ValueError("Invalid value for `function_app_resource_id`, must not be `None`")

        self._function_app_resource_id = function_app_resource_id

    @property
    def function_name(self):
        """Gets the function_name of this AzureFunctionReceiver.

        The function name in the function app.

        :return: The function_name of this AzureFunctionReceiver.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this AzureFunctionReceiver.

        The function name in the function app.

        :param function_name: The function_name of this AzureFunctionReceiver.
        :type function_name: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")

        self._function_name = function_name

    @property
    def http_trigger_url(self):
        """Gets the http_trigger_url of this AzureFunctionReceiver.

        The http trigger url where http request sent to.

        :return: The http_trigger_url of this AzureFunctionReceiver.
        :rtype: str
        """
        return self._http_trigger_url

    @http_trigger_url.setter
    def http_trigger_url(self, http_trigger_url):
        """Sets the http_trigger_url of this AzureFunctionReceiver.

        The http trigger url where http request sent to.

        :param http_trigger_url: The http_trigger_url of this AzureFunctionReceiver.
        :type http_trigger_url: str
        """
        if http_trigger_url is None:
            raise ValueError("Invalid value for `http_trigger_url`, must not be `None`")

        self._http_trigger_url = http_trigger_url

    @property
    def name(self):
        """Gets the name of this AzureFunctionReceiver.

        The name of the azure function receiver. Names must be unique across all receivers within an action group.

        :return: The name of this AzureFunctionReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureFunctionReceiver.

        The name of the azure function receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this AzureFunctionReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def use_common_alert_schema(self):
        """Gets the use_common_alert_schema of this AzureFunctionReceiver.

        Indicates whether to use common alert schema.

        :return: The use_common_alert_schema of this AzureFunctionReceiver.
        :rtype: bool
        """
        return self._use_common_alert_schema

    @use_common_alert_schema.setter
    def use_common_alert_schema(self, use_common_alert_schema):
        """Sets the use_common_alert_schema of this AzureFunctionReceiver.

        Indicates whether to use common alert schema.

        :param use_common_alert_schema: The use_common_alert_schema of this AzureFunctionReceiver.
        :type use_common_alert_schema: bool
        """
        if use_common_alert_schema is None:
            raise ValueError("Invalid value for `use_common_alert_schema`, must not be `None`")

        self._use_common_alert_schema = use_common_alert_schema
