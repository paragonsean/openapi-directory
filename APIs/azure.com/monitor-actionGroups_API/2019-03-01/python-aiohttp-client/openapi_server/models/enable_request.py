# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, receiver_name: str=None):
        """EnableRequest - a model defined in OpenAPI

        :param receiver_name: The receiver_name of this EnableRequest.
        """
        self.openapi_types = {
            'receiver_name': str
        }

        self.attribute_map = {
            'receiver_name': 'receiverName'
        }

        self._receiver_name = receiver_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableRequest of this EnableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def receiver_name(self):
        """Gets the receiver_name of this EnableRequest.

        The name of the receiver to resubscribe.

        :return: The receiver_name of this EnableRequest.
        :rtype: str
        """
        return self._receiver_name

    @receiver_name.setter
    def receiver_name(self, receiver_name):
        """Sets the receiver_name of this EnableRequest.

        The name of the receiver to resubscribe.

        :param receiver_name: The receiver_name of this EnableRequest.
        :type receiver_name: str
        """
        if receiver_name is None:
            raise ValueError("Invalid value for `receiver_name`, must not be `None`")

        self._receiver_name = receiver_name
