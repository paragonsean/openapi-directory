/*
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionGroupList;
import org.openapitools.client.model.ActionGroupPatchBody;
import org.openapitools.client.model.ActionGroupResource;
import org.openapitools.client.model.EnableRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionGroupsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroup The action group to create or use for the update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new action group was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsCreateOrUpdateCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, ActionGroupResource actionGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionGroup;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionGroupName" + "}", localVarApiClient.escapeString(actionGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, ActionGroupResource actionGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'actionGroupName' is set
        if (actionGroupName == null) {
            throw new ApiException("Missing the required parameter 'actionGroupName' when calling actionGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'actionGroup' is set
        if (actionGroup == null) {
            throw new ApiException("Missing the required parameter 'actionGroup' when calling actionGroupsCreateOrUpdate(Async)");
        }

        return actionGroupsCreateOrUpdateCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, actionGroup, _callback);

    }

    /**
     * 
     * Create a new action group or update an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroup The action group to create or use for the update. (required)
     * @return ActionGroupResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new action group was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ActionGroupResource actionGroupsCreateOrUpdate(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, ActionGroupResource actionGroup) throws ApiException {
        ApiResponse<ActionGroupResource> localVarResp = actionGroupsCreateOrUpdateWithHttpInfo(resourceGroupName, actionGroupName, subscriptionId, apiVersion, actionGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new action group or update an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroup The action group to create or use for the update. (required)
     * @return ApiResponse&lt;ActionGroupResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new action group was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionGroupResource> actionGroupsCreateOrUpdateWithHttpInfo(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, ActionGroupResource actionGroup) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, actionGroup, null);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new action group or update an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroup The action group to create or use for the update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A new action group was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsCreateOrUpdateAsync(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, ActionGroupResource actionGroup, final ApiCallback<ActionGroupResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, actionGroup, _callback);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The action group was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The action group does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsDeleteCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionGroupName" + "}", localVarApiClient.escapeString(actionGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsDeleteValidateBeforeCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsDelete(Async)");
        }

        // verify the required parameter 'actionGroupName' is set
        if (actionGroupName == null) {
            throw new ApiException("Missing the required parameter 'actionGroupName' when calling actionGroupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsDelete(Async)");
        }

        return actionGroupsDeleteCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Delete an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The action group was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The action group does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void actionGroupsDelete(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion) throws ApiException {
        actionGroupsDeleteWithHttpInfo(resourceGroupName, actionGroupName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Delete an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The action group was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The action group does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionGroupsDeleteWithHttpInfo(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsDeleteValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The action group was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The action group does not exist. It may have already been deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsDeleteAsync(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsDeleteValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsEnableReceiver
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param enableRequest The receiver to re-enable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The receiver was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The receiver is already enabled in the action group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the receiver could not be enabled, e.g.: 404: The action group was not found or no matching receiver was found in the action group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsEnableReceiverCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, EnableRequest enableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionGroupName" + "}", localVarApiClient.escapeString(actionGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsEnableReceiverValidateBeforeCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, EnableRequest enableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsEnableReceiver(Async)");
        }

        // verify the required parameter 'actionGroupName' is set
        if (actionGroupName == null) {
            throw new ApiException("Missing the required parameter 'actionGroupName' when calling actionGroupsEnableReceiver(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsEnableReceiver(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsEnableReceiver(Async)");
        }

        // verify the required parameter 'enableRequest' is set
        if (enableRequest == null) {
            throw new ApiException("Missing the required parameter 'enableRequest' when calling actionGroupsEnableReceiver(Async)");
        }

        return actionGroupsEnableReceiverCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, enableRequest, _callback);

    }

    /**
     * 
     * Enable a receiver in an action group. This changes the receiver&#39;s status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param enableRequest The receiver to re-enable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The receiver was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The receiver is already enabled in the action group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the receiver could not be enabled, e.g.: 404: The action group was not found or no matching receiver was found in the action group. </td><td>  -  </td></tr>
     </table>
     */
    public void actionGroupsEnableReceiver(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, EnableRequest enableRequest) throws ApiException {
        actionGroupsEnableReceiverWithHttpInfo(resourceGroupName, actionGroupName, subscriptionId, apiVersion, enableRequest);
    }

    /**
     * 
     * Enable a receiver in an action group. This changes the receiver&#39;s status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param enableRequest The receiver to re-enable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The receiver was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The receiver is already enabled in the action group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the receiver could not be enabled, e.g.: 404: The action group was not found or no matching receiver was found in the action group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionGroupsEnableReceiverWithHttpInfo(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, EnableRequest enableRequest) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsEnableReceiverValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, enableRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enable a receiver in an action group. This changes the receiver&#39;s status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param enableRequest The receiver to re-enable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The receiver was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The receiver is already enabled in the action group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the receiver could not be enabled, e.g.: 404: The action group was not found or no matching receiver was found in the action group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsEnableReceiverAsync(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, EnableRequest enableRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsEnableReceiverValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, enableRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be retrieved. 404: The action group does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsGetCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionGroupName" + "}", localVarApiClient.escapeString(actionGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsGetValidateBeforeCall(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsGet(Async)");
        }

        // verify the required parameter 'actionGroupName' is set
        if (actionGroupName == null) {
            throw new ApiException("Missing the required parameter 'actionGroupName' when calling actionGroupsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsGet(Async)");
        }

        return actionGroupsGetCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActionGroupResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be retrieved. 404: The action group does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ActionGroupResource actionGroupsGet(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ActionGroupResource> localVarResp = actionGroupsGetWithHttpInfo(resourceGroupName, actionGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActionGroupResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be retrieved. 404: The action group does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionGroupResource> actionGroupsGetWithHttpInfo(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsGetValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an action group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the action group could not be retrieved. 404: The action group does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsGetAsync(String resourceGroupName, String actionGroupName, String subscriptionId, String apiVersion, final ApiCallback<ActionGroupResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsGetValidateBeforeCall(resourceGroupName, actionGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsListByResourceGroup(Async)");
        }

        return actionGroupsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all action groups in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActionGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ActionGroupList actionGroupsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ActionGroupList> localVarResp = actionGroupsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all action groups in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActionGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionGroupList> actionGroupsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActionGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all action groups in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<ActionGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActionGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsListBySubscriptionId
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsListBySubscriptionIdCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsListBySubscriptionIdValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsListBySubscriptionId(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsListBySubscriptionId(Async)");
        }

        return actionGroupsListBySubscriptionIdCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of all action groups in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ActionGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ActionGroupList actionGroupsListBySubscriptionId(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ActionGroupList> localVarResp = actionGroupsListBySubscriptionIdWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all action groups in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;ActionGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionGroupList> actionGroupsListBySubscriptionIdWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActionGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all action groups in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred and the list of action groups could not be retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsListBySubscriptionIdAsync(String subscriptionId, String apiVersion, final ApiCallback<ActionGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActionGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGroupsUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroupPatch Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsUpdateCall(String subscriptionId, String resourceGroupName, String actionGroupName, String apiVersion, ActionGroupPatchBody actionGroupPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionGroupPatch;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionGroupName" + "}", localVarApiClient.escapeString(actionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGroupsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String actionGroupName, String apiVersion, ActionGroupPatchBody actionGroupPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionGroupsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionGroupsUpdate(Async)");
        }

        // verify the required parameter 'actionGroupName' is set
        if (actionGroupName == null) {
            throw new ApiException("Missing the required parameter 'actionGroupName' when calling actionGroupsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionGroupsUpdate(Async)");
        }

        // verify the required parameter 'actionGroupPatch' is set
        if (actionGroupPatch == null) {
            throw new ApiException("Missing the required parameter 'actionGroupPatch' when calling actionGroupsUpdate(Async)");
        }

        return actionGroupsUpdateCall(subscriptionId, resourceGroupName, actionGroupName, apiVersion, actionGroupPatch, _callback);

    }

    /**
     * 
     * Updates an existing action group&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroupPatch Parameters supplied to the operation. (required)
     * @return ActionGroupResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionGroupResource actionGroupsUpdate(String subscriptionId, String resourceGroupName, String actionGroupName, String apiVersion, ActionGroupPatchBody actionGroupPatch) throws ApiException {
        ApiResponse<ActionGroupResource> localVarResp = actionGroupsUpdateWithHttpInfo(subscriptionId, resourceGroupName, actionGroupName, apiVersion, actionGroupPatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing action group&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroupPatch Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;ActionGroupResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionGroupResource> actionGroupsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String actionGroupName, String apiVersion, ActionGroupPatchBody actionGroupPatch) throws ApiException {
        okhttp3.Call localVarCall = actionGroupsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionGroupName, apiVersion, actionGroupPatch, null);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing action group&#39;s tags. To update other fields use the CreateOrUpdate method.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param actionGroupName The name of the action group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param actionGroupPatch Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An existing action group was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGroupsUpdateAsync(String subscriptionId, String resourceGroupName, String actionGroupName, String apiVersion, ActionGroupPatchBody actionGroupPatch, final ApiCallback<ActionGroupResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGroupsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionGroupName, apiVersion, actionGroupPatch, _callback);
        Type localVarReturnType = new TypeToken<ActionGroupResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
