/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFunctionReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFunctionReceiver::OAIAzureFunctionReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFunctionReceiver::OAIAzureFunctionReceiver() {
    this->initializeModel();
}

OAIAzureFunctionReceiver::~OAIAzureFunctionReceiver() {}

void OAIAzureFunctionReceiver::initializeModel() {

    m_function_app_resource_id_isSet = false;
    m_function_app_resource_id_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_http_trigger_url_isSet = false;
    m_http_trigger_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAzureFunctionReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFunctionReceiver::fromJsonObject(QJsonObject json) {

    m_function_app_resource_id_isValid = ::OpenAPI::fromJsonValue(m_function_app_resource_id, json[QString("functionAppResourceId")]);
    m_function_app_resource_id_isSet = !json[QString("functionAppResourceId")].isNull() && m_function_app_resource_id_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_http_trigger_url_isValid = ::OpenAPI::fromJsonValue(m_http_trigger_url, json[QString("httpTriggerUrl")]);
    m_http_trigger_url_isSet = !json[QString("httpTriggerUrl")].isNull() && m_http_trigger_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAzureFunctionReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFunctionReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_function_app_resource_id_isSet) {
        obj.insert(QString("functionAppResourceId"), ::OpenAPI::toJsonValue(m_function_app_resource_id));
    }
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_http_trigger_url_isSet) {
        obj.insert(QString("httpTriggerUrl"), ::OpenAPI::toJsonValue(m_http_trigger_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAzureFunctionReceiver::getFunctionAppResourceId() const {
    return m_function_app_resource_id;
}
void OAIAzureFunctionReceiver::setFunctionAppResourceId(const QString &function_app_resource_id) {
    m_function_app_resource_id = function_app_resource_id;
    m_function_app_resource_id_isSet = true;
}

bool OAIAzureFunctionReceiver::is_function_app_resource_id_Set() const{
    return m_function_app_resource_id_isSet;
}

bool OAIAzureFunctionReceiver::is_function_app_resource_id_Valid() const{
    return m_function_app_resource_id_isValid;
}

QString OAIAzureFunctionReceiver::getFunctionName() const {
    return m_function_name;
}
void OAIAzureFunctionReceiver::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIAzureFunctionReceiver::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIAzureFunctionReceiver::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIAzureFunctionReceiver::getHttpTriggerUrl() const {
    return m_http_trigger_url;
}
void OAIAzureFunctionReceiver::setHttpTriggerUrl(const QString &http_trigger_url) {
    m_http_trigger_url = http_trigger_url;
    m_http_trigger_url_isSet = true;
}

bool OAIAzureFunctionReceiver::is_http_trigger_url_Set() const{
    return m_http_trigger_url_isSet;
}

bool OAIAzureFunctionReceiver::is_http_trigger_url_Valid() const{
    return m_http_trigger_url_isValid;
}

QString OAIAzureFunctionReceiver::getName() const {
    return m_name;
}
void OAIAzureFunctionReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAzureFunctionReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAzureFunctionReceiver::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAzureFunctionReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_app_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_trigger_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFunctionReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_function_app_resource_id_isValid && m_function_name_isValid && m_http_trigger_url_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
