/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActionGroupList.h"
#include "OAIActionGroupPatchBody.h"
#include "OAIActionGroupResource.h"
#include "OAIEnableRequest.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  action_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  action_group OAIActionGroupResource [required]
    */
    virtual void actionGroupsCreateOrUpdate(const QString &resource_group_name, const QString &action_group_name, const QString &subscription_id, const QString &api_version, const OAIActionGroupResource &action_group);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  action_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void actionGroupsDelete(const QString &resource_group_name, const QString &action_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  action_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  enable_request OAIEnableRequest [required]
    */
    virtual void actionGroupsEnableReceiver(const QString &resource_group_name, const QString &action_group_name, const QString &subscription_id, const QString &api_version, const OAIEnableRequest &enable_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  action_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void actionGroupsGet(const QString &resource_group_name, const QString &action_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void actionGroupsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void actionGroupsListBySubscriptionId(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  action_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  action_group_patch OAIActionGroupPatchBody [required]
    */
    virtual void actionGroupsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &action_group_name, const QString &api_version, const OAIActionGroupPatchBody &action_group_patch);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void actionGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void actionGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void actionGroupsEnableReceiverCallback(OAIHttpRequestWorker *worker);
    void actionGroupsGetCallback(OAIHttpRequestWorker *worker);
    void actionGroupsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void actionGroupsListBySubscriptionIdCallback(OAIHttpRequestWorker *worker);
    void actionGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void actionGroupsCreateOrUpdateSignal(OAIActionGroupResource summary);
    void actionGroupsDeleteSignal();
    void actionGroupsEnableReceiverSignal();
    void actionGroupsGetSignal(OAIActionGroupResource summary);
    void actionGroupsListByResourceGroupSignal(OAIActionGroupList summary);
    void actionGroupsListBySubscriptionIdSignal(OAIActionGroupList summary);
    void actionGroupsUpdateSignal(OAIActionGroupResource summary);


    void actionGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIActionGroupResource summary);
    void actionGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void actionGroupsEnableReceiverSignalFull(OAIHttpRequestWorker *worker);
    void actionGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIActionGroupResource summary);
    void actionGroupsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIActionGroupList summary);
    void actionGroupsListBySubscriptionIdSignalFull(OAIHttpRequestWorker *worker, OAIActionGroupList summary);
    void actionGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIActionGroupResource summary);

    Q_DECL_DEPRECATED_X("Use actionGroupsCreateOrUpdateSignalError() instead")
    void actionGroupsCreateOrUpdateSignalE(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsCreateOrUpdateSignalError(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsDeleteSignalError() instead")
    void actionGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsEnableReceiverSignalError() instead")
    void actionGroupsEnableReceiverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsEnableReceiverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsGetSignalError() instead")
    void actionGroupsGetSignalE(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsGetSignalError(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsListByResourceGroupSignalError() instead")
    void actionGroupsListByResourceGroupSignalE(OAIActionGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsListByResourceGroupSignalError(OAIActionGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsListBySubscriptionIdSignalError() instead")
    void actionGroupsListBySubscriptionIdSignalE(OAIActionGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsListBySubscriptionIdSignalError(OAIActionGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsUpdateSignalError() instead")
    void actionGroupsUpdateSignalE(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsUpdateSignalError(OAIActionGroupResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use actionGroupsCreateOrUpdateSignalErrorFull() instead")
    void actionGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsDeleteSignalErrorFull() instead")
    void actionGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsEnableReceiverSignalErrorFull() instead")
    void actionGroupsEnableReceiverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsEnableReceiverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsGetSignalErrorFull() instead")
    void actionGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsListByResourceGroupSignalErrorFull() instead")
    void actionGroupsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsListBySubscriptionIdSignalErrorFull() instead")
    void actionGroupsListBySubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsListBySubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionGroupsUpdateSignalErrorFull() instead")
    void actionGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
