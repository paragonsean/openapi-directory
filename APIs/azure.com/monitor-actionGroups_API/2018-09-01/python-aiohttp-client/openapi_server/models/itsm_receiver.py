# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItsmReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, name: str=None, region: str=None, ticket_configuration: str=None, workspace_id: str=None):
        """ItsmReceiver - a model defined in OpenAPI

        :param connection_id: The connection_id of this ItsmReceiver.
        :param name: The name of this ItsmReceiver.
        :param region: The region of this ItsmReceiver.
        :param ticket_configuration: The ticket_configuration of this ItsmReceiver.
        :param workspace_id: The workspace_id of this ItsmReceiver.
        """
        self.openapi_types = {
            'connection_id': str,
            'name': str,
            'region': str,
            'ticket_configuration': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'name': 'name',
            'region': 'region',
            'ticket_configuration': 'ticketConfiguration',
            'workspace_id': 'workspaceId'
        }

        self._connection_id = connection_id
        self._name = name
        self._region = region
        self._ticket_configuration = ticket_configuration
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItsmReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItsmReceiver of this ItsmReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this ItsmReceiver.

        Unique identification of ITSM connection among multiple defined in above workspace.

        :return: The connection_id of this ItsmReceiver.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ItsmReceiver.

        Unique identification of ITSM connection among multiple defined in above workspace.

        :param connection_id: The connection_id of this ItsmReceiver.
        :type connection_id: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")

        self._connection_id = connection_id

    @property
    def name(self):
        """Gets the name of this ItsmReceiver.

        The name of the Itsm receiver. Names must be unique across all receivers within an action group.

        :return: The name of this ItsmReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItsmReceiver.

        The name of the Itsm receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this ItsmReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def region(self):
        """Gets the region of this ItsmReceiver.

        Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'

        :return: The region of this ItsmReceiver.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ItsmReceiver.

        Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'

        :param region: The region of this ItsmReceiver.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def ticket_configuration(self):
        """Gets the ticket_configuration of this ItsmReceiver.

        JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.

        :return: The ticket_configuration of this ItsmReceiver.
        :rtype: str
        """
        return self._ticket_configuration

    @ticket_configuration.setter
    def ticket_configuration(self, ticket_configuration):
        """Sets the ticket_configuration of this ItsmReceiver.

        JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.

        :param ticket_configuration: The ticket_configuration of this ItsmReceiver.
        :type ticket_configuration: str
        """
        if ticket_configuration is None:
            raise ValueError("Invalid value for `ticket_configuration`, must not be `None`")

        self._ticket_configuration = ticket_configuration

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ItsmReceiver.

        OMS LA instance identifier.

        :return: The workspace_id of this ItsmReceiver.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ItsmReceiver.

        OMS LA instance identifier.

        :param workspace_id: The workspace_id of this ItsmReceiver.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
