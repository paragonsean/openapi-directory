/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItsmReceiver model module.
 * @module model/ItsmReceiver
 * @version 2018-09-01
 */
class ItsmReceiver {
    /**
     * Constructs a new <code>ItsmReceiver</code>.
     * An Itsm receiver.
     * @alias module:model/ItsmReceiver
     * @param connectionId {String} Unique identification of ITSM connection among multiple defined in above workspace.
     * @param name {String} The name of the Itsm receiver. Names must be unique across all receivers within an action group.
     * @param region {String} Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
     * @param ticketConfiguration {String} JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
     * @param workspaceId {String} OMS LA instance identifier.
     */
    constructor(connectionId, name, region, ticketConfiguration, workspaceId) { 
        
        ItsmReceiver.initialize(this, connectionId, name, region, ticketConfiguration, workspaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionId, name, region, ticketConfiguration, workspaceId) { 
        obj['connectionId'] = connectionId;
        obj['name'] = name;
        obj['region'] = region;
        obj['ticketConfiguration'] = ticketConfiguration;
        obj['workspaceId'] = workspaceId;
    }

    /**
     * Constructs a <code>ItsmReceiver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItsmReceiver} obj Optional instance to populate.
     * @return {module:model/ItsmReceiver} The populated <code>ItsmReceiver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItsmReceiver();

            if (data.hasOwnProperty('connectionId')) {
                obj['connectionId'] = ApiClient.convertToType(data['connectionId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('ticketConfiguration')) {
                obj['ticketConfiguration'] = ApiClient.convertToType(data['ticketConfiguration'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItsmReceiver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItsmReceiver</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItsmReceiver.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionId'] && !(typeof data['connectionId'] === 'string' || data['connectionId'] instanceof String)) {
            throw new Error("Expected the field `connectionId` to be a primitive type in the JSON string but got " + data['connectionId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['ticketConfiguration'] && !(typeof data['ticketConfiguration'] === 'string' || data['ticketConfiguration'] instanceof String)) {
            throw new Error("Expected the field `ticketConfiguration` to be a primitive type in the JSON string but got " + data['ticketConfiguration']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

ItsmReceiver.RequiredProperties = ["connectionId", "name", "region", "ticketConfiguration", "workspaceId"];

/**
 * Unique identification of ITSM connection among multiple defined in above workspace.
 * @member {String} connectionId
 */
ItsmReceiver.prototype['connectionId'] = undefined;

/**
 * The name of the Itsm receiver. Names must be unique across all receivers within an action group.
 * @member {String} name
 */
ItsmReceiver.prototype['name'] = undefined;

/**
 * Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
 * @member {String} region
 */
ItsmReceiver.prototype['region'] = undefined;

/**
 * JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
 * @member {String} ticketConfiguration
 */
ItsmReceiver.prototype['ticketConfiguration'] = undefined;

/**
 * OMS LA instance identifier.
 * @member {String} workspaceId
 */
ItsmReceiver.prototype['workspaceId'] = undefined;






export default ItsmReceiver;

