/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogicAppReceiver model module.
 * @module model/LogicAppReceiver
 * @version 2019-06-01
 */
class LogicAppReceiver {
    /**
     * Constructs a new <code>LogicAppReceiver</code>.
     * A logic app receiver.
     * @alias module:model/LogicAppReceiver
     * @param callbackUrl {String} The callback url where http request sent to.
     * @param name {String} The name of the logic app receiver. Names must be unique across all receivers within an action group.
     * @param resourceId {String} The azure resource id of the logic app receiver.
     * @param useCommonAlertSchema {Boolean} Indicates whether to use common alert schema.
     */
    constructor(callbackUrl, name, resourceId, useCommonAlertSchema) { 
        
        LogicAppReceiver.initialize(this, callbackUrl, name, resourceId, useCommonAlertSchema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callbackUrl, name, resourceId, useCommonAlertSchema) { 
        obj['callbackUrl'] = callbackUrl;
        obj['name'] = name;
        obj['resourceId'] = resourceId;
        obj['useCommonAlertSchema'] = useCommonAlertSchema;
    }

    /**
     * Constructs a <code>LogicAppReceiver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogicAppReceiver} obj Optional instance to populate.
     * @return {module:model/LogicAppReceiver} The populated <code>LogicAppReceiver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogicAppReceiver();

            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('useCommonAlertSchema')) {
                obj['useCommonAlertSchema'] = ApiClient.convertToType(data['useCommonAlertSchema'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogicAppReceiver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogicAppReceiver</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogicAppReceiver.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}

LogicAppReceiver.RequiredProperties = ["callbackUrl", "name", "resourceId", "useCommonAlertSchema"];

/**
 * The callback url where http request sent to.
 * @member {String} callbackUrl
 */
LogicAppReceiver.prototype['callbackUrl'] = undefined;

/**
 * The name of the logic app receiver. Names must be unique across all receivers within an action group.
 * @member {String} name
 */
LogicAppReceiver.prototype['name'] = undefined;

/**
 * The azure resource id of the logic app receiver.
 * @member {String} resourceId
 */
LogicAppReceiver.prototype['resourceId'] = undefined;

/**
 * Indicates whether to use common alert schema.
 * @member {Boolean} useCommonAlertSchema
 */
LogicAppReceiver.prototype['useCommonAlertSchema'] = undefined;






export default LogicAppReceiver;

