/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionGroupList from '../model/ActionGroupList';
import ActionGroupPatchBody from '../model/ActionGroupPatchBody';
import ActionGroupResource from '../model/ActionGroupResource';
import EnableRequest from '../model/EnableRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-06-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionGroupsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~actionGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new action group or update an existing one.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} actionGroupName The name of the action group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ActionGroupResource} actionGroup The action group to create or use for the update.
     * @param {module:api/DefaultApi~actionGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionGroupResource}
     */
    actionGroupsCreateOrUpdate(resourceGroupName, actionGroupName, subscriptionId, apiVersion, actionGroup, callback) {
      let postBody = actionGroup;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsCreateOrUpdate");
      }
      // verify the required parameter 'actionGroupName' is set
      if (actionGroupName === undefined || actionGroupName === null) {
        throw new Error("Missing the required parameter 'actionGroupName' when calling actionGroupsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsCreateOrUpdate");
      }
      // verify the required parameter 'actionGroup' is set
      if (actionGroup === undefined || actionGroup === null) {
        throw new Error("Missing the required parameter 'actionGroup' when calling actionGroupsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'actionGroupName': actionGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionGroupResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsDelete operation.
     * @callback module:api/DefaultApi~actionGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} actionGroupName The name of the action group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~actionGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionGroupsDelete(resourceGroupName, actionGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsDelete");
      }
      // verify the required parameter 'actionGroupName' is set
      if (actionGroupName === undefined || actionGroupName === null) {
        throw new Error("Missing the required parameter 'actionGroupName' when calling actionGroupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'actionGroupName': actionGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsEnableReceiver operation.
     * @callback module:api/DefaultApi~actionGroupsEnableReceiverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} actionGroupName The name of the action group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/EnableRequest} enableRequest The receiver to re-enable.
     * @param {module:api/DefaultApi~actionGroupsEnableReceiverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionGroupsEnableReceiver(resourceGroupName, actionGroupName, subscriptionId, apiVersion, enableRequest, callback) {
      let postBody = enableRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsEnableReceiver");
      }
      // verify the required parameter 'actionGroupName' is set
      if (actionGroupName === undefined || actionGroupName === null) {
        throw new Error("Missing the required parameter 'actionGroupName' when calling actionGroupsEnableReceiver");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsEnableReceiver");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsEnableReceiver");
      }
      // verify the required parameter 'enableRequest' is set
      if (enableRequest === undefined || enableRequest === null) {
        throw new Error("Missing the required parameter 'enableRequest' when calling actionGroupsEnableReceiver");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'actionGroupName': actionGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsGet operation.
     * @callback module:api/DefaultApi~actionGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an action group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} actionGroupName The name of the action group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~actionGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionGroupResource}
     */
    actionGroupsGet(resourceGroupName, actionGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsGet");
      }
      // verify the required parameter 'actionGroupName' is set
      if (actionGroupName === undefined || actionGroupName === null) {
        throw new Error("Missing the required parameter 'actionGroupName' when calling actionGroupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'actionGroupName': actionGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionGroupResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsListByResourceGroup operation.
     * @callback module:api/DefaultApi~actionGroupsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all action groups in a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~actionGroupsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionGroupList}
     */
    actionGroupsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionGroupList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsListBySubscriptionId operation.
     * @callback module:api/DefaultApi~actionGroupsListBySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all action groups in a subscription.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~actionGroupsListBySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionGroupList}
     */
    actionGroupsListBySubscriptionId(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsListBySubscriptionId");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsListBySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionGroupList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionGroupsUpdate operation.
     * @callback module:api/DefaultApi~actionGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} actionGroupName The name of the action group.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/ActionGroupPatchBody} actionGroupPatch Parameters supplied to the operation.
     * @param {module:api/DefaultApi~actionGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionGroupResource}
     */
    actionGroupsUpdate(subscriptionId, resourceGroupName, actionGroupName, apiVersion, actionGroupPatch, callback) {
      let postBody = actionGroupPatch;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionGroupsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionGroupsUpdate");
      }
      // verify the required parameter 'actionGroupName' is set
      if (actionGroupName === undefined || actionGroupName === null) {
        throw new Error("Missing the required parameter 'actionGroupName' when calling actionGroupsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionGroupsUpdate");
      }
      // verify the required parameter 'actionGroupPatch' is set
      if (actionGroupPatch === undefined || actionGroupPatch === null) {
        throw new Error("Missing the required parameter 'actionGroupPatch' when calling actionGroupsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'actionGroupName': actionGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionGroupResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
