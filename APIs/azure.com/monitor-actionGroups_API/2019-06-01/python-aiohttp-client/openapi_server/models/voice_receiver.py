# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VoiceReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, name: str=None, phone_number: str=None):
        """VoiceReceiver - a model defined in OpenAPI

        :param country_code: The country_code of this VoiceReceiver.
        :param name: The name of this VoiceReceiver.
        :param phone_number: The phone_number of this VoiceReceiver.
        """
        self.openapi_types = {
            'country_code': str,
            'name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'name': 'name',
            'phone_number': 'phoneNumber'
        }

        self._country_code = country_code
        self._name = name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoiceReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoiceReceiver of this VoiceReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this VoiceReceiver.

        The country code of the voice receiver.

        :return: The country_code of this VoiceReceiver.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this VoiceReceiver.

        The country code of the voice receiver.

        :param country_code: The country_code of this VoiceReceiver.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def name(self):
        """Gets the name of this VoiceReceiver.

        The name of the voice receiver. Names must be unique across all receivers within an action group.

        :return: The name of this VoiceReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceReceiver.

        The name of the voice receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this VoiceReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this VoiceReceiver.

        The phone number of the voice receiver.

        :return: The phone_number of this VoiceReceiver.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this VoiceReceiver.

        The phone number of the voice receiver.

        :param phone_number: The phone_number of this VoiceReceiver.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number
