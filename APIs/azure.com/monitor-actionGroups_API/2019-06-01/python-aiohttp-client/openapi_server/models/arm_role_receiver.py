# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArmRoleReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, role_id: str=None, use_common_alert_schema: bool=None):
        """ArmRoleReceiver - a model defined in OpenAPI

        :param name: The name of this ArmRoleReceiver.
        :param role_id: The role_id of this ArmRoleReceiver.
        :param use_common_alert_schema: The use_common_alert_schema of this ArmRoleReceiver.
        """
        self.openapi_types = {
            'name': str,
            'role_id': str,
            'use_common_alert_schema': bool
        }

        self.attribute_map = {
            'name': 'name',
            'role_id': 'roleId',
            'use_common_alert_schema': 'useCommonAlertSchema'
        }

        self._name = name
        self._role_id = role_id
        self._use_common_alert_schema = use_common_alert_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArmRoleReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArmRoleReceiver of this ArmRoleReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ArmRoleReceiver.

        The name of the arm role receiver. Names must be unique across all receivers within an action group.

        :return: The name of this ArmRoleReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArmRoleReceiver.

        The name of the arm role receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this ArmRoleReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this ArmRoleReceiver.

        The arm role id.

        :return: The role_id of this ArmRoleReceiver.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this ArmRoleReceiver.

        The arm role id.

        :param role_id: The role_id of this ArmRoleReceiver.
        :type role_id: str
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")

        self._role_id = role_id

    @property
    def use_common_alert_schema(self):
        """Gets the use_common_alert_schema of this ArmRoleReceiver.

        Indicates whether to use common alert schema.

        :return: The use_common_alert_schema of this ArmRoleReceiver.
        :rtype: bool
        """
        return self._use_common_alert_schema

    @use_common_alert_schema.setter
    def use_common_alert_schema(self, use_common_alert_schema):
        """Sets the use_common_alert_schema of this ArmRoleReceiver.

        Indicates whether to use common alert schema.

        :param use_common_alert_schema: The use_common_alert_schema of this ArmRoleReceiver.
        :type use_common_alert_schema: bool
        """
        if use_common_alert_schema is None:
            raise ValueError("Invalid value for `use_common_alert_schema`, must not be `None`")

        self._use_common_alert_schema = use_common_alert_schema
