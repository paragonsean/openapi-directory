# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookReceiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier_uri: str=None, name: str=None, object_id: str=None, service_uri: str=None, tenant_id: str=None, use_aad_auth: bool=False, use_common_alert_schema: bool=None):
        """WebhookReceiver - a model defined in OpenAPI

        :param identifier_uri: The identifier_uri of this WebhookReceiver.
        :param name: The name of this WebhookReceiver.
        :param object_id: The object_id of this WebhookReceiver.
        :param service_uri: The service_uri of this WebhookReceiver.
        :param tenant_id: The tenant_id of this WebhookReceiver.
        :param use_aad_auth: The use_aad_auth of this WebhookReceiver.
        :param use_common_alert_schema: The use_common_alert_schema of this WebhookReceiver.
        """
        self.openapi_types = {
            'identifier_uri': str,
            'name': str,
            'object_id': str,
            'service_uri': str,
            'tenant_id': str,
            'use_aad_auth': bool,
            'use_common_alert_schema': bool
        }

        self.attribute_map = {
            'identifier_uri': 'identifierUri',
            'name': 'name',
            'object_id': 'objectId',
            'service_uri': 'serviceUri',
            'tenant_id': 'tenantId',
            'use_aad_auth': 'useAadAuth',
            'use_common_alert_schema': 'useCommonAlertSchema'
        }

        self._identifier_uri = identifier_uri
        self._name = name
        self._object_id = object_id
        self._service_uri = service_uri
        self._tenant_id = tenant_id
        self._use_aad_auth = use_aad_auth
        self._use_common_alert_schema = use_common_alert_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookReceiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookReceiver of this WebhookReceiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier_uri(self):
        """Gets the identifier_uri of this WebhookReceiver.

        Indicates the identifier uri for aad auth.

        :return: The identifier_uri of this WebhookReceiver.
        :rtype: str
        """
        return self._identifier_uri

    @identifier_uri.setter
    def identifier_uri(self, identifier_uri):
        """Sets the identifier_uri of this WebhookReceiver.

        Indicates the identifier uri for aad auth.

        :param identifier_uri: The identifier_uri of this WebhookReceiver.
        :type identifier_uri: str
        """

        self._identifier_uri = identifier_uri

    @property
    def name(self):
        """Gets the name of this WebhookReceiver.

        The name of the webhook receiver. Names must be unique across all receivers within an action group.

        :return: The name of this WebhookReceiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookReceiver.

        The name of the webhook receiver. Names must be unique across all receivers within an action group.

        :param name: The name of this WebhookReceiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def object_id(self):
        """Gets the object_id of this WebhookReceiver.

        Indicates the webhook app object Id for aad auth.

        :return: The object_id of this WebhookReceiver.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this WebhookReceiver.

        Indicates the webhook app object Id for aad auth.

        :param object_id: The object_id of this WebhookReceiver.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def service_uri(self):
        """Gets the service_uri of this WebhookReceiver.

        The URI where webhooks should be sent.

        :return: The service_uri of this WebhookReceiver.
        :rtype: str
        """
        return self._service_uri

    @service_uri.setter
    def service_uri(self, service_uri):
        """Sets the service_uri of this WebhookReceiver.

        The URI where webhooks should be sent.

        :param service_uri: The service_uri of this WebhookReceiver.
        :type service_uri: str
        """
        if service_uri is None:
            raise ValueError("Invalid value for `service_uri`, must not be `None`")

        self._service_uri = service_uri

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WebhookReceiver.

        Indicates the tenant id for aad auth.

        :return: The tenant_id of this WebhookReceiver.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WebhookReceiver.

        Indicates the tenant id for aad auth.

        :param tenant_id: The tenant_id of this WebhookReceiver.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def use_aad_auth(self):
        """Gets the use_aad_auth of this WebhookReceiver.

        Indicates whether or not use AAD authentication.

        :return: The use_aad_auth of this WebhookReceiver.
        :rtype: bool
        """
        return self._use_aad_auth

    @use_aad_auth.setter
    def use_aad_auth(self, use_aad_auth):
        """Sets the use_aad_auth of this WebhookReceiver.

        Indicates whether or not use AAD authentication.

        :param use_aad_auth: The use_aad_auth of this WebhookReceiver.
        :type use_aad_auth: bool
        """

        self._use_aad_auth = use_aad_auth

    @property
    def use_common_alert_schema(self):
        """Gets the use_common_alert_schema of this WebhookReceiver.

        Indicates whether to use common alert schema.

        :return: The use_common_alert_schema of this WebhookReceiver.
        :rtype: bool
        """
        return self._use_common_alert_schema

    @use_common_alert_schema.setter
    def use_common_alert_schema(self, use_common_alert_schema):
        """Sets the use_common_alert_schema of this WebhookReceiver.

        Indicates whether to use common alert schema.

        :param use_common_alert_schema: The use_common_alert_schema of this WebhookReceiver.
        :type use_common_alert_schema: bool
        """
        if use_common_alert_schema is None:
            raise ValueError("Invalid value for `use_common_alert_schema`, must not be `None`")

        self._use_common_alert_schema = use_common_alert_schema
