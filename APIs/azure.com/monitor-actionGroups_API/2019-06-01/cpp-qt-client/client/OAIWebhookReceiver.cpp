/**
 * Azure Action Groups
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookReceiver::OAIWebhookReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookReceiver::OAIWebhookReceiver() {
    this->initializeModel();
}

OAIWebhookReceiver::~OAIWebhookReceiver() {}

void OAIWebhookReceiver::initializeModel() {

    m_identifier_uri_isSet = false;
    m_identifier_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_service_uri_isSet = false;
    m_service_uri_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_use_aad_auth_isSet = false;
    m_use_aad_auth_isValid = false;

    m_use_common_alert_schema_isSet = false;
    m_use_common_alert_schema_isValid = false;
}

void OAIWebhookReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookReceiver::fromJsonObject(QJsonObject json) {

    m_identifier_uri_isValid = ::OpenAPI::fromJsonValue(m_identifier_uri, json[QString("identifierUri")]);
    m_identifier_uri_isSet = !json[QString("identifierUri")].isNull() && m_identifier_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_service_uri_isValid = ::OpenAPI::fromJsonValue(m_service_uri, json[QString("serviceUri")]);
    m_service_uri_isSet = !json[QString("serviceUri")].isNull() && m_service_uri_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_use_aad_auth_isValid = ::OpenAPI::fromJsonValue(m_use_aad_auth, json[QString("useAadAuth")]);
    m_use_aad_auth_isSet = !json[QString("useAadAuth")].isNull() && m_use_aad_auth_isValid;

    m_use_common_alert_schema_isValid = ::OpenAPI::fromJsonValue(m_use_common_alert_schema, json[QString("useCommonAlertSchema")]);
    m_use_common_alert_schema_isSet = !json[QString("useCommonAlertSchema")].isNull() && m_use_common_alert_schema_isValid;
}

QString OAIWebhookReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_uri_isSet) {
        obj.insert(QString("identifierUri"), ::OpenAPI::toJsonValue(m_identifier_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_service_uri_isSet) {
        obj.insert(QString("serviceUri"), ::OpenAPI::toJsonValue(m_service_uri));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_use_aad_auth_isSet) {
        obj.insert(QString("useAadAuth"), ::OpenAPI::toJsonValue(m_use_aad_auth));
    }
    if (m_use_common_alert_schema_isSet) {
        obj.insert(QString("useCommonAlertSchema"), ::OpenAPI::toJsonValue(m_use_common_alert_schema));
    }
    return obj;
}

QString OAIWebhookReceiver::getIdentifierUri() const {
    return m_identifier_uri;
}
void OAIWebhookReceiver::setIdentifierUri(const QString &identifier_uri) {
    m_identifier_uri = identifier_uri;
    m_identifier_uri_isSet = true;
}

bool OAIWebhookReceiver::is_identifier_uri_Set() const{
    return m_identifier_uri_isSet;
}

bool OAIWebhookReceiver::is_identifier_uri_Valid() const{
    return m_identifier_uri_isValid;
}

QString OAIWebhookReceiver::getName() const {
    return m_name;
}
void OAIWebhookReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhookReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhookReceiver::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhookReceiver::getObjectId() const {
    return m_object_id;
}
void OAIWebhookReceiver::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIWebhookReceiver::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIWebhookReceiver::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIWebhookReceiver::getServiceUri() const {
    return m_service_uri;
}
void OAIWebhookReceiver::setServiceUri(const QString &service_uri) {
    m_service_uri = service_uri;
    m_service_uri_isSet = true;
}

bool OAIWebhookReceiver::is_service_uri_Set() const{
    return m_service_uri_isSet;
}

bool OAIWebhookReceiver::is_service_uri_Valid() const{
    return m_service_uri_isValid;
}

QString OAIWebhookReceiver::getTenantId() const {
    return m_tenant_id;
}
void OAIWebhookReceiver::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIWebhookReceiver::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIWebhookReceiver::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIWebhookReceiver::isUseAadAuth() const {
    return m_use_aad_auth;
}
void OAIWebhookReceiver::setUseAadAuth(const bool &use_aad_auth) {
    m_use_aad_auth = use_aad_auth;
    m_use_aad_auth_isSet = true;
}

bool OAIWebhookReceiver::is_use_aad_auth_Set() const{
    return m_use_aad_auth_isSet;
}

bool OAIWebhookReceiver::is_use_aad_auth_Valid() const{
    return m_use_aad_auth_isValid;
}

bool OAIWebhookReceiver::isUseCommonAlertSchema() const {
    return m_use_common_alert_schema;
}
void OAIWebhookReceiver::setUseCommonAlertSchema(const bool &use_common_alert_schema) {
    m_use_common_alert_schema = use_common_alert_schema;
    m_use_common_alert_schema_isSet = true;
}

bool OAIWebhookReceiver::is_use_common_alert_schema_Set() const{
    return m_use_common_alert_schema_isSet;
}

bool OAIWebhookReceiver::is_use_common_alert_schema_Valid() const{
    return m_use_common_alert_schema_isValid;
}

bool OAIWebhookReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_aad_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_common_alert_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_service_uri_isValid && m_use_common_alert_schema_isValid && true;
}

} // namespace OpenAPI
