/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServerSecurityAlertPolicy from '../model/ServerSecurityAlertPolicy';

/**
* ServerSecurityAlertPolicies service.
* @module api/ServerSecurityAlertPoliciesApi
* @version 2017-12-01-preview
*/
export default class ServerSecurityAlertPoliciesApi {

    /**
    * Constructs a new ServerSecurityAlertPoliciesApi. 
    * @alias module:api/ServerSecurityAlertPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serverSecurityAlertPoliciesCreateOrUpdate operation.
     * @callback module:api/ServerSecurityAlertPoliciesApi~serverSecurityAlertPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSecurityAlertPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a threat detection policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {module:model/String} securityAlertPolicyName The name of the threat detection policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/ServerSecurityAlertPolicy} parameters The server security alert policy.
     * @param {module:api/ServerSecurityAlertPoliciesApi~serverSecurityAlertPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSecurityAlertPolicy}
     */
    serverSecurityAlertPoliciesCreateOrUpdate(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'securityAlertPolicyName' is set
      if (securityAlertPolicyName === undefined || securityAlertPolicyName === null) {
        throw new Error("Missing the required parameter 'securityAlertPolicyName' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling serverSecurityAlertPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'securityAlertPolicyName': securityAlertPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerSecurityAlertPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverSecurityAlertPoliciesGet operation.
     * @callback module:api/ServerSecurityAlertPoliciesApi~serverSecurityAlertPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerSecurityAlertPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a server's security alert policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {module:model/String} securityAlertPolicyName The name of the security alert policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ServerSecurityAlertPoliciesApi~serverSecurityAlertPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerSecurityAlertPolicy}
     */
    serverSecurityAlertPoliciesGet(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serverSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'securityAlertPolicyName' is set
      if (securityAlertPolicyName === undefined || securityAlertPolicyName === null) {
        throw new Error("Missing the required parameter 'securityAlertPolicyName' when calling serverSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverSecurityAlertPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'securityAlertPolicyName': securityAlertPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerSecurityAlertPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
