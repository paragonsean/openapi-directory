/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerAdministratorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerAdministratorProperties::OAIServerAdministratorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerAdministratorProperties::OAIServerAdministratorProperties() {
    this->initializeModel();
}

OAIServerAdministratorProperties::~OAIServerAdministratorProperties() {}

void OAIServerAdministratorProperties::initializeModel() {

    m_administrator_type_isSet = false;
    m_administrator_type_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIServerAdministratorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerAdministratorProperties::fromJsonObject(QJsonObject json) {

    m_administrator_type_isValid = ::OpenAPI::fromJsonValue(m_administrator_type, json[QString("administratorType")]);
    m_administrator_type_isSet = !json[QString("administratorType")].isNull() && m_administrator_type_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIServerAdministratorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerAdministratorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_type_isSet) {
        obj.insert(QString("administratorType"), ::OpenAPI::toJsonValue(m_administrator_type));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIServerAdministratorProperties::getAdministratorType() const {
    return m_administrator_type;
}
void OAIServerAdministratorProperties::setAdministratorType(const QString &administrator_type) {
    m_administrator_type = administrator_type;
    m_administrator_type_isSet = true;
}

bool OAIServerAdministratorProperties::is_administrator_type_Set() const{
    return m_administrator_type_isSet;
}

bool OAIServerAdministratorProperties::is_administrator_type_Valid() const{
    return m_administrator_type_isValid;
}

QString OAIServerAdministratorProperties::getLogin() const {
    return m_login;
}
void OAIServerAdministratorProperties::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIServerAdministratorProperties::is_login_Set() const{
    return m_login_isSet;
}

bool OAIServerAdministratorProperties::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIServerAdministratorProperties::getSid() const {
    return m_sid;
}
void OAIServerAdministratorProperties::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIServerAdministratorProperties::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIServerAdministratorProperties::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIServerAdministratorProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIServerAdministratorProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIServerAdministratorProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIServerAdministratorProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIServerAdministratorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerAdministratorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_administrator_type_isValid && m_login_isValid && m_sid_isValid && m_tenant_id_isValid && true;
}

} // namespace OpenAPI
