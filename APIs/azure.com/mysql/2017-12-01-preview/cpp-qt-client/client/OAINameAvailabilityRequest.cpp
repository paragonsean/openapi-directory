/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameAvailabilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINameAvailabilityRequest::OAINameAvailabilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINameAvailabilityRequest::OAINameAvailabilityRequest() {
    this->initializeModel();
}

OAINameAvailabilityRequest::~OAINameAvailabilityRequest() {}

void OAINameAvailabilityRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINameAvailabilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINameAvailabilityRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINameAvailabilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINameAvailabilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINameAvailabilityRequest::getName() const {
    return m_name;
}
void OAINameAvailabilityRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINameAvailabilityRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAINameAvailabilityRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINameAvailabilityRequest::getType() const {
    return m_type;
}
void OAINameAvailabilityRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINameAvailabilityRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAINameAvailabilityRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINameAvailabilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINameAvailabilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
