/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServer::OAIServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServer::OAIServer() {
    this->initializeModel();
}

OAIServer::~OAIServer() {}

void OAIServer::initializeModel() {

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServer::fromJsonObject(QJsonObject json) {

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServer::asJsonObject() const {
    QJsonObject obj;
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIResourceIdentity OAIServer::getIdentity() const {
    return m_identity;
}
void OAIServer::setIdentity(const OAIResourceIdentity &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIServer::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIServer::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIServerProperties OAIServer::getProperties() const {
    return m_properties;
}
void OAIServer::setProperties(const OAIServerProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIServer::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIServer::is_properties_Valid() const{
    return m_properties_isValid;
}

OAISku OAIServer::getSku() const {
    return m_sku;
}
void OAIServer::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIServer::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIServer::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIServer::getLocation() const {
    return m_location;
}
void OAIServer::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIServer::is_location_Set() const{
    return m_location_isSet;
}

bool OAIServer::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIServer::getTags() const {
    return m_tags;
}
void OAIServer::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServer::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServer::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIServer::getId() const {
    return m_id;
}
void OAIServer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServer::getName() const {
    return m_name;
}
void OAIServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServer::getType() const {
    return m_type;
}
void OAIServer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && true;
}

} // namespace OpenAPI
