/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogFileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogFileProperties::OAILogFileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogFileProperties::OAILogFileProperties() {
    this->initializeModel();
}

OAILogFileProperties::~OAILogFileProperties() {}

void OAILogFileProperties::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_size_in_kb_isSet = false;
    m_size_in_kb_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILogFileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogFileProperties::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_size_in_kb_isValid = ::OpenAPI::fromJsonValue(m_size_in_kb, json[QString("sizeInKB")]);
    m_size_in_kb_isSet = !json[QString("sizeInKB")].isNull() && m_size_in_kb_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILogFileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogFileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_size_in_kb_isSet) {
        obj.insert(QString("sizeInKB"), ::OpenAPI::toJsonValue(m_size_in_kb));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAILogFileProperties::getCreatedTime() const {
    return m_created_time;
}
void OAILogFileProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAILogFileProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAILogFileProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAILogFileProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAILogFileProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAILogFileProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAILogFileProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint64 OAILogFileProperties::getSizeInKb() const {
    return m_size_in_kb;
}
void OAILogFileProperties::setSizeInKb(const qint64 &size_in_kb) {
    m_size_in_kb = size_in_kb;
    m_size_in_kb_isSet = true;
}

bool OAILogFileProperties::is_size_in_kb_Set() const{
    return m_size_in_kb_isSet;
}

bool OAILogFileProperties::is_size_in_kb_Valid() const{
    return m_size_in_kb_isValid;
}

QString OAILogFileProperties::getType() const {
    return m_type;
}
void OAILogFileProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILogFileProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAILogFileProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILogFileProperties::getUrl() const {
    return m_url;
}
void OAILogFileProperties::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILogFileProperties::is_url_Set() const{
    return m_url_isSet;
}

bool OAILogFileProperties::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILogFileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_kb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogFileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
