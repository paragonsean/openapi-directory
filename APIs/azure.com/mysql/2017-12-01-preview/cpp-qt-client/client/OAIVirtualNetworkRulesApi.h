/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkRulesApi_H
#define OAI_OAIVirtualNetworkRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualNetworkRule.h"
#include "OAIVirtualNetworkRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkRulesApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkRulesApi(const int timeOut = 0);
    ~OAIVirtualNetworkRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  parameters OAIVirtualNetworkRule [required]
    */
    virtual void virtualNetworkRulesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version, const QString &virtual_network_rule_name, const OAIVirtualNetworkRule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkRulesDelete(const QString &resource_group_name, const QString &server_name, const QString &virtual_network_rule_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  virtual_network_rule_name QString [required]
    */
    virtual void virtualNetworkRulesGet(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version, const QString &virtual_network_rule_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualNetworkRulesListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkRulesCreateOrUpdateSignal(OAIVirtualNetworkRule summary);
    void virtualNetworkRulesDeleteSignal();
    void virtualNetworkRulesGetSignal(OAIVirtualNetworkRule summary);
    void virtualNetworkRulesListByServerSignal(OAIVirtualNetworkRuleListResult summary);


    void virtualNetworkRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRule summary);
    void virtualNetworkRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRule summary);
    void virtualNetworkRulesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkRuleListResult summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesCreateOrUpdateSignalError() instead")
    void virtualNetworkRulesCreateOrUpdateSignalE(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesCreateOrUpdateSignalError(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesDeleteSignalError() instead")
    void virtualNetworkRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesGetSignalError() instead")
    void virtualNetworkRulesGetSignalE(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesGetSignalError(OAIVirtualNetworkRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesListByServerSignalError() instead")
    void virtualNetworkRulesListByServerSignalE(OAIVirtualNetworkRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesListByServerSignalError(OAIVirtualNetworkRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesDeleteSignalErrorFull() instead")
    void virtualNetworkRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesGetSignalErrorFull() instead")
    void virtualNetworkRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkRulesListByServerSignalErrorFull() instead")
    void virtualNetworkRulesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkRulesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
