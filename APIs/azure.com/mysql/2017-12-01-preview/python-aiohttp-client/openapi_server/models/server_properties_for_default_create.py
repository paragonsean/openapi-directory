# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_properties_for_create import ServerPropertiesForCreate
from openapi_server.models.server_version import ServerVersion
from openapi_server.models.ssl_enforcement import SslEnforcement
from openapi_server.models.storage_profile import StorageProfile
from openapi_server import util


class ServerPropertiesForDefaultCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login: str=None, administrator_login_password: str=None, create_mode: str=None, ssl_enforcement: SslEnforcement=None, storage_profile: StorageProfile=None, version: ServerVersion=None):
        """ServerPropertiesForDefaultCreate - a model defined in OpenAPI

        :param administrator_login: The administrator_login of this ServerPropertiesForDefaultCreate.
        :param administrator_login_password: The administrator_login_password of this ServerPropertiesForDefaultCreate.
        :param create_mode: The create_mode of this ServerPropertiesForDefaultCreate.
        :param ssl_enforcement: The ssl_enforcement of this ServerPropertiesForDefaultCreate.
        :param storage_profile: The storage_profile of this ServerPropertiesForDefaultCreate.
        :param version: The version of this ServerPropertiesForDefaultCreate.
        """
        self.openapi_types = {
            'administrator_login': str,
            'administrator_login_password': str,
            'create_mode': str,
            'ssl_enforcement': SslEnforcement,
            'storage_profile': StorageProfile,
            'version': ServerVersion
        }

        self.attribute_map = {
            'administrator_login': 'administratorLogin',
            'administrator_login_password': 'administratorLoginPassword',
            'create_mode': 'createMode',
            'ssl_enforcement': 'sslEnforcement',
            'storage_profile': 'storageProfile',
            'version': 'version'
        }

        self._administrator_login = administrator_login
        self._administrator_login_password = administrator_login_password
        self._create_mode = create_mode
        self._ssl_enforcement = ssl_enforcement
        self._storage_profile = storage_profile
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerPropertiesForDefaultCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerPropertiesForDefaultCreate of this ServerPropertiesForDefaultCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login(self):
        """Gets the administrator_login of this ServerPropertiesForDefaultCreate.

        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).

        :return: The administrator_login of this ServerPropertiesForDefaultCreate.
        :rtype: str
        """
        return self._administrator_login

    @administrator_login.setter
    def administrator_login(self, administrator_login):
        """Sets the administrator_login of this ServerPropertiesForDefaultCreate.

        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).

        :param administrator_login: The administrator_login of this ServerPropertiesForDefaultCreate.
        :type administrator_login: str
        """
        if administrator_login is None:
            raise ValueError("Invalid value for `administrator_login`, must not be `None`")

        self._administrator_login = administrator_login

    @property
    def administrator_login_password(self):
        """Gets the administrator_login_password of this ServerPropertiesForDefaultCreate.

        The password of the administrator login.

        :return: The administrator_login_password of this ServerPropertiesForDefaultCreate.
        :rtype: str
        """
        return self._administrator_login_password

    @administrator_login_password.setter
    def administrator_login_password(self, administrator_login_password):
        """Sets the administrator_login_password of this ServerPropertiesForDefaultCreate.

        The password of the administrator login.

        :param administrator_login_password: The administrator_login_password of this ServerPropertiesForDefaultCreate.
        :type administrator_login_password: str
        """
        if administrator_login_password is None:
            raise ValueError("Invalid value for `administrator_login_password`, must not be `None`")

        self._administrator_login_password = administrator_login_password

    @property
    def create_mode(self):
        """Gets the create_mode of this ServerPropertiesForDefaultCreate.

        The mode to create a new server.

        :return: The create_mode of this ServerPropertiesForDefaultCreate.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this ServerPropertiesForDefaultCreate.

        The mode to create a new server.

        :param create_mode: The create_mode of this ServerPropertiesForDefaultCreate.
        :type create_mode: str
        """
        allowed_values = ["Default", "PointInTimeRestore", "GeoRestore", "Replica"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def ssl_enforcement(self):
        """Gets the ssl_enforcement of this ServerPropertiesForDefaultCreate.


        :return: The ssl_enforcement of this ServerPropertiesForDefaultCreate.
        :rtype: SslEnforcement
        """
        return self._ssl_enforcement

    @ssl_enforcement.setter
    def ssl_enforcement(self, ssl_enforcement):
        """Sets the ssl_enforcement of this ServerPropertiesForDefaultCreate.


        :param ssl_enforcement: The ssl_enforcement of this ServerPropertiesForDefaultCreate.
        :type ssl_enforcement: SslEnforcement
        """

        self._ssl_enforcement = ssl_enforcement

    @property
    def storage_profile(self):
        """Gets the storage_profile of this ServerPropertiesForDefaultCreate.


        :return: The storage_profile of this ServerPropertiesForDefaultCreate.
        :rtype: StorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this ServerPropertiesForDefaultCreate.


        :param storage_profile: The storage_profile of this ServerPropertiesForDefaultCreate.
        :type storage_profile: StorageProfile
        """

        self._storage_profile = storage_profile

    @property
    def version(self):
        """Gets the version of this ServerPropertiesForDefaultCreate.


        :return: The version of this ServerPropertiesForDefaultCreate.
        :rtype: ServerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerPropertiesForDefaultCreate.


        :param version: The version of this ServerPropertiesForDefaultCreate.
        :type version: ServerVersion
        """

        self._version = version
