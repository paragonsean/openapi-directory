# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_version import ServerVersion
from openapi_server.models.ssl_enforcement import SslEnforcement
from openapi_server.models.storage_profile import StorageProfile
from openapi_server import util


class ServerUpdateParametersProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login_password: str=None, replication_role: str=None, ssl_enforcement: SslEnforcement=None, storage_profile: StorageProfile=None, version: ServerVersion=None):
        """ServerUpdateParametersProperties - a model defined in OpenAPI

        :param administrator_login_password: The administrator_login_password of this ServerUpdateParametersProperties.
        :param replication_role: The replication_role of this ServerUpdateParametersProperties.
        :param ssl_enforcement: The ssl_enforcement of this ServerUpdateParametersProperties.
        :param storage_profile: The storage_profile of this ServerUpdateParametersProperties.
        :param version: The version of this ServerUpdateParametersProperties.
        """
        self.openapi_types = {
            'administrator_login_password': str,
            'replication_role': str,
            'ssl_enforcement': SslEnforcement,
            'storage_profile': StorageProfile,
            'version': ServerVersion
        }

        self.attribute_map = {
            'administrator_login_password': 'administratorLoginPassword',
            'replication_role': 'replicationRole',
            'ssl_enforcement': 'sslEnforcement',
            'storage_profile': 'storageProfile',
            'version': 'version'
        }

        self._administrator_login_password = administrator_login_password
        self._replication_role = replication_role
        self._ssl_enforcement = ssl_enforcement
        self._storage_profile = storage_profile
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerUpdateParametersProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerUpdateParameters_properties of this ServerUpdateParametersProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login_password(self):
        """Gets the administrator_login_password of this ServerUpdateParametersProperties.

        The password of the administrator login.

        :return: The administrator_login_password of this ServerUpdateParametersProperties.
        :rtype: str
        """
        return self._administrator_login_password

    @administrator_login_password.setter
    def administrator_login_password(self, administrator_login_password):
        """Sets the administrator_login_password of this ServerUpdateParametersProperties.

        The password of the administrator login.

        :param administrator_login_password: The administrator_login_password of this ServerUpdateParametersProperties.
        :type administrator_login_password: str
        """

        self._administrator_login_password = administrator_login_password

    @property
    def replication_role(self):
        """Gets the replication_role of this ServerUpdateParametersProperties.

        The replication role of the server.

        :return: The replication_role of this ServerUpdateParametersProperties.
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this ServerUpdateParametersProperties.

        The replication role of the server.

        :param replication_role: The replication_role of this ServerUpdateParametersProperties.
        :type replication_role: str
        """

        self._replication_role = replication_role

    @property
    def ssl_enforcement(self):
        """Gets the ssl_enforcement of this ServerUpdateParametersProperties.


        :return: The ssl_enforcement of this ServerUpdateParametersProperties.
        :rtype: SslEnforcement
        """
        return self._ssl_enforcement

    @ssl_enforcement.setter
    def ssl_enforcement(self, ssl_enforcement):
        """Sets the ssl_enforcement of this ServerUpdateParametersProperties.


        :param ssl_enforcement: The ssl_enforcement of this ServerUpdateParametersProperties.
        :type ssl_enforcement: SslEnforcement
        """

        self._ssl_enforcement = ssl_enforcement

    @property
    def storage_profile(self):
        """Gets the storage_profile of this ServerUpdateParametersProperties.


        :return: The storage_profile of this ServerUpdateParametersProperties.
        :rtype: StorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this ServerUpdateParametersProperties.


        :param storage_profile: The storage_profile of this ServerUpdateParametersProperties.
        :type storage_profile: StorageProfile
        """

        self._storage_profile = storage_profile

    @property
    def version(self):
        """Gets the version of this ServerUpdateParametersProperties.


        :return: The version of this ServerUpdateParametersProperties.
        :rtype: ServerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerUpdateParametersProperties.


        :param version: The version of this ServerUpdateParametersProperties.
        :type version: ServerVersion
        """

        self._version = version
