/*
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ServerSecurityAlertPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerSecurityAlertPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServerSecurityAlertPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerSecurityAlertPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serverSecurityAlertPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the threat detection policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The server security alert policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Created request to set the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of setting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverSecurityAlertPoliciesCreateOrUpdateCall(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, ServerSecurityAlertPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "securityAlertPolicyName" + "}", localVarApiClient.escapeString(securityAlertPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverSecurityAlertPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, ServerSecurityAlertPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'securityAlertPolicyName' is set
        if (securityAlertPolicyName == null) {
            throw new ApiException("Missing the required parameter 'securityAlertPolicyName' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling serverSecurityAlertPoliciesCreateOrUpdate(Async)");
        }

        return serverSecurityAlertPoliciesCreateOrUpdateCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a threat detection policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the threat detection policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The server security alert policy. (required)
     * @return ServerSecurityAlertPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Created request to set the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of setting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerSecurityAlertPolicy serverSecurityAlertPoliciesCreateOrUpdate(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, ServerSecurityAlertPolicy parameters) throws ApiException {
        ApiResponse<ServerSecurityAlertPolicy> localVarResp = serverSecurityAlertPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a threat detection policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the threat detection policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The server security alert policy. (required)
     * @return ApiResponse&lt;ServerSecurityAlertPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Created request to set the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of setting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSecurityAlertPolicy> serverSecurityAlertPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, ServerSecurityAlertPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = serverSecurityAlertPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ServerSecurityAlertPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a threat detection policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the threat detection policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The server security alert policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Created request to set the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of setting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverSecurityAlertPoliciesCreateOrUpdateAsync(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, ServerSecurityAlertPolicy parameters, final ApiCallback<ServerSecurityAlertPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverSecurityAlertPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServerSecurityAlertPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverSecurityAlertPoliciesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the security alert policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of getting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverSecurityAlertPoliciesGetCall(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "securityAlertPolicyName" + "}", localVarApiClient.escapeString(securityAlertPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverSecurityAlertPoliciesGetValidateBeforeCall(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverSecurityAlertPoliciesGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serverSecurityAlertPoliciesGet(Async)");
        }

        // verify the required parameter 'securityAlertPolicyName' is set
        if (securityAlertPolicyName == null) {
            throw new ApiException("Missing the required parameter 'securityAlertPolicyName' when calling serverSecurityAlertPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverSecurityAlertPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverSecurityAlertPoliciesGet(Async)");
        }

        return serverSecurityAlertPoliciesGetCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get a server&#39;s security alert policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the security alert policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ServerSecurityAlertPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of getting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public ServerSecurityAlertPolicy serverSecurityAlertPoliciesGet(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerSecurityAlertPolicy> localVarResp = serverSecurityAlertPoliciesGetWithHttpInfo(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a server&#39;s security alert policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the security alert policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ServerSecurityAlertPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of getting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerSecurityAlertPolicy> serverSecurityAlertPoliciesGetWithHttpInfo(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverSecurityAlertPoliciesGetValidateBeforeCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerSecurityAlertPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a server&#39;s security alert policy.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param securityAlertPolicyName The name of the security alert policy. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the server threat detection policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation of getting security alert policies failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverSecurityAlertPoliciesGetAsync(String resourceGroupName, String serverName, String securityAlertPolicyName, String subscriptionId, String apiVersion, final ApiCallback<ServerSecurityAlertPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverSecurityAlertPoliciesGetValidateBeforeCall(resourceGroupName, serverName, securityAlertPolicyName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerSecurityAlertPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
