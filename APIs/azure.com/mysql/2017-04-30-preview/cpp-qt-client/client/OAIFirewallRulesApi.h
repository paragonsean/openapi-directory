/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFirewallRulesApi_H
#define OAI_OAIFirewallRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFirewallRule.h"
#include "OAIFirewallRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFirewallRulesApi : public QObject {
    Q_OBJECT

public:
    OAIFirewallRulesApi(const int timeOut = 0);
    ~OAIFirewallRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  firewall_rule_name QString [required]
    * @param[in]  parameters OAIFirewallRule [required]
    */
    virtual void firewallRulesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &firewall_rule_name, const OAIFirewallRule &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  firewall_rule_name QString [required]
    */
    virtual void firewallRulesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &firewall_rule_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  firewall_rule_name QString [required]
    */
    virtual void firewallRulesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &firewall_rule_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void firewallRulesListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void firewallRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void firewallRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void firewallRulesGetCallback(OAIHttpRequestWorker *worker);
    void firewallRulesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void firewallRulesCreateOrUpdateSignal(OAIFirewallRule summary);
    void firewallRulesDeleteSignal();
    void firewallRulesGetSignal(OAIFirewallRule summary);
    void firewallRulesListByServerSignal(OAIFirewallRuleListResult summary);


    void firewallRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFirewallRule summary);
    void firewallRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void firewallRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIFirewallRule summary);
    void firewallRulesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIFirewallRuleListResult summary);

    Q_DECL_DEPRECATED_X("Use firewallRulesCreateOrUpdateSignalError() instead")
    void firewallRulesCreateOrUpdateSignalE(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesCreateOrUpdateSignalError(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesDeleteSignalError() instead")
    void firewallRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesGetSignalError() instead")
    void firewallRulesGetSignalE(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesGetSignalError(OAIFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesListByServerSignalError() instead")
    void firewallRulesListByServerSignalE(OAIFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesListByServerSignalError(OAIFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use firewallRulesCreateOrUpdateSignalErrorFull() instead")
    void firewallRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesDeleteSignalErrorFull() instead")
    void firewallRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesGetSignalErrorFull() instead")
    void firewallRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesListByServerSignalErrorFull() instead")
    void firewallRulesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
