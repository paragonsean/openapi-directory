/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceTierServiceLevelObjectives.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceTierServiceLevelObjectives::OAIPerformanceTierServiceLevelObjectives(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceTierServiceLevelObjectives::OAIPerformanceTierServiceLevelObjectives() {
    this->initializeModel();
}

OAIPerformanceTierServiceLevelObjectives::~OAIPerformanceTierServiceLevelObjectives() {}

void OAIPerformanceTierServiceLevelObjectives::initializeModel() {

    m_dtu_isSet = false;
    m_dtu_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_storage_mb_isSet = false;
    m_storage_mb_isValid = false;
}

void OAIPerformanceTierServiceLevelObjectives::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceTierServiceLevelObjectives::fromJsonObject(QJsonObject json) {

    m_dtu_isValid = ::OpenAPI::fromJsonValue(m_dtu, json[QString("dtu")]);
    m_dtu_isSet = !json[QString("dtu")].isNull() && m_dtu_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_storage_mb, json[QString("storageMB")]);
    m_storage_mb_isSet = !json[QString("storageMB")].isNull() && m_storage_mb_isValid;
}

QString OAIPerformanceTierServiceLevelObjectives::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceTierServiceLevelObjectives::asJsonObject() const {
    QJsonObject obj;
    if (m_dtu_isSet) {
        obj.insert(QString("dtu"), ::OpenAPI::toJsonValue(m_dtu));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_storage_mb_isSet) {
        obj.insert(QString("storageMB"), ::OpenAPI::toJsonValue(m_storage_mb));
    }
    return obj;
}

qint32 OAIPerformanceTierServiceLevelObjectives::getDtu() const {
    return m_dtu;
}
void OAIPerformanceTierServiceLevelObjectives::setDtu(const qint32 &dtu) {
    m_dtu = dtu;
    m_dtu_isSet = true;
}

bool OAIPerformanceTierServiceLevelObjectives::is_dtu_Set() const{
    return m_dtu_isSet;
}

bool OAIPerformanceTierServiceLevelObjectives::is_dtu_Valid() const{
    return m_dtu_isValid;
}

QString OAIPerformanceTierServiceLevelObjectives::getEdition() const {
    return m_edition;
}
void OAIPerformanceTierServiceLevelObjectives::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIPerformanceTierServiceLevelObjectives::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIPerformanceTierServiceLevelObjectives::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIPerformanceTierServiceLevelObjectives::getId() const {
    return m_id;
}
void OAIPerformanceTierServiceLevelObjectives::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceTierServiceLevelObjectives::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceTierServiceLevelObjectives::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPerformanceTierServiceLevelObjectives::getStorageMb() const {
    return m_storage_mb;
}
void OAIPerformanceTierServiceLevelObjectives::setStorageMb(const qint32 &storage_mb) {
    m_storage_mb = storage_mb;
    m_storage_mb_isSet = true;
}

bool OAIPerformanceTierServiceLevelObjectives::is_storage_mb_Set() const{
    return m_storage_mb_isSet;
}

bool OAIPerformanceTierServiceLevelObjectives::is_storage_mb_Valid() const{
    return m_storage_mb_isValid;
}

bool OAIPerformanceTierServiceLevelObjectives::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceTierServiceLevelObjectives::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
