/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceTierProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceTierProperties::OAIPerformanceTierProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceTierProperties::OAIPerformanceTierProperties() {
    this->initializeModel();
}

OAIPerformanceTierProperties::~OAIPerformanceTierProperties() {}

void OAIPerformanceTierProperties::initializeModel() {

    m_backup_retention_days_isSet = false;
    m_backup_retention_days_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_service_level_objectives_isSet = false;
    m_service_level_objectives_isValid = false;
}

void OAIPerformanceTierProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceTierProperties::fromJsonObject(QJsonObject json) {

    m_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_days, json[QString("backupRetentionDays")]);
    m_backup_retention_days_isSet = !json[QString("backupRetentionDays")].isNull() && m_backup_retention_days_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_service_level_objectives_isValid = ::OpenAPI::fromJsonValue(m_service_level_objectives, json[QString("serviceLevelObjectives")]);
    m_service_level_objectives_isSet = !json[QString("serviceLevelObjectives")].isNull() && m_service_level_objectives_isValid;
}

QString OAIPerformanceTierProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceTierProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_retention_days_isSet) {
        obj.insert(QString("backupRetentionDays"), ::OpenAPI::toJsonValue(m_backup_retention_days));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_service_level_objectives.size() > 0) {
        obj.insert(QString("serviceLevelObjectives"), ::OpenAPI::toJsonValue(m_service_level_objectives));
    }
    return obj;
}

qint32 OAIPerformanceTierProperties::getBackupRetentionDays() const {
    return m_backup_retention_days;
}
void OAIPerformanceTierProperties::setBackupRetentionDays(const qint32 &backup_retention_days) {
    m_backup_retention_days = backup_retention_days;
    m_backup_retention_days_isSet = true;
}

bool OAIPerformanceTierProperties::is_backup_retention_days_Set() const{
    return m_backup_retention_days_isSet;
}

bool OAIPerformanceTierProperties::is_backup_retention_days_Valid() const{
    return m_backup_retention_days_isValid;
}

QString OAIPerformanceTierProperties::getId() const {
    return m_id;
}
void OAIPerformanceTierProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceTierProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceTierProperties::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPerformanceTierServiceLevelObjectives> OAIPerformanceTierProperties::getServiceLevelObjectives() const {
    return m_service_level_objectives;
}
void OAIPerformanceTierProperties::setServiceLevelObjectives(const QList<OAIPerformanceTierServiceLevelObjectives> &service_level_objectives) {
    m_service_level_objectives = service_level_objectives;
    m_service_level_objectives_isSet = true;
}

bool OAIPerformanceTierProperties::is_service_level_objectives_Set() const{
    return m_service_level_objectives_isSet;
}

bool OAIPerformanceTierProperties::is_service_level_objectives_Valid() const{
    return m_service_level_objectives_isValid;
}

bool OAIPerformanceTierProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceTierProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
