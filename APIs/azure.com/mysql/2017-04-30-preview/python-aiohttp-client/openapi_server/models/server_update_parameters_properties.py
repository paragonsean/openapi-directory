# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_version import ServerVersion
from openapi_server.models.ssl_enforcement import SslEnforcement
from openapi_server import util


class ServerUpdateParametersProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login_password: str=None, ssl_enforcement: SslEnforcement=None, storage_mb: int=None, version: ServerVersion=None):
        """ServerUpdateParametersProperties - a model defined in OpenAPI

        :param administrator_login_password: The administrator_login_password of this ServerUpdateParametersProperties.
        :param ssl_enforcement: The ssl_enforcement of this ServerUpdateParametersProperties.
        :param storage_mb: The storage_mb of this ServerUpdateParametersProperties.
        :param version: The version of this ServerUpdateParametersProperties.
        """
        self.openapi_types = {
            'administrator_login_password': str,
            'ssl_enforcement': SslEnforcement,
            'storage_mb': int,
            'version': ServerVersion
        }

        self.attribute_map = {
            'administrator_login_password': 'administratorLoginPassword',
            'ssl_enforcement': 'sslEnforcement',
            'storage_mb': 'storageMB',
            'version': 'version'
        }

        self._administrator_login_password = administrator_login_password
        self._ssl_enforcement = ssl_enforcement
        self._storage_mb = storage_mb
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerUpdateParametersProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerUpdateParameters_properties of this ServerUpdateParametersProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login_password(self):
        """Gets the administrator_login_password of this ServerUpdateParametersProperties.

        The password of the administrator login.

        :return: The administrator_login_password of this ServerUpdateParametersProperties.
        :rtype: str
        """
        return self._administrator_login_password

    @administrator_login_password.setter
    def administrator_login_password(self, administrator_login_password):
        """Sets the administrator_login_password of this ServerUpdateParametersProperties.

        The password of the administrator login.

        :param administrator_login_password: The administrator_login_password of this ServerUpdateParametersProperties.
        :type administrator_login_password: str
        """

        self._administrator_login_password = administrator_login_password

    @property
    def ssl_enforcement(self):
        """Gets the ssl_enforcement of this ServerUpdateParametersProperties.


        :return: The ssl_enforcement of this ServerUpdateParametersProperties.
        :rtype: SslEnforcement
        """
        return self._ssl_enforcement

    @ssl_enforcement.setter
    def ssl_enforcement(self, ssl_enforcement):
        """Sets the ssl_enforcement of this ServerUpdateParametersProperties.


        :param ssl_enforcement: The ssl_enforcement of this ServerUpdateParametersProperties.
        :type ssl_enforcement: SslEnforcement
        """

        self._ssl_enforcement = ssl_enforcement

    @property
    def storage_mb(self):
        """Gets the storage_mb of this ServerUpdateParametersProperties.

        The max storage allowed for a server.

        :return: The storage_mb of this ServerUpdateParametersProperties.
        :rtype: int
        """
        return self._storage_mb

    @storage_mb.setter
    def storage_mb(self, storage_mb):
        """Sets the storage_mb of this ServerUpdateParametersProperties.

        The max storage allowed for a server.

        :param storage_mb: The storage_mb of this ServerUpdateParametersProperties.
        :type storage_mb: int
        """
        if storage_mb is not None and storage_mb < 1024:
            raise ValueError("Invalid value for `storage_mb`, must be a value greater than or equal to `1024`")

        self._storage_mb = storage_mb

    @property
    def version(self):
        """Gets the version of this ServerUpdateParametersProperties.


        :return: The version of this ServerUpdateParametersProperties.
        :rtype: ServerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerUpdateParametersProperties.


        :param version: The version of this ServerUpdateParametersProperties.
        :type version: ServerVersion
        """

        self._version = version
