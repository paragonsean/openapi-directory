/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServerVersion from './ServerVersion';
import SslEnforcement from './SslEnforcement';

/**
 * The ServerProperties model module.
 * @module model/ServerProperties
 * @version 2017-04-30-preview
 */
class ServerProperties {
    /**
     * Constructs a new <code>ServerProperties</code>.
     * The properties of a server.
     * @alias module:model/ServerProperties
     */
    constructor() { 
        
        ServerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerProperties} obj Optional instance to populate.
     * @return {module:model/ServerProperties} The populated <code>ServerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerProperties();

            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('fullyQualifiedDomainName')) {
                obj['fullyQualifiedDomainName'] = ApiClient.convertToType(data['fullyQualifiedDomainName'], 'String');
            }
            if (data.hasOwnProperty('sslEnforcement')) {
                obj['sslEnforcement'] = SslEnforcement.constructFromObject(data['sslEnforcement']);
            }
            if (data.hasOwnProperty('storageMB')) {
                obj['storageMB'] = ApiClient.convertToType(data['storageMB'], 'Number');
            }
            if (data.hasOwnProperty('userVisibleState')) {
                obj['userVisibleState'] = ApiClient.convertToType(data['userVisibleState'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ServerVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['fullyQualifiedDomainName'] && !(typeof data['fullyQualifiedDomainName'] === 'string' || data['fullyQualifiedDomainName'] instanceof String)) {
            throw new Error("Expected the field `fullyQualifiedDomainName` to be a primitive type in the JSON string but got " + data['fullyQualifiedDomainName']);
        }
        // ensure the json data is a string
        if (data['userVisibleState'] && !(typeof data['userVisibleState'] === 'string' || data['userVisibleState'] instanceof String)) {
            throw new Error("Expected the field `userVisibleState` to be a primitive type in the JSON string but got " + data['userVisibleState']);
        }

        return true;
    }


}



/**
 * The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
 * @member {String} administratorLogin
 */
ServerProperties.prototype['administratorLogin'] = undefined;

/**
 * The fully qualified domain name of a server.
 * @member {String} fullyQualifiedDomainName
 */
ServerProperties.prototype['fullyQualifiedDomainName'] = undefined;

/**
 * @member {module:model/SslEnforcement} sslEnforcement
 */
ServerProperties.prototype['sslEnforcement'] = undefined;

/**
 * The maximum storage allowed for a server.
 * @member {Number} storageMB
 */
ServerProperties.prototype['storageMB'] = undefined;

/**
 * A state of a server that is visible to user.
 * @member {module:model/ServerProperties.UserVisibleStateEnum} userVisibleState
 */
ServerProperties.prototype['userVisibleState'] = undefined;

/**
 * @member {module:model/ServerVersion} version
 */
ServerProperties.prototype['version'] = undefined;





/**
 * Allowed values for the <code>userVisibleState</code> property.
 * @enum {String}
 * @readonly
 */
ServerProperties['UserVisibleStateEnum'] = {

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Dropping"
     * @const
     */
    "Dropping": "Dropping",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ServerProperties;

