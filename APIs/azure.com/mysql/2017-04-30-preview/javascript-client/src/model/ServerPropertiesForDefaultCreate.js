/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServerPropertiesForCreate from './ServerPropertiesForCreate';
import ServerVersion from './ServerVersion';
import SslEnforcement from './SslEnforcement';

/**
 * The ServerPropertiesForDefaultCreate model module.
 * @module model/ServerPropertiesForDefaultCreate
 * @version 2017-04-30-preview
 */
class ServerPropertiesForDefaultCreate {
    /**
     * Constructs a new <code>ServerPropertiesForDefaultCreate</code>.
     * The properties used to create a new server.
     * @alias module:model/ServerPropertiesForDefaultCreate
     * @extends module:model/ServerPropertiesForCreate
     * @implements module:model/ServerPropertiesForCreate
     * @param createMode {module:model/ServerPropertiesForDefaultCreate.CreateModeEnum} The mode to create a new server.
     */
    constructor(createMode) { 
        ServerPropertiesForCreate.initialize(this, createMode);
        ServerPropertiesForDefaultCreate.initialize(this, createMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createMode) { 
        obj['administratorLogin'] = administratorLogin;
        obj['administratorLoginPassword'] = administratorLoginPassword;
    }

    /**
     * Constructs a <code>ServerPropertiesForDefaultCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerPropertiesForDefaultCreate} obj Optional instance to populate.
     * @return {module:model/ServerPropertiesForDefaultCreate} The populated <code>ServerPropertiesForDefaultCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerPropertiesForDefaultCreate();
            ServerPropertiesForCreate.constructFromObject(data, obj);
            ServerPropertiesForCreate.constructFromObject(data, obj);

            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('administratorLoginPassword')) {
                obj['administratorLoginPassword'] = ApiClient.convertToType(data['administratorLoginPassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerPropertiesForDefaultCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerPropertiesForDefaultCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerPropertiesForDefaultCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['administratorLoginPassword'] && !(typeof data['administratorLoginPassword'] === 'string' || data['administratorLoginPassword'] instanceof String)) {
            throw new Error("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got " + data['administratorLoginPassword']);
        }

        return true;
    }


}

ServerPropertiesForDefaultCreate.RequiredProperties = ["administratorLogin", "administratorLoginPassword", "createMode"];

/**
 * The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
 * @member {String} administratorLogin
 */
ServerPropertiesForDefaultCreate.prototype['administratorLogin'] = undefined;

/**
 * The password of the administrator login.
 * @member {String} administratorLoginPassword
 */
ServerPropertiesForDefaultCreate.prototype['administratorLoginPassword'] = undefined;


// Implement ServerPropertiesForCreate interface:
/**
 * The mode to create a new server.
 * @member {module:model/ServerPropertiesForCreate.CreateModeEnum} createMode
 */
ServerPropertiesForCreate.prototype['createMode'] = undefined;
/**
 * @member {module:model/SslEnforcement} sslEnforcement
 */
ServerPropertiesForCreate.prototype['sslEnforcement'] = undefined;
/**
 * The maximum storage allowed for a server.
 * @member {Number} storageMB
 */
ServerPropertiesForCreate.prototype['storageMB'] = undefined;
/**
 * @member {module:model/ServerVersion} version
 */
ServerPropertiesForCreate.prototype['version'] = undefined;




export default ServerPropertiesForDefaultCreate;

