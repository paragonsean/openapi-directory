/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MySqlManagementClient);
  }
}(this, function(expect, MySqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MySqlManagementClient.ServersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServersApi', function() {
    describe('serversCreate', function() {
      it('should call serversCreate successfully', function(done) {
        //uncomment below and update the code to test serversCreate
        //instance.serversCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serversDelete', function() {
      it('should call serversDelete successfully', function(done) {
        //uncomment below and update the code to test serversDelete
        //instance.serversDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serversGet', function() {
      it('should call serversGet successfully', function(done) {
        //uncomment below and update the code to test serversGet
        //instance.serversGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serversList', function() {
      it('should call serversList successfully', function(done) {
        //uncomment below and update the code to test serversList
        //instance.serversList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serversListByResourceGroup', function() {
      it('should call serversListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test serversListByResourceGroup
        //instance.serversListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serversUpdate', function() {
      it('should call serversUpdate successfully', function(done) {
        //uncomment below and update the code to test serversUpdate
        //instance.serversUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
