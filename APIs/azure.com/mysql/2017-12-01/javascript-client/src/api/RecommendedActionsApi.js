/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecommendationAction from '../model/RecommendationAction';
import RecommendationActionsResultList from '../model/RecommendationActionsResultList';

/**
* RecommendedActions service.
* @module api/RecommendedActionsApi
* @version 2017-12-01
*/
export default class RecommendedActionsApi {

    /**
    * Constructs a new RecommendedActionsApi. 
    * @alias module:api/RecommendedActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recommendedActionsGet operation.
     * @callback module:api/RecommendedActionsApi~recommendedActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve recommended actions from the advisor.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} advisorName The advisor name for recommendation action.
     * @param {String} recommendedActionName The recommended action name.
     * @param {module:api/RecommendedActionsApi~recommendedActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationAction}
     */
    recommendedActionsGet(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, recommendedActionName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendedActionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendedActionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendedActionsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling recommendedActionsGet");
      }
      // verify the required parameter 'advisorName' is set
      if (advisorName === undefined || advisorName === null) {
        throw new Error("Missing the required parameter 'advisorName' when calling recommendedActionsGet");
      }
      // verify the required parameter 'recommendedActionName' is set
      if (recommendedActionName === undefined || recommendedActionName === null) {
        throw new Error("Missing the required parameter 'recommendedActionName' when calling recommendedActionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'advisorName': advisorName,
        'recommendedActionName': recommendedActionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationAction;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendedActionsListByServer operation.
     * @callback module:api/RecommendedActionsApi~recommendedActionsListByServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationActionsResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve recommended actions from the advisor.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} advisorName The advisor name for recommendation action.
     * @param {Object} opts Optional parameters
     * @param {String} [sessionId] The recommendation action session identifier.
     * @param {module:api/RecommendedActionsApi~recommendedActionsListByServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationActionsResultList}
     */
    recommendedActionsListByServer(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendedActionsListByServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendedActionsListByServer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendedActionsListByServer");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling recommendedActionsListByServer");
      }
      // verify the required parameter 'advisorName' is set
      if (advisorName === undefined || advisorName === null) {
        throw new Error("Missing the required parameter 'advisorName' when calling recommendedActionsListByServer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'advisorName': advisorName
      };
      let queryParams = {
        'api-version': apiVersion,
        'sessionId': opts['sessionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationActionsResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
