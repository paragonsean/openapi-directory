/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerUpdateParameters::OAIServerUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerUpdateParameters::OAIServerUpdateParameters() {
    this->initializeModel();
}

OAIServerUpdateParameters::~OAIServerUpdateParameters() {}

void OAIServerUpdateParameters::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIServerUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerUpdateParameters::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIServerUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIServerUpdateParameters_properties OAIServerUpdateParameters::getProperties() const {
    return m_properties;
}
void OAIServerUpdateParameters::setProperties(const OAIServerUpdateParameters_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIServerUpdateParameters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIServerUpdateParameters::is_properties_Valid() const{
    return m_properties_isValid;
}

OAISku OAIServerUpdateParameters::getSku() const {
    return m_sku;
}
void OAIServerUpdateParameters::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIServerUpdateParameters::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIServerUpdateParameters::is_sku_Valid() const{
    return m_sku_isValid;
}

QMap<QString, QString> OAIServerUpdateParameters::getTags() const {
    return m_tags;
}
void OAIServerUpdateParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServerUpdateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServerUpdateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIServerUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
