/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationActionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationActionProperties::OAIRecommendationActionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationActionProperties::OAIRecommendationActionProperties() {
    this->initializeModel();
}

OAIRecommendationActionProperties::~OAIRecommendationActionProperties() {}

void OAIRecommendationActionProperties::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_advisor_name_isSet = false;
    m_advisor_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_recommendation_type_isSet = false;
    m_recommendation_type_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIRecommendationActionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationActionProperties::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_advisor_name_isValid = ::OpenAPI::fromJsonValue(m_advisor_name, json[QString("advisorName")]);
    m_advisor_name_isSet = !json[QString("advisorName")].isNull() && m_advisor_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_recommendation_type_isValid = ::OpenAPI::fromJsonValue(m_recommendation_type, json[QString("recommendationType")]);
    m_recommendation_type_isSet = !json[QString("recommendationType")].isNull() && m_recommendation_type_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAIRecommendationActionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationActionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_advisor_name_isSet) {
        obj.insert(QString("advisorName"), ::OpenAPI::toJsonValue(m_advisor_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_recommendation_type_isSet) {
        obj.insert(QString("recommendationType"), ::OpenAPI::toJsonValue(m_recommendation_type));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

qint32 OAIRecommendationActionProperties::getActionId() const {
    return m_action_id;
}
void OAIRecommendationActionProperties::setActionId(const qint32 &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIRecommendationActionProperties::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIRecommendationActionProperties::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIRecommendationActionProperties::getAdvisorName() const {
    return m_advisor_name;
}
void OAIRecommendationActionProperties::setAdvisorName(const QString &advisor_name) {
    m_advisor_name = advisor_name;
    m_advisor_name_isSet = true;
}

bool OAIRecommendationActionProperties::is_advisor_name_Set() const{
    return m_advisor_name_isSet;
}

bool OAIRecommendationActionProperties::is_advisor_name_Valid() const{
    return m_advisor_name_isValid;
}

QDateTime OAIRecommendationActionProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIRecommendationActionProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIRecommendationActionProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIRecommendationActionProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QMap<QString, QString> OAIRecommendationActionProperties::getDetails() const {
    return m_details;
}
void OAIRecommendationActionProperties::setDetails(const QMap<QString, QString> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRecommendationActionProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRecommendationActionProperties::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAIRecommendationActionProperties::getExpirationTime() const {
    return m_expiration_time;
}
void OAIRecommendationActionProperties::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIRecommendationActionProperties::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIRecommendationActionProperties::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIRecommendationActionProperties::getReason() const {
    return m_reason;
}
void OAIRecommendationActionProperties::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRecommendationActionProperties::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRecommendationActionProperties::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRecommendationActionProperties::getRecommendationType() const {
    return m_recommendation_type;
}
void OAIRecommendationActionProperties::setRecommendationType(const QString &recommendation_type) {
    m_recommendation_type = recommendation_type;
    m_recommendation_type_isSet = true;
}

bool OAIRecommendationActionProperties::is_recommendation_type_Set() const{
    return m_recommendation_type_isSet;
}

bool OAIRecommendationActionProperties::is_recommendation_type_Valid() const{
    return m_recommendation_type_isValid;
}

QString OAIRecommendationActionProperties::getSessionId() const {
    return m_session_id;
}
void OAIRecommendationActionProperties::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIRecommendationActionProperties::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIRecommendationActionProperties::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIRecommendationActionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advisor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationActionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
