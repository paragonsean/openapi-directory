/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPerformanceTierServiceLevelObjectives.h
 *
 * Service level objectives for performance tier.
 */

#ifndef OAIPerformanceTierServiceLevelObjectives_H
#define OAIPerformanceTierServiceLevelObjectives_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPerformanceTierServiceLevelObjectives : public OAIObject {
public:
    OAIPerformanceTierServiceLevelObjectives();
    OAIPerformanceTierServiceLevelObjectives(QString json);
    ~OAIPerformanceTierServiceLevelObjectives() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEdition() const;
    void setEdition(const QString &edition);
    bool is_edition_Set() const;
    bool is_edition_Valid() const;

    QString getHardwareGeneration() const;
    void setHardwareGeneration(const QString &hardware_generation);
    bool is_hardware_generation_Set() const;
    bool is_hardware_generation_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMaxBackupRetentionDays() const;
    void setMaxBackupRetentionDays(const qint32 &max_backup_retention_days);
    bool is_max_backup_retention_days_Set() const;
    bool is_max_backup_retention_days_Valid() const;

    qint32 getMaxStorageMb() const;
    void setMaxStorageMb(const qint32 &max_storage_mb);
    bool is_max_storage_mb_Set() const;
    bool is_max_storage_mb_Valid() const;

    qint32 getMinBackupRetentionDays() const;
    void setMinBackupRetentionDays(const qint32 &min_backup_retention_days);
    bool is_min_backup_retention_days_Set() const;
    bool is_min_backup_retention_days_Valid() const;

    qint32 getMinStorageMb() const;
    void setMinStorageMb(const qint32 &min_storage_mb);
    bool is_min_storage_mb_Set() const;
    bool is_min_storage_mb_Valid() const;

    qint32 getVCore() const;
    void setVCore(const qint32 &v_core);
    bool is_v_core_Set() const;
    bool is_v_core_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_edition;
    bool m_edition_isSet;
    bool m_edition_isValid;

    QString m_hardware_generation;
    bool m_hardware_generation_isSet;
    bool m_hardware_generation_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_max_backup_retention_days;
    bool m_max_backup_retention_days_isSet;
    bool m_max_backup_retention_days_isValid;

    qint32 m_max_storage_mb;
    bool m_max_storage_mb_isSet;
    bool m_max_storage_mb_isValid;

    qint32 m_min_backup_retention_days;
    bool m_min_backup_retention_days_isSet;
    bool m_min_backup_retention_days_isValid;

    qint32 m_min_storage_mb;
    bool m_min_storage_mb_isSet;
    bool m_min_storage_mb_isValid;

    qint32 m_v_core;
    bool m_v_core_isSet;
    bool m_v_core_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPerformanceTierServiceLevelObjectives)

#endif // OAIPerformanceTierServiceLevelObjectives_H
