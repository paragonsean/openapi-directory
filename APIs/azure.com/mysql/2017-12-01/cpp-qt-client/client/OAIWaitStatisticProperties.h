/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaitStatisticProperties.h
 *
 * The properties of a wait statistic.
 */

#ifndef OAIWaitStatisticProperties_H
#define OAIWaitStatisticProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWaitStatisticProperties : public OAIObject {
public:
    OAIWaitStatisticProperties();
    OAIWaitStatisticProperties(QString json);
    ~OAIWaitStatisticProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getCount() const;
    void setCount(const qint64 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getEventName() const;
    void setEventName(const QString &event_name);
    bool is_event_name_Set() const;
    bool is_event_name_Valid() const;

    QString getEventTypeName() const;
    void setEventTypeName(const QString &event_type_name);
    bool is_event_type_name_Set() const;
    bool is_event_type_name_Valid() const;

    qint64 getQueryId() const;
    void setQueryId(const qint64 &query_id);
    bool is_query_id_Set() const;
    bool is_query_id_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    double getTotalTimeInMs() const;
    void setTotalTimeInMs(const double &total_time_in_ms);
    bool is_total_time_in_ms_Set() const;
    bool is_total_time_in_ms_Valid() const;

    qint64 getUserId() const;
    void setUserId(const qint64 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_event_name;
    bool m_event_name_isSet;
    bool m_event_name_isValid;

    QString m_event_type_name;
    bool m_event_type_name_isSet;
    bool m_event_type_name_isValid;

    qint64 m_query_id;
    bool m_query_id_isSet;
    bool m_query_id_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    double m_total_time_in_ms;
    bool m_total_time_in_ms_isSet;
    bool m_total_time_in_ms_isValid;

    qint64 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaitStatisticProperties)

#endif // OAIWaitStatisticProperties_H
