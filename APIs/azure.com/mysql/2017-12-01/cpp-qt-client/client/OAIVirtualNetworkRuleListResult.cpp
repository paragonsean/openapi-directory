/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkRuleListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkRuleListResult::OAIVirtualNetworkRuleListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkRuleListResult::OAIVirtualNetworkRuleListResult() {
    this->initializeModel();
}

OAIVirtualNetworkRuleListResult::~OAIVirtualNetworkRuleListResult() {}

void OAIVirtualNetworkRuleListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIVirtualNetworkRuleListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkRuleListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIVirtualNetworkRuleListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkRuleListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIVirtualNetworkRuleListResult::getNextLink() const {
    return m_next_link;
}
void OAIVirtualNetworkRuleListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIVirtualNetworkRuleListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIVirtualNetworkRuleListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIVirtualNetworkRule> OAIVirtualNetworkRuleListResult::getValue() const {
    return m_value;
}
void OAIVirtualNetworkRuleListResult::setValue(const QList<OAIVirtualNetworkRule> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIVirtualNetworkRuleListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIVirtualNetworkRuleListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIVirtualNetworkRuleListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkRuleListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
