/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopQueryStatisticsApi_H
#define OAI_OAITopQueryStatisticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQueryStatistic.h"
#include "OAITopQueryStatisticsInput.h"
#include "OAITopQueryStatisticsResultList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopQueryStatisticsApi : public QObject {
    Q_OBJECT

public:
    OAITopQueryStatisticsApi(const int timeOut = 0);
    ~OAITopQueryStatisticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  query_statistic_id QString [required]
    */
    virtual void topQueryStatisticsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &query_statistic_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  parameters OAITopQueryStatisticsInput [required]
    */
    virtual void topQueryStatisticsListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const OAITopQueryStatisticsInput &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void topQueryStatisticsGetCallback(OAIHttpRequestWorker *worker);
    void topQueryStatisticsListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void topQueryStatisticsGetSignal(OAIQueryStatistic summary);
    void topQueryStatisticsListByServerSignal(OAITopQueryStatisticsResultList summary);


    void topQueryStatisticsGetSignalFull(OAIHttpRequestWorker *worker, OAIQueryStatistic summary);
    void topQueryStatisticsListByServerSignalFull(OAIHttpRequestWorker *worker, OAITopQueryStatisticsResultList summary);

    Q_DECL_DEPRECATED_X("Use topQueryStatisticsGetSignalError() instead")
    void topQueryStatisticsGetSignalE(OAIQueryStatistic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topQueryStatisticsGetSignalError(OAIQueryStatistic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topQueryStatisticsListByServerSignalError() instead")
    void topQueryStatisticsListByServerSignalE(OAITopQueryStatisticsResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topQueryStatisticsListByServerSignalError(OAITopQueryStatisticsResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use topQueryStatisticsGetSignalErrorFull() instead")
    void topQueryStatisticsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topQueryStatisticsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topQueryStatisticsListByServerSignalErrorFull() instead")
    void topQueryStatisticsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topQueryStatisticsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
