/*
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.ServerAdministratorResource;
import org.openapitools.client.model.ServerAdministratorResourceListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServerAdministratorsApi
 */
@Disabled
public class ServerAdministratorsApiTest {

    private final ServerAdministratorsApi api = new ServerAdministratorsApi();

    /**
     * Creates or update active directory administrator on an existing server. The update action will overwrite the existing administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverAdministratorsCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerAdministratorResource properties = null;
        ServerAdministratorResource response = api.serverAdministratorsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, properties);
        // TODO: test validations
    }

    /**
     * Deletes AAD Administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverAdministratorsDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerAdministratorResource response = api.serverAdministratorsDelete(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

    /**
     * Gets information about a AAD server administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverAdministratorsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerAdministratorResource response = api.serverAdministratorsGet(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

    /**
     * Returns a list of server Administrators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverAdministratorsListByServerTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerAdministratorResourceListResult response = api.serverAdministratorsListByServer(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

}
