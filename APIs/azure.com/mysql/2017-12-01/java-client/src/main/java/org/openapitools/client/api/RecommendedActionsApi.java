/*
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecommendationAction;
import org.openapitools.client.model.RecommendationActionsResultList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecommendedActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecommendedActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecommendedActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recommendedActionsGet
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param recommendedActionName The recommended action name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendedActionsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String recommendedActionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "advisorName" + "}", localVarApiClient.escapeString(advisorName.toString()))
            .replace("{" + "recommendedActionName" + "}", localVarApiClient.escapeString(recommendedActionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendedActionsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String recommendedActionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendedActionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendedActionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendedActionsGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling recommendedActionsGet(Async)");
        }

        // verify the required parameter 'advisorName' is set
        if (advisorName == null) {
            throw new ApiException("Missing the required parameter 'advisorName' when calling recommendedActionsGet(Async)");
        }

        // verify the required parameter 'recommendedActionName' is set
        if (recommendedActionName == null) {
            throw new ApiException("Missing the required parameter 'recommendedActionName' when calling recommendedActionsGet(Async)");
        }

        return recommendedActionsGetCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, recommendedActionName, _callback);

    }

    /**
     * 
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param recommendedActionName The recommended action name. (required)
     * @return RecommendationAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationAction recommendedActionsGet(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String recommendedActionName) throws ApiException {
        ApiResponse<RecommendationAction> localVarResp = recommendedActionsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, recommendedActionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param recommendedActionName The recommended action name. (required)
     * @return ApiResponse&lt;RecommendationAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationAction> recommendedActionsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String recommendedActionName) throws ApiException {
        okhttp3.Call localVarCall = recommendedActionsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, recommendedActionName, null);
        Type localVarReturnType = new TypeToken<RecommendationAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param recommendedActionName The recommended action name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendedActionsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String recommendedActionName, final ApiCallback<RecommendationAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendedActionsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, recommendedActionName, _callback);
        Type localVarReturnType = new TypeToken<RecommendationAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendedActionsListByServer
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param sessionId The recommendation action session identifier. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendedActionsListByServerCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "advisorName" + "}", localVarApiClient.escapeString(advisorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendedActionsListByServerValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendedActionsListByServer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendedActionsListByServer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendedActionsListByServer(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling recommendedActionsListByServer(Async)");
        }

        // verify the required parameter 'advisorName' is set
        if (advisorName == null) {
            throw new ApiException("Missing the required parameter 'advisorName' when calling recommendedActionsListByServer(Async)");
        }

        return recommendedActionsListByServerCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, sessionId, _callback);

    }

    /**
     * 
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param sessionId The recommendation action session identifier. (optional)
     * @return RecommendationActionsResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationActionsResultList recommendedActionsListByServer(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String sessionId) throws ApiException {
        ApiResponse<RecommendationActionsResultList> localVarResp = recommendedActionsListByServerWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, sessionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param sessionId The recommendation action session identifier. (optional)
     * @return ApiResponse&lt;RecommendationActionsResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationActionsResultList> recommendedActionsListByServerWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = recommendedActionsListByServerValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, sessionId, null);
        Type localVarReturnType = new TypeToken<RecommendationActionsResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve recommended actions from the advisor.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param advisorName The advisor name for recommendation action. (required)
     * @param sessionId The recommendation action session identifier. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendedActionsListByServerAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String advisorName, String sessionId, final ApiCallback<RecommendationActionsResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendedActionsListByServerValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, advisorName, sessionId, _callback);
        Type localVarReturnType = new TypeToken<RecommendationActionsResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
