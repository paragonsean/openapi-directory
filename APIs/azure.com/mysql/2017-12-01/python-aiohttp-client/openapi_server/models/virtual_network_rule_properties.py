# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNetworkRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_missing_vnet_service_endpoint: bool=None, state: str=None, virtual_network_subnet_id: str=None):
        """VirtualNetworkRuleProperties - a model defined in OpenAPI

        :param ignore_missing_vnet_service_endpoint: The ignore_missing_vnet_service_endpoint of this VirtualNetworkRuleProperties.
        :param state: The state of this VirtualNetworkRuleProperties.
        :param virtual_network_subnet_id: The virtual_network_subnet_id of this VirtualNetworkRuleProperties.
        """
        self.openapi_types = {
            'ignore_missing_vnet_service_endpoint': bool,
            'state': str,
            'virtual_network_subnet_id': str
        }

        self.attribute_map = {
            'ignore_missing_vnet_service_endpoint': 'ignoreMissingVnetServiceEndpoint',
            'state': 'state',
            'virtual_network_subnet_id': 'virtualNetworkSubnetId'
        }

        self._ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint
        self._state = state
        self._virtual_network_subnet_id = virtual_network_subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkRuleProperties of this VirtualNetworkRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_missing_vnet_service_endpoint(self):
        """Gets the ignore_missing_vnet_service_endpoint of this VirtualNetworkRuleProperties.

        Create firewall rule before the virtual network has vnet service endpoint enabled.

        :return: The ignore_missing_vnet_service_endpoint of this VirtualNetworkRuleProperties.
        :rtype: bool
        """
        return self._ignore_missing_vnet_service_endpoint

    @ignore_missing_vnet_service_endpoint.setter
    def ignore_missing_vnet_service_endpoint(self, ignore_missing_vnet_service_endpoint):
        """Sets the ignore_missing_vnet_service_endpoint of this VirtualNetworkRuleProperties.

        Create firewall rule before the virtual network has vnet service endpoint enabled.

        :param ignore_missing_vnet_service_endpoint: The ignore_missing_vnet_service_endpoint of this VirtualNetworkRuleProperties.
        :type ignore_missing_vnet_service_endpoint: bool
        """

        self._ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint

    @property
    def state(self):
        """Gets the state of this VirtualNetworkRuleProperties.

        Virtual Network Rule State

        :return: The state of this VirtualNetworkRuleProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VirtualNetworkRuleProperties.

        Virtual Network Rule State

        :param state: The state of this VirtualNetworkRuleProperties.
        :type state: str
        """
        allowed_values = ["Initializing", "InProgress", "Ready", "Deleting", "Unknown"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def virtual_network_subnet_id(self):
        """Gets the virtual_network_subnet_id of this VirtualNetworkRuleProperties.

        The ARM resource id of the virtual network subnet.

        :return: The virtual_network_subnet_id of this VirtualNetworkRuleProperties.
        :rtype: str
        """
        return self._virtual_network_subnet_id

    @virtual_network_subnet_id.setter
    def virtual_network_subnet_id(self, virtual_network_subnet_id):
        """Sets the virtual_network_subnet_id of this VirtualNetworkRuleProperties.

        The ARM resource id of the virtual network subnet.

        :param virtual_network_subnet_id: The virtual_network_subnet_id of this VirtualNetworkRuleProperties.
        :type virtual_network_subnet_id: str
        """
        if virtual_network_subnet_id is None:
            raise ValueError("Invalid value for `virtual_network_subnet_id`, must not be `None`")

        self._virtual_network_subnet_id = virtual_network_subnet_id
