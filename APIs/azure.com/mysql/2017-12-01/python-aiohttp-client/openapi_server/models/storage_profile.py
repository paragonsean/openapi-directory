# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_retention_days: int=None, geo_redundant_backup: str=None, storage_autogrow: str=None, storage_mb: int=None):
        """StorageProfile - a model defined in OpenAPI

        :param backup_retention_days: The backup_retention_days of this StorageProfile.
        :param geo_redundant_backup: The geo_redundant_backup of this StorageProfile.
        :param storage_autogrow: The storage_autogrow of this StorageProfile.
        :param storage_mb: The storage_mb of this StorageProfile.
        """
        self.openapi_types = {
            'backup_retention_days': int,
            'geo_redundant_backup': str,
            'storage_autogrow': str,
            'storage_mb': int
        }

        self.attribute_map = {
            'backup_retention_days': 'backupRetentionDays',
            'geo_redundant_backup': 'geoRedundantBackup',
            'storage_autogrow': 'storageAutogrow',
            'storage_mb': 'storageMB'
        }

        self._backup_retention_days = backup_retention_days
        self._geo_redundant_backup = geo_redundant_backup
        self._storage_autogrow = storage_autogrow
        self._storage_mb = storage_mb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageProfile of this StorageProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_retention_days(self):
        """Gets the backup_retention_days of this StorageProfile.

        Backup retention days for the server.

        :return: The backup_retention_days of this StorageProfile.
        :rtype: int
        """
        return self._backup_retention_days

    @backup_retention_days.setter
    def backup_retention_days(self, backup_retention_days):
        """Sets the backup_retention_days of this StorageProfile.

        Backup retention days for the server.

        :param backup_retention_days: The backup_retention_days of this StorageProfile.
        :type backup_retention_days: int
        """

        self._backup_retention_days = backup_retention_days

    @property
    def geo_redundant_backup(self):
        """Gets the geo_redundant_backup of this StorageProfile.

        Enable Geo-redundant or not for server backup.

        :return: The geo_redundant_backup of this StorageProfile.
        :rtype: str
        """
        return self._geo_redundant_backup

    @geo_redundant_backup.setter
    def geo_redundant_backup(self, geo_redundant_backup):
        """Sets the geo_redundant_backup of this StorageProfile.

        Enable Geo-redundant or not for server backup.

        :param geo_redundant_backup: The geo_redundant_backup of this StorageProfile.
        :type geo_redundant_backup: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if geo_redundant_backup not in allowed_values:
            raise ValueError(
                "Invalid value for `geo_redundant_backup` ({0}), must be one of {1}"
                .format(geo_redundant_backup, allowed_values)
            )

        self._geo_redundant_backup = geo_redundant_backup

    @property
    def storage_autogrow(self):
        """Gets the storage_autogrow of this StorageProfile.

        Enable Storage Auto Grow.

        :return: The storage_autogrow of this StorageProfile.
        :rtype: str
        """
        return self._storage_autogrow

    @storage_autogrow.setter
    def storage_autogrow(self, storage_autogrow):
        """Sets the storage_autogrow of this StorageProfile.

        Enable Storage Auto Grow.

        :param storage_autogrow: The storage_autogrow of this StorageProfile.
        :type storage_autogrow: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if storage_autogrow not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_autogrow` ({0}), must be one of {1}"
                .format(storage_autogrow, allowed_values)
            )

        self._storage_autogrow = storage_autogrow

    @property
    def storage_mb(self):
        """Gets the storage_mb of this StorageProfile.

        Max storage allowed for a server.

        :return: The storage_mb of this StorageProfile.
        :rtype: int
        """
        return self._storage_mb

    @storage_mb.setter
    def storage_mb(self, storage_mb):
        """Sets the storage_mb of this StorageProfile.

        Max storage allowed for a server.

        :param storage_mb: The storage_mb of this StorageProfile.
        :type storage_mb: int
        """

        self._storage_mb = storage_mb
