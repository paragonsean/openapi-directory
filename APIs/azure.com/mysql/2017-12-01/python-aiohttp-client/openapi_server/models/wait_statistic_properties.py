# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WaitStatisticProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, database_name: str=None, end_time: datetime=None, event_name: str=None, event_type_name: str=None, query_id: int=None, start_time: datetime=None, total_time_in_ms: float=None, user_id: int=None):
        """WaitStatisticProperties - a model defined in OpenAPI

        :param count: The count of this WaitStatisticProperties.
        :param database_name: The database_name of this WaitStatisticProperties.
        :param end_time: The end_time of this WaitStatisticProperties.
        :param event_name: The event_name of this WaitStatisticProperties.
        :param event_type_name: The event_type_name of this WaitStatisticProperties.
        :param query_id: The query_id of this WaitStatisticProperties.
        :param start_time: The start_time of this WaitStatisticProperties.
        :param total_time_in_ms: The total_time_in_ms of this WaitStatisticProperties.
        :param user_id: The user_id of this WaitStatisticProperties.
        """
        self.openapi_types = {
            'count': int,
            'database_name': str,
            'end_time': datetime,
            'event_name': str,
            'event_type_name': str,
            'query_id': int,
            'start_time': datetime,
            'total_time_in_ms': float,
            'user_id': int
        }

        self.attribute_map = {
            'count': 'count',
            'database_name': 'databaseName',
            'end_time': 'endTime',
            'event_name': 'eventName',
            'event_type_name': 'eventTypeName',
            'query_id': 'queryId',
            'start_time': 'startTime',
            'total_time_in_ms': 'totalTimeInMs',
            'user_id': 'userId'
        }

        self._count = count
        self._database_name = database_name
        self._end_time = end_time
        self._event_name = event_name
        self._event_type_name = event_type_name
        self._query_id = query_id
        self._start_time = start_time
        self._total_time_in_ms = total_time_in_ms
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WaitStatisticProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WaitStatisticProperties of this WaitStatisticProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this WaitStatisticProperties.

        Wait event count observed in this time interval.

        :return: The count of this WaitStatisticProperties.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this WaitStatisticProperties.

        Wait event count observed in this time interval.

        :param count: The count of this WaitStatisticProperties.
        :type count: int
        """

        self._count = count

    @property
    def database_name(self):
        """Gets the database_name of this WaitStatisticProperties.

        Database Name.

        :return: The database_name of this WaitStatisticProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this WaitStatisticProperties.

        Database Name.

        :param database_name: The database_name of this WaitStatisticProperties.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def end_time(self):
        """Gets the end_time of this WaitStatisticProperties.

        Observation end time.

        :return: The end_time of this WaitStatisticProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WaitStatisticProperties.

        Observation end time.

        :param end_time: The end_time of this WaitStatisticProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def event_name(self):
        """Gets the event_name of this WaitStatisticProperties.

        Wait event name.

        :return: The event_name of this WaitStatisticProperties.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this WaitStatisticProperties.

        Wait event name.

        :param event_name: The event_name of this WaitStatisticProperties.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_type_name(self):
        """Gets the event_type_name of this WaitStatisticProperties.

        Wait event type name.

        :return: The event_type_name of this WaitStatisticProperties.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this WaitStatisticProperties.

        Wait event type name.

        :param event_type_name: The event_type_name of this WaitStatisticProperties.
        :type event_type_name: str
        """

        self._event_type_name = event_type_name

    @property
    def query_id(self):
        """Gets the query_id of this WaitStatisticProperties.

        Database query identifier.

        :return: The query_id of this WaitStatisticProperties.
        :rtype: int
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this WaitStatisticProperties.

        Database query identifier.

        :param query_id: The query_id of this WaitStatisticProperties.
        :type query_id: int
        """

        self._query_id = query_id

    @property
    def start_time(self):
        """Gets the start_time of this WaitStatisticProperties.

        Observation start time.

        :return: The start_time of this WaitStatisticProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WaitStatisticProperties.

        Observation start time.

        :param start_time: The start_time of this WaitStatisticProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def total_time_in_ms(self):
        """Gets the total_time_in_ms of this WaitStatisticProperties.

        Total time of wait in milliseconds in this time interval.

        :return: The total_time_in_ms of this WaitStatisticProperties.
        :rtype: float
        """
        return self._total_time_in_ms

    @total_time_in_ms.setter
    def total_time_in_ms(self, total_time_in_ms):
        """Sets the total_time_in_ms of this WaitStatisticProperties.

        Total time of wait in milliseconds in this time interval.

        :param total_time_in_ms: The total_time_in_ms of this WaitStatisticProperties.
        :type total_time_in_ms: float
        """

        self._total_time_in_ms = total_time_in_ms

    @property
    def user_id(self):
        """Gets the user_id of this WaitStatisticProperties.

        Database user identifier.

        :return: The user_id of this WaitStatisticProperties.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WaitStatisticProperties.

        Database user identifier.

        :param user_id: The user_id of this WaitStatisticProperties.
        :type user_id: int
        """

        self._user_id = user_id
