/*
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LogAnalyticsQueryPackQuery;
import org.openapitools.client.model.LogAnalyticsQueryPackQueryListResult;
import org.openapitools.client.model.LogAnalyticsQueryPackQuerySearchProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queriesDelete
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query has been successfully removed from the Log Analytics QueryPack </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified query or associated QueryPack does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesDeleteCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "queryPackName" + "}", localVarApiClient.escapeString(queryPackName.toString()))
            .replace("{" + "queryId" + "}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesDelete(Async)");
        }

        // verify the required parameter 'queryPackName' is set
        if (queryPackName == null) {
            throw new ApiException("Missing the required parameter 'queryPackName' when calling queriesDelete(Async)");
        }

        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling queriesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesDelete(Async)");
        }

        return queriesDeleteCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query has been successfully removed from the Log Analytics QueryPack </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified query or associated QueryPack does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void queriesDelete(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion) throws ApiException {
        queriesDeleteWithHttpInfo(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion);
    }

    /**
     * 
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query has been successfully removed from the Log Analytics QueryPack </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified query or associated QueryPack does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queriesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = queriesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The query has been successfully removed from the Log Analytics QueryPack </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified query or associated QueryPack does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesDeleteAsync(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesGet
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "queryPackName" + "}", localVarApiClient.escapeString(queryPackName.toString()))
            .replace("{" + "queryId" + "}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesGet(Async)");
        }

        // verify the required parameter 'queryPackName' is set
        if (queryPackName == null) {
            throw new ApiException("Missing the required parameter 'queryPackName' when calling queriesGet(Async)");
        }

        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling queriesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesGet(Async)");
        }

        return queriesGetCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return LogAnalyticsQueryPackQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogAnalyticsQueryPackQuery queriesGet(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion) throws ApiException {
        ApiResponse<LogAnalyticsQueryPackQuery> localVarResp = queriesGetWithHttpInfo(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;LogAnalyticsQueryPackQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogAnalyticsQueryPackQuery> queriesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = queriesGetValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, null);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesGetAsync(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, final ApiCallback<LogAnalyticsQueryPackQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesGetValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesList
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListCall(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "queryPackName" + "}", localVarApiClient.escapeString(queryPackName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (includeBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBody", includeBody));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesList(Async)");
        }

        // verify the required parameter 'queryPackName' is set
        if (queryPackName == null) {
            throw new ApiException("Missing the required parameter 'queryPackName' when calling queriesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesList(Async)");
        }

        return queriesListCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, $top, includeBody, $skipToken, _callback);

    }

    /**
     * 
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @return LogAnalyticsQueryPackQueryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogAnalyticsQueryPackQueryListResult queriesList(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, Integer $top, Boolean includeBody, String $skipToken) throws ApiException {
        ApiResponse<LogAnalyticsQueryPackQueryListResult> localVarResp = queriesListWithHttpInfo(subscriptionId, resourceGroupName, queryPackName, apiVersion, $top, includeBody, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @return ApiResponse&lt;LogAnalyticsQueryPackQueryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogAnalyticsQueryPackQueryListResult> queriesListWithHttpInfo(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, Integer $top, Boolean includeBody, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = queriesListValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, $top, includeBody, $skipToken, null);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQueryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListAsync(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback<LogAnalyticsQueryPackQueryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesListValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, $top, includeBody, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQueryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesPut
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesPutCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, LogAnalyticsQueryPackQuery queryPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryPayload;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "queryPackName" + "}", localVarApiClient.escapeString(queryPackName.toString()))
            .replace("{" + "queryId" + "}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesPutValidateBeforeCall(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, LogAnalyticsQueryPackQuery queryPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesPut(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesPut(Async)");
        }

        // verify the required parameter 'queryPackName' is set
        if (queryPackName == null) {
            throw new ApiException("Missing the required parameter 'queryPackName' when calling queriesPut(Async)");
        }

        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling queriesPut(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesPut(Async)");
        }

        // verify the required parameter 'queryPayload' is set
        if (queryPayload == null) {
            throw new ApiException("Missing the required parameter 'queryPayload' when calling queriesPut(Async)");
        }

        return queriesPutCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, queryPayload, _callback);

    }

    /**
     * 
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. (required)
     * @return LogAnalyticsQueryPackQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogAnalyticsQueryPackQuery queriesPut(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, LogAnalyticsQueryPackQuery queryPayload) throws ApiException {
        ApiResponse<LogAnalyticsQueryPackQuery> localVarResp = queriesPutWithHttpInfo(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, queryPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. (required)
     * @return ApiResponse&lt;LogAnalyticsQueryPackQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogAnalyticsQueryPackQuery> queriesPutWithHttpInfo(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, LogAnalyticsQueryPackQuery queryPayload) throws ApiException {
        okhttp3.Call localVarCall = queriesPutValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, queryPayload, null);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param queryId The id of a specific query defined in the Log Analytics QueryPack (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated query contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesPutAsync(String subscriptionId, String resourceGroupName, String queryPackName, String queryId, String apiVersion, LogAnalyticsQueryPackQuery queryPayload, final ApiCallback<LogAnalyticsQueryPackQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesPutValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, queryPayload, _callback);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queriesSearch
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics QueryPack. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesSearchCall(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, LogAnalyticsQueryPackQuerySearchProperties querySearchProperties, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = querySearchProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/search"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "queryPackName" + "}", localVarApiClient.escapeString(queryPackName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (includeBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBody", includeBody));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesSearchValidateBeforeCall(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, LogAnalyticsQueryPackQuerySearchProperties querySearchProperties, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesSearch(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesSearch(Async)");
        }

        // verify the required parameter 'queryPackName' is set
        if (queryPackName == null) {
            throw new ApiException("Missing the required parameter 'queryPackName' when calling queriesSearch(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesSearch(Async)");
        }

        // verify the required parameter 'querySearchProperties' is set
        if (querySearchProperties == null) {
            throw new ApiException("Missing the required parameter 'querySearchProperties' when calling queriesSearch(Async)");
        }

        return queriesSearchCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, querySearchProperties, $top, includeBody, $skipToken, _callback);

    }

    /**
     * 
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search properties.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics QueryPack. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @return LogAnalyticsQueryPackQueryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogAnalyticsQueryPackQueryListResult queriesSearch(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, LogAnalyticsQueryPackQuerySearchProperties querySearchProperties, Integer $top, Boolean includeBody, String $skipToken) throws ApiException {
        ApiResponse<LogAnalyticsQueryPackQueryListResult> localVarResp = queriesSearchWithHttpInfo(subscriptionId, resourceGroupName, queryPackName, apiVersion, querySearchProperties, $top, includeBody, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search properties.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics QueryPack. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @return ApiResponse&lt;LogAnalyticsQueryPackQueryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogAnalyticsQueryPackQueryListResult> queriesSearchWithHttpInfo(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, LogAnalyticsQueryPackQuerySearchProperties querySearchProperties, Integer $top, Boolean includeBody, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = queriesSearchValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, querySearchProperties, $top, includeBody, $skipToken, null);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQueryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search properties.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param queryPackName The name of the Log Analytics QueryPack resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics QueryPack. (required)
     * @param $top Maximum items returned in page. (optional)
     * @param includeBody Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. (optional)
     * @param $skipToken Base64 encoded token used to fetch the next page of items. Default is null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more queries contained within the Log Analytics QueryPack. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesSearchAsync(String subscriptionId, String resourceGroupName, String queryPackName, String apiVersion, LogAnalyticsQueryPackQuerySearchProperties querySearchProperties, Integer $top, Boolean includeBody, String $skipToken, final ApiCallback<LogAnalyticsQueryPackQueryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesSearchValidateBeforeCall(subscriptionId, resourceGroupName, queryPackName, apiVersion, querySearchProperties, $top, includeBody, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<LogAnalyticsQueryPackQueryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
