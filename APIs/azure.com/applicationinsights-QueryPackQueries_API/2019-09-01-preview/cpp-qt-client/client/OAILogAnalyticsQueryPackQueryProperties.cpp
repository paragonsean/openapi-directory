/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogAnalyticsQueryPackQueryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogAnalyticsQueryPackQueryProperties::OAILogAnalyticsQueryPackQueryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogAnalyticsQueryPackQueryProperties::OAILogAnalyticsQueryPackQueryProperties() {
    this->initializeModel();
}

OAILogAnalyticsQueryPackQueryProperties::~OAILogAnalyticsQueryPackQueryProperties() {}

void OAILogAnalyticsQueryPackQueryProperties::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_linked_resource_id_isSet = false;
    m_linked_resource_id_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_modified_isSet = false;
    m_time_modified_isValid = false;
}

void OAILogAnalyticsQueryPackQueryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogAnalyticsQueryPackQueryProperties::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_linked_resource_id_isValid = ::OpenAPI::fromJsonValue(m_linked_resource_id, json[QString("linkedResourceId")]);
    m_linked_resource_id_isSet = !json[QString("linkedResourceId")].isNull() && m_linked_resource_id_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("resourceTypes")]);
    m_resource_types_isSet = !json[QString("resourceTypes")].isNull() && m_resource_types_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_time_modified_isValid = ::OpenAPI::fromJsonValue(m_time_modified, json[QString("timeModified")]);
    m_time_modified_isSet = !json[QString("timeModified")].isNull() && m_time_modified_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogAnalyticsQueryPackQueryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_linked_resource_id_isSet) {
        obj.insert(QString("linkedResourceId"), ::OpenAPI::toJsonValue(m_linked_resource_id));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("resourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_modified_isSet) {
        obj.insert(QString("timeModified"), ::OpenAPI::toJsonValue(m_time_modified));
    }
    return obj;
}

QString OAILogAnalyticsQueryPackQueryProperties::getAuthor() const {
    return m_author;
}
void OAILogAnalyticsQueryPackQueryProperties::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_author_Set() const{
    return m_author_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_author_Valid() const{
    return m_author_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::getBody() const {
    return m_body;
}
void OAILogAnalyticsQueryPackQueryProperties::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_body_Set() const{
    return m_body_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAILogAnalyticsQueryPackQueryProperties::getCategories() const {
    return m_categories;
}
void OAILogAnalyticsQueryPackQueryProperties::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::getDescription() const {
    return m_description;
}
void OAILogAnalyticsQueryPackQueryProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::getDisplayName() const {
    return m_display_name;
}
void OAILogAnalyticsQueryPackQueryProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAILogAnalyticsQueryPackQueryProperties::getLabels() const {
    return m_labels;
}
void OAILogAnalyticsQueryPackQueryProperties::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::getLinkedResourceId() const {
    return m_linked_resource_id;
}
void OAILogAnalyticsQueryPackQueryProperties::setLinkedResourceId(const QString &linked_resource_id) {
    m_linked_resource_id = linked_resource_id;
    m_linked_resource_id_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_linked_resource_id_Set() const{
    return m_linked_resource_id_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_linked_resource_id_Valid() const{
    return m_linked_resource_id_isValid;
}

QString OAILogAnalyticsQueryPackQueryProperties::getQueryId() const {
    return m_query_id;
}
void OAILogAnalyticsQueryPackQueryProperties::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QList<QString> OAILogAnalyticsQueryPackQueryProperties::getResourceTypes() const {
    return m_resource_types;
}
void OAILogAnalyticsQueryPackQueryProperties::setResourceTypes(const QList<QString> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QDateTime OAILogAnalyticsQueryPackQueryProperties::getTimeCreated() const {
    return m_time_created;
}
void OAILogAnalyticsQueryPackQueryProperties::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QDateTime OAILogAnalyticsQueryPackQueryProperties::getTimeModified() const {
    return m_time_modified;
}
void OAILogAnalyticsQueryPackQueryProperties::setTimeModified(const QDateTime &time_modified) {
    m_time_modified = time_modified;
    m_time_modified_isSet = true;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_time_modified_Set() const{
    return m_time_modified_isSet;
}

bool OAILogAnalyticsQueryPackQueryProperties::is_time_modified_Valid() const{
    return m_time_modified_isValid;
}

bool OAILogAnalyticsQueryPackQueryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogAnalyticsQueryPackQueryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_display_name_isValid && true;
}

} // namespace OpenAPI
