/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAILogAnalyticsQueryPackQuery.h"
#include "OAILogAnalyticsQueryPackQueryListResult.h"
#include "OAILogAnalyticsQueryPackQuerySearchProperties.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  query_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void queriesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &query_pack_name, const QString &query_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  query_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void queriesGet(const QString &subscription_id, const QString &resource_group_name, const QString &query_pack_name, const QString &query_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  include_body bool [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void queriesList(const QString &subscription_id, const QString &resource_group_name, const QString &query_pack_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_body = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  query_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  query_payload OAILogAnalyticsQueryPackQuery [required]
    */
    virtual void queriesPut(const QString &subscription_id, const QString &resource_group_name, const QString &query_pack_name, const QString &query_id, const QString &api_version, const OAILogAnalyticsQueryPackQuery &query_payload);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  query_pack_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  query_search_properties OAILogAnalyticsQueryPackQuerySearchProperties [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  include_body bool [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void queriesSearch(const QString &subscription_id, const QString &resource_group_name, const QString &query_pack_name, const QString &api_version, const OAILogAnalyticsQueryPackQuerySearchProperties &query_search_properties, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_body = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queriesDeleteCallback(OAIHttpRequestWorker *worker);
    void queriesGetCallback(OAIHttpRequestWorker *worker);
    void queriesListCallback(OAIHttpRequestWorker *worker);
    void queriesPutCallback(OAIHttpRequestWorker *worker);
    void queriesSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queriesDeleteSignal();
    void queriesGetSignal(OAILogAnalyticsQueryPackQuery summary);
    void queriesListSignal(OAILogAnalyticsQueryPackQueryListResult summary);
    void queriesPutSignal(OAILogAnalyticsQueryPackQuery summary);
    void queriesSearchSignal(OAILogAnalyticsQueryPackQueryListResult summary);


    void queriesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void queriesGetSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackQuery summary);
    void queriesListSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackQueryListResult summary);
    void queriesPutSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackQuery summary);
    void queriesSearchSignalFull(OAIHttpRequestWorker *worker, OAILogAnalyticsQueryPackQueryListResult summary);

    Q_DECL_DEPRECATED_X("Use queriesDeleteSignalError() instead")
    void queriesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queriesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesGetSignalError() instead")
    void queriesGetSignalE(OAILogAnalyticsQueryPackQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesGetSignalError(OAILogAnalyticsQueryPackQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesListSignalError() instead")
    void queriesListSignalE(OAILogAnalyticsQueryPackQueryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesListSignalError(OAILogAnalyticsQueryPackQueryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesPutSignalError() instead")
    void queriesPutSignalE(OAILogAnalyticsQueryPackQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesPutSignalError(OAILogAnalyticsQueryPackQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesSearchSignalError() instead")
    void queriesSearchSignalE(OAILogAnalyticsQueryPackQueryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesSearchSignalError(OAILogAnalyticsQueryPackQueryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queriesDeleteSignalErrorFull() instead")
    void queriesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesGetSignalErrorFull() instead")
    void queriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesListSignalErrorFull() instead")
    void queriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesPutSignalErrorFull() instead")
    void queriesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queriesSearchSignalErrorFull() instead")
    void queriesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queriesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
