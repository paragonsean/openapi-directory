/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogAnalyticsQueryPackQuerySearchProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogAnalyticsQueryPackQuerySearchProperties::OAILogAnalyticsQueryPackQuerySearchProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogAnalyticsQueryPackQuerySearchProperties::OAILogAnalyticsQueryPackQuerySearchProperties() {
    this->initializeModel();
}

OAILogAnalyticsQueryPackQuerySearchProperties::~OAILogAnalyticsQueryPackQuerySearchProperties() {}

void OAILogAnalyticsQueryPackQuerySearchProperties::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;
}

void OAILogAnalyticsQueryPackQuerySearchProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogAnalyticsQueryPackQuerySearchProperties::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("resourceTypes")]);
    m_resource_types_isSet = !json[QString("resourceTypes")].isNull() && m_resource_types_isValid;
}

QString OAILogAnalyticsQueryPackQuerySearchProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogAnalyticsQueryPackQuerySearchProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("resourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    return obj;
}

QList<QString> OAILogAnalyticsQueryPackQuerySearchProperties::getCategories() const {
    return m_categories;
}
void OAILogAnalyticsQueryPackQuerySearchProperties::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAILogAnalyticsQueryPackQuerySearchProperties::getLabels() const {
    return m_labels;
}
void OAILogAnalyticsQueryPackQuerySearchProperties::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAILogAnalyticsQueryPackQuerySearchProperties::getResourceTypes() const {
    return m_resource_types;
}
void OAILogAnalyticsQueryPackQuerySearchProperties::setResourceTypes(const QList<QString> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogAnalyticsQueryPackQuerySearchProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
