/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LogAnalyticsQueryPackQuery from '../model/LogAnalyticsQueryPackQuery';
import LogAnalyticsQueryPackQueryListResult from '../model/LogAnalyticsQueryPackQueryListResult';
import LogAnalyticsQueryPackQuerySearchProperties from '../model/LogAnalyticsQueryPackQuerySearchProperties';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-09-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queriesDelete operation.
     * @callback module:api/DefaultApi~queriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {String} queryId The id of a specific query defined in the Log Analytics QueryPack
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DefaultApi~queriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queriesDelete(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queriesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queriesDelete");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queriesDelete");
      }
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling queriesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queriesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'queryPackName': queryPackName,
        'queryId': queryId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queriesGet operation.
     * @callback module:api/DefaultApi~queriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {String} queryId The id of a specific query defined in the Log Analytics QueryPack
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DefaultApi~queriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackQuery}
     */
    queriesGet(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queriesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queriesGet");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queriesGet");
      }
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling queriesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queriesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'queryPackName': queryPackName,
        'queryId': queryId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackQuery;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queriesList operation.
     * @callback module:api/DefaultApi~queriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackQueryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum items returned in page.
     * @param {Boolean} [includeBody] Flag indicating whether or not to return the body of each applicable query. If false, only return the query information.
     * @param {String} [skipToken] Base64 encoded token used to fetch the next page of items. Default is null.
     * @param {module:api/DefaultApi~queriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackQueryListResult}
     */
    queriesList(subscriptionId, resourceGroupName, queryPackName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queriesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queriesList");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queriesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queriesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        'includeBody': opts['includeBody'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackQueryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queriesPut operation.
     * @callback module:api/DefaultApi~queriesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {String} queryId The id of a specific query defined in the Log Analytics QueryPack
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/LogAnalyticsQueryPackQuery} queryPayload Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack.
     * @param {module:api/DefaultApi~queriesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackQuery}
     */
    queriesPut(subscriptionId, resourceGroupName, queryPackName, queryId, apiVersion, queryPayload, callback) {
      let postBody = queryPayload;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queriesPut");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queriesPut");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queriesPut");
      }
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling queriesPut");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queriesPut");
      }
      // verify the required parameter 'queryPayload' is set
      if (queryPayload === undefined || queryPayload === null) {
        throw new Error("Missing the required parameter 'queryPayload' when calling queriesPut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'queryPackName': queryPackName,
        'queryId': queryId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackQuery;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/{queryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queriesSearch operation.
     * @callback module:api/DefaultApi~queriesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogAnalyticsQueryPackQueryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search properties.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} queryPackName The name of the Log Analytics QueryPack resource.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/LogAnalyticsQueryPackQuerySearchProperties} querySearchProperties Properties by which to search queries in the given Log Analytics QueryPack.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum items returned in page.
     * @param {Boolean} [includeBody] Flag indicating whether or not to return the body of each applicable query. If false, only return the query information.
     * @param {String} [skipToken] Base64 encoded token used to fetch the next page of items. Default is null.
     * @param {module:api/DefaultApi~queriesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogAnalyticsQueryPackQueryListResult}
     */
    queriesSearch(subscriptionId, resourceGroupName, queryPackName, apiVersion, querySearchProperties, opts, callback) {
      opts = opts || {};
      let postBody = querySearchProperties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queriesSearch");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queriesSearch");
      }
      // verify the required parameter 'queryPackName' is set
      if (queryPackName === undefined || queryPackName === null) {
        throw new Error("Missing the required parameter 'queryPackName' when calling queriesSearch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queriesSearch");
      }
      // verify the required parameter 'querySearchProperties' is set
      if (querySearchProperties === undefined || querySearchProperties === null) {
        throw new Error("Missing the required parameter 'querySearchProperties' when calling queriesSearch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'queryPackName': queryPackName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        'includeBody': opts['includeBody'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogAnalyticsQueryPackQueryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/queryPacks/{queryPackName}/queries/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
