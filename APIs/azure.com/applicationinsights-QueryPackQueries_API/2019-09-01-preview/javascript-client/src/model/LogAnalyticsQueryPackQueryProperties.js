/**
 * Azure Log Analytics Query Packs
 * Azure Log Analytics API reference for management of saved Queries within Query Packs.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogAnalyticsQueryPackQueryProperties model module.
 * @module model/LogAnalyticsQueryPackQueryProperties
 * @version 2019-09-01-preview
 */
class LogAnalyticsQueryPackQueryProperties {
    /**
     * Constructs a new <code>LogAnalyticsQueryPackQueryProperties</code>.
     * Properties that define an Log Analytics QueryPack-Query resource.
     * @alias module:model/LogAnalyticsQueryPackQueryProperties
     * @param body {String} Body of the query.
     * @param displayName {String} Unique display name for your query within the Query Pack.
     */
    constructor(body, displayName) { 
        
        LogAnalyticsQueryPackQueryProperties.initialize(this, body, displayName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, displayName) { 
        obj['body'] = body;
        obj['displayName'] = displayName;
    }

    /**
     * Constructs a <code>LogAnalyticsQueryPackQueryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogAnalyticsQueryPackQueryProperties} obj Optional instance to populate.
     * @return {module:model/LogAnalyticsQueryPackQueryProperties} The populated <code>LogAnalyticsQueryPackQueryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogAnalyticsQueryPackQueryProperties();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('linkedResourceId')) {
                obj['linkedResourceId'] = ApiClient.convertToType(data['linkedResourceId'], 'String');
            }
            if (data.hasOwnProperty('queryId')) {
                obj['queryId'] = ApiClient.convertToType(data['queryId'], 'String');
            }
            if (data.hasOwnProperty('resourceTypes')) {
                obj['resourceTypes'] = ApiClient.convertToType(data['resourceTypes'], ['String']);
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('timeModified')) {
                obj['timeModified'] = ApiClient.convertToType(data['timeModified'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogAnalyticsQueryPackQueryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogAnalyticsQueryPackQueryProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogAnalyticsQueryPackQueryProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['linkedResourceId'] && !(typeof data['linkedResourceId'] === 'string' || data['linkedResourceId'] instanceof String)) {
            throw new Error("Expected the field `linkedResourceId` to be a primitive type in the JSON string but got " + data['linkedResourceId']);
        }
        // ensure the json data is a string
        if (data['queryId'] && !(typeof data['queryId'] === 'string' || data['queryId'] instanceof String)) {
            throw new Error("Expected the field `queryId` to be a primitive type in the JSON string but got " + data['queryId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceTypes'])) {
            throw new Error("Expected the field `resourceTypes` to be an array in the JSON data but got " + data['resourceTypes']);
        }

        return true;
    }


}

LogAnalyticsQueryPackQueryProperties.RequiredProperties = ["body", "displayName"];

/**
 * Object Id of user creating the query.
 * @member {String} author
 */
LogAnalyticsQueryPackQueryProperties.prototype['author'] = undefined;

/**
 * Body of the query.
 * @member {String} body
 */
LogAnalyticsQueryPackQueryProperties.prototype['body'] = undefined;

/**
 * Categories associated with the query.
 * @member {Array.<String>} categories
 */
LogAnalyticsQueryPackQueryProperties.prototype['categories'] = undefined;

/**
 * Description of the query.
 * @member {String} description
 */
LogAnalyticsQueryPackQueryProperties.prototype['description'] = undefined;

/**
 * Unique display name for your query within the Query Pack.
 * @member {String} displayName
 */
LogAnalyticsQueryPackQueryProperties.prototype['displayName'] = undefined;

/**
 * Labels associated with the query.
 * @member {Array.<String>} labels
 */
LogAnalyticsQueryPackQueryProperties.prototype['labels'] = undefined;

/**
 * Resource id associated with the query.
 * @member {String} linkedResourceId
 */
LogAnalyticsQueryPackQueryProperties.prototype['linkedResourceId'] = undefined;

/**
 * The unique ID of your application. This field cannot be changed.
 * @member {String} queryId
 */
LogAnalyticsQueryPackQueryProperties.prototype['queryId'] = undefined;

/**
 * Resource Types associated with the query.
 * @member {Array.<String>} resourceTypes
 */
LogAnalyticsQueryPackQueryProperties.prototype['resourceTypes'] = undefined;

/**
 * Creation Date for the Log Analytics Query, in ISO 8601 format.
 * @member {Date} timeCreated
 */
LogAnalyticsQueryPackQueryProperties.prototype['timeCreated'] = undefined;

/**
 * Last modified date of the Log Analytics Query, in ISO 8601 format.
 * @member {Date} timeModified
 */
LogAnalyticsQueryPackQueryProperties.prototype['timeModified'] = undefined;






export default LogAnalyticsQueryPackQueryProperties;

