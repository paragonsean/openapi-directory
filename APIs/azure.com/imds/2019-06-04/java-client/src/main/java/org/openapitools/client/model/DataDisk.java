/*
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-06-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskImage;
import org.openapitools.client.model.ManagedDisk;
import org.openapitools.client.model.VirtualHardDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This contains information about the data disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:43.387085-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataDisk {
  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private String caching;

  public static final String SERIALIZED_NAME_CREATE_OPTION = "createOption";
  @SerializedName(SERIALIZED_NAME_CREATE_OPTION)
  private String createOption;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private String diskSizeGB;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private DiskImage image;

  public static final String SERIALIZED_NAME_LUN = "lun";
  @SerializedName(SERIALIZED_NAME_LUN)
  private String lun;

  public static final String SERIALIZED_NAME_MANAGED_DISK = "managedDisk";
  @SerializedName(SERIALIZED_NAME_MANAGED_DISK)
  private ManagedDisk managedDisk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VHD = "vhd";
  @SerializedName(SERIALIZED_NAME_VHD)
  private VirtualHardDisk vhd;

  public static final String SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED = "writeAcceleratorEnabled";
  @SerializedName(SERIALIZED_NAME_WRITE_ACCELERATOR_ENABLED)
  private String writeAcceleratorEnabled;

  public DataDisk() {
  }

  public DataDisk caching(String caching) {
    this.caching = caching;
    return this;
  }

  /**
   * This is the caching requirements.
   * @return caching
   */
  @javax.annotation.Nullable
  public String getCaching() {
    return caching;
  }

  public void setCaching(String caching) {
    this.caching = caching;
  }


  public DataDisk createOption(String createOption) {
    this.createOption = createOption;
    return this;
  }

  /**
   * This is information about how the VM was created.
   * @return createOption
   */
  @javax.annotation.Nullable
  public String getCreateOption() {
    return createOption;
  }

  public void setCreateOption(String createOption) {
    this.createOption = createOption;
  }


  public DataDisk diskSizeGB(String diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * This is the size of the disk in GB.
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public String getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(String diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public DataDisk image(DiskImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public DiskImage getImage() {
    return image;
  }

  public void setImage(DiskImage image) {
    this.image = image;
  }


  public DataDisk lun(String lun) {
    this.lun = lun;
    return this;
  }

  /**
   * This is the logical unit number of the disk.
   * @return lun
   */
  @javax.annotation.Nullable
  public String getLun() {
    return lun;
  }

  public void setLun(String lun) {
    this.lun = lun;
  }


  public DataDisk managedDisk(ManagedDisk managedDisk) {
    this.managedDisk = managedDisk;
    return this;
  }

  /**
   * Get managedDisk
   * @return managedDisk
   */
  @javax.annotation.Nullable
  public ManagedDisk getManagedDisk() {
    return managedDisk;
  }

  public void setManagedDisk(ManagedDisk managedDisk) {
    this.managedDisk = managedDisk;
  }


  public DataDisk name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This is the disk name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataDisk vhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
    return this;
  }

  /**
   * Get vhd
   * @return vhd
   */
  @javax.annotation.Nullable
  public VirtualHardDisk getVhd() {
    return vhd;
  }

  public void setVhd(VirtualHardDisk vhd) {
    this.vhd = vhd;
  }


  public DataDisk writeAcceleratorEnabled(String writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    return this;
  }

  /**
   * This specifies whether or not writeAccelerator is enabled on the disk.
   * @return writeAcceleratorEnabled
   */
  @javax.annotation.Nullable
  public String getWriteAcceleratorEnabled() {
    return writeAcceleratorEnabled;
  }

  public void setWriteAcceleratorEnabled(String writeAcceleratorEnabled) {
    this.writeAcceleratorEnabled = writeAcceleratorEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataDisk dataDisk = (DataDisk) o;
    return Objects.equals(this.caching, dataDisk.caching) &&
        Objects.equals(this.createOption, dataDisk.createOption) &&
        Objects.equals(this.diskSizeGB, dataDisk.diskSizeGB) &&
        Objects.equals(this.image, dataDisk.image) &&
        Objects.equals(this.lun, dataDisk.lun) &&
        Objects.equals(this.managedDisk, dataDisk.managedDisk) &&
        Objects.equals(this.name, dataDisk.name) &&
        Objects.equals(this.vhd, dataDisk.vhd) &&
        Objects.equals(this.writeAcceleratorEnabled, dataDisk.writeAcceleratorEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caching, createOption, diskSizeGB, image, lun, managedDisk, name, vhd, writeAcceleratorEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataDisk {\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    createOption: ").append(toIndentedString(createOption)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    managedDisk: ").append(toIndentedString(managedDisk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vhd: ").append(toIndentedString(vhd)).append("\n");
    sb.append("    writeAcceleratorEnabled: ").append(toIndentedString(writeAcceleratorEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("createOption");
    openapiFields.add("diskSizeGB");
    openapiFields.add("image");
    openapiFields.add("lun");
    openapiFields.add("managedDisk");
    openapiFields.add("name");
    openapiFields.add("vhd");
    openapiFields.add("writeAcceleratorEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataDisk is not found in the empty JSON string", DataDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) && !jsonObj.get("caching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caching").toString()));
      }
      if ((jsonObj.get("createOption") != null && !jsonObj.get("createOption").isJsonNull()) && !jsonObj.get("createOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createOption").toString()));
      }
      if ((jsonObj.get("diskSizeGB") != null && !jsonObj.get("diskSizeGB").isJsonNull()) && !jsonObj.get("diskSizeGB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeGB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeGB").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        DiskImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("lun") != null && !jsonObj.get("lun").isJsonNull()) && !jsonObj.get("lun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lun").toString()));
      }
      // validate the optional field `managedDisk`
      if (jsonObj.get("managedDisk") != null && !jsonObj.get("managedDisk").isJsonNull()) {
        ManagedDisk.validateJsonElement(jsonObj.get("managedDisk"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `vhd`
      if (jsonObj.get("vhd") != null && !jsonObj.get("vhd").isJsonNull()) {
        VirtualHardDisk.validateJsonElement(jsonObj.get("vhd"));
      }
      if ((jsonObj.get("writeAcceleratorEnabled") != null && !jsonObj.get("writeAcceleratorEnabled").isJsonNull()) && !jsonObj.get("writeAcceleratorEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeAcceleratorEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeAcceleratorEnabled").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<DataDisk>() {
           @Override
           public void write(JsonWriter out, DataDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataDisk
   * @throws IOException if the JSON string is invalid with respect to DataDisk
   */
  public static DataDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataDisk.class);
  }

  /**
   * Convert an instance of DataDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

