/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-06-04
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityTokenResponse::OAIIdentityTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityTokenResponse::OAIIdentityTokenResponse() {
    this->initializeModel();
}

OAIIdentityTokenResponse::~OAIIdentityTokenResponse() {}

void OAIIdentityTokenResponse::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_ext_expires_in_isSet = false;
    m_ext_expires_in_isValid = false;

    m_msi_res_id_isSet = false;
    m_msi_res_id_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIIdentityTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityTokenResponse::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("expires_on")]);
    m_expires_on_isSet = !json[QString("expires_on")].isNull() && m_expires_on_isValid;

    m_ext_expires_in_isValid = ::OpenAPI::fromJsonValue(m_ext_expires_in, json[QString("ext_expires_in")]);
    m_ext_expires_in_isSet = !json[QString("ext_expires_in")].isNull() && m_ext_expires_in_isValid;

    m_msi_res_id_isValid = ::OpenAPI::fromJsonValue(m_msi_res_id, json[QString("msi_res_id")]);
    m_msi_res_id_isSet = !json[QString("msi_res_id")].isNull() && m_msi_res_id_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("not_before")]);
    m_not_before_isSet = !json[QString("not_before")].isNull() && m_not_before_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("object_id")]);
    m_object_id_isSet = !json[QString("object_id")].isNull() && m_object_id_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;
}

QString OAIIdentityTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_expires_on_isSet) {
        obj.insert(QString("expires_on"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_ext_expires_in_isSet) {
        obj.insert(QString("ext_expires_in"), ::OpenAPI::toJsonValue(m_ext_expires_in));
    }
    if (m_msi_res_id_isSet) {
        obj.insert(QString("msi_res_id"), ::OpenAPI::toJsonValue(m_msi_res_id));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("not_before"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("object_id"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIIdentityTokenResponse::getAccessToken() const {
    return m_access_token;
}
void OAIIdentityTokenResponse::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIIdentityTokenResponse::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIIdentityTokenResponse::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIIdentityTokenResponse::getClientId() const {
    return m_client_id;
}
void OAIIdentityTokenResponse::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityTokenResponse::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityTokenResponse::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityTokenResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIIdentityTokenResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIIdentityTokenResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIIdentityTokenResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIIdentityTokenResponse::getExpiresOn() const {
    return m_expires_on;
}
void OAIIdentityTokenResponse::setExpiresOn(const QString &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAIIdentityTokenResponse::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAIIdentityTokenResponse::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

QString OAIIdentityTokenResponse::getExtExpiresIn() const {
    return m_ext_expires_in;
}
void OAIIdentityTokenResponse::setExtExpiresIn(const QString &ext_expires_in) {
    m_ext_expires_in = ext_expires_in;
    m_ext_expires_in_isSet = true;
}

bool OAIIdentityTokenResponse::is_ext_expires_in_Set() const{
    return m_ext_expires_in_isSet;
}

bool OAIIdentityTokenResponse::is_ext_expires_in_Valid() const{
    return m_ext_expires_in_isValid;
}

QString OAIIdentityTokenResponse::getMsiResId() const {
    return m_msi_res_id;
}
void OAIIdentityTokenResponse::setMsiResId(const QString &msi_res_id) {
    m_msi_res_id = msi_res_id;
    m_msi_res_id_isSet = true;
}

bool OAIIdentityTokenResponse::is_msi_res_id_Set() const{
    return m_msi_res_id_isSet;
}

bool OAIIdentityTokenResponse::is_msi_res_id_Valid() const{
    return m_msi_res_id_isValid;
}

QString OAIIdentityTokenResponse::getNotBefore() const {
    return m_not_before;
}
void OAIIdentityTokenResponse::setNotBefore(const QString &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIIdentityTokenResponse::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIIdentityTokenResponse::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QString OAIIdentityTokenResponse::getObjectId() const {
    return m_object_id;
}
void OAIIdentityTokenResponse::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIIdentityTokenResponse::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIIdentityTokenResponse::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIIdentityTokenResponse::getResource() const {
    return m_resource;
}
void OAIIdentityTokenResponse::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIIdentityTokenResponse::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIIdentityTokenResponse::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIIdentityTokenResponse::getTokenType() const {
    return m_token_type;
}
void OAIIdentityTokenResponse::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIIdentityTokenResponse::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIIdentityTokenResponse::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIIdentityTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi_res_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
