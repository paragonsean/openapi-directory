/*
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the response from the Identity_GetToken operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:48.614379-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityTokenResponse {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_EXPIRES_ON = "expires_on";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
  private String expiresOn;

  public static final String SERIALIZED_NAME_EXT_EXPIRES_IN = "ext_expires_in";
  @SerializedName(SERIALIZED_NAME_EXT_EXPIRES_IN)
  private String extExpiresIn;

  public static final String SERIALIZED_NAME_MSI_RES_ID = "msi_res_id";
  @SerializedName(SERIALIZED_NAME_MSI_RES_ID)
  private String msiResId;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "not_before";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private String notBefore;

  public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "token_type";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public IdentityTokenResponse() {
  }

  public IdentityTokenResponse accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * This is the requested access token. The app can use this token to authenticate to the sink resource.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public IdentityTokenResponse clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * This is the client_id specified in the request, if any.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public IdentityTokenResponse expiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * This is how long the access token is valid (in seconds).
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public String getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public IdentityTokenResponse expiresOn(String expiresOn) {
    this.expiresOn = expiresOn;
    return this;
  }

  /**
   * This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. This value is used to determine the lifetime of cached tokens.
   * @return expiresOn
   */
  @javax.annotation.Nullable
  public String getExpiresOn() {
    return expiresOn;
  }

  public void setExpiresOn(String expiresOn) {
    this.expiresOn = expiresOn;
  }


  public IdentityTokenResponse extExpiresIn(String extExpiresIn) {
    this.extExpiresIn = extExpiresIn;
    return this;
  }

  /**
   * This indicates the extended lifetime of the token (in seconds).
   * @return extExpiresIn
   */
  @javax.annotation.Nullable
  public String getExtExpiresIn() {
    return extExpiresIn;
  }

  public void setExtExpiresIn(String extExpiresIn) {
    this.extExpiresIn = extExpiresIn;
  }


  public IdentityTokenResponse msiResId(String msiResId) {
    this.msiResId = msiResId;
    return this;
  }

  /**
   * This is the msi_res_id specified in the request, if any.
   * @return msiResId
   */
  @javax.annotation.Nullable
  public String getMsiResId() {
    return msiResId;
  }

  public void setMsiResId(String msiResId) {
    this.msiResId = msiResId;
  }


  public IdentityTokenResponse notBefore(String notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.
   * @return notBefore
   */
  @javax.annotation.Nullable
  public String getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(String notBefore) {
    this.notBefore = notBefore;
  }


  public IdentityTokenResponse objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * This is the object_id specified in the request, if any.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public IdentityTokenResponse resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * This is the app ID URI of the sink resource.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public IdentityTokenResponse tokenType(String tokenType) {
    this.tokenType = tokenType;
    return this;
  }

  /**
   * This indicates the token type value.
   * @return tokenType
   */
  @javax.annotation.Nullable
  public String getTokenType() {
    return tokenType;
  }

  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityTokenResponse identityTokenResponse = (IdentityTokenResponse) o;
    return Objects.equals(this.accessToken, identityTokenResponse.accessToken) &&
        Objects.equals(this.clientId, identityTokenResponse.clientId) &&
        Objects.equals(this.expiresIn, identityTokenResponse.expiresIn) &&
        Objects.equals(this.expiresOn, identityTokenResponse.expiresOn) &&
        Objects.equals(this.extExpiresIn, identityTokenResponse.extExpiresIn) &&
        Objects.equals(this.msiResId, identityTokenResponse.msiResId) &&
        Objects.equals(this.notBefore, identityTokenResponse.notBefore) &&
        Objects.equals(this.objectId, identityTokenResponse.objectId) &&
        Objects.equals(this.resource, identityTokenResponse.resource) &&
        Objects.equals(this.tokenType, identityTokenResponse.tokenType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, clientId, expiresIn, expiresOn, extExpiresIn, msiResId, notBefore, objectId, resource, tokenType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityTokenResponse {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    extExpiresIn: ").append(toIndentedString(extExpiresIn)).append("\n");
    sb.append("    msiResId: ").append(toIndentedString(msiResId)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token");
    openapiFields.add("client_id");
    openapiFields.add("expires_in");
    openapiFields.add("expires_on");
    openapiFields.add("ext_expires_in");
    openapiFields.add("msi_res_id");
    openapiFields.add("not_before");
    openapiFields.add("object_id");
    openapiFields.add("resource");
    openapiFields.add("token_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityTokenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityTokenResponse is not found in the empty JSON string", IdentityTokenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityTokenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityTokenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_token") != null && !jsonObj.get("access_token").isJsonNull()) && !jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("expires_in") != null && !jsonObj.get("expires_in").isJsonNull()) && !jsonObj.get("expires_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_in").toString()));
      }
      if ((jsonObj.get("expires_on") != null && !jsonObj.get("expires_on").isJsonNull()) && !jsonObj.get("expires_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_on").toString()));
      }
      if ((jsonObj.get("ext_expires_in") != null && !jsonObj.get("ext_expires_in").isJsonNull()) && !jsonObj.get("ext_expires_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ext_expires_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ext_expires_in").toString()));
      }
      if ((jsonObj.get("msi_res_id") != null && !jsonObj.get("msi_res_id").isJsonNull()) && !jsonObj.get("msi_res_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msi_res_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msi_res_id").toString()));
      }
      if ((jsonObj.get("not_before") != null && !jsonObj.get("not_before").isJsonNull()) && !jsonObj.get("not_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_before").toString()));
      }
      if ((jsonObj.get("object_id") != null && !jsonObj.get("object_id").isJsonNull()) && !jsonObj.get("object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_id").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("token_type") != null && !jsonObj.get("token_type").isJsonNull()) && !jsonObj.get("token_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityTokenResponse>() {
           @Override
           public void write(JsonWriter out, IdentityTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityTokenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityTokenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityTokenResponse
   * @throws IOException if the JSON string is invalid with respect to IdentityTokenResponse
   */
  public static IdentityTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityTokenResponse.class);
  }

  /**
   * Convert an instance of IdentityTokenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

