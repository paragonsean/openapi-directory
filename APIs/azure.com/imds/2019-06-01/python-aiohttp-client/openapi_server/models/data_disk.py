# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_image import DiskImage
from openapi_server.models.managed_disk import ManagedDisk
from openapi_server.models.virtual_hard_disk import VirtualHardDisk
from openapi_server import util


class DataDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: str=None, create_option: str=None, disk_size_gb: str=None, image: DiskImage=None, lun: str=None, managed_disk: ManagedDisk=None, name: str=None, vhd: VirtualHardDisk=None, write_accelerator_enabled: str=None):
        """DataDisk - a model defined in OpenAPI

        :param caching: The caching of this DataDisk.
        :param create_option: The create_option of this DataDisk.
        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :param image: The image of this DataDisk.
        :param lun: The lun of this DataDisk.
        :param managed_disk: The managed_disk of this DataDisk.
        :param name: The name of this DataDisk.
        :param vhd: The vhd of this DataDisk.
        :param write_accelerator_enabled: The write_accelerator_enabled of this DataDisk.
        """
        self.openapi_types = {
            'caching': str,
            'create_option': str,
            'disk_size_gb': str,
            'image': DiskImage,
            'lun': str,
            'managed_disk': ManagedDisk,
            'name': str,
            'vhd': VirtualHardDisk,
            'write_accelerator_enabled': str
        }

        self.attribute_map = {
            'caching': 'caching',
            'create_option': 'createOption',
            'disk_size_gb': 'diskSizeGB',
            'image': 'image',
            'lun': 'lun',
            'managed_disk': 'managedDisk',
            'name': 'name',
            'vhd': 'vhd',
            'write_accelerator_enabled': 'writeAcceleratorEnabled'
        }

        self._caching = caching
        self._create_option = create_option
        self._disk_size_gb = disk_size_gb
        self._image = image
        self._lun = lun
        self._managed_disk = managed_disk
        self._name = name
        self._vhd = vhd
        self._write_accelerator_enabled = write_accelerator_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataDisk of this DataDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this DataDisk.

        This is the caching requirements.

        :return: The caching of this DataDisk.
        :rtype: str
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this DataDisk.

        This is the caching requirements.

        :param caching: The caching of this DataDisk.
        :type caching: str
        """

        self._caching = caching

    @property
    def create_option(self):
        """Gets the create_option of this DataDisk.

        This is information about how the VM was created.

        :return: The create_option of this DataDisk.
        :rtype: str
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this DataDisk.

        This is information about how the VM was created.

        :param create_option: The create_option of this DataDisk.
        :type create_option: str
        """

        self._create_option = create_option

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DataDisk.

        This is the size of the disk in GB.

        :return: The disk_size_gb of this DataDisk.
        :rtype: str
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DataDisk.

        This is the size of the disk in GB.

        :param disk_size_gb: The disk_size_gb of this DataDisk.
        :type disk_size_gb: str
        """

        self._disk_size_gb = disk_size_gb

    @property
    def image(self):
        """Gets the image of this DataDisk.


        :return: The image of this DataDisk.
        :rtype: DiskImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DataDisk.


        :param image: The image of this DataDisk.
        :type image: DiskImage
        """

        self._image = image

    @property
    def lun(self):
        """Gets the lun of this DataDisk.

        This is the logical unit number of the disk.

        :return: The lun of this DataDisk.
        :rtype: str
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this DataDisk.

        This is the logical unit number of the disk.

        :param lun: The lun of this DataDisk.
        :type lun: str
        """

        self._lun = lun

    @property
    def managed_disk(self):
        """Gets the managed_disk of this DataDisk.


        :return: The managed_disk of this DataDisk.
        :rtype: ManagedDisk
        """
        return self._managed_disk

    @managed_disk.setter
    def managed_disk(self, managed_disk):
        """Sets the managed_disk of this DataDisk.


        :param managed_disk: The managed_disk of this DataDisk.
        :type managed_disk: ManagedDisk
        """

        self._managed_disk = managed_disk

    @property
    def name(self):
        """Gets the name of this DataDisk.

        This is the disk name.

        :return: The name of this DataDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataDisk.

        This is the disk name.

        :param name: The name of this DataDisk.
        :type name: str
        """

        self._name = name

    @property
    def vhd(self):
        """Gets the vhd of this DataDisk.


        :return: The vhd of this DataDisk.
        :rtype: VirtualHardDisk
        """
        return self._vhd

    @vhd.setter
    def vhd(self, vhd):
        """Sets the vhd of this DataDisk.


        :param vhd: The vhd of this DataDisk.
        :type vhd: VirtualHardDisk
        """

        self._vhd = vhd

    @property
    def write_accelerator_enabled(self):
        """Gets the write_accelerator_enabled of this DataDisk.

        This specifies whether or not writeAccelerator is enabled on the disk.

        :return: The write_accelerator_enabled of this DataDisk.
        :rtype: str
        """
        return self._write_accelerator_enabled

    @write_accelerator_enabled.setter
    def write_accelerator_enabled(self, write_accelerator_enabled):
        """Sets the write_accelerator_enabled of this DataDisk.

        This specifies whether or not writeAccelerator is enabled on the disk.

        :param write_accelerator_enabled: The write_accelerator_enabled of this DataDisk.
        :type write_accelerator_enabled: str
        """

        self._write_accelerator_enabled = write_accelerator_enabled
