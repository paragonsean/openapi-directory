# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, client_id: str=None, expires_in: str=None, expires_on: str=None, ext_expires_in: str=None, msi_res_id: str=None, not_before: str=None, object_id: str=None, resource: str=None, token_type: str=None):
        """IdentityTokenResponse - a model defined in OpenAPI

        :param access_token: The access_token of this IdentityTokenResponse.
        :param client_id: The client_id of this IdentityTokenResponse.
        :param expires_in: The expires_in of this IdentityTokenResponse.
        :param expires_on: The expires_on of this IdentityTokenResponse.
        :param ext_expires_in: The ext_expires_in of this IdentityTokenResponse.
        :param msi_res_id: The msi_res_id of this IdentityTokenResponse.
        :param not_before: The not_before of this IdentityTokenResponse.
        :param object_id: The object_id of this IdentityTokenResponse.
        :param resource: The resource of this IdentityTokenResponse.
        :param token_type: The token_type of this IdentityTokenResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'client_id': str,
            'expires_in': str,
            'expires_on': str,
            'ext_expires_in': str,
            'msi_res_id': str,
            'not_before': str,
            'object_id': str,
            'resource': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'client_id': 'client_id',
            'expires_in': 'expires_in',
            'expires_on': 'expires_on',
            'ext_expires_in': 'ext_expires_in',
            'msi_res_id': 'msi_res_id',
            'not_before': 'not_before',
            'object_id': 'object_id',
            'resource': 'resource',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._client_id = client_id
        self._expires_in = expires_in
        self._expires_on = expires_on
        self._ext_expires_in = ext_expires_in
        self._msi_res_id = msi_res_id
        self._not_before = not_before
        self._object_id = object_id
        self._resource = resource
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityTokenResponse of this IdentityTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this IdentityTokenResponse.

        This is the requested access token. The app can use this token to authenticate to the sink resource.

        :return: The access_token of this IdentityTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this IdentityTokenResponse.

        This is the requested access token. The app can use this token to authenticate to the sink resource.

        :param access_token: The access_token of this IdentityTokenResponse.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def client_id(self):
        """Gets the client_id of this IdentityTokenResponse.

        This is the client_id specified in the request, if any.

        :return: The client_id of this IdentityTokenResponse.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IdentityTokenResponse.

        This is the client_id specified in the request, if any.

        :param client_id: The client_id of this IdentityTokenResponse.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def expires_in(self):
        """Gets the expires_in of this IdentityTokenResponse.

        This is how long the access token is valid (in seconds).

        :return: The expires_in of this IdentityTokenResponse.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this IdentityTokenResponse.

        This is how long the access token is valid (in seconds).

        :param expires_in: The expires_in of this IdentityTokenResponse.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def expires_on(self):
        """Gets the expires_on of this IdentityTokenResponse.

        This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. This value is used to determine the lifetime of cached tokens.

        :return: The expires_on of this IdentityTokenResponse.
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this IdentityTokenResponse.

        This is the time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. This value is used to determine the lifetime of cached tokens.

        :param expires_on: The expires_on of this IdentityTokenResponse.
        :type expires_on: str
        """

        self._expires_on = expires_on

    @property
    def ext_expires_in(self):
        """Gets the ext_expires_in of this IdentityTokenResponse.

        This indicates the extended lifetime of the token.

        :return: The ext_expires_in of this IdentityTokenResponse.
        :rtype: str
        """
        return self._ext_expires_in

    @ext_expires_in.setter
    def ext_expires_in(self, ext_expires_in):
        """Sets the ext_expires_in of this IdentityTokenResponse.

        This indicates the extended lifetime of the token.

        :param ext_expires_in: The ext_expires_in of this IdentityTokenResponse.
        :type ext_expires_in: str
        """

        self._ext_expires_in = ext_expires_in

    @property
    def msi_res_id(self):
        """Gets the msi_res_id of this IdentityTokenResponse.

        This is the msi_res_id specified in the request, if any.

        :return: The msi_res_id of this IdentityTokenResponse.
        :rtype: str
        """
        return self._msi_res_id

    @msi_res_id.setter
    def msi_res_id(self, msi_res_id):
        """Sets the msi_res_id of this IdentityTokenResponse.

        This is the msi_res_id specified in the request, if any.

        :param msi_res_id: The msi_res_id of this IdentityTokenResponse.
        :type msi_res_id: str
        """

        self._msi_res_id = msi_res_id

    @property
    def not_before(self):
        """Gets the not_before of this IdentityTokenResponse.

        This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.

        :return: The not_before of this IdentityTokenResponse.
        :rtype: str
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this IdentityTokenResponse.

        This is the time when the access token becomes effective. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time.

        :param not_before: The not_before of this IdentityTokenResponse.
        :type not_before: str
        """

        self._not_before = not_before

    @property
    def object_id(self):
        """Gets the object_id of this IdentityTokenResponse.

        This is the object_id specified in the request, if any.

        :return: The object_id of this IdentityTokenResponse.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this IdentityTokenResponse.

        This is the object_id specified in the request, if any.

        :param object_id: The object_id of this IdentityTokenResponse.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def resource(self):
        """Gets the resource of this IdentityTokenResponse.

        This is the app ID URI of the sink resource.

        :return: The resource of this IdentityTokenResponse.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IdentityTokenResponse.

        This is the app ID URI of the sink resource.

        :param resource: The resource of this IdentityTokenResponse.
        :type resource: str
        """

        self._resource = resource

    @property
    def token_type(self):
        """Gets the token_type of this IdentityTokenResponse.

        This indicates the token type value.

        :return: The token_type of this IdentityTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this IdentityTokenResponse.

        This indicates the token type value.

        :param token_type: The token_type of this IdentityTokenResponse.
        :type token_type: str
        """

        self._token_type = token_type
