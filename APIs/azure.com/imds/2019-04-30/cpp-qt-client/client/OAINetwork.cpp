/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-04-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetwork::OAINetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetwork::OAINetwork() {
    this->initializeModel();
}

OAINetwork::~OAINetwork() {}

void OAINetwork::initializeModel() {

    m_interface_isSet = false;
    m_interface_isValid = false;
}

void OAINetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetwork::fromJsonObject(QJsonObject json) {

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;
}

QString OAINetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_interface.size() > 0) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    return obj;
}

QList<OAINetworkInterface> OAINetwork::getInterface() const {
    return m_interface;
}
void OAINetwork::setInterface(const QList<OAINetworkInterface> &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAINetwork::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAINetwork::is_interface_Valid() const{
    return m_interface_isValid;
}

bool OAINetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interface.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
