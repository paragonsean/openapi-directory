# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ipv6_properties import Ipv6Properties
from openapi_server import util


class NetworkInterfaceIpv6(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: List[Ipv6Properties]=None):
        """NetworkInterfaceIpv6 - a model defined in OpenAPI

        :param ip_address: The ip_address of this NetworkInterfaceIpv6.
        """
        self.openapi_types = {
            'ip_address': List[Ipv6Properties]
        }

        self.attribute_map = {
            'ip_address': 'ipAddress'
        }

        self._ip_address = ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterfaceIpv6':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface_ipv6 of this NetworkInterfaceIpv6.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkInterfaceIpv6.

        This is the IP address

        :return: The ip_address of this NetworkInterfaceIpv6.
        :rtype: List[Ipv6Properties]
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkInterfaceIpv6.

        This is the IP address

        :param ip_address: The ip_address of this NetworkInterfaceIpv6.
        :type ip_address: List[Ipv6Properties]
        """

        self._ip_address = ip_address
