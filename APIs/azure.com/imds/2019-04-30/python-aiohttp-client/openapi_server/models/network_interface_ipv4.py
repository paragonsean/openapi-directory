# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ipv4_properties import Ipv4Properties
from openapi_server.models.subnet_properties import SubnetProperties
from openapi_server import util


class NetworkInterfaceIpv4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: List[Ipv4Properties]=None, subnet: List[SubnetProperties]=None):
        """NetworkInterfaceIpv4 - a model defined in OpenAPI

        :param ip_address: The ip_address of this NetworkInterfaceIpv4.
        :param subnet: The subnet of this NetworkInterfaceIpv4.
        """
        self.openapi_types = {
            'ip_address': List[Ipv4Properties],
            'subnet': List[SubnetProperties]
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'subnet': 'subnet'
        }

        self._ip_address = ip_address
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterfaceIpv4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface_ipv4 of this NetworkInterfaceIpv4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkInterfaceIpv4.

        This is the IP address

        :return: The ip_address of this NetworkInterfaceIpv4.
        :rtype: List[Ipv4Properties]
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkInterfaceIpv4.

        This is the IP address

        :param ip_address: The ip_address of this NetworkInterfaceIpv4.
        :type ip_address: List[Ipv4Properties]
        """

        self._ip_address = ip_address

    @property
    def subnet(self):
        """Gets the subnet of this NetworkInterfaceIpv4.

        This is the subnet

        :return: The subnet of this NetworkInterfaceIpv4.
        :rtype: List[SubnetProperties]
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this NetworkInterfaceIpv4.

        This is the subnet

        :param subnet: The subnet of this NetworkInterfaceIpv4.
        :type subnet: List[SubnetProperties]
        """

        self._subnet = subnet
