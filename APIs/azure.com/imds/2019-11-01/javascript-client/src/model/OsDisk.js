/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiffDiskSettings from './DiffDiskSettings';
import DiskImage from './DiskImage';
import EncryptionSettings from './EncryptionSettings';
import ManagedDisk from './ManagedDisk';
import VirtualHardDisk from './VirtualHardDisk';

/**
 * The OsDisk model module.
 * @module model/OsDisk
 * @version 2019-11-01
 */
class OsDisk {
    /**
     * Constructs a new <code>OsDisk</code>.
     * This contains information about the OS disk used by the VM.
     * @alias module:model/OsDisk
     */
    constructor() { 
        
        OsDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OsDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OsDisk} obj Optional instance to populate.
     * @return {module:model/OsDisk} The populated <code>OsDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OsDisk();

            if (data.hasOwnProperty('caching')) {
                obj['caching'] = ApiClient.convertToType(data['caching'], 'String');
            }
            if (data.hasOwnProperty('createOption')) {
                obj['createOption'] = ApiClient.convertToType(data['createOption'], 'String');
            }
            if (data.hasOwnProperty('diffDiskSettings')) {
                obj['diffDiskSettings'] = DiffDiskSettings.constructFromObject(data['diffDiskSettings']);
            }
            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'String');
            }
            if (data.hasOwnProperty('encryptionSettings')) {
                obj['encryptionSettings'] = EncryptionSettings.constructFromObject(data['encryptionSettings']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = DiskImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('managedDisk')) {
                obj['managedDisk'] = ManagedDisk.constructFromObject(data['managedDisk']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('vhd')) {
                obj['vhd'] = VirtualHardDisk.constructFromObject(data['vhd']);
            }
            if (data.hasOwnProperty('writeAcceleratorEnabled')) {
                obj['writeAcceleratorEnabled'] = ApiClient.convertToType(data['writeAcceleratorEnabled'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OsDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OsDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caching'] && !(typeof data['caching'] === 'string' || data['caching'] instanceof String)) {
            throw new Error("Expected the field `caching` to be a primitive type in the JSON string but got " + data['caching']);
        }
        // ensure the json data is a string
        if (data['createOption'] && !(typeof data['createOption'] === 'string' || data['createOption'] instanceof String)) {
            throw new Error("Expected the field `createOption` to be a primitive type in the JSON string but got " + data['createOption']);
        }
        // validate the optional field `diffDiskSettings`
        if (data['diffDiskSettings']) { // data not null
          DiffDiskSettings.validateJSON(data['diffDiskSettings']);
        }
        // ensure the json data is a string
        if (data['diskSizeGB'] && !(typeof data['diskSizeGB'] === 'string' || data['diskSizeGB'] instanceof String)) {
            throw new Error("Expected the field `diskSizeGB` to be a primitive type in the JSON string but got " + data['diskSizeGB']);
        }
        // validate the optional field `encryptionSettings`
        if (data['encryptionSettings']) { // data not null
          EncryptionSettings.validateJSON(data['encryptionSettings']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          DiskImage.validateJSON(data['image']);
        }
        // validate the optional field `managedDisk`
        if (data['managedDisk']) { // data not null
          ManagedDisk.validateJSON(data['managedDisk']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // validate the optional field `vhd`
        if (data['vhd']) { // data not null
          VirtualHardDisk.validateJSON(data['vhd']);
        }
        // ensure the json data is a string
        if (data['writeAcceleratorEnabled'] && !(typeof data['writeAcceleratorEnabled'] === 'string' || data['writeAcceleratorEnabled'] instanceof String)) {
            throw new Error("Expected the field `writeAcceleratorEnabled` to be a primitive type in the JSON string but got " + data['writeAcceleratorEnabled']);
        }

        return true;
    }


}



/**
 * This is the caching requirements.
 * @member {String} caching
 */
OsDisk.prototype['caching'] = undefined;

/**
 * This is information about how the VM was created.
 * @member {String} createOption
 */
OsDisk.prototype['createOption'] = undefined;

/**
 * @member {module:model/DiffDiskSettings} diffDiskSettings
 */
OsDisk.prototype['diffDiskSettings'] = undefined;

/**
 * This is the size of the disk in GB.
 * @member {String} diskSizeGB
 */
OsDisk.prototype['diskSizeGB'] = undefined;

/**
 * @member {module:model/EncryptionSettings} encryptionSettings
 */
OsDisk.prototype['encryptionSettings'] = undefined;

/**
 * @member {module:model/DiskImage} image
 */
OsDisk.prototype['image'] = undefined;

/**
 * @member {module:model/ManagedDisk} managedDisk
 */
OsDisk.prototype['managedDisk'] = undefined;

/**
 * This is the disk name.
 * @member {String} name
 */
OsDisk.prototype['name'] = undefined;

/**
 * This is the type of OS included in the disk.
 * @member {String} osType
 */
OsDisk.prototype['osType'] = undefined;

/**
 * @member {module:model/VirtualHardDisk} vhd
 */
OsDisk.prototype['vhd'] = undefined;

/**
 * This specifies whether or not writeAccelerator is enabled on the disk.
 * @member {String} writeAcceleratorEnabled
 */
OsDisk.prototype['writeAcceleratorEnabled'] = undefined;






export default OsDisk;

