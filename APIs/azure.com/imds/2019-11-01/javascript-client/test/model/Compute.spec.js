/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InstanceMetadataClient);
  }
}(this, function(expect, InstanceMetadataClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InstanceMetadataClient.Compute();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Compute', function() {
    it('should create an instance of Compute', function() {
      // uncomment below and update the code to test Compute
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be.a(InstanceMetadataClient.Compute);
    });

    it('should have the property azEnvironment (base name: "azEnvironment")', function() {
      // uncomment below and update the code to test the property azEnvironment
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property offer (base name: "offer")', function() {
      // uncomment below and update the code to test the property offer
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property osType (base name: "osType")', function() {
      // uncomment below and update the code to test the property osType
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property placementGroupId (base name: "placementGroupId")', function() {
      // uncomment below and update the code to test the property placementGroupId
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property platformFaultDomain (base name: "platformFaultDomain")', function() {
      // uncomment below and update the code to test the property platformFaultDomain
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property platformUpdateDomain (base name: "platformUpdateDomain")', function() {
      // uncomment below and update the code to test the property platformUpdateDomain
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property publicKeys (base name: "publicKeys")', function() {
      // uncomment below and update the code to test the property publicKeys
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property publisher (base name: "publisher")', function() {
      // uncomment below and update the code to test the property publisher
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property resourceGroupName (base name: "resourceGroupName")', function() {
      // uncomment below and update the code to test the property resourceGroupName
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property storageProfile (base name: "storageProfile")', function() {
      // uncomment below and update the code to test the property storageProfile
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionId (base name: "subscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property vmId (base name: "vmId")', function() {
      // uncomment below and update the code to test the property vmId
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property vmScaleSetName (base name: "vmScaleSetName")', function() {
      // uncomment below and update the code to test the property vmScaleSetName
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property vmSize (base name: "vmSize")', function() {
      // uncomment below and update the code to test the property vmSize
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new InstanceMetadataClient.Compute();
      //expect(instance).to.be();
    });

  });

}));
