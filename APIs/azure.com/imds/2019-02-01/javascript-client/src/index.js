/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AttestedData from './model/AttestedData';
import Compute from './model/Compute';
import ErrorResponse from './model/ErrorResponse';
import IdentityErrorResponse from './model/IdentityErrorResponse';
import IdentityInfoResponse from './model/IdentityInfoResponse';
import IdentityTokenResponse from './model/IdentityTokenResponse';
import Instance from './model/Instance';
import Ipv4Properties from './model/Ipv4Properties';
import Ipv6Properties from './model/Ipv6Properties';
import Network from './model/Network';
import NetworkInterface from './model/NetworkInterface';
import NetworkInterfaceIpv4 from './model/NetworkInterfaceIpv4';
import NetworkInterfaceIpv6 from './model/NetworkInterfaceIpv6';
import PlanProperties from './model/PlanProperties';
import PublicKeysProperties from './model/PublicKeysProperties';
import SubnetProperties from './model/SubnetProperties';
import DefaultApi from './api/DefaultApi';
import GetMetadataInformationApi from './api/GetMetadataInformationApi';
import GetTokenApi from './api/GetTokenApi';


/**
* The Azure Instance Metadata Client.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var InstanceMetadataClient = require('index'); // See note below*.
* var xxxSvc = new InstanceMetadataClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new InstanceMetadataClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new InstanceMetadataClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new InstanceMetadataClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2019-02-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AttestedData model constructor.
     * @property {module:model/AttestedData}
     */
    AttestedData,

    /**
     * The Compute model constructor.
     * @property {module:model/Compute}
     */
    Compute,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The IdentityErrorResponse model constructor.
     * @property {module:model/IdentityErrorResponse}
     */
    IdentityErrorResponse,

    /**
     * The IdentityInfoResponse model constructor.
     * @property {module:model/IdentityInfoResponse}
     */
    IdentityInfoResponse,

    /**
     * The IdentityTokenResponse model constructor.
     * @property {module:model/IdentityTokenResponse}
     */
    IdentityTokenResponse,

    /**
     * The Instance model constructor.
     * @property {module:model/Instance}
     */
    Instance,

    /**
     * The Ipv4Properties model constructor.
     * @property {module:model/Ipv4Properties}
     */
    Ipv4Properties,

    /**
     * The Ipv6Properties model constructor.
     * @property {module:model/Ipv6Properties}
     */
    Ipv6Properties,

    /**
     * The Network model constructor.
     * @property {module:model/Network}
     */
    Network,

    /**
     * The NetworkInterface model constructor.
     * @property {module:model/NetworkInterface}
     */
    NetworkInterface,

    /**
     * The NetworkInterfaceIpv4 model constructor.
     * @property {module:model/NetworkInterfaceIpv4}
     */
    NetworkInterfaceIpv4,

    /**
     * The NetworkInterfaceIpv6 model constructor.
     * @property {module:model/NetworkInterfaceIpv6}
     */
    NetworkInterfaceIpv6,

    /**
     * The PlanProperties model constructor.
     * @property {module:model/PlanProperties}
     */
    PlanProperties,

    /**
     * The PublicKeysProperties model constructor.
     * @property {module:model/PublicKeysProperties}
     */
    PublicKeysProperties,

    /**
     * The SubnetProperties model constructor.
     * @property {module:model/SubnetProperties}
     */
    SubnetProperties,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

    /**
    * The GetMetadataInformationApi service constructor.
    * @property {module:api/GetMetadataInformationApi}
    */
    GetMetadataInformationApi,

    /**
    * The GetTokenApi service constructor.
    * @property {module:api/GetTokenApi}
    */
    GetTokenApi
};
