/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompute::OAICompute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompute::OAICompute() {
    this->initializeModel();
}

OAICompute::~OAICompute() {}

void OAICompute::initializeModel() {

    m_az_environment_isSet = false;
    m_az_environment_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offer_isSet = false;
    m_offer_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_placement_group_id_isSet = false;
    m_placement_group_id_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_platform_fault_domain_isSet = false;
    m_platform_fault_domain_isValid = false;

    m_platform_update_domain_isSet = false;
    m_platform_update_domain_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_public_keys_isSet = false;
    m_public_keys_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vm_scale_set_name_isSet = false;
    m_vm_scale_set_name_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAICompute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompute::fromJsonObject(QJsonObject json) {

    m_az_environment_isValid = ::OpenAPI::fromJsonValue(m_az_environment, json[QString("azEnvironment")]);
    m_az_environment_isSet = !json[QString("azEnvironment")].isNull() && m_az_environment_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offer_isValid = ::OpenAPI::fromJsonValue(m_offer, json[QString("offer")]);
    m_offer_isSet = !json[QString("offer")].isNull() && m_offer_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_placement_group_id_isValid = ::OpenAPI::fromJsonValue(m_placement_group_id, json[QString("placementGroupId")]);
    m_placement_group_id_isSet = !json[QString("placementGroupId")].isNull() && m_placement_group_id_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_platform_fault_domain_isValid = ::OpenAPI::fromJsonValue(m_platform_fault_domain, json[QString("platformFaultDomain")]);
    m_platform_fault_domain_isSet = !json[QString("platformFaultDomain")].isNull() && m_platform_fault_domain_isValid;

    m_platform_update_domain_isValid = ::OpenAPI::fromJsonValue(m_platform_update_domain, json[QString("platformUpdateDomain")]);
    m_platform_update_domain_isSet = !json[QString("platformUpdateDomain")].isNull() && m_platform_update_domain_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_public_keys_isValid = ::OpenAPI::fromJsonValue(m_public_keys, json[QString("publicKeys")]);
    m_public_keys_isSet = !json[QString("publicKeys")].isNull() && m_public_keys_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vm_scale_set_name_isValid = ::OpenAPI::fromJsonValue(m_vm_scale_set_name, json[QString("vmScaleSetName")]);
    m_vm_scale_set_name_isSet = !json[QString("vmScaleSetName")].isNull() && m_vm_scale_set_name_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAICompute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompute::asJsonObject() const {
    QJsonObject obj;
    if (m_az_environment_isSet) {
        obj.insert(QString("azEnvironment"), ::OpenAPI::toJsonValue(m_az_environment));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offer_isSet) {
        obj.insert(QString("offer"), ::OpenAPI::toJsonValue(m_offer));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_placement_group_id_isSet) {
        obj.insert(QString("placementGroupId"), ::OpenAPI::toJsonValue(m_placement_group_id));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_platform_fault_domain_isSet) {
        obj.insert(QString("platformFaultDomain"), ::OpenAPI::toJsonValue(m_platform_fault_domain));
    }
    if (m_platform_update_domain_isSet) {
        obj.insert(QString("platformUpdateDomain"), ::OpenAPI::toJsonValue(m_platform_update_domain));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_public_keys.size() > 0) {
        obj.insert(QString("publicKeys"), ::OpenAPI::toJsonValue(m_public_keys));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vm_scale_set_name_isSet) {
        obj.insert(QString("vmScaleSetName"), ::OpenAPI::toJsonValue(m_vm_scale_set_name));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAICompute::getAzEnvironment() const {
    return m_az_environment;
}
void OAICompute::setAzEnvironment(const QString &az_environment) {
    m_az_environment = az_environment;
    m_az_environment_isSet = true;
}

bool OAICompute::is_az_environment_Set() const{
    return m_az_environment_isSet;
}

bool OAICompute::is_az_environment_Valid() const{
    return m_az_environment_isValid;
}

QString OAICompute::getCustomData() const {
    return m_custom_data;
}
void OAICompute::setCustomData(const QString &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAICompute::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAICompute::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAICompute::getLocation() const {
    return m_location;
}
void OAICompute::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICompute::is_location_Set() const{
    return m_location_isSet;
}

bool OAICompute::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICompute::getName() const {
    return m_name;
}
void OAICompute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompute::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompute::getOffer() const {
    return m_offer;
}
void OAICompute::setOffer(const QString &offer) {
    m_offer = offer;
    m_offer_isSet = true;
}

bool OAICompute::is_offer_Set() const{
    return m_offer_isSet;
}

bool OAICompute::is_offer_Valid() const{
    return m_offer_isValid;
}

QString OAICompute::getOsType() const {
    return m_os_type;
}
void OAICompute::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAICompute::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAICompute::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAICompute::getPlacementGroupId() const {
    return m_placement_group_id;
}
void OAICompute::setPlacementGroupId(const QString &placement_group_id) {
    m_placement_group_id = placement_group_id;
    m_placement_group_id_isSet = true;
}

bool OAICompute::is_placement_group_id_Set() const{
    return m_placement_group_id_isSet;
}

bool OAICompute::is_placement_group_id_Valid() const{
    return m_placement_group_id_isValid;
}

OAIPlanProperties OAICompute::getPlan() const {
    return m_plan;
}
void OAICompute::setPlan(const OAIPlanProperties &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAICompute::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAICompute::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAICompute::getPlatformFaultDomain() const {
    return m_platform_fault_domain;
}
void OAICompute::setPlatformFaultDomain(const QString &platform_fault_domain) {
    m_platform_fault_domain = platform_fault_domain;
    m_platform_fault_domain_isSet = true;
}

bool OAICompute::is_platform_fault_domain_Set() const{
    return m_platform_fault_domain_isSet;
}

bool OAICompute::is_platform_fault_domain_Valid() const{
    return m_platform_fault_domain_isValid;
}

QString OAICompute::getPlatformUpdateDomain() const {
    return m_platform_update_domain;
}
void OAICompute::setPlatformUpdateDomain(const QString &platform_update_domain) {
    m_platform_update_domain = platform_update_domain;
    m_platform_update_domain_isSet = true;
}

bool OAICompute::is_platform_update_domain_Set() const{
    return m_platform_update_domain_isSet;
}

bool OAICompute::is_platform_update_domain_Valid() const{
    return m_platform_update_domain_isValid;
}

QString OAICompute::getProvider() const {
    return m_provider;
}
void OAICompute::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICompute::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICompute::is_provider_Valid() const{
    return m_provider_isValid;
}

QList<OAIPublicKeysProperties> OAICompute::getPublicKeys() const {
    return m_public_keys;
}
void OAICompute::setPublicKeys(const QList<OAIPublicKeysProperties> &public_keys) {
    m_public_keys = public_keys;
    m_public_keys_isSet = true;
}

bool OAICompute::is_public_keys_Set() const{
    return m_public_keys_isSet;
}

bool OAICompute::is_public_keys_Valid() const{
    return m_public_keys_isValid;
}

QString OAICompute::getPublisher() const {
    return m_publisher;
}
void OAICompute::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAICompute::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAICompute::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAICompute::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAICompute::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAICompute::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAICompute::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAICompute::getSku() const {
    return m_sku;
}
void OAICompute::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICompute::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICompute::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAICompute::getSubscriptionId() const {
    return m_subscription_id;
}
void OAICompute::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAICompute::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAICompute::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAICompute::getTags() const {
    return m_tags;
}
void OAICompute::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICompute::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICompute::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICompute::getVersion() const {
    return m_version;
}
void OAICompute::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICompute::is_version_Set() const{
    return m_version_isSet;
}

bool OAICompute::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICompute::getVmId() const {
    return m_vm_id;
}
void OAICompute::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAICompute::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAICompute::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QString OAICompute::getVmScaleSetName() const {
    return m_vm_scale_set_name;
}
void OAICompute::setVmScaleSetName(const QString &vm_scale_set_name) {
    m_vm_scale_set_name = vm_scale_set_name;
    m_vm_scale_set_name_isSet = true;
}

bool OAICompute::is_vm_scale_set_name_Set() const{
    return m_vm_scale_set_name_isSet;
}

bool OAICompute::is_vm_scale_set_name_Valid() const{
    return m_vm_scale_set_name_isValid;
}

QString OAICompute::getVmSize() const {
    return m_vm_size;
}
void OAICompute::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAICompute::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAICompute::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

QString OAICompute::getZone() const {
    return m_zone;
}
void OAICompute::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAICompute::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAICompute::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAICompute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_az_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_fault_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_update_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_scale_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
