/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_compute_isSet = false;
    m_compute_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_compute_isValid = ::OpenAPI::fromJsonValue(m_compute, json[QString("compute")]);
    m_compute_isSet = !json[QString("compute")].isNull() && m_compute_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_compute.isSet()) {
        obj.insert(QString("compute"), ::OpenAPI::toJsonValue(m_compute));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    return obj;
}

OAICompute OAIInstance::getCompute() const {
    return m_compute;
}
void OAIInstance::setCompute(const OAICompute &compute) {
    m_compute = compute;
    m_compute_isSet = true;
}

bool OAIInstance::is_compute_Set() const{
    return m_compute_isSet;
}

bool OAIInstance::is_compute_Valid() const{
    return m_compute_isValid;
}

OAINetwork OAIInstance::getNetwork() const {
    return m_network;
}
void OAIInstance::setNetwork(const OAINetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIInstance::is_network_Set() const{
    return m_network_isSet;
}

bool OAIInstance::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
