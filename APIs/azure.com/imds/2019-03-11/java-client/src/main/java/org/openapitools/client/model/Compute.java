/*
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-03-11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlanProperties;
import org.openapitools.client.model.PublicKeysProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compute Metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:47.776266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Compute {
  public static final String SERIALIZED_NAME_AZ_ENVIRONMENT = "azEnvironment";
  @SerializedName(SERIALIZED_NAME_AZ_ENVIRONMENT)
  private String azEnvironment;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private String customData;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private String offer;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_PLACEMENT_GROUP_ID = "placementGroupId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_GROUP_ID)
  private String placementGroupId;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private PlanProperties plan;

  public static final String SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN = "platformFaultDomain";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FAULT_DOMAIN)
  private String platformFaultDomain;

  public static final String SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN = "platformUpdateDomain";
  @SerializedName(SERIALIZED_NAME_PLATFORM_UPDATE_DOMAIN)
  private String platformUpdateDomain;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PUBLIC_KEYS = "publicKeys";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEYS)
  private List<PublicKeysProperties> publicKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VM_ID = "vmId";
  @SerializedName(SERIALIZED_NAME_VM_ID)
  private String vmId;

  public static final String SERIALIZED_NAME_VM_SCALE_SET_NAME = "vmScaleSetName";
  @SerializedName(SERIALIZED_NAME_VM_SCALE_SET_NAME)
  private String vmScaleSetName;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public Compute() {
  }

  public Compute azEnvironment(String azEnvironment) {
    this.azEnvironment = azEnvironment;
    return this;
  }

  /**
   * This is the name of the environment in which the VM is running.
   * @return azEnvironment
   */
  @javax.annotation.Nullable
  public String getAzEnvironment() {
    return azEnvironment;
  }

  public void setAzEnvironment(String azEnvironment) {
    this.azEnvironment = azEnvironment;
  }


  public Compute customData(String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * This is the base64 encoded custom data for the running VM.
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }


  public Compute location(String location) {
    this.location = location;
    return this;
  }

  /**
   * This is the Azure Region in which the VM is running.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Compute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This is the name of the VM.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Compute offer(String offer) {
    this.offer = offer;
    return this;
  }

  /**
   * This is the offer information for the VM image. This value is only present for images deployed from the Azure Image Gallery.
   * @return offer
   */
  @javax.annotation.Nullable
  public String getOffer() {
    return offer;
  }

  public void setOffer(String offer) {
    this.offer = offer;
  }


  public Compute osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * This value indicates the type of OS the VM is running, either Linux or Windows.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public Compute placementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
    return this;
  }

  /**
   * This is the placement group of your Virtual Machine Scale Set.
   * @return placementGroupId
   */
  @javax.annotation.Nullable
  public String getPlacementGroupId() {
    return placementGroupId;
  }

  public void setPlacementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
  }


  public Compute plan(PlanProperties plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public PlanProperties getPlan() {
    return plan;
  }

  public void setPlan(PlanProperties plan) {
    this.plan = plan;
  }


  public Compute platformFaultDomain(String platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
    return this;
  }

  /**
   * This is the fault domain in which the VM.
   * @return platformFaultDomain
   */
  @javax.annotation.Nullable
  public String getPlatformFaultDomain() {
    return platformFaultDomain;
  }

  public void setPlatformFaultDomain(String platformFaultDomain) {
    this.platformFaultDomain = platformFaultDomain;
  }


  public Compute platformUpdateDomain(String platformUpdateDomain) {
    this.platformUpdateDomain = platformUpdateDomain;
    return this;
  }

  /**
   * This is the update domain in which the VM.
   * @return platformUpdateDomain
   */
  @javax.annotation.Nullable
  public String getPlatformUpdateDomain() {
    return platformUpdateDomain;
  }

  public void setPlatformUpdateDomain(String platformUpdateDomain) {
    this.platformUpdateDomain = platformUpdateDomain;
  }


  public Compute provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * This is the provider of the VM.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Compute publicKeys(List<PublicKeysProperties> publicKeys) {
    this.publicKeys = publicKeys;
    return this;
  }

  public Compute addPublicKeysItem(PublicKeysProperties publicKeysItem) {
    if (this.publicKeys == null) {
      this.publicKeys = new ArrayList<>();
    }
    this.publicKeys.add(publicKeysItem);
    return this;
  }

  /**
   * This is information about the SSH certificate
   * @return publicKeys
   */
  @javax.annotation.Nullable
  public List<PublicKeysProperties> getPublicKeys() {
    return publicKeys;
  }

  public void setPublicKeys(List<PublicKeysProperties> publicKeys) {
    this.publicKeys = publicKeys;
  }


  public Compute publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * This is the publisher of the VM image.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public Compute resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * This is the resource group for the VM.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public Compute resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * This is the fully qualified ID for the VM.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public Compute sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * This is the specific SKU for the VM image.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public Compute subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * This is the Azure subscription for the VM.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Compute tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * This is the list of tags for your VM.
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public Compute version(String version) {
    this.version = version;
    return this;
  }

  /**
   * This is the version of the VM image.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Compute vmId(String vmId) {
    this.vmId = vmId;
    return this;
  }

  /**
   * This is the unique identifier for the VM.
   * @return vmId
   */
  @javax.annotation.Nullable
  public String getVmId() {
    return vmId;
  }

  public void setVmId(String vmId) {
    this.vmId = vmId;
  }


  public Compute vmScaleSetName(String vmScaleSetName) {
    this.vmScaleSetName = vmScaleSetName;
    return this;
  }

  /**
   * This is the resource name of the VMSS.
   * @return vmScaleSetName
   */
  @javax.annotation.Nullable
  public String getVmScaleSetName() {
    return vmScaleSetName;
  }

  public void setVmScaleSetName(String vmScaleSetName) {
    this.vmScaleSetName = vmScaleSetName;
  }


  public Compute vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * This is the size of the VM.
   * @return vmSize
   */
  @javax.annotation.Nullable
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }


  public Compute zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * This is the availability zone of the VM.
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compute compute = (Compute) o;
    return Objects.equals(this.azEnvironment, compute.azEnvironment) &&
        Objects.equals(this.customData, compute.customData) &&
        Objects.equals(this.location, compute.location) &&
        Objects.equals(this.name, compute.name) &&
        Objects.equals(this.offer, compute.offer) &&
        Objects.equals(this.osType, compute.osType) &&
        Objects.equals(this.placementGroupId, compute.placementGroupId) &&
        Objects.equals(this.plan, compute.plan) &&
        Objects.equals(this.platformFaultDomain, compute.platformFaultDomain) &&
        Objects.equals(this.platformUpdateDomain, compute.platformUpdateDomain) &&
        Objects.equals(this.provider, compute.provider) &&
        Objects.equals(this.publicKeys, compute.publicKeys) &&
        Objects.equals(this.publisher, compute.publisher) &&
        Objects.equals(this.resourceGroupName, compute.resourceGroupName) &&
        Objects.equals(this.resourceId, compute.resourceId) &&
        Objects.equals(this.sku, compute.sku) &&
        Objects.equals(this.subscriptionId, compute.subscriptionId) &&
        Objects.equals(this.tags, compute.tags) &&
        Objects.equals(this.version, compute.version) &&
        Objects.equals(this.vmId, compute.vmId) &&
        Objects.equals(this.vmScaleSetName, compute.vmScaleSetName) &&
        Objects.equals(this.vmSize, compute.vmSize) &&
        Objects.equals(this.zone, compute.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azEnvironment, customData, location, name, offer, osType, placementGroupId, plan, platformFaultDomain, platformUpdateDomain, provider, publicKeys, publisher, resourceGroupName, resourceId, sku, subscriptionId, tags, version, vmId, vmScaleSetName, vmSize, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compute {\n");
    sb.append("    azEnvironment: ").append(toIndentedString(azEnvironment)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    placementGroupId: ").append(toIndentedString(placementGroupId)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    platformFaultDomain: ").append(toIndentedString(platformFaultDomain)).append("\n");
    sb.append("    platformUpdateDomain: ").append(toIndentedString(platformUpdateDomain)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    publicKeys: ").append(toIndentedString(publicKeys)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("    vmScaleSetName: ").append(toIndentedString(vmScaleSetName)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azEnvironment");
    openapiFields.add("customData");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("offer");
    openapiFields.add("osType");
    openapiFields.add("placementGroupId");
    openapiFields.add("plan");
    openapiFields.add("platformFaultDomain");
    openapiFields.add("platformUpdateDomain");
    openapiFields.add("provider");
    openapiFields.add("publicKeys");
    openapiFields.add("publisher");
    openapiFields.add("resourceGroupName");
    openapiFields.add("resourceId");
    openapiFields.add("sku");
    openapiFields.add("subscriptionId");
    openapiFields.add("tags");
    openapiFields.add("version");
    openapiFields.add("vmId");
    openapiFields.add("vmScaleSetName");
    openapiFields.add("vmSize");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Compute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Compute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Compute is not found in the empty JSON string", Compute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Compute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Compute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azEnvironment") != null && !jsonObj.get("azEnvironment").isJsonNull()) && !jsonObj.get("azEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azEnvironment").toString()));
      }
      if ((jsonObj.get("customData") != null && !jsonObj.get("customData").isJsonNull()) && !jsonObj.get("customData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customData").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("offer") != null && !jsonObj.get("offer").isJsonNull()) && !jsonObj.get("offer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offer").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("placementGroupId") != null && !jsonObj.get("placementGroupId").isJsonNull()) && !jsonObj.get("placementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementGroupId").toString()));
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        PlanProperties.validateJsonElement(jsonObj.get("plan"));
      }
      if ((jsonObj.get("platformFaultDomain") != null && !jsonObj.get("platformFaultDomain").isJsonNull()) && !jsonObj.get("platformFaultDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformFaultDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformFaultDomain").toString()));
      }
      if ((jsonObj.get("platformUpdateDomain") != null && !jsonObj.get("platformUpdateDomain").isJsonNull()) && !jsonObj.get("platformUpdateDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformUpdateDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformUpdateDomain").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if (jsonObj.get("publicKeys") != null && !jsonObj.get("publicKeys").isJsonNull()) {
        JsonArray jsonArraypublicKeys = jsonObj.getAsJsonArray("publicKeys");
        if (jsonArraypublicKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publicKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publicKeys` to be an array in the JSON string but got `%s`", jsonObj.get("publicKeys").toString()));
          }

          // validate the optional field `publicKeys` (array)
          for (int i = 0; i < jsonArraypublicKeys.size(); i++) {
            PublicKeysProperties.validateJsonElement(jsonArraypublicKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("vmId") != null && !jsonObj.get("vmId").isJsonNull()) && !jsonObj.get("vmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmId").toString()));
      }
      if ((jsonObj.get("vmScaleSetName") != null && !jsonObj.get("vmScaleSetName").isJsonNull()) && !jsonObj.get("vmScaleSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmScaleSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmScaleSetName").toString()));
      }
      if ((jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) && !jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Compute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Compute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Compute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Compute.class));

       return (TypeAdapter<T>) new TypeAdapter<Compute>() {
           @Override
           public void write(JsonWriter out, Compute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Compute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Compute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Compute
   * @throws IOException if the JSON string is invalid with respect to Compute
   */
  public static Compute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Compute.class);
  }

  /**
   * Convert an instance of Compute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

