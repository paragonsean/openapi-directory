/**
 * InstanceMetadataClient
 * The Azure Instance Metadata Client
 *
 * The version of the OpenAPI document: 2019-03-11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanProperties from './PlanProperties';
import PublicKeysProperties from './PublicKeysProperties';

/**
 * The Compute model module.
 * @module model/Compute
 * @version 2019-03-11
 */
class Compute {
    /**
     * Constructs a new <code>Compute</code>.
     * Compute Metadata
     * @alias module:model/Compute
     */
    constructor() { 
        
        Compute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Compute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Compute} obj Optional instance to populate.
     * @return {module:model/Compute} The populated <code>Compute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Compute();

            if (data.hasOwnProperty('azEnvironment')) {
                obj['azEnvironment'] = ApiClient.convertToType(data['azEnvironment'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offer')) {
                obj['offer'] = ApiClient.convertToType(data['offer'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('placementGroupId')) {
                obj['placementGroupId'] = ApiClient.convertToType(data['placementGroupId'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanProperties.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('platformFaultDomain')) {
                obj['platformFaultDomain'] = ApiClient.convertToType(data['platformFaultDomain'], 'String');
            }
            if (data.hasOwnProperty('platformUpdateDomain')) {
                obj['platformUpdateDomain'] = ApiClient.convertToType(data['platformUpdateDomain'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('publicKeys')) {
                obj['publicKeys'] = ApiClient.convertToType(data['publicKeys'], [PublicKeysProperties]);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('vmId')) {
                obj['vmId'] = ApiClient.convertToType(data['vmId'], 'String');
            }
            if (data.hasOwnProperty('vmScaleSetName')) {
                obj['vmScaleSetName'] = ApiClient.convertToType(data['vmScaleSetName'], 'String');
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Compute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Compute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['azEnvironment'] && !(typeof data['azEnvironment'] === 'string' || data['azEnvironment'] instanceof String)) {
            throw new Error("Expected the field `azEnvironment` to be a primitive type in the JSON string but got " + data['azEnvironment']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['offer'] && !(typeof data['offer'] === 'string' || data['offer'] instanceof String)) {
            throw new Error("Expected the field `offer` to be a primitive type in the JSON string but got " + data['offer']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['placementGroupId'] && !(typeof data['placementGroupId'] === 'string' || data['placementGroupId'] instanceof String)) {
            throw new Error("Expected the field `placementGroupId` to be a primitive type in the JSON string but got " + data['placementGroupId']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PlanProperties.validateJSON(data['plan']);
        }
        // ensure the json data is a string
        if (data['platformFaultDomain'] && !(typeof data['platformFaultDomain'] === 'string' || data['platformFaultDomain'] instanceof String)) {
            throw new Error("Expected the field `platformFaultDomain` to be a primitive type in the JSON string but got " + data['platformFaultDomain']);
        }
        // ensure the json data is a string
        if (data['platformUpdateDomain'] && !(typeof data['platformUpdateDomain'] === 'string' || data['platformUpdateDomain'] instanceof String)) {
            throw new Error("Expected the field `platformUpdateDomain` to be a primitive type in the JSON string but got " + data['platformUpdateDomain']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        if (data['publicKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['publicKeys'])) {
                throw new Error("Expected the field `publicKeys` to be an array in the JSON data but got " + data['publicKeys']);
            }
            // validate the optional field `publicKeys` (array)
            for (const item of data['publicKeys']) {
                PublicKeysProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['vmId'] && !(typeof data['vmId'] === 'string' || data['vmId'] instanceof String)) {
            throw new Error("Expected the field `vmId` to be a primitive type in the JSON string but got " + data['vmId']);
        }
        // ensure the json data is a string
        if (data['vmScaleSetName'] && !(typeof data['vmScaleSetName'] === 'string' || data['vmScaleSetName'] instanceof String)) {
            throw new Error("Expected the field `vmScaleSetName` to be a primitive type in the JSON string but got " + data['vmScaleSetName']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * This is the name of the environment in which the VM is running.
 * @member {String} azEnvironment
 */
Compute.prototype['azEnvironment'] = undefined;

/**
 * This is the base64 encoded custom data for the running VM.
 * @member {String} customData
 */
Compute.prototype['customData'] = undefined;

/**
 * This is the Azure Region in which the VM is running.
 * @member {String} location
 */
Compute.prototype['location'] = undefined;

/**
 * This is the name of the VM.
 * @member {String} name
 */
Compute.prototype['name'] = undefined;

/**
 * This is the offer information for the VM image. This value is only present for images deployed from the Azure Image Gallery.
 * @member {String} offer
 */
Compute.prototype['offer'] = undefined;

/**
 * This value indicates the type of OS the VM is running, either Linux or Windows.
 * @member {String} osType
 */
Compute.prototype['osType'] = undefined;

/**
 * This is the placement group of your Virtual Machine Scale Set.
 * @member {String} placementGroupId
 */
Compute.prototype['placementGroupId'] = undefined;

/**
 * @member {module:model/PlanProperties} plan
 */
Compute.prototype['plan'] = undefined;

/**
 * This is the fault domain in which the VM.
 * @member {String} platformFaultDomain
 */
Compute.prototype['platformFaultDomain'] = undefined;

/**
 * This is the update domain in which the VM.
 * @member {String} platformUpdateDomain
 */
Compute.prototype['platformUpdateDomain'] = undefined;

/**
 * This is the provider of the VM.
 * @member {String} provider
 */
Compute.prototype['provider'] = undefined;

/**
 * This is information about the SSH certificate
 * @member {Array.<module:model/PublicKeysProperties>} publicKeys
 */
Compute.prototype['publicKeys'] = undefined;

/**
 * This is the publisher of the VM image.
 * @member {String} publisher
 */
Compute.prototype['publisher'] = undefined;

/**
 * This is the resource group for the VM.
 * @member {String} resourceGroupName
 */
Compute.prototype['resourceGroupName'] = undefined;

/**
 * This is the fully qualified ID for the VM.
 * @member {String} resourceId
 */
Compute.prototype['resourceId'] = undefined;

/**
 * This is the specific SKU for the VM image.
 * @member {String} sku
 */
Compute.prototype['sku'] = undefined;

/**
 * This is the Azure subscription for the VM.
 * @member {String} subscriptionId
 */
Compute.prototype['subscriptionId'] = undefined;

/**
 * This is the list of tags for your VM.
 * @member {String} tags
 */
Compute.prototype['tags'] = undefined;

/**
 * This is the version of the VM image.
 * @member {String} version
 */
Compute.prototype['version'] = undefined;

/**
 * This is the unique identifier for the VM.
 * @member {String} vmId
 */
Compute.prototype['vmId'] = undefined;

/**
 * This is the resource name of the VMSS.
 * @member {String} vmScaleSetName
 */
Compute.prototype['vmScaleSetName'] = undefined;

/**
 * This is the size of the VM.
 * @member {String} vmSize
 */
Compute.prototype['vmSize'] = undefined;

/**
 * This is the availability zone of the VM.
 * @member {String} zone
 */
Compute.prototype['zone'] = undefined;






export default Compute;

