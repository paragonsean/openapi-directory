/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShareProperties model module.
 * @module model/ShareProperties
 * @version 2015-12-01-preview
 */
class ShareProperties {
    /**
     * Constructs a new <code>ShareProperties</code>.
     * Storage share properties.
     * @alias module:model/ShareProperties
     */
    constructor() { 
        
        ShareProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareProperties} obj Optional instance to populate.
     * @return {module:model/ShareProperties} The populated <code>ShareProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareProperties();

            if (data.hasOwnProperty('freeCapacity')) {
                obj['freeCapacity'] = ApiClient.convertToType(data['freeCapacity'], 'Number');
            }
            if (data.hasOwnProperty('healthStatus')) {
                obj['healthStatus'] = ApiClient.convertToType(data['healthStatus'], 'String');
            }
            if (data.hasOwnProperty('shareName')) {
                obj['shareName'] = ApiClient.convertToType(data['shareName'], 'String');
            }
            if (data.hasOwnProperty('totalCapacity')) {
                obj['totalCapacity'] = ApiClient.convertToType(data['totalCapacity'], 'Number');
            }
            if (data.hasOwnProperty('uncPath')) {
                obj['uncPath'] = ApiClient.convertToType(data['uncPath'], 'String');
            }
            if (data.hasOwnProperty('usedCapacity')) {
                obj['usedCapacity'] = ApiClient.convertToType(data['usedCapacity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['healthStatus'] && !(typeof data['healthStatus'] === 'string' || data['healthStatus'] instanceof String)) {
            throw new Error("Expected the field `healthStatus` to be a primitive type in the JSON string but got " + data['healthStatus']);
        }
        // ensure the json data is a string
        if (data['shareName'] && !(typeof data['shareName'] === 'string' || data['shareName'] instanceof String)) {
            throw new Error("Expected the field `shareName` to be a primitive type in the JSON string but got " + data['shareName']);
        }
        // ensure the json data is a string
        if (data['uncPath'] && !(typeof data['uncPath'] === 'string' || data['uncPath'] instanceof String)) {
            throw new Error("Expected the field `uncPath` to be a primitive type in the JSON string but got " + data['uncPath']);
        }

        return true;
    }


}



/**
 * The free space of the storage share in bytes.
 * @member {Number} freeCapacity
 */
ShareProperties.prototype['freeCapacity'] = undefined;

/**
 * Current health status.
 * @member {module:model/ShareProperties.HealthStatusEnum} healthStatus
 */
ShareProperties.prototype['healthStatus'] = undefined;

/**
 * The name of the storage share.
 * @member {String} shareName
 */
ShareProperties.prototype['shareName'] = undefined;

/**
 * The total capacity of the storage share in bytes.
 * @member {Number} totalCapacity
 */
ShareProperties.prototype['totalCapacity'] = undefined;

/**
 * The UNC path to the storage share.
 * @member {String} uncPath
 */
ShareProperties.prototype['uncPath'] = undefined;

/**
 * The used capacity of the storage share in bytes.
 * @member {Number} usedCapacity
 */
ShareProperties.prototype['usedCapacity'] = undefined;





/**
 * Allowed values for the <code>healthStatus</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['HealthStatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Healthy"
     * @const
     */
    "Healthy": "Healthy",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical"
};



export default ShareProperties;

