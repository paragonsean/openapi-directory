/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner from './SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner';
import SharesListMetricDefinitions200ResponseValueInnerName from './SharesListMetricDefinitions200ResponseValueInnerName';

/**
 * The SharesListMetricDefinitions200ResponseValueInner model module.
 * @module model/SharesListMetricDefinitions200ResponseValueInner
 * @version 2015-12-01-preview
 */
class SharesListMetricDefinitions200ResponseValueInner {
    /**
     * Constructs a new <code>SharesListMetricDefinitions200ResponseValueInner</code>.
     * Metric definition.
     * @alias module:model/SharesListMetricDefinitions200ResponseValueInner
     */
    constructor() { 
        
        SharesListMetricDefinitions200ResponseValueInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharesListMetricDefinitions200ResponseValueInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharesListMetricDefinitions200ResponseValueInner} obj Optional instance to populate.
     * @return {module:model/SharesListMetricDefinitions200ResponseValueInner} The populated <code>SharesListMetricDefinitions200ResponseValueInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharesListMetricDefinitions200ResponseValueInner();

            if (data.hasOwnProperty('metricAvailabilities')) {
                obj['metricAvailabilities'] = ApiClient.convertToType(data['metricAvailabilities'], [SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = SharesListMetricDefinitions200ResponseValueInnerName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('primaryAggregationType')) {
                obj['primaryAggregationType'] = ApiClient.convertToType(data['primaryAggregationType'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharesListMetricDefinitions200ResponseValueInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharesListMetricDefinitions200ResponseValueInner</code>.
     */
    static validateJSON(data) {
        if (data['metricAvailabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricAvailabilities'])) {
                throw new Error("Expected the field `metricAvailabilities` to be an array in the JSON data but got " + data['metricAvailabilities']);
            }
            // validate the optional field `metricAvailabilities` (array)
            for (const item of data['metricAvailabilities']) {
                SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner.validateJSON(item);
            };
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          SharesListMetricDefinitions200ResponseValueInnerName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['primaryAggregationType'] && !(typeof data['primaryAggregationType'] === 'string' || data['primaryAggregationType'] instanceof String)) {
            throw new Error("Expected the field `primaryAggregationType` to be a primitive type in the JSON string but got " + data['primaryAggregationType']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * Metric availabilities.
 * @member {Array.<module:model/SharesListMetricDefinitions200ResponseValueInnerMetricAvailabilitiesInner>} metricAvailabilities
 */
SharesListMetricDefinitions200ResponseValueInner.prototype['metricAvailabilities'] = undefined;

/**
 * @member {module:model/SharesListMetricDefinitions200ResponseValueInnerName} name
 */
SharesListMetricDefinitions200ResponseValueInner.prototype['name'] = undefined;

/**
 * Aggregate type.
 * @member {module:model/SharesListMetricDefinitions200ResponseValueInner.PrimaryAggregationTypeEnum} primaryAggregationType
 */
SharesListMetricDefinitions200ResponseValueInner.prototype['primaryAggregationType'] = undefined;

/**
 * Metric unit.
 * @member {module:model/SharesListMetricDefinitions200ResponseValueInner.UnitEnum} unit
 */
SharesListMetricDefinitions200ResponseValueInner.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>primaryAggregationType</code> property.
 * @enum {String}
 * @readonly
 */
SharesListMetricDefinitions200ResponseValueInner['PrimaryAggregationTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Last"
     * @const
     */
    "Last": "Last"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
SharesListMetricDefinitions200ResponseValueInner['UnitEnum'] = {

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",

    /**
     * value: "Seconds"
     * @const
     */
    "Seconds": "Seconds",

    /**
     * value: "CountPerSecond"
     * @const
     */
    "CountPerSecond": "CountPerSecond",

    /**
     * value: "BytesPerSecond"
     * @const
     */
    "BytesPerSecond": "BytesPerSecond"
};



export default SharesListMetricDefinitions200ResponseValueInner;

