/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metric value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:03.451328-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharesListMetrics200ResponseValueInnerMetricValuesInner {
  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Float average;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Float maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Float minimum;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Float total;

  public SharesListMetrics200ResponseValueInnerMetricValuesInner() {
  }

  public SharesListMetrics200ResponseValueInnerMetricValuesInner(
     Float average, 
     Integer count, 
     Float maximum, 
     Float minimum, 
     String properties, 
     OffsetDateTime timeStamp, 
     Float total
  ) {
    this();
    this.average = average;
    this.count = count;
    this.maximum = maximum;
    this.minimum = minimum;
    this.properties = properties;
    this.timeStamp = timeStamp;
    this.total = total;
  }

  /**
   * Average value of metric.
   * @return average
   */
  @javax.annotation.Nullable
  public Float getAverage() {
    return average;
  }



  /**
   * Count of metric values.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }



  /**
   * Maximum value of metric.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Float getMaximum() {
    return maximum;
  }



  /**
   * Minimum value of metric.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Float getMinimum() {
    return minimum;
  }



  /**
   * Metric value properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public String getProperties() {
    return properties;
  }



  /**
   * Timestamp of metric value.
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }



  /**
   * Total value of metric.
   * @return total
   */
  @javax.annotation.Nullable
  public Float getTotal() {
    return total;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharesListMetrics200ResponseValueInnerMetricValuesInner sharesListMetrics200ResponseValueInnerMetricValuesInner = (SharesListMetrics200ResponseValueInnerMetricValuesInner) o;
    return Objects.equals(this.average, sharesListMetrics200ResponseValueInnerMetricValuesInner.average) &&
        Objects.equals(this.count, sharesListMetrics200ResponseValueInnerMetricValuesInner.count) &&
        Objects.equals(this.maximum, sharesListMetrics200ResponseValueInnerMetricValuesInner.maximum) &&
        Objects.equals(this.minimum, sharesListMetrics200ResponseValueInnerMetricValuesInner.minimum) &&
        Objects.equals(this.properties, sharesListMetrics200ResponseValueInnerMetricValuesInner.properties) &&
        Objects.equals(this.timeStamp, sharesListMetrics200ResponseValueInnerMetricValuesInner.timeStamp) &&
        Objects.equals(this.total, sharesListMetrics200ResponseValueInnerMetricValuesInner.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, count, maximum, minimum, properties, timeStamp, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharesListMetrics200ResponseValueInnerMetricValuesInner {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average");
    openapiFields.add("count");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("properties");
    openapiFields.add("timeStamp");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharesListMetrics200ResponseValueInnerMetricValuesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharesListMetrics200ResponseValueInnerMetricValuesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharesListMetrics200ResponseValueInnerMetricValuesInner is not found in the empty JSON string", SharesListMetrics200ResponseValueInnerMetricValuesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharesListMetrics200ResponseValueInnerMetricValuesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharesListMetrics200ResponseValueInnerMetricValuesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) && !jsonObj.get("properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharesListMetrics200ResponseValueInnerMetricValuesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharesListMetrics200ResponseValueInnerMetricValuesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharesListMetrics200ResponseValueInnerMetricValuesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharesListMetrics200ResponseValueInnerMetricValuesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SharesListMetrics200ResponseValueInnerMetricValuesInner>() {
           @Override
           public void write(JsonWriter out, SharesListMetrics200ResponseValueInnerMetricValuesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharesListMetrics200ResponseValueInnerMetricValuesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharesListMetrics200ResponseValueInnerMetricValuesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharesListMetrics200ResponseValueInnerMetricValuesInner
   * @throws IOException if the JSON string is invalid with respect to SharesListMetrics200ResponseValueInnerMetricValuesInner
   */
  public static SharesListMetrics200ResponseValueInnerMetricValuesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharesListMetrics200ResponseValueInnerMetricValuesInner.class);
  }

  /**
   * Convert an instance of SharesListMetrics200ResponseValueInnerMetricValuesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

