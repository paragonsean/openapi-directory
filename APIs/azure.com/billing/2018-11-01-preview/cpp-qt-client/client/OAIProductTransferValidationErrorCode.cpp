/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductTransferValidationErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductTransferValidationErrorCode::OAIProductTransferValidationErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductTransferValidationErrorCode::OAIProductTransferValidationErrorCode() {
    this->initializeModel();
}

OAIProductTransferValidationErrorCode::~OAIProductTransferValidationErrorCode() {}

void OAIProductTransferValidationErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProductTransferValidationErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProductTransferValidationErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("InvalidSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::INVALIDSOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProductNotActive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::PRODUCTNOTACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsufficientPermissionOnSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::INSUFFICIENTPERMISSIONONSOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsufficientPermissionOnDestination", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::INSUFFICIENTPERMISSIONONDESTINATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DestinationBillingProfilePastDue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::DESTINATIONBILLINGPROFILEPASTDUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProductTypeNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::PRODUCTTYPENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CrossBillingAccountNotAllowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::CROSSBILLINGACCOUNTNOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotAvailableForDestinationMarket", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::NOTAVAILABLEFORDESTINATIONMARKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OneTimePurchaseProductTransferNotAllowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProductTransferValidationErrorCode::ONETIMEPURCHASEPRODUCTTRANSFERNOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProductTransferValidationErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProductTransferValidationErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProductTransferValidationErrorCode::INVALIDSOURCE:
            val = "InvalidSource";
            break;
        case eOAIProductTransferValidationErrorCode::PRODUCTNOTACTIVE:
            val = "ProductNotActive";
            break;
        case eOAIProductTransferValidationErrorCode::INSUFFICIENTPERMISSIONONSOURCE:
            val = "InsufficientPermissionOnSource";
            break;
        case eOAIProductTransferValidationErrorCode::INSUFFICIENTPERMISSIONONDESTINATION:
            val = "InsufficientPermissionOnDestination";
            break;
        case eOAIProductTransferValidationErrorCode::DESTINATIONBILLINGPROFILEPASTDUE:
            val = "DestinationBillingProfilePastDue";
            break;
        case eOAIProductTransferValidationErrorCode::PRODUCTTYPENOTSUPPORTED:
            val = "ProductTypeNotSupported";
            break;
        case eOAIProductTransferValidationErrorCode::CROSSBILLINGACCOUNTNOTALLOWED:
            val = "CrossBillingAccountNotAllowed";
            break;
        case eOAIProductTransferValidationErrorCode::NOTAVAILABLEFORDESTINATIONMARKET:
            val = "NotAvailableForDestinationMarket";
            break;
        case eOAIProductTransferValidationErrorCode::ONETIMEPURCHASEPRODUCTTRANSFERNOTALLOWED:
            val = "OneTimePurchaseProductTransferNotAllowed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProductTransferValidationErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProductTransferValidationErrorCode::eOAIProductTransferValidationErrorCode OAIProductTransferValidationErrorCode::getValue() const {
    return m_value;
}

void OAIProductTransferValidationErrorCode::setValue(const OAIProductTransferValidationErrorCode::eOAIProductTransferValidationErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProductTransferValidationErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIProductTransferValidationErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
