/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAITransferBillingSubscriptionRequestProperties.h"
#include "OAITransferBillingSubscriptionResult.h"
#include "OAITransferProductRequestProperties.h"
#include "OAIValidateProductTransferEligibilityResult.h"
#include "OAIValidateSubscriptionTransferEligibilityResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  billing_subscription_name QString [required]
    * @param[in]  parameters OAITransferBillingSubscriptionRequestProperties [required]
    */
    virtual void billingSubscriptionsTransfer(const QString &billing_account_name, const QString &invoice_section_name, const QString &billing_subscription_name, const OAITransferBillingSubscriptionRequestProperties &parameters);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  billing_subscription_name QString [required]
    * @param[in]  parameters OAITransferBillingSubscriptionRequestProperties [required]
    */
    virtual void billingSubscriptionsValidateTransfer(const QString &billing_account_name, const QString &invoice_section_name, const QString &billing_subscription_name, const OAITransferBillingSubscriptionRequestProperties &parameters);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  product_name QString [required]
    * @param[in]  parameters OAITransferProductRequestProperties [required]
    */
    virtual void productsValidateTransfer(const QString &billing_account_name, const QString &invoice_section_name, const QString &product_name, const OAITransferProductRequestProperties &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void billingSubscriptionsTransferCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsValidateTransferCallback(OAIHttpRequestWorker *worker);
    void productsValidateTransferCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void billingSubscriptionsTransferSignal(OAITransferBillingSubscriptionResult summary);
    void billingSubscriptionsValidateTransferSignal(OAIValidateSubscriptionTransferEligibilityResult summary);
    void productsValidateTransferSignal(OAIValidateProductTransferEligibilityResult summary);


    void billingSubscriptionsTransferSignalFull(OAIHttpRequestWorker *worker, OAITransferBillingSubscriptionResult summary);
    void billingSubscriptionsValidateTransferSignalFull(OAIHttpRequestWorker *worker, OAIValidateSubscriptionTransferEligibilityResult summary);
    void productsValidateTransferSignalFull(OAIHttpRequestWorker *worker, OAIValidateProductTransferEligibilityResult summary);

    Q_DECL_DEPRECATED_X("Use billingSubscriptionsTransferSignalError() instead")
    void billingSubscriptionsTransferSignalE(OAITransferBillingSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsTransferSignalError(OAITransferBillingSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsValidateTransferSignalError() instead")
    void billingSubscriptionsValidateTransferSignalE(OAIValidateSubscriptionTransferEligibilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsValidateTransferSignalError(OAIValidateSubscriptionTransferEligibilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsValidateTransferSignalError() instead")
    void productsValidateTransferSignalE(OAIValidateProductTransferEligibilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsValidateTransferSignalError(OAIValidateProductTransferEligibilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use billingSubscriptionsTransferSignalErrorFull() instead")
    void billingSubscriptionsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsValidateTransferSignalErrorFull() instead")
    void billingSubscriptionsValidateTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsValidateTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsValidateTransferSignalErrorFull() instead")
    void productsValidateTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsValidateTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
