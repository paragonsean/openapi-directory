/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBillingSubscriptionsApi_H
#define OAI_OAIBillingSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillingSubscriptionSummary.h"
#include "OAIBillingSubscriptionsListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBillingSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAIBillingSubscriptionsApi(const int timeOut = 0);
    ~OAIBillingSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  billing_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsGet(const QString &billing_account_name, const QString &invoice_section_name, const QString &billing_subscription_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  billing_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsGetByCustomerName(const QString &billing_account_name, const QString &customer_name, const QString &billing_subscription_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsListByBillingAccountName(const QString &billing_account_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsListByBillingProfileName(const QString &billing_account_name, const QString &billing_profile_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsListByCustomerName(const QString &billing_account_name, const QString &customer_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void billingSubscriptionsListByInvoiceSectionName(const QString &billing_account_name, const QString &invoice_section_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void billingSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsGetByCustomerNameCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListByBillingAccountNameCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListByBillingProfileNameCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListByCustomerNameCallback(OAIHttpRequestWorker *worker);
    void billingSubscriptionsListByInvoiceSectionNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void billingSubscriptionsGetSignal(OAIBillingSubscriptionSummary summary);
    void billingSubscriptionsGetByCustomerNameSignal(OAIBillingSubscriptionSummary summary);
    void billingSubscriptionsListByBillingAccountNameSignal(OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByBillingProfileNameSignal(OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByCustomerNameSignal(OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByInvoiceSectionNameSignal(OAIBillingSubscriptionsListResult summary);


    void billingSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionSummary summary);
    void billingSubscriptionsGetByCustomerNameSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionSummary summary);
    void billingSubscriptionsListByBillingAccountNameSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByBillingProfileNameSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByCustomerNameSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionsListResult summary);
    void billingSubscriptionsListByInvoiceSectionNameSignalFull(OAIHttpRequestWorker *worker, OAIBillingSubscriptionsListResult summary);

    Q_DECL_DEPRECATED_X("Use billingSubscriptionsGetSignalError() instead")
    void billingSubscriptionsGetSignalE(OAIBillingSubscriptionSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsGetSignalError(OAIBillingSubscriptionSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsGetByCustomerNameSignalError() instead")
    void billingSubscriptionsGetByCustomerNameSignalE(OAIBillingSubscriptionSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsGetByCustomerNameSignalError(OAIBillingSubscriptionSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByBillingAccountNameSignalError() instead")
    void billingSubscriptionsListByBillingAccountNameSignalE(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByBillingAccountNameSignalError(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByBillingProfileNameSignalError() instead")
    void billingSubscriptionsListByBillingProfileNameSignalE(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByBillingProfileNameSignalError(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByCustomerNameSignalError() instead")
    void billingSubscriptionsListByCustomerNameSignalE(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByCustomerNameSignalError(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByInvoiceSectionNameSignalError() instead")
    void billingSubscriptionsListByInvoiceSectionNameSignalE(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByInvoiceSectionNameSignalError(OAIBillingSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use billingSubscriptionsGetSignalErrorFull() instead")
    void billingSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsGetByCustomerNameSignalErrorFull() instead")
    void billingSubscriptionsGetByCustomerNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsGetByCustomerNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByBillingAccountNameSignalErrorFull() instead")
    void billingSubscriptionsListByBillingAccountNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByBillingAccountNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByBillingProfileNameSignalErrorFull() instead")
    void billingSubscriptionsListByBillingProfileNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByBillingProfileNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByCustomerNameSignalErrorFull() instead")
    void billingSubscriptionsListByCustomerNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByCustomerNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingSubscriptionsListByInvoiceSectionNameSignalErrorFull() instead")
    void billingSubscriptionsListByInvoiceSectionNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingSubscriptionsListByInvoiceSectionNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
