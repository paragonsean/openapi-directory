/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgreementProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgreementProperties::OAIAgreementProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgreementProperties::OAIAgreementProperties() {
    this->initializeModel();
}

OAIAgreementProperties::~OAIAgreementProperties() {}

void OAIAgreementProperties::initializeModel() {

    m_agreement_link_isSet = false;
    m_agreement_link_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAgreementProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgreementProperties::fromJsonObject(QJsonObject json) {

    m_agreement_link_isValid = ::OpenAPI::fromJsonValue(m_agreement_link, json[QString("agreementLink")]);
    m_agreement_link_isSet = !json[QString("agreementLink")].isNull() && m_agreement_link_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAgreementProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgreementProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_link_isSet) {
        obj.insert(QString("agreementLink"), ::OpenAPI::toJsonValue(m_agreement_link));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAgreementProperties::getAgreementLink() const {
    return m_agreement_link;
}
void OAIAgreementProperties::setAgreementLink(const QString &agreement_link) {
    m_agreement_link = agreement_link;
    m_agreement_link_isSet = true;
}

bool OAIAgreementProperties::is_agreement_link_Set() const{
    return m_agreement_link_isSet;
}

bool OAIAgreementProperties::is_agreement_link_Valid() const{
    return m_agreement_link_isValid;
}

QDateTime OAIAgreementProperties::getEffectiveDate() const {
    return m_effective_date;
}
void OAIAgreementProperties::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIAgreementProperties::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIAgreementProperties::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QDateTime OAIAgreementProperties::getExpirationDate() const {
    return m_expiration_date;
}
void OAIAgreementProperties::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIAgreementProperties::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIAgreementProperties::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QList<OAIParticipants> OAIAgreementProperties::getParticipants() const {
    return m_participants;
}
void OAIAgreementProperties::setParticipants(const QList<OAIParticipants> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIAgreementProperties::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIAgreementProperties::is_participants_Valid() const{
    return m_participants_isValid;
}

QString OAIAgreementProperties::getStatus() const {
    return m_status;
}
void OAIAgreementProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAgreementProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAgreementProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAgreementProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgreementProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
