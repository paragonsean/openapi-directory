/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethodProperties::OAIPaymentMethodProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethodProperties::OAIPaymentMethodProperties() {
    this->initializeModel();
}

OAIPaymentMethodProperties::~OAIPaymentMethodProperties() {}

void OAIPaymentMethodProperties::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;
}

void OAIPaymentMethodProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethodProperties::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;
}

QString OAIPaymentMethodProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethodProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    return obj;
}

QString OAIPaymentMethodProperties::getCurrency() const {
    return m_currency;
}
void OAIPaymentMethodProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentMethodProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentMethodProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPaymentMethodProperties::getDetails() const {
    return m_details;
}
void OAIPaymentMethodProperties::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIPaymentMethodProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIPaymentMethodProperties::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAIPaymentMethodProperties::getExpiration() const {
    return m_expiration;
}
void OAIPaymentMethodProperties::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIPaymentMethodProperties::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIPaymentMethodProperties::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIPaymentMethodProperties::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAIPaymentMethodProperties::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAIPaymentMethodProperties::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAIPaymentMethodProperties::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

bool OAIPaymentMethodProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethodProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
