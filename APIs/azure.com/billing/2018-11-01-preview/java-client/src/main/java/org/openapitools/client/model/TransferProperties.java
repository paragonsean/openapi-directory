/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DetailedTransferStatus;
import org.openapitools.client.model.TransferStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transfer details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:31.075138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferProperties {
  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_ID = "billingAccountId";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_ID)
  private String billingAccountId;

  public static final String SERIALIZED_NAME_CANCELED_BY = "canceledBy";
  @SerializedName(SERIALIZED_NAME_CANCELED_BY)
  private String canceledBy;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DETAILED_TRANSFER_STATUS = "detailedTransferStatus";
  @SerializedName(SERIALIZED_NAME_DETAILED_TRANSFER_STATUS)
  private List<DetailedTransferStatus> detailedTransferStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_INITIATOR_EMAIL_ID = "initiatorEmailId";
  @SerializedName(SERIALIZED_NAME_INITIATOR_EMAIL_ID)
  private String initiatorEmailId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_RECIPIENT_EMAIL_ID = "recipientEmailId";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_EMAIL_ID)
  private String recipientEmailId;

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "transferStatus";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private TransferStatus transferStatus;

  public TransferProperties() {
  }

  public TransferProperties(
     String billingAccountId, 
     String canceledBy, 
     OffsetDateTime creationTime, 
     List<DetailedTransferStatus> detailedTransferStatus, 
     OffsetDateTime expirationTime, 
     String initiatorEmailId, 
     String invoiceSectionId, 
     OffsetDateTime lastModifiedTime, 
     String recipientEmailId
  ) {
    this();
    this.billingAccountId = billingAccountId;
    this.canceledBy = canceledBy;
    this.creationTime = creationTime;
    this.detailedTransferStatus = detailedTransferStatus;
    this.expirationTime = expirationTime;
    this.initiatorEmailId = initiatorEmailId;
    this.invoiceSectionId = invoiceSectionId;
    this.lastModifiedTime = lastModifiedTime;
    this.recipientEmailId = recipientEmailId;
  }

  /**
   * Target billing account Id.
   * @return billingAccountId
   */
  @javax.annotation.Nullable
  public String getBillingAccountId() {
    return billingAccountId;
  }



  /**
   * Email Id who user canceled the transfer.
   * @return canceledBy
   */
  @javax.annotation.Nullable
  public String getCanceledBy() {
    return canceledBy;
  }



  /**
   * Transfer creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  /**
   * Detailed transfer status.
   * @return detailedTransferStatus
   */
  @javax.annotation.Nullable
  public List<DetailedTransferStatus> getDetailedTransferStatus() {
    return detailedTransferStatus;
  }



  /**
   * Transfer expiration time.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }



  /**
   * Email Id of initiator of transfer.
   * @return initiatorEmailId
   */
  @javax.annotation.Nullable
  public String getInitiatorEmailId() {
    return initiatorEmailId;
  }



  /**
   * Target invoice section Id.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  /**
   * Transfer last modification time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * Email Id of recipient of transfer.
   * @return recipientEmailId
   */
  @javax.annotation.Nullable
  public String getRecipientEmailId() {
    return recipientEmailId;
  }



  public TransferProperties transferStatus(TransferStatus transferStatus) {
    this.transferStatus = transferStatus;
    return this;
  }

  /**
   * Get transferStatus
   * @return transferStatus
   */
  @javax.annotation.Nullable
  public TransferStatus getTransferStatus() {
    return transferStatus;
  }

  public void setTransferStatus(TransferStatus transferStatus) {
    this.transferStatus = transferStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferProperties transferProperties = (TransferProperties) o;
    return Objects.equals(this.billingAccountId, transferProperties.billingAccountId) &&
        Objects.equals(this.canceledBy, transferProperties.canceledBy) &&
        Objects.equals(this.creationTime, transferProperties.creationTime) &&
        Objects.equals(this.detailedTransferStatus, transferProperties.detailedTransferStatus) &&
        Objects.equals(this.expirationTime, transferProperties.expirationTime) &&
        Objects.equals(this.initiatorEmailId, transferProperties.initiatorEmailId) &&
        Objects.equals(this.invoiceSectionId, transferProperties.invoiceSectionId) &&
        Objects.equals(this.lastModifiedTime, transferProperties.lastModifiedTime) &&
        Objects.equals(this.recipientEmailId, transferProperties.recipientEmailId) &&
        Objects.equals(this.transferStatus, transferProperties.transferStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAccountId, canceledBy, creationTime, detailedTransferStatus, expirationTime, initiatorEmailId, invoiceSectionId, lastModifiedTime, recipientEmailId, transferStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferProperties {\n");
    sb.append("    billingAccountId: ").append(toIndentedString(billingAccountId)).append("\n");
    sb.append("    canceledBy: ").append(toIndentedString(canceledBy)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    detailedTransferStatus: ").append(toIndentedString(detailedTransferStatus)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    initiatorEmailId: ").append(toIndentedString(initiatorEmailId)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    recipientEmailId: ").append(toIndentedString(recipientEmailId)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAccountId");
    openapiFields.add("canceledBy");
    openapiFields.add("creationTime");
    openapiFields.add("detailedTransferStatus");
    openapiFields.add("expirationTime");
    openapiFields.add("initiatorEmailId");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("recipientEmailId");
    openapiFields.add("transferStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferProperties is not found in the empty JSON string", TransferProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingAccountId") != null && !jsonObj.get("billingAccountId").isJsonNull()) && !jsonObj.get("billingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountId").toString()));
      }
      if ((jsonObj.get("canceledBy") != null && !jsonObj.get("canceledBy").isJsonNull()) && !jsonObj.get("canceledBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceledBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceledBy").toString()));
      }
      if (jsonObj.get("detailedTransferStatus") != null && !jsonObj.get("detailedTransferStatus").isJsonNull()) {
        JsonArray jsonArraydetailedTransferStatus = jsonObj.getAsJsonArray("detailedTransferStatus");
        if (jsonArraydetailedTransferStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detailedTransferStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detailedTransferStatus` to be an array in the JSON string but got `%s`", jsonObj.get("detailedTransferStatus").toString()));
          }

          // validate the optional field `detailedTransferStatus` (array)
          for (int i = 0; i < jsonArraydetailedTransferStatus.size(); i++) {
            DetailedTransferStatus.validateJsonElement(jsonArraydetailedTransferStatus.get(i));
          };
        }
      }
      if ((jsonObj.get("initiatorEmailId") != null && !jsonObj.get("initiatorEmailId").isJsonNull()) && !jsonObj.get("initiatorEmailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiatorEmailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiatorEmailId").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      if ((jsonObj.get("recipientEmailId") != null && !jsonObj.get("recipientEmailId").isJsonNull()) && !jsonObj.get("recipientEmailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientEmailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientEmailId").toString()));
      }
      // validate the optional field `transferStatus`
      if (jsonObj.get("transferStatus") != null && !jsonObj.get("transferStatus").isJsonNull()) {
        TransferStatus.validateJsonElement(jsonObj.get("transferStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferProperties>() {
           @Override
           public void write(JsonWriter out, TransferProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferProperties
   * @throws IOException if the JSON string is invalid with respect to TransferProperties
   */
  public static TransferProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferProperties.class);
  }

  /**
   * Convert an instance of TransferProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

