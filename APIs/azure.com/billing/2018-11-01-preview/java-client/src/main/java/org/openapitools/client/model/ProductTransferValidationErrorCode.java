/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Error code of the transfer validation response.
 */
@JsonAdapter(ProductTransferValidationErrorCode.Adapter.class)
public enum ProductTransferValidationErrorCode {
  
  INVALID_SOURCE("InvalidSource"),
  
  PRODUCT_NOT_ACTIVE("ProductNotActive"),
  
  INSUFFICIENT_PERMISSION_ON_SOURCE("InsufficientPermissionOnSource"),
  
  INSUFFICIENT_PERMISSION_ON_DESTINATION("InsufficientPermissionOnDestination"),
  
  DESTINATION_BILLING_PROFILE_PAST_DUE("DestinationBillingProfilePastDue"),
  
  PRODUCT_TYPE_NOT_SUPPORTED("ProductTypeNotSupported"),
  
  CROSS_BILLING_ACCOUNT_NOT_ALLOWED("CrossBillingAccountNotAllowed"),
  
  NOT_AVAILABLE_FOR_DESTINATION_MARKET("NotAvailableForDestinationMarket"),
  
  ONE_TIME_PURCHASE_PRODUCT_TRANSFER_NOT_ALLOWED("OneTimePurchaseProductTransferNotAllowed");

  private String value;

  ProductTransferValidationErrorCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ProductTransferValidationErrorCode fromValue(String value) {
    for (ProductTransferValidationErrorCode b : ProductTransferValidationErrorCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ProductTransferValidationErrorCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ProductTransferValidationErrorCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ProductTransferValidationErrorCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ProductTransferValidationErrorCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ProductTransferValidationErrorCode.fromValue(value);
  }
}

