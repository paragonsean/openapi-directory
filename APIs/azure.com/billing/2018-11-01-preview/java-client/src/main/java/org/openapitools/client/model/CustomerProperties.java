/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnabledAzureSKUs;
import org.openapitools.client.model.Reseller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a customer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:31.075138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerProperties {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED_AZURE_S_K_US = "enabledAzureSKUs";
  @SerializedName(SERIALIZED_NAME_ENABLED_AZURE_S_K_US)
  private List<EnabledAzureSKUs> enabledAzureSKUs = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESELLERS = "resellers";
  @SerializedName(SERIALIZED_NAME_RESELLERS)
  private List<Reseller> resellers = new ArrayList<>();

  public CustomerProperties() {
  }

  public CustomerProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the customer.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CustomerProperties enabledAzureSKUs(List<EnabledAzureSKUs> enabledAzureSKUs) {
    this.enabledAzureSKUs = enabledAzureSKUs;
    return this;
  }

  public CustomerProperties addEnabledAzureSKUsItem(EnabledAzureSKUs enabledAzureSKUsItem) {
    if (this.enabledAzureSKUs == null) {
      this.enabledAzureSKUs = new ArrayList<>();
    }
    this.enabledAzureSKUs.add(enabledAzureSKUsItem);
    return this;
  }

  /**
   * Information about the product.
   * @return enabledAzureSKUs
   */
  @javax.annotation.Nullable
  public List<EnabledAzureSKUs> getEnabledAzureSKUs() {
    return enabledAzureSKUs;
  }

  public void setEnabledAzureSKUs(List<EnabledAzureSKUs> enabledAzureSKUs) {
    this.enabledAzureSKUs = enabledAzureSKUs;
  }


  public CustomerProperties resellers(List<Reseller> resellers) {
    this.resellers = resellers;
    return this;
  }

  public CustomerProperties addResellersItem(Reseller resellersItem) {
    if (this.resellers == null) {
      this.resellers = new ArrayList<>();
    }
    this.resellers.add(resellersItem);
    return this;
  }

  /**
   * The resellers which are allowed to provide service to this customer.
   * @return resellers
   */
  @javax.annotation.Nullable
  public List<Reseller> getResellers() {
    return resellers;
  }

  public void setResellers(List<Reseller> resellers) {
    this.resellers = resellers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerProperties customerProperties = (CustomerProperties) o;
    return Objects.equals(this.displayName, customerProperties.displayName) &&
        Objects.equals(this.enabledAzureSKUs, customerProperties.enabledAzureSKUs) &&
        Objects.equals(this.resellers, customerProperties.resellers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, enabledAzureSKUs, resellers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerProperties {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabledAzureSKUs: ").append(toIndentedString(enabledAzureSKUs)).append("\n");
    sb.append("    resellers: ").append(toIndentedString(resellers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("enabledAzureSKUs");
    openapiFields.add("resellers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerProperties is not found in the empty JSON string", CustomerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("enabledAzureSKUs") != null && !jsonObj.get("enabledAzureSKUs").isJsonNull()) {
        JsonArray jsonArrayenabledAzureSKUs = jsonObj.getAsJsonArray("enabledAzureSKUs");
        if (jsonArrayenabledAzureSKUs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enabledAzureSKUs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enabledAzureSKUs` to be an array in the JSON string but got `%s`", jsonObj.get("enabledAzureSKUs").toString()));
          }

          // validate the optional field `enabledAzureSKUs` (array)
          for (int i = 0; i < jsonArrayenabledAzureSKUs.size(); i++) {
            EnabledAzureSKUs.validateJsonElement(jsonArrayenabledAzureSKUs.get(i));
          };
        }
      }
      if (jsonObj.get("resellers") != null && !jsonObj.get("resellers").isJsonNull()) {
        JsonArray jsonArrayresellers = jsonObj.getAsJsonArray("resellers");
        if (jsonArrayresellers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resellers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resellers` to be an array in the JSON string but got `%s`", jsonObj.get("resellers").toString()));
          }

          // validate the optional field `resellers` (array)
          for (int i = 0; i < jsonArrayresellers.size(); i++) {
            Reseller.validateJsonElement(jsonArrayresellers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerProperties>() {
           @Override
           public void write(JsonWriter out, CustomerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerProperties
   * @throws IOException if the JSON string is invalid with respect to CustomerProperties
   */
  public static CustomerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerProperties.class);
  }

  /**
   * Convert an instance of CustomerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

