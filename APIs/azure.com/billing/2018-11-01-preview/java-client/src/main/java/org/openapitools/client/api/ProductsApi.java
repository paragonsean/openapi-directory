/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ProductSummary;
import org.openapitools.client.model.ProductsListResult;
import org.openapitools.client.model.TransferProductRequestProperties;
import org.openapitools.client.model.UpdateAutoRenewOperationSummary;
import org.openapitools.client.model.UpdateAutoRenewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productsGet
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsGetCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsGetValidateBeforeCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsGet(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling productsGet(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsGet(Async)");
        }

        return productsGetCall(billingAccountName, invoiceSectionName, productName, apiVersion, _callback);

    }

    /**
     * 
     * Get a single product by name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @return ProductSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ProductSummary productsGet(String billingAccountName, String invoiceSectionName, String productName, String apiVersion) throws ApiException {
        ApiResponse<ProductSummary> localVarResp = productsGetWithHttpInfo(billingAccountName, invoiceSectionName, productName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single product by name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @return ApiResponse&lt;ProductSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ApiResponse<ProductSummary> productsGetWithHttpInfo(String billingAccountName, String invoiceSectionName, String productName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = productsGetValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProductSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single product by name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsGetAsync(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, final ApiCallback<ProductSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsGetValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProductSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsListByBillingAccountName
     * @param billingAccountName Billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsListByBillingAccountNameCall(String billingAccountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsListByBillingAccountNameValidateBeforeCall(String billingAccountName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsListByBillingAccountName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsListByBillingAccountName(Async)");
        }

        return productsListByBillingAccountNameCall(billingAccountName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Lists products by billing account name.
     * @param billingAccountName Billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ProductsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ProductsListResult productsListByBillingAccountName(String billingAccountName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<ProductsListResult> localVarResp = productsListByBillingAccountNameWithHttpInfo(billingAccountName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists products by billing account name.
     * @param billingAccountName Billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;ProductsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ApiResponse<ProductsListResult> productsListByBillingAccountNameWithHttpInfo(String billingAccountName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = productsListByBillingAccountNameValidateBeforeCall(billingAccountName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<ProductsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists products by billing account name.
     * @param billingAccountName Billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsListByBillingAccountNameAsync(String billingAccountName, String apiVersion, String $filter, final ApiCallback<ProductsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsListByBillingAccountNameValidateBeforeCall(billingAccountName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<ProductsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsListByInvoiceSectionName
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsListByInvoiceSectionNameCall(String billingAccountName, String invoiceSectionName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsListByInvoiceSectionNameValidateBeforeCall(String billingAccountName, String invoiceSectionName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsListByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling productsListByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsListByInvoiceSectionName(Async)");
        }

        return productsListByInvoiceSectionNameCall(billingAccountName, invoiceSectionName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Lists products by invoice section name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ProductsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ProductsListResult productsListByInvoiceSectionName(String billingAccountName, String invoiceSectionName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<ProductsListResult> localVarResp = productsListByInvoiceSectionNameWithHttpInfo(billingAccountName, invoiceSectionName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists products by invoice section name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;ProductsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ApiResponse<ProductsListResult> productsListByInvoiceSectionNameWithHttpInfo(String billingAccountName, String invoiceSectionName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = productsListByInvoiceSectionNameValidateBeforeCall(billingAccountName, invoiceSectionName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<ProductsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists products by invoice section name.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param $filter May be used to filter by product type. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call productsListByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String apiVersion, String $filter, final ApiCallback<ProductsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsListByInvoiceSectionNameValidateBeforeCall(billingAccountName, invoiceSectionName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<ProductsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsTransfer
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param parameters Parameters supplied to the Transfer Product operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Azure-AsyncOperation - URI to poll for the operation status <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTransferCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, TransferProductRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/transfer"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsTransferValidateBeforeCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, TransferProductRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsTransfer(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling productsTransfer(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsTransfer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsTransfer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling productsTransfer(Async)");
        }

        return productsTransferCall(billingAccountName, invoiceSectionName, productName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * The operation to transfer a Product to another invoice section.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param parameters Parameters supplied to the Transfer Product operation. (required)
     * @return ProductSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Azure-AsyncOperation - URI to poll for the operation status <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductSummary productsTransfer(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, TransferProductRequestProperties parameters) throws ApiException {
        ApiResponse<ProductSummary> localVarResp = productsTransferWithHttpInfo(billingAccountName, invoiceSectionName, productName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to transfer a Product to another invoice section.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param parameters Parameters supplied to the Transfer Product operation. (required)
     * @return ApiResponse&lt;ProductSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Azure-AsyncOperation - URI to poll for the operation status <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSummary> productsTransferWithHttpInfo(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, TransferProductRequestProperties parameters) throws ApiException {
        okhttp3.Call localVarCall = productsTransferValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ProductSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to transfer a Product to another invoice section.
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param parameters Parameters supplied to the Transfer Product operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Azure-AsyncOperation - URI to poll for the operation status <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsTransferAsync(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, TransferProductRequestProperties parameters, final ApiCallback<ProductSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsTransferValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProductSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsUpdateAutoRenewByBillingAccountName
     * @param billingAccountName Billing Account Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUpdateAutoRenewByBillingAccountNameCall(String billingAccountName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/updateAutoRenew"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsUpdateAutoRenewByBillingAccountNameValidateBeforeCall(String billingAccountName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsUpdateAutoRenewByBillingAccountName(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsUpdateAutoRenewByBillingAccountName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsUpdateAutoRenewByBillingAccountName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productsUpdateAutoRenewByBillingAccountName(Async)");
        }

        return productsUpdateAutoRenewByBillingAccountNameCall(billingAccountName, productName, apiVersion, body, _callback);

    }

    /**
     * 
     * Cancel auto renew for product by product id and billing account name
     * @param billingAccountName Billing Account Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @return UpdateAutoRenewOperationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAutoRenewOperationSummary productsUpdateAutoRenewByBillingAccountName(String billingAccountName, String productName, String apiVersion, UpdateAutoRenewRequest body) throws ApiException {
        ApiResponse<UpdateAutoRenewOperationSummary> localVarResp = productsUpdateAutoRenewByBillingAccountNameWithHttpInfo(billingAccountName, productName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel auto renew for product by product id and billing account name
     * @param billingAccountName Billing Account Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @return ApiResponse&lt;UpdateAutoRenewOperationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAutoRenewOperationSummary> productsUpdateAutoRenewByBillingAccountNameWithHttpInfo(String billingAccountName, String productName, String apiVersion, UpdateAutoRenewRequest body) throws ApiException {
        okhttp3.Call localVarCall = productsUpdateAutoRenewByBillingAccountNameValidateBeforeCall(billingAccountName, productName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<UpdateAutoRenewOperationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel auto renew for product by product id and billing account name
     * @param billingAccountName Billing Account Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUpdateAutoRenewByBillingAccountNameAsync(String billingAccountName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback<UpdateAutoRenewOperationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsUpdateAutoRenewByBillingAccountNameValidateBeforeCall(billingAccountName, productName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<UpdateAutoRenewOperationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsUpdateAutoRenewByInvoiceSectionName
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUpdateAutoRenewByInvoiceSectionNameCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/products/{productName}/updateAutoRenew"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsUpdateAutoRenewByInvoiceSectionNameValidateBeforeCall(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsUpdateAutoRenewByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling productsUpdateAutoRenewByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsUpdateAutoRenewByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productsUpdateAutoRenewByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productsUpdateAutoRenewByInvoiceSectionName(Async)");
        }

        return productsUpdateAutoRenewByInvoiceSectionNameCall(billingAccountName, invoiceSectionName, productName, apiVersion, body, _callback);

    }

    /**
     * 
     * Cancel auto renew for product by product id and invoice section name
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @return UpdateAutoRenewOperationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAutoRenewOperationSummary productsUpdateAutoRenewByInvoiceSectionName(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, UpdateAutoRenewRequest body) throws ApiException {
        ApiResponse<UpdateAutoRenewOperationSummary> localVarResp = productsUpdateAutoRenewByInvoiceSectionNameWithHttpInfo(billingAccountName, invoiceSectionName, productName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel auto renew for product by product id and invoice section name
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @return ApiResponse&lt;UpdateAutoRenewOperationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAutoRenewOperationSummary> productsUpdateAutoRenewByInvoiceSectionNameWithHttpInfo(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, UpdateAutoRenewRequest body) throws ApiException {
        okhttp3.Call localVarCall = productsUpdateAutoRenewByInvoiceSectionNameValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<UpdateAutoRenewOperationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel auto renew for product by product id and invoice section name
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param body Update auto renew request parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsUpdateAutoRenewByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String productName, String apiVersion, UpdateAutoRenewRequest body, final ApiCallback<UpdateAutoRenewOperationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsUpdateAutoRenewByInvoiceSectionNameValidateBeforeCall(billingAccountName, invoiceSectionName, productName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<UpdateAutoRenewOperationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
