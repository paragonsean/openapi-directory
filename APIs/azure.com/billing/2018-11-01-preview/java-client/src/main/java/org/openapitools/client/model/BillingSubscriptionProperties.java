/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Reseller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The usage context properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:31.075138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingSubscriptionProperties {
  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_NAME = "billingProfileName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_NAME)
  private String billingProfileName;

  public static final String SERIALIZED_NAME_CUSTOMER_DISPLAY_NAME = "customerDisplayName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DISPLAY_NAME)
  private String customerDisplayName;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_NAME = "invoiceSectionName";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_NAME)
  private String invoiceSectionName;

  public static final String SERIALIZED_NAME_LAST_MONTH_CHARGES = "lastMonthCharges";
  @SerializedName(SERIALIZED_NAME_LAST_MONTH_CHARGES)
  private Amount lastMonthCharges;

  public static final String SERIALIZED_NAME_MONTH_TO_DATE_CHARGES = "monthToDateCharges";
  @SerializedName(SERIALIZED_NAME_MONTH_TO_DATE_CHARGES)
  private Amount monthToDateCharges;

  public static final String SERIALIZED_NAME_RESELLER = "reseller";
  @SerializedName(SERIALIZED_NAME_RESELLER)
  private Reseller reseller;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "skuDescription";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private String skuDescription;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  /**
   * Subscription billing status.
   */
  @JsonAdapter(SubscriptionBillingStatusEnum.Adapter.class)
  public enum SubscriptionBillingStatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    ABANDONED("Abandoned"),
    
    DELETED("Deleted"),
    
    WARNING("Warning");

    private String value;

    SubscriptionBillingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionBillingStatusEnum fromValue(String value) {
      for (SubscriptionBillingStatusEnum b : SubscriptionBillingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionBillingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionBillingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionBillingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionBillingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionBillingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_BILLING_STATUS = "subscriptionBillingStatus";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_BILLING_STATUS)
  private SubscriptionBillingStatusEnum subscriptionBillingStatus;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private UUID subscriptionId;

  public BillingSubscriptionProperties() {
  }

  public BillingSubscriptionProperties(
     String billingProfileId, 
     String billingProfileName, 
     String customerDisplayName, 
     String customerId, 
     String displayName, 
     String invoiceSectionId, 
     String invoiceSectionName, 
     String skuDescription, 
     UUID subscriptionId
  ) {
    this();
    this.billingProfileId = billingProfileId;
    this.billingProfileName = billingProfileName;
    this.customerDisplayName = customerDisplayName;
    this.customerId = customerId;
    this.displayName = displayName;
    this.invoiceSectionId = invoiceSectionId;
    this.invoiceSectionName = invoiceSectionName;
    this.skuDescription = skuDescription;
    this.subscriptionId = subscriptionId;
  }

  /**
   * Billing Profile id to which this product belongs.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * Billing Profile name to which this product belongs.
   * @return billingProfileName
   */
  @javax.annotation.Nullable
  public String getBillingProfileName() {
    return billingProfileName;
  }



  /**
   * Display name of customer to which this product belongs.
   * @return customerDisplayName
   */
  @javax.annotation.Nullable
  public String getCustomerDisplayName() {
    return customerDisplayName;
  }



  /**
   * Customer id to which this product belongs.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }



  /**
   * display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Invoice section id to which this product belongs.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  /**
   * Invoice section name to which this product belongs.
   * @return invoiceSectionName
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionName() {
    return invoiceSectionName;
  }



  public BillingSubscriptionProperties lastMonthCharges(Amount lastMonthCharges) {
    this.lastMonthCharges = lastMonthCharges;
    return this;
  }

  /**
   * Get lastMonthCharges
   * @return lastMonthCharges
   */
  @javax.annotation.Nullable
  public Amount getLastMonthCharges() {
    return lastMonthCharges;
  }

  public void setLastMonthCharges(Amount lastMonthCharges) {
    this.lastMonthCharges = lastMonthCharges;
  }


  public BillingSubscriptionProperties monthToDateCharges(Amount monthToDateCharges) {
    this.monthToDateCharges = monthToDateCharges;
    return this;
  }

  /**
   * Get monthToDateCharges
   * @return monthToDateCharges
   */
  @javax.annotation.Nullable
  public Amount getMonthToDateCharges() {
    return monthToDateCharges;
  }

  public void setMonthToDateCharges(Amount monthToDateCharges) {
    this.monthToDateCharges = monthToDateCharges;
  }


  public BillingSubscriptionProperties reseller(Reseller reseller) {
    this.reseller = reseller;
    return this;
  }

  /**
   * Get reseller
   * @return reseller
   */
  @javax.annotation.Nullable
  public Reseller getReseller() {
    return reseller;
  }

  public void setReseller(Reseller reseller) {
    this.reseller = reseller;
  }


  /**
   * The sku description.
   * @return skuDescription
   */
  @javax.annotation.Nullable
  public String getSkuDescription() {
    return skuDescription;
  }



  public BillingSubscriptionProperties skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * The sku id.
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }


  public BillingSubscriptionProperties subscriptionBillingStatus(SubscriptionBillingStatusEnum subscriptionBillingStatus) {
    this.subscriptionBillingStatus = subscriptionBillingStatus;
    return this;
  }

  /**
   * Subscription billing status.
   * @return subscriptionBillingStatus
   */
  @javax.annotation.Nullable
  public SubscriptionBillingStatusEnum getSubscriptionBillingStatus() {
    return subscriptionBillingStatus;
  }

  public void setSubscriptionBillingStatus(SubscriptionBillingStatusEnum subscriptionBillingStatus) {
    this.subscriptionBillingStatus = subscriptionBillingStatus;
  }


  /**
   * Subscription Id.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public UUID getSubscriptionId() {
    return subscriptionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingSubscriptionProperties billingSubscriptionProperties = (BillingSubscriptionProperties) o;
    return Objects.equals(this.billingProfileId, billingSubscriptionProperties.billingProfileId) &&
        Objects.equals(this.billingProfileName, billingSubscriptionProperties.billingProfileName) &&
        Objects.equals(this.customerDisplayName, billingSubscriptionProperties.customerDisplayName) &&
        Objects.equals(this.customerId, billingSubscriptionProperties.customerId) &&
        Objects.equals(this.displayName, billingSubscriptionProperties.displayName) &&
        Objects.equals(this.invoiceSectionId, billingSubscriptionProperties.invoiceSectionId) &&
        Objects.equals(this.invoiceSectionName, billingSubscriptionProperties.invoiceSectionName) &&
        Objects.equals(this.lastMonthCharges, billingSubscriptionProperties.lastMonthCharges) &&
        Objects.equals(this.monthToDateCharges, billingSubscriptionProperties.monthToDateCharges) &&
        Objects.equals(this.reseller, billingSubscriptionProperties.reseller) &&
        Objects.equals(this.skuDescription, billingSubscriptionProperties.skuDescription) &&
        Objects.equals(this.skuId, billingSubscriptionProperties.skuId) &&
        Objects.equals(this.subscriptionBillingStatus, billingSubscriptionProperties.subscriptionBillingStatus) &&
        Objects.equals(this.subscriptionId, billingSubscriptionProperties.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingProfileId, billingProfileName, customerDisplayName, customerId, displayName, invoiceSectionId, invoiceSectionName, lastMonthCharges, monthToDateCharges, reseller, skuDescription, skuId, subscriptionBillingStatus, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingSubscriptionProperties {\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    billingProfileName: ").append(toIndentedString(billingProfileName)).append("\n");
    sb.append("    customerDisplayName: ").append(toIndentedString(customerDisplayName)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    invoiceSectionName: ").append(toIndentedString(invoiceSectionName)).append("\n");
    sb.append("    lastMonthCharges: ").append(toIndentedString(lastMonthCharges)).append("\n");
    sb.append("    monthToDateCharges: ").append(toIndentedString(monthToDateCharges)).append("\n");
    sb.append("    reseller: ").append(toIndentedString(reseller)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    subscriptionBillingStatus: ").append(toIndentedString(subscriptionBillingStatus)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingProfileId");
    openapiFields.add("billingProfileName");
    openapiFields.add("customerDisplayName");
    openapiFields.add("customerId");
    openapiFields.add("displayName");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("invoiceSectionName");
    openapiFields.add("lastMonthCharges");
    openapiFields.add("monthToDateCharges");
    openapiFields.add("reseller");
    openapiFields.add("skuDescription");
    openapiFields.add("skuId");
    openapiFields.add("subscriptionBillingStatus");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingSubscriptionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingSubscriptionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingSubscriptionProperties is not found in the empty JSON string", BillingSubscriptionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingSubscriptionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingSubscriptionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if ((jsonObj.get("billingProfileName") != null && !jsonObj.get("billingProfileName").isJsonNull()) && !jsonObj.get("billingProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileName").toString()));
      }
      if ((jsonObj.get("customerDisplayName") != null && !jsonObj.get("customerDisplayName").isJsonNull()) && !jsonObj.get("customerDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerDisplayName").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      if ((jsonObj.get("invoiceSectionName") != null && !jsonObj.get("invoiceSectionName").isJsonNull()) && !jsonObj.get("invoiceSectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionName").toString()));
      }
      // validate the optional field `lastMonthCharges`
      if (jsonObj.get("lastMonthCharges") != null && !jsonObj.get("lastMonthCharges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("lastMonthCharges"));
      }
      // validate the optional field `monthToDateCharges`
      if (jsonObj.get("monthToDateCharges") != null && !jsonObj.get("monthToDateCharges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("monthToDateCharges"));
      }
      // validate the optional field `reseller`
      if (jsonObj.get("reseller") != null && !jsonObj.get("reseller").isJsonNull()) {
        Reseller.validateJsonElement(jsonObj.get("reseller"));
      }
      if ((jsonObj.get("skuDescription") != null && !jsonObj.get("skuDescription").isJsonNull()) && !jsonObj.get("skuDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuDescription").toString()));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("subscriptionBillingStatus") != null && !jsonObj.get("subscriptionBillingStatus").isJsonNull()) && !jsonObj.get("subscriptionBillingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionBillingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionBillingStatus").toString()));
      }
      // validate the optional field `subscriptionBillingStatus`
      if (jsonObj.get("subscriptionBillingStatus") != null && !jsonObj.get("subscriptionBillingStatus").isJsonNull()) {
        SubscriptionBillingStatusEnum.validateJsonElement(jsonObj.get("subscriptionBillingStatus"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingSubscriptionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingSubscriptionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingSubscriptionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingSubscriptionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingSubscriptionProperties>() {
           @Override
           public void write(JsonWriter out, BillingSubscriptionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingSubscriptionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingSubscriptionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingSubscriptionProperties
   * @throws IOException if the JSON string is invalid with respect to BillingSubscriptionProperties
   */
  public static BillingSubscriptionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingSubscriptionProperties.class);
  }

  /**
   * Convert an instance of BillingSubscriptionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

