/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the product summary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:31.075138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSummaryProperties {
  public static final String SERIALIZED_NAME_AVAILABILITY_ID = "availabilityId";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ID)
  private String availabilityId;

  /**
   * Billing frequency.
   */
  @JsonAdapter(BillingFrequencyEnum.Adapter.class)
  public enum BillingFrequencyEnum {
    ONE_TIME("OneTime"),
    
    MONTHLY("Monthly"),
    
    USAGE_BASED("UsageBased");

    private String value;

    BillingFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingFrequencyEnum fromValue(String value) {
      for (BillingFrequencyEnum b : BillingFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_FREQUENCY = "billingFrequency";
  @SerializedName(SERIALIZED_NAME_BILLING_FREQUENCY)
  private BillingFrequencyEnum billingFrequency;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_NAME = "billingProfileName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_NAME)
  private String billingProfileName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_NAME = "invoiceSectionName";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_NAME)
  private String invoiceSectionName;

  public static final String SERIALIZED_NAME_LAST_CHARGE = "lastCharge";
  @SerializedName(SERIALIZED_NAME_LAST_CHARGE)
  private Amount lastCharge;

  public static final String SERIALIZED_NAME_LAST_CHARGE_DATE = "lastChargeDate";
  @SerializedName(SERIALIZED_NAME_LAST_CHARGE_DATE)
  private OffsetDateTime lastChargeDate;

  public static final String SERIALIZED_NAME_PARENT_PRODUCT_ID = "parentProductId";
  @SerializedName(SERIALIZED_NAME_PARENT_PRODUCT_ID)
  private String parentProductId;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "productTypeId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private String productTypeId;

  public static final String SERIALIZED_NAME_PURCHASE_DATE = "purchaseDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE)
  private OffsetDateTime purchaseDate;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "skuDescription";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private String skuDescription;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  /**
   * Product status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    PAST_DUE("PastDue"),
    
    EXPIRING("Expiring"),
    
    EXPIRED("Expired"),
    
    DISABLED("Disabled"),
    
    CANCELLED("Cancelled"),
    
    AUTO_RENEW("AutoRenew");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ProductSummaryProperties() {
  }

  public ProductSummaryProperties(
     String availabilityId, 
     String billingProfileId, 
     String billingProfileName, 
     String displayName, 
     OffsetDateTime endDate, 
     String invoiceSectionId, 
     String invoiceSectionName, 
     OffsetDateTime lastChargeDate, 
     String parentProductId, 
     String productType, 
     String productTypeId, 
     OffsetDateTime purchaseDate, 
     BigDecimal quantity, 
     String skuDescription, 
     String skuId
  ) {
    this();
    this.availabilityId = availabilityId;
    this.billingProfileId = billingProfileId;
    this.billingProfileName = billingProfileName;
    this.displayName = displayName;
    this.endDate = endDate;
    this.invoiceSectionId = invoiceSectionId;
    this.invoiceSectionName = invoiceSectionName;
    this.lastChargeDate = lastChargeDate;
    this.parentProductId = parentProductId;
    this.productType = productType;
    this.productTypeId = productTypeId;
    this.purchaseDate = purchaseDate;
    this.quantity = quantity;
    this.skuDescription = skuDescription;
    this.skuId = skuId;
  }

  /**
   * Availability Id.
   * @return availabilityId
   */
  @javax.annotation.Nullable
  public String getAvailabilityId() {
    return availabilityId;
  }



  public ProductSummaryProperties billingFrequency(BillingFrequencyEnum billingFrequency) {
    this.billingFrequency = billingFrequency;
    return this;
  }

  /**
   * Billing frequency.
   * @return billingFrequency
   */
  @javax.annotation.Nullable
  public BillingFrequencyEnum getBillingFrequency() {
    return billingFrequency;
  }

  public void setBillingFrequency(BillingFrequencyEnum billingFrequency) {
    this.billingFrequency = billingFrequency;
  }


  /**
   * Billing Profile id to which this product belongs.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * Billing Profile name to which this product belongs.
   * @return billingProfileName
   */
  @javax.annotation.Nullable
  public String getBillingProfileName() {
    return billingProfileName;
  }



  /**
   * The display name of the product.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * end date.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }



  /**
   * Invoice section id to which this product belongs.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  /**
   * Invoice section name to which this product belongs.
   * @return invoiceSectionName
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionName() {
    return invoiceSectionName;
  }



  public ProductSummaryProperties lastCharge(Amount lastCharge) {
    this.lastCharge = lastCharge;
    return this;
  }

  /**
   * Get lastCharge
   * @return lastCharge
   */
  @javax.annotation.Nullable
  public Amount getLastCharge() {
    return lastCharge;
  }

  public void setLastCharge(Amount lastCharge) {
    this.lastCharge = lastCharge;
  }


  /**
   * The date of the last charge.
   * @return lastChargeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastChargeDate() {
    return lastChargeDate;
  }



  /**
   * Parent Product Id.
   * @return parentProductId
   */
  @javax.annotation.Nullable
  public String getParentProductId() {
    return parentProductId;
  }



  /**
   * The type of product.
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }



  /**
   * The product type id.
   * @return productTypeId
   */
  @javax.annotation.Nullable
  public String getProductTypeId() {
    return productTypeId;
  }



  /**
   * The date of purchase.
   * @return purchaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPurchaseDate() {
    return purchaseDate;
  }



  /**
   * The purchased product quantity.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }



  /**
   * Sku description.
   * @return skuDescription
   */
  @javax.annotation.Nullable
  public String getSkuDescription() {
    return skuDescription;
  }



  /**
   * Sku Id.
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }



  public ProductSummaryProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Product status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSummaryProperties productSummaryProperties = (ProductSummaryProperties) o;
    return Objects.equals(this.availabilityId, productSummaryProperties.availabilityId) &&
        Objects.equals(this.billingFrequency, productSummaryProperties.billingFrequency) &&
        Objects.equals(this.billingProfileId, productSummaryProperties.billingProfileId) &&
        Objects.equals(this.billingProfileName, productSummaryProperties.billingProfileName) &&
        Objects.equals(this.displayName, productSummaryProperties.displayName) &&
        Objects.equals(this.endDate, productSummaryProperties.endDate) &&
        Objects.equals(this.invoiceSectionId, productSummaryProperties.invoiceSectionId) &&
        Objects.equals(this.invoiceSectionName, productSummaryProperties.invoiceSectionName) &&
        Objects.equals(this.lastCharge, productSummaryProperties.lastCharge) &&
        Objects.equals(this.lastChargeDate, productSummaryProperties.lastChargeDate) &&
        Objects.equals(this.parentProductId, productSummaryProperties.parentProductId) &&
        Objects.equals(this.productType, productSummaryProperties.productType) &&
        Objects.equals(this.productTypeId, productSummaryProperties.productTypeId) &&
        Objects.equals(this.purchaseDate, productSummaryProperties.purchaseDate) &&
        Objects.equals(this.quantity, productSummaryProperties.quantity) &&
        Objects.equals(this.skuDescription, productSummaryProperties.skuDescription) &&
        Objects.equals(this.skuId, productSummaryProperties.skuId) &&
        Objects.equals(this.status, productSummaryProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityId, billingFrequency, billingProfileId, billingProfileName, displayName, endDate, invoiceSectionId, invoiceSectionName, lastCharge, lastChargeDate, parentProductId, productType, productTypeId, purchaseDate, quantity, skuDescription, skuId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSummaryProperties {\n");
    sb.append("    availabilityId: ").append(toIndentedString(availabilityId)).append("\n");
    sb.append("    billingFrequency: ").append(toIndentedString(billingFrequency)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    billingProfileName: ").append(toIndentedString(billingProfileName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    invoiceSectionName: ").append(toIndentedString(invoiceSectionName)).append("\n");
    sb.append("    lastCharge: ").append(toIndentedString(lastCharge)).append("\n");
    sb.append("    lastChargeDate: ").append(toIndentedString(lastChargeDate)).append("\n");
    sb.append("    parentProductId: ").append(toIndentedString(parentProductId)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    purchaseDate: ").append(toIndentedString(purchaseDate)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityId");
    openapiFields.add("billingFrequency");
    openapiFields.add("billingProfileId");
    openapiFields.add("billingProfileName");
    openapiFields.add("displayName");
    openapiFields.add("endDate");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("invoiceSectionName");
    openapiFields.add("lastCharge");
    openapiFields.add("lastChargeDate");
    openapiFields.add("parentProductId");
    openapiFields.add("productType");
    openapiFields.add("productTypeId");
    openapiFields.add("purchaseDate");
    openapiFields.add("quantity");
    openapiFields.add("skuDescription");
    openapiFields.add("skuId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSummaryProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSummaryProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSummaryProperties is not found in the empty JSON string", ProductSummaryProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSummaryProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSummaryProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityId") != null && !jsonObj.get("availabilityId").isJsonNull()) && !jsonObj.get("availabilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityId").toString()));
      }
      if ((jsonObj.get("billingFrequency") != null && !jsonObj.get("billingFrequency").isJsonNull()) && !jsonObj.get("billingFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingFrequency").toString()));
      }
      // validate the optional field `billingFrequency`
      if (jsonObj.get("billingFrequency") != null && !jsonObj.get("billingFrequency").isJsonNull()) {
        BillingFrequencyEnum.validateJsonElement(jsonObj.get("billingFrequency"));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if ((jsonObj.get("billingProfileName") != null && !jsonObj.get("billingProfileName").isJsonNull()) && !jsonObj.get("billingProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      if ((jsonObj.get("invoiceSectionName") != null && !jsonObj.get("invoiceSectionName").isJsonNull()) && !jsonObj.get("invoiceSectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionName").toString()));
      }
      // validate the optional field `lastCharge`
      if (jsonObj.get("lastCharge") != null && !jsonObj.get("lastCharge").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("lastCharge"));
      }
      if ((jsonObj.get("parentProductId") != null && !jsonObj.get("parentProductId").isJsonNull()) && !jsonObj.get("parentProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentProductId").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      if ((jsonObj.get("productTypeId") != null && !jsonObj.get("productTypeId").isJsonNull()) && !jsonObj.get("productTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeId").toString()));
      }
      if ((jsonObj.get("skuDescription") != null && !jsonObj.get("skuDescription").isJsonNull()) && !jsonObj.get("skuDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuDescription").toString()));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSummaryProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSummaryProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSummaryProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSummaryProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSummaryProperties>() {
           @Override
           public void write(JsonWriter out, ProductSummaryProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSummaryProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSummaryProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSummaryProperties
   * @throws IOException if the JSON string is invalid with respect to ProductSummaryProperties
   */
  public static ProductSummaryProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSummaryProperties.class);
  }

  /**
   * Convert an instance of ProductSummaryProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

