/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillingRoleAssignment;
import org.openapitools.client.model.BillingRoleAssignmentListResult;
import org.openapitools.client.model.BillingRoleAssignmentPayload;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingRoleAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingRoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingRoleAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billingRoleAssignmentsAddByBillingAccountName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingAccountNameCall(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByBillingAccountNameValidateBeforeCall(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByBillingAccountName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByBillingAccountName(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByBillingAccountName(Async)");
        }

        return billingRoleAssignmentsAddByBillingAccountNameCall(apiVersion, billingAccountName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByBillingAccountName(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByBillingAccountNameWithHttpInfo(apiVersion, billingAccountName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByBillingAccountNameWithHttpInfo(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingAccountNameAsync(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsAddByBillingProfileName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingProfileNameCall(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByBillingProfileNameValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsAddByBillingProfileName(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByBillingProfileName(Async)");
        }

        return billingRoleAssignmentsAddByBillingProfileNameCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByBillingProfileName(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByBillingProfileNameWithHttpInfo(apiVersion, billingAccountName, billingProfileName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByBillingProfileNameWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingProfileNameAsync(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsAddByInvoiceSectionName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionNameCall(String apiVersion, String billingAccountName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionNameValidateBeforeCall(String apiVersion, String billingAccountName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsAddByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByInvoiceSectionName(Async)");
        }

        return billingRoleAssignmentsAddByInvoiceSectionNameCall(apiVersion, billingAccountName, invoiceSectionName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByInvoiceSectionName(String apiVersion, String billingAccountName, String invoiceSectionName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByInvoiceSectionNameWithHttpInfo(apiVersion, billingAccountName, invoiceSectionName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByInvoiceSectionNameWithHttpInfo(String apiVersion, String billingAccountName, String invoiceSectionName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionNameAsync(String apiVersion, String billingAccountName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByBillingAccountName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountNameCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountNameValidateBeforeCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByBillingAccountName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByBillingAccountName(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByBillingAccountName(Async)");
        }

        return billingRoleAssignmentsDeleteByBillingAccountNameCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByBillingAccountName(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByBillingAccountNameWithHttpInfo(apiVersion, billingAccountName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByBillingAccountNameWithHttpInfo(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountNameAsync(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByBillingProfileName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileNameCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileNameValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsDeleteByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByBillingProfileName(Async)");
        }

        return billingRoleAssignmentsDeleteByBillingProfileNameCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByBillingProfileName(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByBillingProfileNameWithHttpInfo(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByBillingProfileNameWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileNameAsync(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByInvoiceSectionName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionNameCall(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionNameValidateBeforeCall(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsDeleteByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByInvoiceSectionName(Async)");
        }

        return billingRoleAssignmentsDeleteByInvoiceSectionNameCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByInvoiceSectionName(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByInvoiceSectionNameWithHttpInfo(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByInvoiceSectionNameWithHttpInfo(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionNameAsync(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByBillingAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingAccountCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        return billingRoleAssignmentsGetByBillingAccountCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByBillingAccount(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByBillingAccountWithHttpInfo(apiVersion, billingAccountName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByBillingAccountWithHttpInfo(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingAccountAsync(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByBillingProfileName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingProfileNameCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByBillingProfileNameValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsGetByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByBillingProfileName(Async)");
        }

        return billingRoleAssignmentsGetByBillingProfileNameCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByBillingProfileName(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByBillingProfileNameWithHttpInfo(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByBillingProfileNameWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingProfileNameAsync(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByInvoiceSectionName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionNameCall(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionNameValidateBeforeCall(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsGetByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByInvoiceSectionName(Async)");
        }

        return billingRoleAssignmentsGetByInvoiceSectionNameCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByInvoiceSectionName(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByInvoiceSectionNameWithHttpInfo(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByInvoiceSectionNameWithHttpInfo(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionNameAsync(String apiVersion, String billingAccountName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByBillingAccountName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingAccountNameCall(String apiVersion, String billingAccountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByBillingAccountNameValidateBeforeCall(String apiVersion, String billingAccountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByBillingAccountName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByBillingAccountName(Async)");
        }

        return billingRoleAssignmentsListByBillingAccountNameCall(apiVersion, billingAccountName, _callback);

    }

    /**
     * 
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByBillingAccountName(String apiVersion, String billingAccountName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByBillingAccountNameWithHttpInfo(apiVersion, billingAccountName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByBillingAccountNameWithHttpInfo(String apiVersion, String billingAccountName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingAccountNameAsync(String apiVersion, String billingAccountName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingAccountNameValidateBeforeCall(apiVersion, billingAccountName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByBillingProfileName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingProfileNameCall(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByBillingProfileNameValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByBillingProfileName(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsListByBillingProfileName(Async)");
        }

        return billingRoleAssignmentsListByBillingProfileNameCall(apiVersion, billingAccountName, billingProfileName, _callback);

    }

    /**
     * 
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByBillingProfileName(String apiVersion, String billingAccountName, String billingProfileName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByBillingProfileNameWithHttpInfo(apiVersion, billingAccountName, billingProfileName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByBillingProfileNameWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingProfileNameAsync(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingProfileNameValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByInvoiceSectionName
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByInvoiceSectionNameCall(String apiVersion, String billingAccountName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByInvoiceSectionNameValidateBeforeCall(String apiVersion, String billingAccountName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByInvoiceSectionName(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsListByInvoiceSectionName(Async)");
        }

        return billingRoleAssignmentsListByInvoiceSectionNameCall(apiVersion, billingAccountName, invoiceSectionName, _callback);

    }

    /**
     * 
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByInvoiceSectionName(String apiVersion, String billingAccountName, String invoiceSectionName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByInvoiceSectionNameWithHttpInfo(apiVersion, billingAccountName, invoiceSectionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByInvoiceSectionNameWithHttpInfo(String apiVersion, String billingAccountName, String invoiceSectionName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2018-11-01-preview. (required)
     * @param billingAccountName Billing Account Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByInvoiceSectionNameAsync(String apiVersion, String billingAccountName, String invoiceSectionName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByInvoiceSectionNameValidateBeforeCall(apiVersion, billingAccountName, invoiceSectionName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
