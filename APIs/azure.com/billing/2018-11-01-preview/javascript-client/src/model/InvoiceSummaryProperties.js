/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import DownloadProperties from './DownloadProperties';
import PaymentProperties from './PaymentProperties';

/**
 * The InvoiceSummaryProperties model module.
 * @module model/InvoiceSummaryProperties
 * @version 2018-11-01-preview
 */
class InvoiceSummaryProperties {
    /**
     * Constructs a new <code>InvoiceSummaryProperties</code>.
     * The properties of the invoice.
     * @alias module:model/InvoiceSummaryProperties
     */
    constructor() { 
        
        InvoiceSummaryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvoiceSummaryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceSummaryProperties} obj Optional instance to populate.
     * @return {module:model/InvoiceSummaryProperties} The populated <code>InvoiceSummaryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceSummaryProperties();

            if (data.hasOwnProperty('amountDue')) {
                obj['amountDue'] = Amount.constructFromObject(data['amountDue']);
            }
            if (data.hasOwnProperty('billedAmount')) {
                obj['billedAmount'] = Amount.constructFromObject(data['billedAmount']);
            }
            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('billingProfileName')) {
                obj['billingProfileName'] = ApiClient.convertToType(data['billingProfileName'], 'String');
            }
            if (data.hasOwnProperty('documentUrls')) {
                obj['documentUrls'] = ApiClient.convertToType(data['documentUrls'], [DownloadProperties]);
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('invoiceDate')) {
                obj['invoiceDate'] = ApiClient.convertToType(data['invoiceDate'], 'Date');
            }
            if (data.hasOwnProperty('invoicePeriodEndDate')) {
                obj['invoicePeriodEndDate'] = ApiClient.convertToType(data['invoicePeriodEndDate'], 'Date');
            }
            if (data.hasOwnProperty('invoicePeriodStartDate')) {
                obj['invoicePeriodStartDate'] = ApiClient.convertToType(data['invoicePeriodStartDate'], 'Date');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [PaymentProperties]);
            }
            if (data.hasOwnProperty('purchaseOrderNumber')) {
                obj['purchaseOrderNumber'] = ApiClient.convertToType(data['purchaseOrderNumber'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceSummaryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceSummaryProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amountDue`
        if (data['amountDue']) { // data not null
          Amount.validateJSON(data['amountDue']);
        }
        // validate the optional field `billedAmount`
        if (data['billedAmount']) { // data not null
          Amount.validateJSON(data['billedAmount']);
        }
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['billingProfileName'] && !(typeof data['billingProfileName'] === 'string' || data['billingProfileName'] instanceof String)) {
            throw new Error("Expected the field `billingProfileName` to be a primitive type in the JSON string but got " + data['billingProfileName']);
        }
        if (data['documentUrls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documentUrls'])) {
                throw new Error("Expected the field `documentUrls` to be an array in the JSON data but got " + data['documentUrls']);
            }
            // validate the optional field `documentUrls` (array)
            for (const item of data['documentUrls']) {
                DownloadProperties.validateJSON(item);
            };
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                PaymentProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['purchaseOrderNumber'] && !(typeof data['purchaseOrderNumber'] === 'string' || data['purchaseOrderNumber'] instanceof String)) {
            throw new Error("Expected the field `purchaseOrderNumber` to be a primitive type in the JSON string but got " + data['purchaseOrderNumber']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} amountDue
 */
InvoiceSummaryProperties.prototype['amountDue'] = undefined;

/**
 * @member {module:model/Amount} billedAmount
 */
InvoiceSummaryProperties.prototype['billedAmount'] = undefined;

/**
 * The billing profile id this invoice belongs to.
 * @member {String} billingProfileId
 */
InvoiceSummaryProperties.prototype['billingProfileId'] = undefined;

/**
 * The profile name this invoice belongs to.
 * @member {String} billingProfileName
 */
InvoiceSummaryProperties.prototype['billingProfileName'] = undefined;

/**
 * List of document urls available to download including invoice and tax documents.
 * @member {Array.<module:model/DownloadProperties>} documentUrls
 */
InvoiceSummaryProperties.prototype['documentUrls'] = undefined;

/**
 * The due date for invoice.
 * @member {Date} dueDate
 */
InvoiceSummaryProperties.prototype['dueDate'] = undefined;

/**
 * The date when invoice was created.
 * @member {Date} invoiceDate
 */
InvoiceSummaryProperties.prototype['invoiceDate'] = undefined;

/**
 * The end date of the billing period.
 * @member {Date} invoicePeriodEndDate
 */
InvoiceSummaryProperties.prototype['invoicePeriodEndDate'] = undefined;

/**
 * The start date of the billing period.
 * @member {Date} invoicePeriodStartDate
 */
InvoiceSummaryProperties.prototype['invoicePeriodStartDate'] = undefined;

/**
 * List of payments.
 * @member {Array.<module:model/PaymentProperties>} payments
 */
InvoiceSummaryProperties.prototype['payments'] = undefined;

/**
 * The purchase identifier for the invoice.
 * @member {String} purchaseOrderNumber
 */
InvoiceSummaryProperties.prototype['purchaseOrderNumber'] = undefined;

/**
 * Invoice status.
 * @member {module:model/InvoiceSummaryProperties.StatusEnum} status
 */
InvoiceSummaryProperties.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
InvoiceSummaryProperties['StatusEnum'] = {

    /**
     * value: "PastDue"
     * @const
     */
    "PastDue": "PastDue",

    /**
     * value: "Due"
     * @const
     */
    "Due": "Due",

    /**
     * value: "Paid"
     * @const
     */
    "Paid": "Paid",

    /**
     * value: "Void"
     * @const
     */
    "Void": "Void"
};



export default InvoiceSummaryProperties;

