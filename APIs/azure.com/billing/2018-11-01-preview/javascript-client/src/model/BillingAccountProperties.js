/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BillingProfile from './BillingProfile';
import Department from './Department';
import Enrollment from './Enrollment';
import EnrollmentAccount from './EnrollmentAccount';
import InvoiceSection from './InvoiceSection';

/**
 * The BillingAccountProperties model module.
 * @module model/BillingAccountProperties
 * @version 2018-11-01-preview
 */
class BillingAccountProperties {
    /**
     * Constructs a new <code>BillingAccountProperties</code>.
     * The properties of the billing account.
     * @alias module:model/BillingAccountProperties
     */
    constructor() { 
        
        BillingAccountProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BillingAccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillingAccountProperties} obj Optional instance to populate.
     * @return {module:model/BillingAccountProperties} The populated <code>BillingAccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillingAccountProperties();

            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('billingProfiles')) {
                obj['billingProfiles'] = ApiClient.convertToType(data['billingProfiles'], [BillingProfile]);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('departments')) {
                obj['departments'] = ApiClient.convertToType(data['departments'], [Department]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enrollmentAccounts')) {
                obj['enrollmentAccounts'] = ApiClient.convertToType(data['enrollmentAccounts'], [EnrollmentAccount]);
            }
            if (data.hasOwnProperty('enrollmentDetails')) {
                obj['enrollmentDetails'] = Enrollment.constructFromObject(data['enrollmentDetails']);
            }
            if (data.hasOwnProperty('hasReadAccess')) {
                obj['hasReadAccess'] = ApiClient.convertToType(data['hasReadAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('invoiceSections')) {
                obj['invoiceSections'] = ApiClient.convertToType(data['invoiceSections'], [InvoiceSection]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillingAccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillingAccountProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        if (data['billingProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['billingProfiles'])) {
                throw new Error("Expected the field `billingProfiles` to be an array in the JSON data but got " + data['billingProfiles']);
            }
            // validate the optional field `billingProfiles` (array)
            for (const item of data['billingProfiles']) {
                BillingProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        if (data['departments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['departments'])) {
                throw new Error("Expected the field `departments` to be an array in the JSON data but got " + data['departments']);
            }
            // validate the optional field `departments` (array)
            for (const item of data['departments']) {
                Department.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['enrollmentAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enrollmentAccounts'])) {
                throw new Error("Expected the field `enrollmentAccounts` to be an array in the JSON data but got " + data['enrollmentAccounts']);
            }
            // validate the optional field `enrollmentAccounts` (array)
            for (const item of data['enrollmentAccounts']) {
                EnrollmentAccount.validateJSON(item);
            };
        }
        // validate the optional field `enrollmentDetails`
        if (data['enrollmentDetails']) { // data not null
          Enrollment.validateJSON(data['enrollmentDetails']);
        }
        if (data['invoiceSections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoiceSections'])) {
                throw new Error("Expected the field `invoiceSections` to be an array in the JSON data but got " + data['invoiceSections']);
            }
            // validate the optional field `invoiceSections` (array)
            for (const item of data['invoiceSections']) {
                InvoiceSection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The billing account Type.
 * @member {module:model/BillingAccountProperties.AccountTypeEnum} accountType
 */
BillingAccountProperties.prototype['accountType'] = undefined;

/**
 * @member {module:model/Address} address
 */
BillingAccountProperties.prototype['address'] = undefined;

/**
 * The billing profiles associated to the billing account. By default this is not populated, unless it's specified in $expand.
 * @member {Array.<module:model/BillingProfile>} billingProfiles
 */
BillingAccountProperties.prototype['billingProfiles'] = undefined;

/**
 * Company Name.
 * @member {String} company
 */
BillingAccountProperties.prototype['company'] = undefined;

/**
 * Country Name.
 * @member {String} country
 */
BillingAccountProperties.prototype['country'] = undefined;

/**
 * The departments associated to the enrollment.
 * @member {Array.<module:model/Department>} departments
 */
BillingAccountProperties.prototype['departments'] = undefined;

/**
 * The billing account name.
 * @member {String} displayName
 */
BillingAccountProperties.prototype['displayName'] = undefined;

/**
 * The accounts associated to the enrollment.
 * @member {Array.<module:model/EnrollmentAccount>} enrollmentAccounts
 */
BillingAccountProperties.prototype['enrollmentAccounts'] = undefined;

/**
 * @member {module:model/Enrollment} enrollmentDetails
 */
BillingAccountProperties.prototype['enrollmentDetails'] = undefined;

/**
 * Specifies whether the user has read access on billing account.
 * @member {Boolean} hasReadAccess
 */
BillingAccountProperties.prototype['hasReadAccess'] = undefined;

/**
 * The invoice sections associated to the billing account. By default this is not populated, unless it's specified in $expand.
 * @member {Array.<module:model/InvoiceSection>} invoiceSections
 */
BillingAccountProperties.prototype['invoiceSections'] = undefined;





/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
BillingAccountProperties['AccountTypeEnum'] = {

    /**
     * value: "Organization"
     * @const
     */
    "Organization": "Organization",

    /**
     * value: "Enrollment"
     * @const
     */
    "Enrollment": "Enrollment"
};



export default BillingAccountProperties;

