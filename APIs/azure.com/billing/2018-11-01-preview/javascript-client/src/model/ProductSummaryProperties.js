/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The ProductSummaryProperties model module.
 * @module model/ProductSummaryProperties
 * @version 2018-11-01-preview
 */
class ProductSummaryProperties {
    /**
     * Constructs a new <code>ProductSummaryProperties</code>.
     * The properties of the product summary.
     * @alias module:model/ProductSummaryProperties
     */
    constructor() { 
        
        ProductSummaryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductSummaryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSummaryProperties} obj Optional instance to populate.
     * @return {module:model/ProductSummaryProperties} The populated <code>ProductSummaryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSummaryProperties();

            if (data.hasOwnProperty('availabilityId')) {
                obj['availabilityId'] = ApiClient.convertToType(data['availabilityId'], 'String');
            }
            if (data.hasOwnProperty('billingFrequency')) {
                obj['billingFrequency'] = ApiClient.convertToType(data['billingFrequency'], 'String');
            }
            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('billingProfileName')) {
                obj['billingProfileName'] = ApiClient.convertToType(data['billingProfileName'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('invoiceSectionId')) {
                obj['invoiceSectionId'] = ApiClient.convertToType(data['invoiceSectionId'], 'String');
            }
            if (data.hasOwnProperty('invoiceSectionName')) {
                obj['invoiceSectionName'] = ApiClient.convertToType(data['invoiceSectionName'], 'String');
            }
            if (data.hasOwnProperty('lastCharge')) {
                obj['lastCharge'] = Amount.constructFromObject(data['lastCharge']);
            }
            if (data.hasOwnProperty('lastChargeDate')) {
                obj['lastChargeDate'] = ApiClient.convertToType(data['lastChargeDate'], 'Date');
            }
            if (data.hasOwnProperty('parentProductId')) {
                obj['parentProductId'] = ApiClient.convertToType(data['parentProductId'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('productTypeId')) {
                obj['productTypeId'] = ApiClient.convertToType(data['productTypeId'], 'String');
            }
            if (data.hasOwnProperty('purchaseDate')) {
                obj['purchaseDate'] = ApiClient.convertToType(data['purchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('skuDescription')) {
                obj['skuDescription'] = ApiClient.convertToType(data['skuDescription'], 'String');
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSummaryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSummaryProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availabilityId'] && !(typeof data['availabilityId'] === 'string' || data['availabilityId'] instanceof String)) {
            throw new Error("Expected the field `availabilityId` to be a primitive type in the JSON string but got " + data['availabilityId']);
        }
        // ensure the json data is a string
        if (data['billingFrequency'] && !(typeof data['billingFrequency'] === 'string' || data['billingFrequency'] instanceof String)) {
            throw new Error("Expected the field `billingFrequency` to be a primitive type in the JSON string but got " + data['billingFrequency']);
        }
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['billingProfileName'] && !(typeof data['billingProfileName'] === 'string' || data['billingProfileName'] instanceof String)) {
            throw new Error("Expected the field `billingProfileName` to be a primitive type in the JSON string but got " + data['billingProfileName']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionId'] && !(typeof data['invoiceSectionId'] === 'string' || data['invoiceSectionId'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got " + data['invoiceSectionId']);
        }
        // ensure the json data is a string
        if (data['invoiceSectionName'] && !(typeof data['invoiceSectionName'] === 'string' || data['invoiceSectionName'] instanceof String)) {
            throw new Error("Expected the field `invoiceSectionName` to be a primitive type in the JSON string but got " + data['invoiceSectionName']);
        }
        // validate the optional field `lastCharge`
        if (data['lastCharge']) { // data not null
          Amount.validateJSON(data['lastCharge']);
        }
        // ensure the json data is a string
        if (data['parentProductId'] && !(typeof data['parentProductId'] === 'string' || data['parentProductId'] instanceof String)) {
            throw new Error("Expected the field `parentProductId` to be a primitive type in the JSON string but got " + data['parentProductId']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is a string
        if (data['productTypeId'] && !(typeof data['productTypeId'] === 'string' || data['productTypeId'] instanceof String)) {
            throw new Error("Expected the field `productTypeId` to be a primitive type in the JSON string but got " + data['productTypeId']);
        }
        // ensure the json data is a string
        if (data['skuDescription'] && !(typeof data['skuDescription'] === 'string' || data['skuDescription'] instanceof String)) {
            throw new Error("Expected the field `skuDescription` to be a primitive type in the JSON string but got " + data['skuDescription']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Availability Id.
 * @member {String} availabilityId
 */
ProductSummaryProperties.prototype['availabilityId'] = undefined;

/**
 * Billing frequency.
 * @member {module:model/ProductSummaryProperties.BillingFrequencyEnum} billingFrequency
 */
ProductSummaryProperties.prototype['billingFrequency'] = undefined;

/**
 * Billing Profile id to which this product belongs.
 * @member {String} billingProfileId
 */
ProductSummaryProperties.prototype['billingProfileId'] = undefined;

/**
 * Billing Profile name to which this product belongs.
 * @member {String} billingProfileName
 */
ProductSummaryProperties.prototype['billingProfileName'] = undefined;

/**
 * The display name of the product.
 * @member {String} displayName
 */
ProductSummaryProperties.prototype['displayName'] = undefined;

/**
 * end date.
 * @member {Date} endDate
 */
ProductSummaryProperties.prototype['endDate'] = undefined;

/**
 * Invoice section id to which this product belongs.
 * @member {String} invoiceSectionId
 */
ProductSummaryProperties.prototype['invoiceSectionId'] = undefined;

/**
 * Invoice section name to which this product belongs.
 * @member {String} invoiceSectionName
 */
ProductSummaryProperties.prototype['invoiceSectionName'] = undefined;

/**
 * @member {module:model/Amount} lastCharge
 */
ProductSummaryProperties.prototype['lastCharge'] = undefined;

/**
 * The date of the last charge.
 * @member {Date} lastChargeDate
 */
ProductSummaryProperties.prototype['lastChargeDate'] = undefined;

/**
 * Parent Product Id.
 * @member {String} parentProductId
 */
ProductSummaryProperties.prototype['parentProductId'] = undefined;

/**
 * The type of product.
 * @member {String} productType
 */
ProductSummaryProperties.prototype['productType'] = undefined;

/**
 * The product type id.
 * @member {String} productTypeId
 */
ProductSummaryProperties.prototype['productTypeId'] = undefined;

/**
 * The date of purchase.
 * @member {Date} purchaseDate
 */
ProductSummaryProperties.prototype['purchaseDate'] = undefined;

/**
 * The purchased product quantity.
 * @member {Number} quantity
 */
ProductSummaryProperties.prototype['quantity'] = undefined;

/**
 * Sku description.
 * @member {String} skuDescription
 */
ProductSummaryProperties.prototype['skuDescription'] = undefined;

/**
 * Sku Id.
 * @member {String} skuId
 */
ProductSummaryProperties.prototype['skuId'] = undefined;

/**
 * Product status.
 * @member {module:model/ProductSummaryProperties.StatusEnum} status
 */
ProductSummaryProperties.prototype['status'] = undefined;





/**
 * Allowed values for the <code>billingFrequency</code> property.
 * @enum {String}
 * @readonly
 */
ProductSummaryProperties['BillingFrequencyEnum'] = {

    /**
     * value: "OneTime"
     * @const
     */
    "OneTime": "OneTime",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "UsageBased"
     * @const
     */
    "UsageBased": "UsageBased"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ProductSummaryProperties['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "PastDue"
     * @const
     */
    "PastDue": "PastDue",

    /**
     * value: "Expiring"
     * @const
     */
    "Expiring": "Expiring",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "AutoRenew"
     * @const
     */
    "AutoRenew": "AutoRenew"
};



export default ProductSummaryProperties;

