# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentMethodProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, details: str=None, expiration: datetime=None, payment_method_type: str=None):
        """PaymentMethodProperties - a model defined in OpenAPI

        :param currency: The currency of this PaymentMethodProperties.
        :param details: The details of this PaymentMethodProperties.
        :param expiration: The expiration of this PaymentMethodProperties.
        :param payment_method_type: The payment_method_type of this PaymentMethodProperties.
        """
        self.openapi_types = {
            'currency': str,
            'details': str,
            'expiration': datetime,
            'payment_method_type': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'details': 'details',
            'expiration': 'expiration',
            'payment_method_type': 'paymentMethodType'
        }

        self._currency = currency
        self._details = details
        self._expiration = expiration
        self._payment_method_type = payment_method_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodProperties of this PaymentMethodProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this PaymentMethodProperties.

        The currency associated with the payment method.

        :return: The currency of this PaymentMethodProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentMethodProperties.

        The currency associated with the payment method.

        :param currency: The currency of this PaymentMethodProperties.
        :type currency: str
        """

        self._currency = currency

    @property
    def details(self):
        """Gets the details of this PaymentMethodProperties.

        Details about the payment method.

        :return: The details of this PaymentMethodProperties.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PaymentMethodProperties.

        Details about the payment method.

        :param details: The details of this PaymentMethodProperties.
        :type details: str
        """

        self._details = details

    @property
    def expiration(self):
        """Gets the expiration of this PaymentMethodProperties.

        Expiration date.

        :return: The expiration of this PaymentMethodProperties.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PaymentMethodProperties.

        Expiration date.

        :param expiration: The expiration of this PaymentMethodProperties.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentMethodProperties.

        Payment method type.

        :return: The payment_method_type of this PaymentMethodProperties.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentMethodProperties.

        Payment method type.

        :param payment_method_type: The payment_method_type of this PaymentMethodProperties.
        :type payment_method_type: str
        """
        allowed_values = ["Credits", "ChequeWire"]  # noqa: E501
        if payment_method_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method_type` ({0}), must be one of {1}"
                .format(payment_method_type, allowed_values)
            )

        self._payment_method_type = payment_method_type
