/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Participants from './Participants';

/**
 * The AgreementProperties model module.
 * @module model/AgreementProperties
 * @version 2019-10-01-preview
 */
class AgreementProperties {
    /**
     * Constructs a new <code>AgreementProperties</code>.
     * The properties of the agreement.
     * @alias module:model/AgreementProperties
     */
    constructor() { 
        
        AgreementProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgreementProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgreementProperties} obj Optional instance to populate.
     * @return {module:model/AgreementProperties} The populated <code>AgreementProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgreementProperties();

            if (data.hasOwnProperty('agreementLink')) {
                obj['agreementLink'] = ApiClient.convertToType(data['agreementLink'], 'String');
            }
            if (data.hasOwnProperty('effectiveDate')) {
                obj['effectiveDate'] = ApiClient.convertToType(data['effectiveDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [Participants]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgreementProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgreementProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agreementLink'] && !(typeof data['agreementLink'] === 'string' || data['agreementLink'] instanceof String)) {
            throw new Error("Expected the field `agreementLink` to be a primitive type in the JSON string but got " + data['agreementLink']);
        }
        if (data['participants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['participants'])) {
                throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
            }
            // validate the optional field `participants` (array)
            for (const item of data['participants']) {
                Participants.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The link to the agreement.
 * @member {String} agreementLink
 */
AgreementProperties.prototype['agreementLink'] = undefined;

/**
 * Effective date.
 * @member {Date} effectiveDate
 */
AgreementProperties.prototype['effectiveDate'] = undefined;

/**
 * Expiration date.
 * @member {Date} expirationDate
 */
AgreementProperties.prototype['expirationDate'] = undefined;

/**
 * Participants or signer of the agreement.
 * @member {Array.<module:model/Participants>} participants
 */
AgreementProperties.prototype['participants'] = undefined;

/**
 * The agreement status
 * @member {String} status
 */
AgreementProperties.prototype['status'] = undefined;






export default AgreementProperties;

