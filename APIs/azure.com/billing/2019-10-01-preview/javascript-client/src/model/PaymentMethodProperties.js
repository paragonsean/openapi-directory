/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentMethodProperties model module.
 * @module model/PaymentMethodProperties
 * @version 2019-10-01-preview
 */
class PaymentMethodProperties {
    /**
     * Constructs a new <code>PaymentMethodProperties</code>.
     * The properties of the payment method.
     * @alias module:model/PaymentMethodProperties
     */
    constructor() { 
        
        PaymentMethodProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentMethodProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentMethodProperties} obj Optional instance to populate.
     * @return {module:model/PaymentMethodProperties} The populated <code>PaymentMethodProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentMethodProperties();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('paymentMethodType')) {
                obj['paymentMethodType'] = ApiClient.convertToType(data['paymentMethodType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentMethodProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentMethodProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['paymentMethodType'] && !(typeof data['paymentMethodType'] === 'string' || data['paymentMethodType'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodType` to be a primitive type in the JSON string but got " + data['paymentMethodType']);
        }

        return true;
    }


}



/**
 * The currency associated with the payment method.
 * @member {String} currency
 */
PaymentMethodProperties.prototype['currency'] = undefined;

/**
 * Details about the payment method.
 * @member {String} details
 */
PaymentMethodProperties.prototype['details'] = undefined;

/**
 * Expiration month and year.
 * @member {String} expiration
 */
PaymentMethodProperties.prototype['expiration'] = undefined;

/**
 * Payment method type.
 * @member {module:model/PaymentMethodProperties.PaymentMethodTypeEnum} paymentMethodType
 */
PaymentMethodProperties.prototype['paymentMethodType'] = undefined;





/**
 * Allowed values for the <code>paymentMethodType</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethodProperties['PaymentMethodTypeEnum'] = {

    /**
     * value: "Credits"
     * @const
     */
    "Credits": "Credits",

    /**
     * value: "ChequeWire"
     * @const
     */
    "ChequeWire": "ChequeWire"
};



export default PaymentMethodProperties;

