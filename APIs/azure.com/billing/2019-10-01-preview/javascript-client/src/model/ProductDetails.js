/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductType from './ProductType';

/**
 * The ProductDetails model module.
 * @module model/ProductDetails
 * @version 2019-10-01-preview
 */
class ProductDetails {
    /**
     * Constructs a new <code>ProductDetails</code>.
     * Details of the product to be transferred.
     * @alias module:model/ProductDetails
     */
    constructor() { 
        
        ProductDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductDetails} obj Optional instance to populate.
     * @return {module:model/ProductDetails} The populated <code>ProductDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductDetails();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ProductType.constructFromObject(data['productType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }

        return true;
    }


}



/**
 * Id of product to be transferred.
 * @member {String} productId
 */
ProductDetails.prototype['productId'] = undefined;

/**
 * @member {module:model/ProductType} productType
 */
ProductDetails.prototype['productType'] = undefined;






export default ProductDetails;

