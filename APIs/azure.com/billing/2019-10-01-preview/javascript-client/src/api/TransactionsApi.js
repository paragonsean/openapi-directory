/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Transaction from '../model/Transaction';
import TransactionListResult from '../model/TransactionListResult';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2019-10-01-preview
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transactionsGet operation.
     * @callback module:api/TransactionsApi~transactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the transaction.
     * @param {String} billingAccountName billing Account Id.
     * @param {String} billingProfileName Billing Profile Id.
     * @param {String} transactionName Transaction name.
     * @param {String} periodStartDate Start date
     * @param {String} periodEndDate End date
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview.
     * @param {module:api/TransactionsApi~transactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    transactionsGet(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling transactionsGet");
      }
      // verify the required parameter 'billingProfileName' is set
      if (billingProfileName === undefined || billingProfileName === null) {
        throw new Error("Missing the required parameter 'billingProfileName' when calling transactionsGet");
      }
      // verify the required parameter 'transactionName' is set
      if (transactionName === undefined || transactionName === null) {
        throw new Error("Missing the required parameter 'transactionName' when calling transactionsGet");
      }
      // verify the required parameter 'periodStartDate' is set
      if (periodStartDate === undefined || periodStartDate === null) {
        throw new Error("Missing the required parameter 'periodStartDate' when calling transactionsGet");
      }
      // verify the required parameter 'periodEndDate' is set
      if (periodEndDate === undefined || periodEndDate === null) {
        throw new Error("Missing the required parameter 'periodEndDate' when calling transactionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionsGet");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'billingProfileName': billingProfileName,
        'transactionName': transactionName
      };
      let queryParams = {
        'periodStartDate': periodStartDate,
        'periodEndDate': periodEndDate,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsListByBillingAccount operation.
     * @callback module:api/TransactionsApi~transactionsListByBillingAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the transactions by billing account name for given start and end date.
     * @param {String} billingAccountName billing Account Id.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview.
     * @param {String} periodStartDate Start date
     * @param {String} periodEndDate End date
     * @param {Object} opts Optional parameters
     * @param {String} [filter] May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {module:api/TransactionsApi~transactionsListByBillingAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionListResult}
     */
    transactionsListByBillingAccount(billingAccountName, apiVersion, periodStartDate, periodEndDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling transactionsListByBillingAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionsListByBillingAccount");
      }
      // verify the required parameter 'periodStartDate' is set
      if (periodStartDate === undefined || periodStartDate === null) {
        throw new Error("Missing the required parameter 'periodStartDate' when calling transactionsListByBillingAccount");
      }
      // verify the required parameter 'periodEndDate' is set
      if (periodEndDate === undefined || periodEndDate === null) {
        throw new Error("Missing the required parameter 'periodEndDate' when calling transactionsListByBillingAccount");
      }

      let pathParams = {
        'billingAccountName': billingAccountName
      };
      let queryParams = {
        'api-version': apiVersion,
        'periodStartDate': periodStartDate,
        'periodEndDate': periodEndDate,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsListByBillingProfile operation.
     * @callback module:api/TransactionsApi~transactionsListByBillingProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the transactions by billing profile name for given start date and end date.
     * @param {String} billingAccountName billing Account Id.
     * @param {String} billingProfileName Billing Profile Id.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview.
     * @param {String} periodStartDate Start date
     * @param {String} periodEndDate End date
     * @param {Object} opts Optional parameters
     * @param {String} [filter] May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {module:api/TransactionsApi~transactionsListByBillingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionListResult}
     */
    transactionsListByBillingProfile(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling transactionsListByBillingProfile");
      }
      // verify the required parameter 'billingProfileName' is set
      if (billingProfileName === undefined || billingProfileName === null) {
        throw new Error("Missing the required parameter 'billingProfileName' when calling transactionsListByBillingProfile");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionsListByBillingProfile");
      }
      // verify the required parameter 'periodStartDate' is set
      if (periodStartDate === undefined || periodStartDate === null) {
        throw new Error("Missing the required parameter 'periodStartDate' when calling transactionsListByBillingProfile");
      }
      // verify the required parameter 'periodEndDate' is set
      if (periodEndDate === undefined || periodEndDate === null) {
        throw new Error("Missing the required parameter 'periodEndDate' when calling transactionsListByBillingProfile");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'billingProfileName': billingProfileName
      };
      let queryParams = {
        'api-version': apiVersion,
        'periodStartDate': periodStartDate,
        'periodEndDate': periodEndDate,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsListByCustomer operation.
     * @callback module:api/TransactionsApi~transactionsListByCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the transactions by customer id for given start date and end date.
     * @param {String} billingAccountName billing Account Id.
     * @param {String} customerName Customer name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview.
     * @param {String} periodStartDate Start date
     * @param {String} periodEndDate End date
     * @param {Object} opts Optional parameters
     * @param {String} [filter] May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {module:api/TransactionsApi~transactionsListByCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionListResult}
     */
    transactionsListByCustomer(billingAccountName, customerName, apiVersion, periodStartDate, periodEndDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling transactionsListByCustomer");
      }
      // verify the required parameter 'customerName' is set
      if (customerName === undefined || customerName === null) {
        throw new Error("Missing the required parameter 'customerName' when calling transactionsListByCustomer");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionsListByCustomer");
      }
      // verify the required parameter 'periodStartDate' is set
      if (periodStartDate === undefined || periodStartDate === null) {
        throw new Error("Missing the required parameter 'periodStartDate' when calling transactionsListByCustomer");
      }
      // verify the required parameter 'periodEndDate' is set
      if (periodEndDate === undefined || periodEndDate === null) {
        throw new Error("Missing the required parameter 'periodEndDate' when calling transactionsListByCustomer");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'customerName': customerName
      };
      let queryParams = {
        'api-version': apiVersion,
        'periodStartDate': periodStartDate,
        'periodEndDate': periodEndDate,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsListByInvoiceSection operation.
     * @callback module:api/TransactionsApi~transactionsListByInvoiceSectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the transactions by invoice section name for given start date and end date.
     * @param {String} billingAccountName billing Account Id.
     * @param {String} billingProfileName Billing Profile Id.
     * @param {String} invoiceSectionName InvoiceSection Id.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview.
     * @param {String} periodStartDate Start date
     * @param {String} periodEndDate End date
     * @param {Object} opts Optional parameters
     * @param {String} [filter] May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {module:api/TransactionsApi~transactionsListByInvoiceSectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionListResult}
     */
    transactionsListByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, periodStartDate, periodEndDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling transactionsListByInvoiceSection");
      }
      // verify the required parameter 'billingProfileName' is set
      if (billingProfileName === undefined || billingProfileName === null) {
        throw new Error("Missing the required parameter 'billingProfileName' when calling transactionsListByInvoiceSection");
      }
      // verify the required parameter 'invoiceSectionName' is set
      if (invoiceSectionName === undefined || invoiceSectionName === null) {
        throw new Error("Missing the required parameter 'invoiceSectionName' when calling transactionsListByInvoiceSection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transactionsListByInvoiceSection");
      }
      // verify the required parameter 'periodStartDate' is set
      if (periodStartDate === undefined || periodStartDate === null) {
        throw new Error("Missing the required parameter 'periodStartDate' when calling transactionsListByInvoiceSection");
      }
      // verify the required parameter 'periodEndDate' is set
      if (periodEndDate === undefined || periodEndDate === null) {
        throw new Error("Missing the required parameter 'periodEndDate' when calling transactionsListByInvoiceSection");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'billingProfileName': billingProfileName,
        'invoiceSectionName': invoiceSectionName
      };
      let queryParams = {
        'api-version': apiVersion,
        'periodStartDate': periodStartDate,
        'periodEndDate': periodEndDate,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
