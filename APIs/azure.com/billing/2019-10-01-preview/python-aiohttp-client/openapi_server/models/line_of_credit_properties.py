# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class LineOfCreditProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_limit: Amount=None, reason: str=None, remaining_balance: Amount=None, status: str=None):
        """LineOfCreditProperties - a model defined in OpenAPI

        :param credit_limit: The credit_limit of this LineOfCreditProperties.
        :param reason: The reason of this LineOfCreditProperties.
        :param remaining_balance: The remaining_balance of this LineOfCreditProperties.
        :param status: The status of this LineOfCreditProperties.
        """
        self.openapi_types = {
            'credit_limit': Amount,
            'reason': str,
            'remaining_balance': Amount,
            'status': str
        }

        self.attribute_map = {
            'credit_limit': 'creditLimit',
            'reason': 'reason',
            'remaining_balance': 'remainingBalance',
            'status': 'status'
        }

        self._credit_limit = credit_limit
        self._reason = reason
        self._remaining_balance = remaining_balance
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineOfCreditProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineOfCreditProperties of this LineOfCreditProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_limit(self):
        """Gets the credit_limit of this LineOfCreditProperties.


        :return: The credit_limit of this LineOfCreditProperties.
        :rtype: Amount
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this LineOfCreditProperties.


        :param credit_limit: The credit_limit of this LineOfCreditProperties.
        :type credit_limit: Amount
        """

        self._credit_limit = credit_limit

    @property
    def reason(self):
        """Gets the reason of this LineOfCreditProperties.

        The reason for the line of credit status when not approved.

        :return: The reason of this LineOfCreditProperties.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LineOfCreditProperties.

        The reason for the line of credit status when not approved.

        :param reason: The reason of this LineOfCreditProperties.
        :type reason: str
        """

        self._reason = reason

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this LineOfCreditProperties.


        :return: The remaining_balance of this LineOfCreditProperties.
        :rtype: Amount
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this LineOfCreditProperties.


        :param remaining_balance: The remaining_balance of this LineOfCreditProperties.
        :type remaining_balance: Amount
        """

        self._remaining_balance = remaining_balance

    @property
    def status(self):
        """Gets the status of this LineOfCreditProperties.

        The line of credit status.

        :return: The status of this LineOfCreditProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LineOfCreditProperties.

        The line of credit status.

        :param status: The status of this LineOfCreditProperties.
        :type status: str
        """
        allowed_values = ["Approved", "Rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
