# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_details import AddressDetails
from openapi_server.models.billing_profile import BillingProfile
from openapi_server.models.department import Department
from openapi_server.models.enrollment import Enrollment
from openapi_server.models.enrollment_account import EnrollmentAccount
from openapi_server import util


class BillingAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AddressDetails=None, agreement_type: str=None, billing_profiles: List[BillingProfile]=None, customer_type: str=None, departments: List[Department]=None, display_name: str=None, enrollment_accounts: List[EnrollmentAccount]=None, enrollment_details: Enrollment=None, organization_id: str=None):
        """BillingAccountProperties - a model defined in OpenAPI

        :param address: The address of this BillingAccountProperties.
        :param agreement_type: The agreement_type of this BillingAccountProperties.
        :param billing_profiles: The billing_profiles of this BillingAccountProperties.
        :param customer_type: The customer_type of this BillingAccountProperties.
        :param departments: The departments of this BillingAccountProperties.
        :param display_name: The display_name of this BillingAccountProperties.
        :param enrollment_accounts: The enrollment_accounts of this BillingAccountProperties.
        :param enrollment_details: The enrollment_details of this BillingAccountProperties.
        :param organization_id: The organization_id of this BillingAccountProperties.
        """
        self.openapi_types = {
            'address': AddressDetails,
            'agreement_type': str,
            'billing_profiles': List[BillingProfile],
            'customer_type': str,
            'departments': List[Department],
            'display_name': str,
            'enrollment_accounts': List[EnrollmentAccount],
            'enrollment_details': Enrollment,
            'organization_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'agreement_type': 'agreementType',
            'billing_profiles': 'billingProfiles',
            'customer_type': 'customerType',
            'departments': 'departments',
            'display_name': 'displayName',
            'enrollment_accounts': 'enrollmentAccounts',
            'enrollment_details': 'enrollmentDetails',
            'organization_id': 'organizationId'
        }

        self._address = address
        self._agreement_type = agreement_type
        self._billing_profiles = billing_profiles
        self._customer_type = customer_type
        self._departments = departments
        self._display_name = display_name
        self._enrollment_accounts = enrollment_accounts
        self._enrollment_details = enrollment_details
        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingAccountProperties of this BillingAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this BillingAccountProperties.


        :return: The address of this BillingAccountProperties.
        :rtype: AddressDetails
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BillingAccountProperties.


        :param address: The address of this BillingAccountProperties.
        :type address: AddressDetails
        """

        self._address = address

    @property
    def agreement_type(self):
        """Gets the agreement_type of this BillingAccountProperties.

        The type of agreement.

        :return: The agreement_type of this BillingAccountProperties.
        :rtype: str
        """
        return self._agreement_type

    @agreement_type.setter
    def agreement_type(self, agreement_type):
        """Sets the agreement_type of this BillingAccountProperties.

        The type of agreement.

        :param agreement_type: The agreement_type of this BillingAccountProperties.
        :type agreement_type: str
        """
        allowed_values = ["MicrosoftCustomerAgreement", "EnterpriseAgreement", "MicrosoftOnlineServicesProgram", "MicrosoftPartnerAgreement"]  # noqa: E501
        if agreement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `agreement_type` ({0}), must be one of {1}"
                .format(agreement_type, allowed_values)
            )

        self._agreement_type = agreement_type

    @property
    def billing_profiles(self):
        """Gets the billing_profiles of this BillingAccountProperties.

        The billing profiles associated to the billing account. By default this is not populated, unless it's specified in $expand.

        :return: The billing_profiles of this BillingAccountProperties.
        :rtype: List[BillingProfile]
        """
        return self._billing_profiles

    @billing_profiles.setter
    def billing_profiles(self, billing_profiles):
        """Sets the billing_profiles of this BillingAccountProperties.

        The billing profiles associated to the billing account. By default this is not populated, unless it's specified in $expand.

        :param billing_profiles: The billing_profiles of this BillingAccountProperties.
        :type billing_profiles: List[BillingProfile]
        """

        self._billing_profiles = billing_profiles

    @property
    def customer_type(self):
        """Gets the customer_type of this BillingAccountProperties.

        The type of customer.

        :return: The customer_type of this BillingAccountProperties.
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this BillingAccountProperties.

        The type of customer.

        :param customer_type: The customer_type of this BillingAccountProperties.
        :type customer_type: str
        """
        allowed_values = ["Enterprise", "Individual", "Partner"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def departments(self):
        """Gets the departments of this BillingAccountProperties.

        The departments associated to the enrollment.

        :return: The departments of this BillingAccountProperties.
        :rtype: List[Department]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this BillingAccountProperties.

        The departments associated to the enrollment.

        :param departments: The departments of this BillingAccountProperties.
        :type departments: List[Department]
        """

        self._departments = departments

    @property
    def display_name(self):
        """Gets the display_name of this BillingAccountProperties.

        The billing account name.

        :return: The display_name of this BillingAccountProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BillingAccountProperties.

        The billing account name.

        :param display_name: The display_name of this BillingAccountProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enrollment_accounts(self):
        """Gets the enrollment_accounts of this BillingAccountProperties.

        The accounts associated to the enrollment.

        :return: The enrollment_accounts of this BillingAccountProperties.
        :rtype: List[EnrollmentAccount]
        """
        return self._enrollment_accounts

    @enrollment_accounts.setter
    def enrollment_accounts(self, enrollment_accounts):
        """Sets the enrollment_accounts of this BillingAccountProperties.

        The accounts associated to the enrollment.

        :param enrollment_accounts: The enrollment_accounts of this BillingAccountProperties.
        :type enrollment_accounts: List[EnrollmentAccount]
        """

        self._enrollment_accounts = enrollment_accounts

    @property
    def enrollment_details(self):
        """Gets the enrollment_details of this BillingAccountProperties.


        :return: The enrollment_details of this BillingAccountProperties.
        :rtype: Enrollment
        """
        return self._enrollment_details

    @enrollment_details.setter
    def enrollment_details(self, enrollment_details):
        """Sets the enrollment_details of this BillingAccountProperties.


        :param enrollment_details: The enrollment_details of this BillingAccountProperties.
        :type enrollment_details: Enrollment
        """

        self._enrollment_details = enrollment_details

    @property
    def organization_id(self):
        """Gets the organization_id of this BillingAccountProperties.

        Organization id.

        :return: The organization_id of this BillingAccountProperties.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this BillingAccountProperties.

        Organization id.

        :param organization_id: The organization_id of this BillingAccountProperties.
        :type organization_id: str
        """

        self._organization_id = organization_id
