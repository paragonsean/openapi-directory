# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marketplace_purchases: str=None, reservation_purchases: str=None, view_charges: str=None):
        """PolicyProperties - a model defined in OpenAPI

        :param marketplace_purchases: The marketplace_purchases of this PolicyProperties.
        :param reservation_purchases: The reservation_purchases of this PolicyProperties.
        :param view_charges: The view_charges of this PolicyProperties.
        """
        self.openapi_types = {
            'marketplace_purchases': str,
            'reservation_purchases': str,
            'view_charges': str
        }

        self.attribute_map = {
            'marketplace_purchases': 'marketplacePurchases',
            'reservation_purchases': 'reservationPurchases',
            'view_charges': 'viewCharges'
        }

        self._marketplace_purchases = marketplace_purchases
        self._reservation_purchases = reservation_purchases
        self._view_charges = view_charges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyProperties of this PolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marketplace_purchases(self):
        """Gets the marketplace_purchases of this PolicyProperties.

        The marketplace purchases are free, allowed or not allowed.

        :return: The marketplace_purchases of this PolicyProperties.
        :rtype: str
        """
        return self._marketplace_purchases

    @marketplace_purchases.setter
    def marketplace_purchases(self, marketplace_purchases):
        """Sets the marketplace_purchases of this PolicyProperties.

        The marketplace purchases are free, allowed or not allowed.

        :param marketplace_purchases: The marketplace_purchases of this PolicyProperties.
        :type marketplace_purchases: str
        """
        allowed_values = ["AllAllowed", "OnlyFreeAllowed", "NotAllowed"]  # noqa: E501
        if marketplace_purchases not in allowed_values:
            raise ValueError(
                "Invalid value for `marketplace_purchases` ({0}), must be one of {1}"
                .format(marketplace_purchases, allowed_values)
            )

        self._marketplace_purchases = marketplace_purchases

    @property
    def reservation_purchases(self):
        """Gets the reservation_purchases of this PolicyProperties.

        The reservation purchases allowed or not.

        :return: The reservation_purchases of this PolicyProperties.
        :rtype: str
        """
        return self._reservation_purchases

    @reservation_purchases.setter
    def reservation_purchases(self, reservation_purchases):
        """Sets the reservation_purchases of this PolicyProperties.

        The reservation purchases allowed or not.

        :param reservation_purchases: The reservation_purchases of this PolicyProperties.
        :type reservation_purchases: str
        """
        allowed_values = ["Allowed", "NotAllowed"]  # noqa: E501
        if reservation_purchases not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_purchases` ({0}), must be one of {1}"
                .format(reservation_purchases, allowed_values)
            )

        self._reservation_purchases = reservation_purchases

    @property
    def view_charges(self):
        """Gets the view_charges of this PolicyProperties.

        Who can view charges.

        :return: The view_charges of this PolicyProperties.
        :rtype: str
        """
        return self._view_charges

    @view_charges.setter
    def view_charges(self, view_charges):
        """Sets the view_charges of this PolicyProperties.

        Who can view charges.

        :param view_charges: The view_charges of this PolicyProperties.
        :type view_charges: str
        """
        allowed_values = ["Allowed", "NotAllowed"]  # noqa: E501
        if view_charges not in allowed_values:
            raise ValueError(
                "Invalid value for `view_charges` ({0}), must be one of {1}"
                .format(view_charges, allowed_values)
            )

        self._view_charges = view_charges
