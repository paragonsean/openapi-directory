# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class PaymentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, _date: datetime=None, payment_method_family: str=None, payment_method_type: str=None, payment_type: str=None):
        """PaymentProperties - a model defined in OpenAPI

        :param amount: The amount of this PaymentProperties.
        :param _date: The _date of this PaymentProperties.
        :param payment_method_family: The payment_method_family of this PaymentProperties.
        :param payment_method_type: The payment_method_type of this PaymentProperties.
        :param payment_type: The payment_type of this PaymentProperties.
        """
        self.openapi_types = {
            'amount': Amount,
            '_date': datetime,
            'payment_method_family': str,
            'payment_method_type': str,
            'payment_type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            '_date': 'date',
            'payment_method_family': 'paymentMethodFamily',
            'payment_method_type': 'paymentMethodType',
            'payment_type': 'paymentType'
        }

        self._amount = amount
        self.__date = _date
        self._payment_method_family = payment_method_family
        self._payment_method_type = payment_method_type
        self._payment_type = payment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentProperties of this PaymentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentProperties.


        :return: The amount of this PaymentProperties.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentProperties.


        :param amount: The amount of this PaymentProperties.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this PaymentProperties.

        The date of the payment.

        :return: The _date of this PaymentProperties.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PaymentProperties.

        The date of the payment.

        :param _date: The _date of this PaymentProperties.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def payment_method_family(self):
        """Gets the payment_method_family of this PaymentProperties.

        The payment method family.

        :return: The payment_method_family of this PaymentProperties.
        :rtype: str
        """
        return self._payment_method_family

    @payment_method_family.setter
    def payment_method_family(self, payment_method_family):
        """Sets the payment_method_family of this PaymentProperties.

        The payment method family.

        :param payment_method_family: The payment_method_family of this PaymentProperties.
        :type payment_method_family: str
        """
        allowed_values = ["Credits", "CheckWire", "CreditCard", "None"]  # noqa: E501
        if payment_method_family not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method_family` ({0}), must be one of {1}"
                .format(payment_method_family, allowed_values)
            )

        self._payment_method_family = payment_method_family

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentProperties.

        The type of payment method.

        :return: The payment_method_type of this PaymentProperties.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentProperties.

        The type of payment method.

        :param payment_method_type: The payment_method_type of this PaymentProperties.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentProperties.

        The type of payment.

        :return: The payment_type of this PaymentProperties.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentProperties.

        The type of payment.

        :param payment_type: The payment_type of this PaymentProperties.
        :type payment_type: str
        """

        self._payment_type = payment_type
