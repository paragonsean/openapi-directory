/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerPolicy;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Policy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policiesGetByBillingProfile
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call policiesGetByBillingProfileCall(String billingAccountName, String billingProfileName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesGetByBillingProfileValidateBeforeCall(String billingAccountName, String billingProfileName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling policiesGetByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling policiesGetByBillingProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policiesGetByBillingProfile(Async)");
        }

        return policiesGetByBillingProfileCall(billingAccountName, billingProfileName, apiVersion, _callback);

    }

    /**
     * 
     * The policy for a given billing account name and billing profile name.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public Policy policiesGetByBillingProfile(String billingAccountName, String billingProfileName, String apiVersion) throws ApiException {
        ApiResponse<Policy> localVarResp = policiesGetByBillingProfileWithHttpInfo(billingAccountName, billingProfileName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * The policy for a given billing account name and billing profile name.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<Policy> policiesGetByBillingProfileWithHttpInfo(String billingAccountName, String billingProfileName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policiesGetByBillingProfileValidateBeforeCall(billingAccountName, billingProfileName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The policy for a given billing account name and billing profile name.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call policiesGetByBillingProfileAsync(String billingAccountName, String billingProfileName, String apiVersion, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesGetByBillingProfileValidateBeforeCall(billingAccountName, billingProfileName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesGetByCustomer
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call policiesGetByCustomerCall(String billingAccountName, String customerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesGetByCustomerValidateBeforeCall(String billingAccountName, String customerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling policiesGetByCustomer(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling policiesGetByCustomer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policiesGetByCustomer(Async)");
        }

        return policiesGetByCustomerCall(billingAccountName, customerName, apiVersion, _callback);

    }

    /**
     * 
     * The policy for a given billing account name and customer name.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return CustomerPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public CustomerPolicy policiesGetByCustomer(String billingAccountName, String customerName, String apiVersion) throws ApiException {
        ApiResponse<CustomerPolicy> localVarResp = policiesGetByCustomerWithHttpInfo(billingAccountName, customerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * The policy for a given billing account name and customer name.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return ApiResponse&lt;CustomerPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<CustomerPolicy> policiesGetByCustomerWithHttpInfo(String billingAccountName, String customerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policiesGetByCustomerValidateBeforeCall(billingAccountName, customerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CustomerPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The policy for a given billing account name and customer name.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call policiesGetByCustomerAsync(String billingAccountName, String customerName, String apiVersion, final ApiCallback<CustomerPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesGetByCustomerValidateBeforeCall(billingAccountName, customerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CustomerPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesUpdate
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to the update policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesUpdateCall(String apiVersion, String billingAccountName, String billingProfileName, Policy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesUpdateValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, Policy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policiesUpdate(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling policiesUpdate(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling policiesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policiesUpdate(Async)");
        }

        return policiesUpdateCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);

    }

    /**
     * 
     * The operation to update a policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to the update policy operation. (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Policy policiesUpdate(String apiVersion, String billingAccountName, String billingProfileName, Policy parameters) throws ApiException {
        ApiResponse<Policy> localVarResp = policiesUpdateWithHttpInfo(apiVersion, billingAccountName, billingProfileName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to update a policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to the update policy operation. (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policy> policiesUpdateWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, Policy parameters) throws ApiException {
        okhttp3.Call localVarCall = policiesUpdateValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to update a policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to the update policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesUpdateAsync(String apiVersion, String billingAccountName, String billingProfileName, Policy parameters, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesUpdateValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesUpdateCustomer
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to the update customer policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesUpdateCustomerCall(String apiVersion, String billingAccountName, String customerName, CustomerPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesUpdateCustomerValidateBeforeCall(String apiVersion, String billingAccountName, String customerName, CustomerPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policiesUpdateCustomer(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling policiesUpdateCustomer(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling policiesUpdateCustomer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policiesUpdateCustomer(Async)");
        }

        return policiesUpdateCustomerCall(apiVersion, billingAccountName, customerName, parameters, _callback);

    }

    /**
     * 
     * The operation to update a Customer policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to the update customer policy operation. (required)
     * @return CustomerPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPolicy policiesUpdateCustomer(String apiVersion, String billingAccountName, String customerName, CustomerPolicy parameters) throws ApiException {
        ApiResponse<CustomerPolicy> localVarResp = policiesUpdateCustomerWithHttpInfo(apiVersion, billingAccountName, customerName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to update a Customer policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to the update customer policy operation. (required)
     * @return ApiResponse&lt;CustomerPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPolicy> policiesUpdateCustomerWithHttpInfo(String apiVersion, String billingAccountName, String customerName, CustomerPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = policiesUpdateCustomerValidateBeforeCall(apiVersion, billingAccountName, customerName, parameters, null);
        Type localVarReturnType = new TypeToken<CustomerPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to update a Customer policy.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to the update customer policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesUpdateCustomerAsync(String apiVersion, String billingAccountName, String customerName, CustomerPolicy parameters, final ApiCallback<CustomerPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesUpdateCustomerValidateBeforeCall(apiVersion, billingAccountName, customerName, parameters, _callback);
        Type localVarReturnType = new TypeToken<CustomerPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
