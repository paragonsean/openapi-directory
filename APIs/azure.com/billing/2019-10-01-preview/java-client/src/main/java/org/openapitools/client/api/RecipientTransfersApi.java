/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptTransferRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RecipientTransferDetails;
import org.openapitools.client.model.RecipientTransferDetailsListResult;
import org.openapitools.client.model.ValidateTransferListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecipientTransfersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecipientTransfersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecipientTransfersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recipientTransfersAccept
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to accept the transfer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the accepted transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersAcceptCall(String transferName, AcceptTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/transfers/{transferName}/acceptTransfer"
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipientTransfersAcceptValidateBeforeCall(String transferName, AcceptTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling recipientTransfersAccept(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling recipientTransfersAccept(Async)");
        }

        return recipientTransfersAcceptCall(transferName, parameters, _callback);

    }

    /**
     * Accepts the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to accept the transfer. (required)
     * @return RecipientTransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the accepted transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RecipientTransferDetails recipientTransfersAccept(String transferName, AcceptTransferRequest parameters) throws ApiException {
        ApiResponse<RecipientTransferDetails> localVarResp = recipientTransfersAcceptWithHttpInfo(transferName, parameters);
        return localVarResp.getData();
    }

    /**
     * Accepts the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to accept the transfer. (required)
     * @return ApiResponse&lt;RecipientTransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the accepted transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecipientTransferDetails> recipientTransfersAcceptWithHttpInfo(String transferName, AcceptTransferRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = recipientTransfersAcceptValidateBeforeCall(transferName, parameters, null);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accepts the transfer with given transfer Id. (asynchronously)
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to accept the transfer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the accepted transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersAcceptAsync(String transferName, AcceptTransferRequest parameters, final ApiCallback<RecipientTransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipientTransfersAcceptValidateBeforeCall(transferName, parameters, _callback);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipientTransfersDecline
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the declined transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersDeclineCall(String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/transfers/{transferName}/declineTransfer"
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipientTransfersDeclineValidateBeforeCall(String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling recipientTransfersDecline(Async)");
        }

        return recipientTransfersDeclineCall(transferName, _callback);

    }

    /**
     * Declines the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @return RecipientTransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the declined transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RecipientTransferDetails recipientTransfersDecline(String transferName) throws ApiException {
        ApiResponse<RecipientTransferDetails> localVarResp = recipientTransfersDeclineWithHttpInfo(transferName);
        return localVarResp.getData();
    }

    /**
     * Declines the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;RecipientTransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the declined transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecipientTransferDetails> recipientTransfersDeclineWithHttpInfo(String transferName) throws ApiException {
        okhttp3.Call localVarCall = recipientTransfersDeclineValidateBeforeCall(transferName, null);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Declines the transfer with given transfer Id. (asynchronously)
     * 
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the declined transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersDeclineAsync(String transferName, final ApiCallback<RecipientTransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipientTransfersDeclineValidateBeforeCall(transferName, _callback);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipientTransfersGet
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the transfers with given Id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersGetCall(String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/transfers/{transferName}"
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipientTransfersGetValidateBeforeCall(String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling recipientTransfersGet(Async)");
        }

        return recipientTransfersGetCall(transferName, _callback);

    }

    /**
     * Gets the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @return RecipientTransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the transfers with given Id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RecipientTransferDetails recipientTransfersGet(String transferName) throws ApiException {
        ApiResponse<RecipientTransferDetails> localVarResp = recipientTransfersGetWithHttpInfo(transferName);
        return localVarResp.getData();
    }

    /**
     * Gets the transfer with given transfer Id.
     * 
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;RecipientTransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the transfers with given Id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecipientTransferDetails> recipientTransfersGetWithHttpInfo(String transferName) throws ApiException {
        okhttp3.Call localVarCall = recipientTransfersGetValidateBeforeCall(transferName, null);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the transfer with given transfer Id. (asynchronously)
     * 
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the transfers with given Id. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersGetAsync(String transferName, final ApiCallback<RecipientTransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipientTransfersGetValidateBeforeCall(transferName, _callback);
        Type localVarReturnType = new TypeToken<RecipientTransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipientTransfersList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers received by caller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipientTransfersListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return recipientTransfersListCall(_callback);

    }

    /**
     * Lists the transfers received by caller.
     * 
     * @return RecipientTransferDetailsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers received by caller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RecipientTransferDetailsListResult recipientTransfersList() throws ApiException {
        ApiResponse<RecipientTransferDetailsListResult> localVarResp = recipientTransfersListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Lists the transfers received by caller.
     * 
     * @return ApiResponse&lt;RecipientTransferDetailsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers received by caller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecipientTransferDetailsListResult> recipientTransfersListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = recipientTransfersListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RecipientTransferDetailsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the transfers received by caller. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers received by caller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersListAsync(final ApiCallback<RecipientTransferDetailsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipientTransfersListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RecipientTransferDetailsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipientTransfersValidate
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to validate the transfer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results of the transfer validation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersValidateCall(String transferName, AcceptTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/transfers/{transferName}/validateTransfer"
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipientTransfersValidateValidateBeforeCall(String transferName, AcceptTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling recipientTransfersValidate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling recipientTransfersValidate(Async)");
        }

        return recipientTransfersValidateCall(transferName, parameters, _callback);

    }

    /**
     * Validates if the products can be transferred in the context of the given transfer name.
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to validate the transfer. (required)
     * @return ValidateTransferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results of the transfer validation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTransferListResponse recipientTransfersValidate(String transferName, AcceptTransferRequest parameters) throws ApiException {
        ApiResponse<ValidateTransferListResponse> localVarResp = recipientTransfersValidateWithHttpInfo(transferName, parameters);
        return localVarResp.getData();
    }

    /**
     * Validates if the products can be transferred in the context of the given transfer name.
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to validate the transfer. (required)
     * @return ApiResponse&lt;ValidateTransferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results of the transfer validation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateTransferListResponse> recipientTransfersValidateWithHttpInfo(String transferName, AcceptTransferRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = recipientTransfersValidateValidateBeforeCall(transferName, parameters, null);
        Type localVarReturnType = new TypeToken<ValidateTransferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates if the products can be transferred in the context of the given transfer name. (asynchronously)
     * 
     * @param transferName Transfer Name. (required)
     * @param parameters Parameters supplied to validate the transfer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results of the transfer validation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recipientTransfersValidateAsync(String transferName, AcceptTransferRequest parameters, final ApiCallback<ValidateTransferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipientTransfersValidateValidateBeforeCall(transferName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ValidateTransferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
