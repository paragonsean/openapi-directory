/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillingRoleAssignment;
import org.openapitools.client.model.BillingRoleAssignmentListResult;
import org.openapitools.client.model.BillingRoleAssignmentPayload;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingRoleAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingRoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingRoleAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billingRoleAssignmentsAddByBillingAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingAccountCall(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByBillingAccountValidateBeforeCall(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByBillingAccount(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByBillingAccount(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByBillingAccount(Async)");
        }

        return billingRoleAssignmentsAddByBillingAccountCall(apiVersion, billingAccountName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByBillingAccount(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByBillingAccountWithHttpInfo(apiVersion, billingAccountName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByBillingAccountWithHttpInfo(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a billing account.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingAccountAsync(String apiVersion, String billingAccountName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsAddByBillingProfile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingProfileCall(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByBillingProfileValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByBillingProfile(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsAddByBillingProfile(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByBillingProfile(Async)");
        }

        return billingRoleAssignmentsAddByBillingProfileCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByBillingProfile(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByBillingProfileWithHttpInfo(apiVersion, billingAccountName, billingProfileName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByBillingProfileWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a billing profile.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByBillingProfileAsync(String apiVersion, String billingAccountName, String billingProfileName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsAddByInvoiceSection
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/createBillingRoleAssignment"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsAddByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsAddByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsAddByInvoiceSection(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsAddByInvoiceSection(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingRoleAssignmentsAddByInvoiceSection(Async)");
        }

        return billingRoleAssignmentsAddByInvoiceSectionCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, parameters, _callback);

    }

    /**
     * 
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsAddByInvoiceSection(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, BillingRoleAssignmentPayload parameters) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsAddByInvoiceSectionWithHttpInfo(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsAddByInvoiceSectionWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, BillingRoleAssignmentPayload parameters) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsAddByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, parameters, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to add a role assignment to a invoice Section.
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to add a role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Role assignment is successfully created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsAddByInvoiceSectionAsync(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, BillingRoleAssignmentPayload parameters, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsAddByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByBillingAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountValidateBeforeCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByBillingAccount(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByBillingAccount(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByBillingAccount(Async)");
        }

        return billingRoleAssignmentsDeleteByBillingAccountCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByBillingAccount(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByBillingAccountWithHttpInfo(apiVersion, billingAccountName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByBillingAccountWithHttpInfo(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on this billing account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingAccountAsync(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByBillingProfile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByBillingProfile(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsDeleteByBillingProfile(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByBillingProfile(Async)");
        }

        return billingRoleAssignmentsDeleteByBillingProfileCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByBillingProfile(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByBillingProfileWithHttpInfo(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByBillingProfileWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on this Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByBillingProfileAsync(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsDeleteByInvoiceSection
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsDeleteByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsDeleteByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsDeleteByInvoiceSection(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsDeleteByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsDeleteByInvoiceSection(Async)");
        }

        return billingRoleAssignmentsDeleteByInvoiceSectionCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsDeleteByInvoiceSection(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsDeleteByInvoiceSectionWithHttpInfo(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsDeleteByInvoiceSectionWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the role assignment on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsDeleteByInvoiceSectionAsync(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsDeleteByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByBillingAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingAccountCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByBillingAccount(Async)");
        }

        return billingRoleAssignmentsGetByBillingAccountCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByBillingAccount(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByBillingAccountWithHttpInfo(apiVersion, billingAccountName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByBillingAccountWithHttpInfo(String apiVersion, String billingAccountName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingAccountAsync(String apiVersion, String billingAccountName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByBillingProfile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingProfileCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByBillingProfileValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByBillingProfile(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsGetByBillingProfile(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByBillingProfile(Async)");
        }

        return billingRoleAssignmentsGetByBillingProfileCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByBillingProfile(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByBillingProfileWithHttpInfo(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByBillingProfileWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByBillingProfileAsync(String apiVersion, String billingAccountName, String billingProfileName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsGetByInvoiceSection
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingRoleAssignmentName" + "}", localVarApiClient.escapeString(billingRoleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsGetByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsGetByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsGetByInvoiceSection(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsGetByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingRoleAssignmentName' is set
        if (billingRoleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'billingRoleAssignmentName' when calling billingRoleAssignmentsGetByInvoiceSection(Async)");
        }

        return billingRoleAssignmentsGetByInvoiceSectionCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, _callback);

    }

    /**
     * 
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return BillingRoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignment billingRoleAssignmentsGetByInvoiceSection(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        ApiResponse<BillingRoleAssignment> localVarResp = billingRoleAssignmentsGetByInvoiceSectionWithHttpInfo(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @return ApiResponse&lt;BillingRoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignment> billingRoleAssignmentsGetByInvoiceSectionWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsGetByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignment for the caller on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingRoleAssignmentName role assignment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsGetByInvoiceSectionAsync(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, final ApiCallback<BillingRoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsGetByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByBillingAccount
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingAccountCall(String apiVersion, String billingAccountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByBillingAccountValidateBeforeCall(String apiVersion, String billingAccountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByBillingAccount(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByBillingAccount(Async)");
        }

        return billingRoleAssignmentsListByBillingAccountCall(apiVersion, billingAccountName, _callback);

    }

    /**
     * 
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByBillingAccount(String apiVersion, String billingAccountName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByBillingAccountWithHttpInfo(apiVersion, billingAccountName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByBillingAccountWithHttpInfo(String apiVersion, String billingAccountName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the Billing Account
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingAccountAsync(String apiVersion, String billingAccountName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingAccountValidateBeforeCall(apiVersion, billingAccountName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByBillingProfile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingProfileCall(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByBillingProfileValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByBillingProfile(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsListByBillingProfile(Async)");
        }

        return billingRoleAssignmentsListByBillingProfileCall(apiVersion, billingAccountName, billingProfileName, _callback);

    }

    /**
     * 
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByBillingProfile(String apiVersion, String billingAccountName, String billingProfileName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByBillingProfileWithHttpInfo(apiVersion, billingAccountName, billingProfileName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByBillingProfileWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the Billing Profile
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByBillingProfileAsync(String apiVersion, String billingAccountName, String billingProfileName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByBillingProfileValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingRoleAssignmentsListByInvoiceSection
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByInvoiceSectionCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingRoleAssignmentsListByInvoiceSectionValidateBeforeCall(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling billingRoleAssignmentsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingRoleAssignmentsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingRoleAssignmentsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingRoleAssignmentsListByInvoiceSection(Async)");
        }

        return billingRoleAssignmentsListByInvoiceSectionCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, _callback);

    }

    /**
     * 
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return BillingRoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BillingRoleAssignmentListResult billingRoleAssignmentsListByInvoiceSection(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName) throws ApiException {
        ApiResponse<BillingRoleAssignmentListResult> localVarResp = billingRoleAssignmentsListByInvoiceSectionWithHttpInfo(apiVersion, billingAccountName, billingProfileName, invoiceSectionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return ApiResponse&lt;BillingRoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingRoleAssignmentListResult> billingRoleAssignmentsListByInvoiceSectionWithHttpInfo(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName) throws ApiException {
        okhttp3.Call localVarCall = billingRoleAssignmentsListByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, null);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the role assignments on the invoice Section
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingRoleAssignmentsListByInvoiceSectionAsync(String apiVersion, String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback<BillingRoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingRoleAssignmentsListByInvoiceSectionValidateBeforeCall(apiVersion, billingAccountName, billingProfileName, invoiceSectionName, _callback);
        Type localVarReturnType = new TypeToken<BillingRoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
