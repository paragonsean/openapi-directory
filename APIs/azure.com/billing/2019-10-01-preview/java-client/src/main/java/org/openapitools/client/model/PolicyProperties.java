/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyProperties {
  /**
   * The marketplace purchases are free, allowed or not allowed.
   */
  @JsonAdapter(MarketplacePurchasesEnum.Adapter.class)
  public enum MarketplacePurchasesEnum {
    ALL_ALLOWED("AllAllowed"),
    
    ONLY_FREE_ALLOWED("OnlyFreeAllowed"),
    
    NOT_ALLOWED("NotAllowed");

    private String value;

    MarketplacePurchasesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketplacePurchasesEnum fromValue(String value) {
      for (MarketplacePurchasesEnum b : MarketplacePurchasesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketplacePurchasesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketplacePurchasesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketplacePurchasesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarketplacePurchasesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MarketplacePurchasesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKETPLACE_PURCHASES = "marketplacePurchases";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_PURCHASES)
  private MarketplacePurchasesEnum marketplacePurchases;

  /**
   * The reservation purchases allowed or not.
   */
  @JsonAdapter(ReservationPurchasesEnum.Adapter.class)
  public enum ReservationPurchasesEnum {
    ALLOWED("Allowed"),
    
    NOT_ALLOWED("NotAllowed");

    private String value;

    ReservationPurchasesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationPurchasesEnum fromValue(String value) {
      for (ReservationPurchasesEnum b : ReservationPurchasesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationPurchasesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationPurchasesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationPurchasesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationPurchasesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationPurchasesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_PURCHASES = "reservationPurchases";
  @SerializedName(SERIALIZED_NAME_RESERVATION_PURCHASES)
  private ReservationPurchasesEnum reservationPurchases;

  /**
   * Who can view charges.
   */
  @JsonAdapter(ViewChargesEnum.Adapter.class)
  public enum ViewChargesEnum {
    ALLOWED("Allowed"),
    
    NOT_ALLOWED("NotAllowed");

    private String value;

    ViewChargesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewChargesEnum fromValue(String value) {
      for (ViewChargesEnum b : ViewChargesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewChargesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewChargesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewChargesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewChargesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewChargesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_CHARGES = "viewCharges";
  @SerializedName(SERIALIZED_NAME_VIEW_CHARGES)
  private ViewChargesEnum viewCharges;

  public PolicyProperties() {
  }

  public PolicyProperties marketplacePurchases(MarketplacePurchasesEnum marketplacePurchases) {
    this.marketplacePurchases = marketplacePurchases;
    return this;
  }

  /**
   * The marketplace purchases are free, allowed or not allowed.
   * @return marketplacePurchases
   */
  @javax.annotation.Nullable
  public MarketplacePurchasesEnum getMarketplacePurchases() {
    return marketplacePurchases;
  }

  public void setMarketplacePurchases(MarketplacePurchasesEnum marketplacePurchases) {
    this.marketplacePurchases = marketplacePurchases;
  }


  public PolicyProperties reservationPurchases(ReservationPurchasesEnum reservationPurchases) {
    this.reservationPurchases = reservationPurchases;
    return this;
  }

  /**
   * The reservation purchases allowed or not.
   * @return reservationPurchases
   */
  @javax.annotation.Nullable
  public ReservationPurchasesEnum getReservationPurchases() {
    return reservationPurchases;
  }

  public void setReservationPurchases(ReservationPurchasesEnum reservationPurchases) {
    this.reservationPurchases = reservationPurchases;
  }


  public PolicyProperties viewCharges(ViewChargesEnum viewCharges) {
    this.viewCharges = viewCharges;
    return this;
  }

  /**
   * Who can view charges.
   * @return viewCharges
   */
  @javax.annotation.Nullable
  public ViewChargesEnum getViewCharges() {
    return viewCharges;
  }

  public void setViewCharges(ViewChargesEnum viewCharges) {
    this.viewCharges = viewCharges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyProperties policyProperties = (PolicyProperties) o;
    return Objects.equals(this.marketplacePurchases, policyProperties.marketplacePurchases) &&
        Objects.equals(this.reservationPurchases, policyProperties.reservationPurchases) &&
        Objects.equals(this.viewCharges, policyProperties.viewCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketplacePurchases, reservationPurchases, viewCharges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyProperties {\n");
    sb.append("    marketplacePurchases: ").append(toIndentedString(marketplacePurchases)).append("\n");
    sb.append("    reservationPurchases: ").append(toIndentedString(reservationPurchases)).append("\n");
    sb.append("    viewCharges: ").append(toIndentedString(viewCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("marketplacePurchases");
    openapiFields.add("reservationPurchases");
    openapiFields.add("viewCharges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyProperties is not found in the empty JSON string", PolicyProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("marketplacePurchases") != null && !jsonObj.get("marketplacePurchases").isJsonNull()) && !jsonObj.get("marketplacePurchases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplacePurchases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplacePurchases").toString()));
      }
      // validate the optional field `marketplacePurchases`
      if (jsonObj.get("marketplacePurchases") != null && !jsonObj.get("marketplacePurchases").isJsonNull()) {
        MarketplacePurchasesEnum.validateJsonElement(jsonObj.get("marketplacePurchases"));
      }
      if ((jsonObj.get("reservationPurchases") != null && !jsonObj.get("reservationPurchases").isJsonNull()) && !jsonObj.get("reservationPurchases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationPurchases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationPurchases").toString()));
      }
      // validate the optional field `reservationPurchases`
      if (jsonObj.get("reservationPurchases") != null && !jsonObj.get("reservationPurchases").isJsonNull()) {
        ReservationPurchasesEnum.validateJsonElement(jsonObj.get("reservationPurchases"));
      }
      if ((jsonObj.get("viewCharges") != null && !jsonObj.get("viewCharges").isJsonNull()) && !jsonObj.get("viewCharges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewCharges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewCharges").toString()));
      }
      // validate the optional field `viewCharges`
      if (jsonObj.get("viewCharges") != null && !jsonObj.get("viewCharges").isJsonNull()) {
        ViewChargesEnum.validateJsonElement(jsonObj.get("viewCharges"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyProperties>() {
           @Override
           public void write(JsonWriter out, PolicyProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyProperties
   * @throws IOException if the JSON string is invalid with respect to PolicyProperties
   */
  public static PolicyProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyProperties.class);
  }

  /**
   * Convert an instance of PolicyProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

