/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionsGet
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param transactionName Transaction name. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsGetCall(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "transactionName" + "}", localVarApiClient.escapeString(transactionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStartDate", periodStartDate));
        }

        if (periodEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEndDate", periodEndDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsGetValidateBeforeCall(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transactionsGet(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transactionsGet(Async)");
        }

        // verify the required parameter 'transactionName' is set
        if (transactionName == null) {
            throw new ApiException("Missing the required parameter 'transactionName' when calling transactionsGet(Async)");
        }

        // verify the required parameter 'periodStartDate' is set
        if (periodStartDate == null) {
            throw new ApiException("Missing the required parameter 'periodStartDate' when calling transactionsGet(Async)");
        }

        // verify the required parameter 'periodEndDate' is set
        if (periodEndDate == null) {
            throw new ApiException("Missing the required parameter 'periodEndDate' when calling transactionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionsGet(Async)");
        }

        return transactionsGetCall(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, apiVersion, _callback);

    }

    /**
     * 
     * Get the transaction.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param transactionName Transaction name. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public Transaction transactionsGet(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, String apiVersion) throws ApiException {
        ApiResponse<Transaction> localVarResp = transactionsGetWithHttpInfo(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the transaction.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param transactionName Transaction name. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<Transaction> transactionsGetWithHttpInfo(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, apiVersion, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the transaction.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param transactionName Transaction name. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsGetAsync(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, String apiVersion, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsListByBillingAccount
     * @param billingAccountName billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByBillingAccountCall(String billingAccountName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (periodStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStartDate", periodStartDate));
        }

        if (periodEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEndDate", periodEndDate));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsListByBillingAccountValidateBeforeCall(String billingAccountName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transactionsListByBillingAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionsListByBillingAccount(Async)");
        }

        // verify the required parameter 'periodStartDate' is set
        if (periodStartDate == null) {
            throw new ApiException("Missing the required parameter 'periodStartDate' when calling transactionsListByBillingAccount(Async)");
        }

        // verify the required parameter 'periodEndDate' is set
        if (periodEndDate == null) {
            throw new ApiException("Missing the required parameter 'periodEndDate' when calling transactionsListByBillingAccount(Async)");
        }

        return transactionsListByBillingAccountCall(billingAccountName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);

    }

    /**
     * 
     * Lists the transactions by billing account name for given start and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return TransactionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public TransactionListResult transactionsListByBillingAccount(String billingAccountName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        ApiResponse<TransactionListResult> localVarResp = transactionsListByBillingAccountWithHttpInfo(billingAccountName, apiVersion, periodStartDate, periodEndDate, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the transactions by billing account name for given start and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;TransactionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<TransactionListResult> transactionsListByBillingAccountWithHttpInfo(String billingAccountName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        okhttp3.Call localVarCall = transactionsListByBillingAccountValidateBeforeCall(billingAccountName, apiVersion, periodStartDate, periodEndDate, $filter, null);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the transactions by billing account name for given start and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByBillingAccountAsync(String billingAccountName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback<TransactionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsListByBillingAccountValidateBeforeCall(billingAccountName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsListByBillingProfile
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByBillingProfileCall(String billingAccountName, String billingProfileName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (periodStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStartDate", periodStartDate));
        }

        if (periodEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEndDate", periodEndDate));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsListByBillingProfileValidateBeforeCall(String billingAccountName, String billingProfileName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transactionsListByBillingProfile(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transactionsListByBillingProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionsListByBillingProfile(Async)");
        }

        // verify the required parameter 'periodStartDate' is set
        if (periodStartDate == null) {
            throw new ApiException("Missing the required parameter 'periodStartDate' when calling transactionsListByBillingProfile(Async)");
        }

        // verify the required parameter 'periodEndDate' is set
        if (periodEndDate == null) {
            throw new ApiException("Missing the required parameter 'periodEndDate' when calling transactionsListByBillingProfile(Async)");
        }

        return transactionsListByBillingProfileCall(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);

    }

    /**
     * 
     * Lists the transactions by billing profile name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return TransactionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public TransactionListResult transactionsListByBillingProfile(String billingAccountName, String billingProfileName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        ApiResponse<TransactionListResult> localVarResp = transactionsListByBillingProfileWithHttpInfo(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the transactions by billing profile name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;TransactionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<TransactionListResult> transactionsListByBillingProfileWithHttpInfo(String billingAccountName, String billingProfileName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        okhttp3.Call localVarCall = transactionsListByBillingProfileValidateBeforeCall(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, $filter, null);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the transactions by billing profile name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByBillingProfileAsync(String billingAccountName, String billingProfileName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback<TransactionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsListByBillingProfileValidateBeforeCall(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsListByCustomer
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByCustomerCall(String billingAccountName, String customerName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/transactions"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (periodStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStartDate", periodStartDate));
        }

        if (periodEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEndDate", periodEndDate));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsListByCustomerValidateBeforeCall(String billingAccountName, String customerName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transactionsListByCustomer(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling transactionsListByCustomer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionsListByCustomer(Async)");
        }

        // verify the required parameter 'periodStartDate' is set
        if (periodStartDate == null) {
            throw new ApiException("Missing the required parameter 'periodStartDate' when calling transactionsListByCustomer(Async)");
        }

        // verify the required parameter 'periodEndDate' is set
        if (periodEndDate == null) {
            throw new ApiException("Missing the required parameter 'periodEndDate' when calling transactionsListByCustomer(Async)");
        }

        return transactionsListByCustomerCall(billingAccountName, customerName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);

    }

    /**
     * 
     * Lists the transactions by customer id for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return TransactionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public TransactionListResult transactionsListByCustomer(String billingAccountName, String customerName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        ApiResponse<TransactionListResult> localVarResp = transactionsListByCustomerWithHttpInfo(billingAccountName, customerName, apiVersion, periodStartDate, periodEndDate, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the transactions by customer id for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;TransactionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public ApiResponse<TransactionListResult> transactionsListByCustomerWithHttpInfo(String billingAccountName, String customerName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        okhttp3.Call localVarCall = transactionsListByCustomerValidateBeforeCall(billingAccountName, customerName, apiVersion, periodStartDate, periodEndDate, $filter, null);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the transactions by customer id for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param customerName Customer name. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/consumption/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByCustomerAsync(String billingAccountName, String customerName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback<TransactionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsListByCustomerValidateBeforeCall(billingAccountName, customerName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsListByInvoiceSection
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByInvoiceSectionCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (periodStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodStartDate", periodStartDate));
        }

        if (periodEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodEndDate", periodEndDate));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsListByInvoiceSectionValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transactionsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transactionsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling transactionsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transactionsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'periodStartDate' is set
        if (periodStartDate == null) {
            throw new ApiException("Missing the required parameter 'periodStartDate' when calling transactionsListByInvoiceSection(Async)");
        }

        // verify the required parameter 'periodEndDate' is set
        if (periodEndDate == null) {
            throw new ApiException("Missing the required parameter 'periodEndDate' when calling transactionsListByInvoiceSection(Async)");
        }

        return transactionsListByInvoiceSectionCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);

    }

    /**
     * 
     * Lists the transactions by invoice section name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return TransactionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public TransactionListResult transactionsListByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        ApiResponse<TransactionListResult> localVarResp = transactionsListByInvoiceSectionWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, periodStartDate, periodEndDate, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the transactions by invoice section name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @return ApiResponse&lt;TransactionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public ApiResponse<TransactionListResult> transactionsListByInvoiceSectionWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, String periodStartDate, String periodEndDate, String $filter) throws ApiException {
        okhttp3.Call localVarCall = transactionsListByInvoiceSectionValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, periodStartDate, periodEndDate, $filter, null);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the transactions by invoice section name for given start date and end date.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param apiVersion Version of the API to be used with the client request. The current version is 2019-10-01-preview. (required)
     * @param periodStartDate Start date (required)
     * @param periodEndDate End date (required)
     * @param $filter May be used to filter by transaction kind. The filter supports &#39;eq&#39;, &#39;lt&#39;, &#39;gt&#39;, &#39;le&#39;, &#39;ge&#39;, and &#39;and&#39;. It does not currently support &#39;ne&#39;, &#39;or&#39;, or &#39;not&#39;. Tag filter is a key value pair string where key and value is separated by a colon (:). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://docs.microsoft.com/en-us/rest/api/billing/"> Documentation</a>
     */
    public okhttp3.Call transactionsListByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, String periodStartDate, String periodEndDate, String $filter, final ApiCallback<TransactionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsListByInvoiceSectionValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, periodStartDate, periodEndDate, $filter, _callback);
        Type localVarReturnType = new TypeToken<TransactionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
