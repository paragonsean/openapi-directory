/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressDetails;
import org.openapitools.client.model.BillingProfile;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.Enrollment;
import org.openapitools.client.model.EnrollmentAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the billing account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingAccountProperties {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressDetails address;

  /**
   * The type of agreement.
   */
  @JsonAdapter(AgreementTypeEnum.Adapter.class)
  public enum AgreementTypeEnum {
    MICROSOFT_CUSTOMER_AGREEMENT("MicrosoftCustomerAgreement"),
    
    ENTERPRISE_AGREEMENT("EnterpriseAgreement"),
    
    MICROSOFT_ONLINE_SERVICES_PROGRAM("MicrosoftOnlineServicesProgram"),
    
    MICROSOFT_PARTNER_AGREEMENT("MicrosoftPartnerAgreement");

    private String value;

    AgreementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgreementTypeEnum fromValue(String value) {
      for (AgreementTypeEnum b : AgreementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgreementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgreementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgreementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgreementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgreementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGREEMENT_TYPE = "agreementType";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_TYPE)
  private AgreementTypeEnum agreementType;

  public static final String SERIALIZED_NAME_BILLING_PROFILES = "billingProfiles";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILES)
  private List<BillingProfile> billingProfiles = new ArrayList<>();

  /**
   * The type of customer.
   */
  @JsonAdapter(CustomerTypeEnum.Adapter.class)
  public enum CustomerTypeEnum {
    ENTERPRISE("Enterprise"),
    
    INDIVIDUAL("Individual"),
    
    PARTNER("Partner");

    private String value;

    CustomerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerTypeEnum fromValue(String value) {
      for (CustomerTypeEnum b : CustomerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_TYPE = "customerType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPE)
  private CustomerTypeEnum customerType;

  public static final String SERIALIZED_NAME_DEPARTMENTS = "departments";
  @SerializedName(SERIALIZED_NAME_DEPARTMENTS)
  private List<Department> departments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENROLLMENT_ACCOUNTS = "enrollmentAccounts";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ACCOUNTS)
  private List<EnrollmentAccount> enrollmentAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENROLLMENT_DETAILS = "enrollmentDetails";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_DETAILS)
  private Enrollment enrollmentDetails;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public BillingAccountProperties() {
  }

  public BillingAccountProperties(
     AgreementTypeEnum agreementType, 
     CustomerTypeEnum customerType, 
     String displayName, 
     String organizationId
  ) {
    this();
    this.agreementType = agreementType;
    this.customerType = customerType;
    this.displayName = displayName;
    this.organizationId = organizationId;
  }

  public BillingAccountProperties address(AddressDetails address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public AddressDetails getAddress() {
    return address;
  }

  public void setAddress(AddressDetails address) {
    this.address = address;
  }


  /**
   * The type of agreement.
   * @return agreementType
   */
  @javax.annotation.Nullable
  public AgreementTypeEnum getAgreementType() {
    return agreementType;
  }



  public BillingAccountProperties billingProfiles(List<BillingProfile> billingProfiles) {
    this.billingProfiles = billingProfiles;
    return this;
  }

  public BillingAccountProperties addBillingProfilesItem(BillingProfile billingProfilesItem) {
    if (this.billingProfiles == null) {
      this.billingProfiles = new ArrayList<>();
    }
    this.billingProfiles.add(billingProfilesItem);
    return this;
  }

  /**
   * The billing profiles associated to the billing account. By default this is not populated, unless it&#39;s specified in $expand.
   * @return billingProfiles
   */
  @javax.annotation.Nullable
  public List<BillingProfile> getBillingProfiles() {
    return billingProfiles;
  }

  public void setBillingProfiles(List<BillingProfile> billingProfiles) {
    this.billingProfiles = billingProfiles;
  }


  /**
   * The type of customer.
   * @return customerType
   */
  @javax.annotation.Nullable
  public CustomerTypeEnum getCustomerType() {
    return customerType;
  }



  public BillingAccountProperties departments(List<Department> departments) {
    this.departments = departments;
    return this;
  }

  public BillingAccountProperties addDepartmentsItem(Department departmentsItem) {
    if (this.departments == null) {
      this.departments = new ArrayList<>();
    }
    this.departments.add(departmentsItem);
    return this;
  }

  /**
   * The departments associated to the enrollment.
   * @return departments
   */
  @javax.annotation.Nullable
  public List<Department> getDepartments() {
    return departments;
  }

  public void setDepartments(List<Department> departments) {
    this.departments = departments;
  }


  /**
   * The billing account name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public BillingAccountProperties enrollmentAccounts(List<EnrollmentAccount> enrollmentAccounts) {
    this.enrollmentAccounts = enrollmentAccounts;
    return this;
  }

  public BillingAccountProperties addEnrollmentAccountsItem(EnrollmentAccount enrollmentAccountsItem) {
    if (this.enrollmentAccounts == null) {
      this.enrollmentAccounts = new ArrayList<>();
    }
    this.enrollmentAccounts.add(enrollmentAccountsItem);
    return this;
  }

  /**
   * The accounts associated to the enrollment.
   * @return enrollmentAccounts
   */
  @javax.annotation.Nullable
  public List<EnrollmentAccount> getEnrollmentAccounts() {
    return enrollmentAccounts;
  }

  public void setEnrollmentAccounts(List<EnrollmentAccount> enrollmentAccounts) {
    this.enrollmentAccounts = enrollmentAccounts;
  }


  public BillingAccountProperties enrollmentDetails(Enrollment enrollmentDetails) {
    this.enrollmentDetails = enrollmentDetails;
    return this;
  }

  /**
   * Get enrollmentDetails
   * @return enrollmentDetails
   */
  @javax.annotation.Nullable
  public Enrollment getEnrollmentDetails() {
    return enrollmentDetails;
  }

  public void setEnrollmentDetails(Enrollment enrollmentDetails) {
    this.enrollmentDetails = enrollmentDetails;
  }


  /**
   * Organization id.
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingAccountProperties billingAccountProperties = (BillingAccountProperties) o;
    return Objects.equals(this.address, billingAccountProperties.address) &&
        Objects.equals(this.agreementType, billingAccountProperties.agreementType) &&
        Objects.equals(this.billingProfiles, billingAccountProperties.billingProfiles) &&
        Objects.equals(this.customerType, billingAccountProperties.customerType) &&
        Objects.equals(this.departments, billingAccountProperties.departments) &&
        Objects.equals(this.displayName, billingAccountProperties.displayName) &&
        Objects.equals(this.enrollmentAccounts, billingAccountProperties.enrollmentAccounts) &&
        Objects.equals(this.enrollmentDetails, billingAccountProperties.enrollmentDetails) &&
        Objects.equals(this.organizationId, billingAccountProperties.organizationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, agreementType, billingProfiles, customerType, departments, displayName, enrollmentAccounts, enrollmentDetails, organizationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingAccountProperties {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    agreementType: ").append(toIndentedString(agreementType)).append("\n");
    sb.append("    billingProfiles: ").append(toIndentedString(billingProfiles)).append("\n");
    sb.append("    customerType: ").append(toIndentedString(customerType)).append("\n");
    sb.append("    departments: ").append(toIndentedString(departments)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enrollmentAccounts: ").append(toIndentedString(enrollmentAccounts)).append("\n");
    sb.append("    enrollmentDetails: ").append(toIndentedString(enrollmentDetails)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("agreementType");
    openapiFields.add("billingProfiles");
    openapiFields.add("customerType");
    openapiFields.add("departments");
    openapiFields.add("displayName");
    openapiFields.add("enrollmentAccounts");
    openapiFields.add("enrollmentDetails");
    openapiFields.add("organizationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingAccountProperties is not found in the empty JSON string", BillingAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AddressDetails.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("agreementType") != null && !jsonObj.get("agreementType").isJsonNull()) && !jsonObj.get("agreementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementType").toString()));
      }
      // validate the optional field `agreementType`
      if (jsonObj.get("agreementType") != null && !jsonObj.get("agreementType").isJsonNull()) {
        AgreementTypeEnum.validateJsonElement(jsonObj.get("agreementType"));
      }
      if (jsonObj.get("billingProfiles") != null && !jsonObj.get("billingProfiles").isJsonNull()) {
        JsonArray jsonArraybillingProfiles = jsonObj.getAsJsonArray("billingProfiles");
        if (jsonArraybillingProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("billingProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `billingProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("billingProfiles").toString()));
          }

          // validate the optional field `billingProfiles` (array)
          for (int i = 0; i < jsonArraybillingProfiles.size(); i++) {
            BillingProfile.validateJsonElement(jsonArraybillingProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) && !jsonObj.get("customerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerType").toString()));
      }
      // validate the optional field `customerType`
      if (jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) {
        CustomerTypeEnum.validateJsonElement(jsonObj.get("customerType"));
      }
      if (jsonObj.get("departments") != null && !jsonObj.get("departments").isJsonNull()) {
        JsonArray jsonArraydepartments = jsonObj.getAsJsonArray("departments");
        if (jsonArraydepartments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("departments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `departments` to be an array in the JSON string but got `%s`", jsonObj.get("departments").toString()));
          }

          // validate the optional field `departments` (array)
          for (int i = 0; i < jsonArraydepartments.size(); i++) {
            Department.validateJsonElement(jsonArraydepartments.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("enrollmentAccounts") != null && !jsonObj.get("enrollmentAccounts").isJsonNull()) {
        JsonArray jsonArrayenrollmentAccounts = jsonObj.getAsJsonArray("enrollmentAccounts");
        if (jsonArrayenrollmentAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enrollmentAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enrollmentAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("enrollmentAccounts").toString()));
          }

          // validate the optional field `enrollmentAccounts` (array)
          for (int i = 0; i < jsonArrayenrollmentAccounts.size(); i++) {
            EnrollmentAccount.validateJsonElement(jsonArrayenrollmentAccounts.get(i));
          };
        }
      }
      // validate the optional field `enrollmentDetails`
      if (jsonObj.get("enrollmentDetails") != null && !jsonObj.get("enrollmentDetails").isJsonNull()) {
        Enrollment.validateJsonElement(jsonObj.get("enrollmentDetails"));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingAccountProperties>() {
           @Override
           public void write(JsonWriter out, BillingAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingAccountProperties
   * @throws IOException if the JSON string is invalid with respect to BillingAccountProperties
   */
  public static BillingAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingAccountProperties.class);
  }

  /**
   * Convert an instance of BillingAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

