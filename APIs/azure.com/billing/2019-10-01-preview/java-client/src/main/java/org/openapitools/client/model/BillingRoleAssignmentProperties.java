/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the a role assignment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingRoleAssignmentProperties {
  public static final String SERIALIZED_NAME_CREATED_BY_PRINCIPAL_ID = "createdByPrincipalId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_PRINCIPAL_ID)
  private String createdByPrincipalId;

  public static final String SERIALIZED_NAME_CREATED_BY_PRINCIPAL_TENANT_ID = "createdByPrincipalTenantId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_PRINCIPAL_TENANT_ID)
  private String createdByPrincipalTenantId;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private String createdOn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private String principalId;

  public static final String SERIALIZED_NAME_ROLE_DEFINITION_NAME = "roleDefinitionName";
  @SerializedName(SERIALIZED_NAME_ROLE_DEFINITION_NAME)
  private String roleDefinitionName;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public BillingRoleAssignmentProperties() {
  }

  public BillingRoleAssignmentProperties(
     String createdByPrincipalId, 
     String createdByPrincipalTenantId, 
     String createdOn, 
     String name, 
     String principalId, 
     String roleDefinitionName, 
     String scope
  ) {
    this();
    this.createdByPrincipalId = createdByPrincipalId;
    this.createdByPrincipalTenantId = createdByPrincipalTenantId;
    this.createdOn = createdOn;
    this.name = name;
    this.principalId = principalId;
    this.roleDefinitionName = roleDefinitionName;
    this.scope = scope;
  }

  /**
   * the creator&#39;s principal Id
   * @return createdByPrincipalId
   */
  @javax.annotation.Nullable
  public String getCreatedByPrincipalId() {
    return createdByPrincipalId;
  }



  /**
   * the creator&#39;s tenant Id
   * @return createdByPrincipalTenantId
   */
  @javax.annotation.Nullable
  public String getCreatedByPrincipalTenantId() {
    return createdByPrincipalTenantId;
  }



  /**
   * the date the role assignment is created
   * @return createdOn
   */
  @javax.annotation.Nullable
  public String getCreatedOn() {
    return createdOn;
  }



  /**
   * the name of the role assignment
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The user&#39;s principal id that the role gets assigned to
   * @return principalId
   */
  @javax.annotation.Nullable
  public String getPrincipalId() {
    return principalId;
  }



  /**
   * The role definition id
   * @return roleDefinitionName
   */
  @javax.annotation.Nullable
  public String getRoleDefinitionName() {
    return roleDefinitionName;
  }



  /**
   * The scope the role get assigned to
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingRoleAssignmentProperties billingRoleAssignmentProperties = (BillingRoleAssignmentProperties) o;
    return Objects.equals(this.createdByPrincipalId, billingRoleAssignmentProperties.createdByPrincipalId) &&
        Objects.equals(this.createdByPrincipalTenantId, billingRoleAssignmentProperties.createdByPrincipalTenantId) &&
        Objects.equals(this.createdOn, billingRoleAssignmentProperties.createdOn) &&
        Objects.equals(this.name, billingRoleAssignmentProperties.name) &&
        Objects.equals(this.principalId, billingRoleAssignmentProperties.principalId) &&
        Objects.equals(this.roleDefinitionName, billingRoleAssignmentProperties.roleDefinitionName) &&
        Objects.equals(this.scope, billingRoleAssignmentProperties.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdByPrincipalId, createdByPrincipalTenantId, createdOn, name, principalId, roleDefinitionName, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingRoleAssignmentProperties {\n");
    sb.append("    createdByPrincipalId: ").append(toIndentedString(createdByPrincipalId)).append("\n");
    sb.append("    createdByPrincipalTenantId: ").append(toIndentedString(createdByPrincipalTenantId)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    roleDefinitionName: ").append(toIndentedString(roleDefinitionName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdByPrincipalId");
    openapiFields.add("createdByPrincipalTenantId");
    openapiFields.add("createdOn");
    openapiFields.add("name");
    openapiFields.add("principalId");
    openapiFields.add("roleDefinitionName");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingRoleAssignmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingRoleAssignmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingRoleAssignmentProperties is not found in the empty JSON string", BillingRoleAssignmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingRoleAssignmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingRoleAssignmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdByPrincipalId") != null && !jsonObj.get("createdByPrincipalId").isJsonNull()) && !jsonObj.get("createdByPrincipalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByPrincipalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByPrincipalId").toString()));
      }
      if ((jsonObj.get("createdByPrincipalTenantId") != null && !jsonObj.get("createdByPrincipalTenantId").isJsonNull()) && !jsonObj.get("createdByPrincipalTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByPrincipalTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByPrincipalTenantId").toString()));
      }
      if ((jsonObj.get("createdOn") != null && !jsonObj.get("createdOn").isJsonNull()) && !jsonObj.get("createdOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdOn").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("principalId") != null && !jsonObj.get("principalId").isJsonNull()) && !jsonObj.get("principalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalId").toString()));
      }
      if ((jsonObj.get("roleDefinitionName") != null && !jsonObj.get("roleDefinitionName").isJsonNull()) && !jsonObj.get("roleDefinitionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleDefinitionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleDefinitionName").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingRoleAssignmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingRoleAssignmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingRoleAssignmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingRoleAssignmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingRoleAssignmentProperties>() {
           @Override
           public void write(JsonWriter out, BillingRoleAssignmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingRoleAssignmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingRoleAssignmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingRoleAssignmentProperties
   * @throws IOException if the JSON string is invalid with respect to BillingRoleAssignmentProperties
   */
  public static BillingRoleAssignmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingRoleAssignmentProperties.class);
  }

  /**
   * Convert an instance of BillingRoleAssignmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

