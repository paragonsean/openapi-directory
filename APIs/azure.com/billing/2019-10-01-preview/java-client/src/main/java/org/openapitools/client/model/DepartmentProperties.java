/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnrollmentAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the department.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DepartmentProperties {
  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_DEPARTMENT_NAME = "departmentName";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_NAME)
  private String departmentName;

  public static final String SERIALIZED_NAME_ENROLLMENT_ACCOUNTS = "enrollmentAccounts";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ACCOUNTS)
  private List<EnrollmentAccount> enrollmentAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public DepartmentProperties() {
  }

  public DepartmentProperties costCenter(String costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * The cost center name.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(String costCenter) {
    this.costCenter = costCenter;
  }


  public DepartmentProperties departmentName(String departmentName) {
    this.departmentName = departmentName;
    return this;
  }

  /**
   * The name for department.
   * @return departmentName
   */
  @javax.annotation.Nullable
  public String getDepartmentName() {
    return departmentName;
  }

  public void setDepartmentName(String departmentName) {
    this.departmentName = departmentName;
  }


  public DepartmentProperties enrollmentAccounts(List<EnrollmentAccount> enrollmentAccounts) {
    this.enrollmentAccounts = enrollmentAccounts;
    return this;
  }

  public DepartmentProperties addEnrollmentAccountsItem(EnrollmentAccount enrollmentAccountsItem) {
    if (this.enrollmentAccounts == null) {
      this.enrollmentAccounts = new ArrayList<>();
    }
    this.enrollmentAccounts.add(enrollmentAccountsItem);
    return this;
  }

  /**
   * Associated enrollment accounts. By default this is not populated, unless it&#39;s specified in $expand.
   * @return enrollmentAccounts
   */
  @javax.annotation.Nullable
  public List<EnrollmentAccount> getEnrollmentAccounts() {
    return enrollmentAccounts;
  }

  public void setEnrollmentAccounts(List<EnrollmentAccount> enrollmentAccounts) {
    this.enrollmentAccounts = enrollmentAccounts;
  }


  public DepartmentProperties status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status for department.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepartmentProperties departmentProperties = (DepartmentProperties) o;
    return Objects.equals(this.costCenter, departmentProperties.costCenter) &&
        Objects.equals(this.departmentName, departmentProperties.departmentName) &&
        Objects.equals(this.enrollmentAccounts, departmentProperties.enrollmentAccounts) &&
        Objects.equals(this.status, departmentProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCenter, departmentName, enrollmentAccounts, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepartmentProperties {\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    departmentName: ").append(toIndentedString(departmentName)).append("\n");
    sb.append("    enrollmentAccounts: ").append(toIndentedString(enrollmentAccounts)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costCenter");
    openapiFields.add("departmentName");
    openapiFields.add("enrollmentAccounts");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DepartmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DepartmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepartmentProperties is not found in the empty JSON string", DepartmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DepartmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DepartmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("departmentName") != null && !jsonObj.get("departmentName").isJsonNull()) && !jsonObj.get("departmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentName").toString()));
      }
      if (jsonObj.get("enrollmentAccounts") != null && !jsonObj.get("enrollmentAccounts").isJsonNull()) {
        JsonArray jsonArrayenrollmentAccounts = jsonObj.getAsJsonArray("enrollmentAccounts");
        if (jsonArrayenrollmentAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enrollmentAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enrollmentAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("enrollmentAccounts").toString()));
          }

          // validate the optional field `enrollmentAccounts` (array)
          for (int i = 0; i < jsonArrayenrollmentAccounts.size(); i++) {
            EnrollmentAccount.validateJsonElement(jsonArrayenrollmentAccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepartmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepartmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepartmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepartmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DepartmentProperties>() {
           @Override
           public void write(JsonWriter out, DepartmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DepartmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DepartmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DepartmentProperties
   * @throws IOException if the JSON string is invalid with respect to DepartmentProperties
   */
  public static DepartmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepartmentProperties.class);
  }

  /**
   * Convert an instance of DepartmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

