/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Participants;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the agreement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgreementProperties {
  public static final String SERIALIZED_NAME_AGREEMENT_LINK = "agreementLink";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_LINK)
  private String agreementLink;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<Participants> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public AgreementProperties() {
  }

  public AgreementProperties(
     String agreementLink, 
     OffsetDateTime effectiveDate, 
     OffsetDateTime expirationDate, 
     String status
  ) {
    this();
    this.agreementLink = agreementLink;
    this.effectiveDate = effectiveDate;
    this.expirationDate = expirationDate;
    this.status = status;
  }

  /**
   * The link to the agreement.
   * @return agreementLink
   */
  @javax.annotation.Nullable
  public String getAgreementLink() {
    return agreementLink;
  }



  /**
   * Effective date.
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }



  /**
   * Expiration date.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }



  public AgreementProperties participants(List<Participants> participants) {
    this.participants = participants;
    return this;
  }

  public AgreementProperties addParticipantsItem(Participants participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Participants or signer of the agreement.
   * @return participants
   */
  @javax.annotation.Nullable
  public List<Participants> getParticipants() {
    return participants;
  }

  public void setParticipants(List<Participants> participants) {
    this.participants = participants;
  }


  /**
   * The agreement status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgreementProperties agreementProperties = (AgreementProperties) o;
    return Objects.equals(this.agreementLink, agreementProperties.agreementLink) &&
        Objects.equals(this.effectiveDate, agreementProperties.effectiveDate) &&
        Objects.equals(this.expirationDate, agreementProperties.expirationDate) &&
        Objects.equals(this.participants, agreementProperties.participants) &&
        Objects.equals(this.status, agreementProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementLink, effectiveDate, expirationDate, participants, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgreementProperties {\n");
    sb.append("    agreementLink: ").append(toIndentedString(agreementLink)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreementLink");
    openapiFields.add("effectiveDate");
    openapiFields.add("expirationDate");
    openapiFields.add("participants");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgreementProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgreementProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgreementProperties is not found in the empty JSON string", AgreementProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgreementProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgreementProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agreementLink") != null && !jsonObj.get("agreementLink").isJsonNull()) && !jsonObj.get("agreementLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementLink").toString()));
      }
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull()) {
        JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
        if (jsonArrayparticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
          }

          // validate the optional field `participants` (array)
          for (int i = 0; i < jsonArrayparticipants.size(); i++) {
            Participants.validateJsonElement(jsonArrayparticipants.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgreementProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgreementProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgreementProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgreementProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AgreementProperties>() {
           @Override
           public void write(JsonWriter out, AgreementProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgreementProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgreementProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgreementProperties
   * @throws IOException if the JSON string is invalid with respect to AgreementProperties
   */
  public static AgreementProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgreementProperties.class);
  }

  /**
   * Convert an instance of AgreementProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

