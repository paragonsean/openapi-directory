/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.InitiateTransferRequest;
import org.openapitools.client.model.TransferDetails;
import org.openapitools.client.model.TransferDetailsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransfersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransfersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransfersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for partnerTransfersCancel
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersCancelCall(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()))
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerTransfersCancelValidateBeforeCall(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling partnerTransfersCancel(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling partnerTransfersCancel(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling partnerTransfersCancel(Async)");
        }

        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling partnerTransfersCancel(Async)");
        }

        return partnerTransfersCancelCall(billingAccountName, billingProfileName, customerName, transferName, _callback);

    }

    /**
     * 
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails partnerTransfersCancel(String billingAccountName, String billingProfileName, String customerName, String transferName) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = partnerTransfersCancelWithHttpInfo(billingAccountName, billingProfileName, customerName, transferName);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> partnerTransfersCancelWithHttpInfo(String billingAccountName, String billingProfileName, String customerName, String transferName) throws ApiException {
        okhttp3.Call localVarCall = partnerTransfersCancelValidateBeforeCall(billingAccountName, billingProfileName, customerName, transferName, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersCancelAsync(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerTransfersCancelValidateBeforeCall(billingAccountName, billingProfileName, customerName, transferName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerTransfersGet
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersGetCall(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()))
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerTransfersGetValidateBeforeCall(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling partnerTransfersGet(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling partnerTransfersGet(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling partnerTransfersGet(Async)");
        }

        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling partnerTransfersGet(Async)");
        }

        return partnerTransfersGetCall(billingAccountName, billingProfileName, customerName, transferName, _callback);

    }

    /**
     * 
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails partnerTransfersGet(String billingAccountName, String billingProfileName, String customerName, String transferName) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = partnerTransfersGetWithHttpInfo(billingAccountName, billingProfileName, customerName, transferName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> partnerTransfersGetWithHttpInfo(String billingAccountName, String billingProfileName, String customerName, String transferName) throws ApiException {
        okhttp3.Call localVarCall = partnerTransfersGetValidateBeforeCall(billingAccountName, billingProfileName, customerName, transferName, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersGetAsync(String billingAccountName, String billingProfileName, String customerName, String transferName, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerTransfersGetValidateBeforeCall(billingAccountName, billingProfileName, customerName, transferName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerTransfersInitiate
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersInitiateCall(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/initiateTransfer"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerTransfersInitiateValidateBeforeCall(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling partnerTransfersInitiate(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling partnerTransfersInitiate(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling partnerTransfersInitiate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling partnerTransfersInitiate(Async)");
        }

        return partnerTransfersInitiateCall(billingAccountName, billingProfileName, customerName, parameters, _callback);

    }

    /**
     * 
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails partnerTransfersInitiate(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = partnerTransfersInitiateWithHttpInfo(billingAccountName, billingProfileName, customerName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> partnerTransfersInitiateWithHttpInfo(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = partnerTransfersInitiateValidateBeforeCall(billingAccountName, billingProfileName, customerName, parameters, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersInitiateAsync(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerTransfersInitiateValidateBeforeCall(billingAccountName, billingProfileName, customerName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerTransfersList
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersListCall(String billingAccountName, String billingProfileName, String customerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerTransfersListValidateBeforeCall(String billingAccountName, String billingProfileName, String customerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling partnerTransfersList(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling partnerTransfersList(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling partnerTransfersList(Async)");
        }

        return partnerTransfersListCall(billingAccountName, billingProfileName, customerName, _callback);

    }

    /**
     * 
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @return TransferDetailsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetailsListResult partnerTransfersList(String billingAccountName, String billingProfileName, String customerName) throws ApiException {
        ApiResponse<TransferDetailsListResult> localVarResp = partnerTransfersListWithHttpInfo(billingAccountName, billingProfileName, customerName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @return ApiResponse&lt;TransferDetailsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetailsListResult> partnerTransfersListWithHttpInfo(String billingAccountName, String billingProfileName, String customerName) throws ApiException {
        okhttp3.Call localVarCall = partnerTransfersListValidateBeforeCall(billingAccountName, billingProfileName, customerName, null);
        Type localVarReturnType = new TypeToken<TransferDetailsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param customerName Customer name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partnerTransfersListAsync(String billingAccountName, String billingProfileName, String customerName, final ApiCallback<TransferDetailsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerTransfersListValidateBeforeCall(billingAccountName, billingProfileName, customerName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetailsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transfersCancel
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersCancelCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transfersCancelValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transfersCancel(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transfersCancel(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling transfersCancel(Async)");
        }

        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling transfersCancel(Async)");
        }

        return transfersCancelCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, _callback);

    }

    /**
     * 
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails transfersCancel(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = transfersCancelWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, transferName);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> transfersCancelWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName) throws ApiException {
        okhttp3.Call localVarCall = transfersCancelValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels the transfer for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of canceled transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersCancelAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = transfersCancelValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transfersGet
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersGetCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "transferName" + "}", localVarApiClient.escapeString(transferName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transfersGetValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transfersGet(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transfersGet(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling transfersGet(Async)");
        }

        // verify the required parameter 'transferName' is set
        if (transferName == null) {
            throw new ApiException("Missing the required parameter 'transferName' when calling transfersGet(Async)");
        }

        return transfersGetCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, _callback);

    }

    /**
     * 
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails transfersGet(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = transfersGetWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, transferName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> transfersGetWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName) throws ApiException {
        okhttp3.Call localVarCall = transfersGetValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the transfer details for given transfer Id.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param transferName Transfer Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of transfer. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersGetAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String transferName, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = transfersGetValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, transferName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transfersInitiate
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersInitiateCall(String billingAccountName, String billingProfileName, String invoiceSectionName, InitiateTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/initiateTransfer"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transfersInitiateValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, InitiateTransferRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transfersInitiate(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transfersInitiate(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling transfersInitiate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling transfersInitiate(Async)");
        }

        return transfersInitiateCall(billingAccountName, billingProfileName, invoiceSectionName, parameters, _callback);

    }

    /**
     * 
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @return TransferDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetails transfersInitiate(String billingAccountName, String billingProfileName, String invoiceSectionName, InitiateTransferRequest parameters) throws ApiException {
        ApiResponse<TransferDetails> localVarResp = transfersInitiateWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @return ApiResponse&lt;TransferDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetails> transfersInitiateWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, InitiateTransferRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = transfersInitiateValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, parameters, null);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiates the request to transfer the legacy subscriptions or RIs.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param parameters Parameters supplied to initiate the transfer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Initiated transfer details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersInitiateAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, InitiateTransferRequest parameters, final ApiCallback<TransferDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = transfersInitiateValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TransferDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transfersList
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersListCall(String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transfersListValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling transfersList(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling transfersList(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling transfersList(Async)");
        }

        return transfersListCall(billingAccountName, billingProfileName, invoiceSectionName, _callback);

    }

    /**
     * 
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return TransferDetailsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferDetailsListResult transfersList(String billingAccountName, String billingProfileName, String invoiceSectionName) throws ApiException {
        ApiResponse<TransferDetailsListResult> localVarResp = transfersListWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @return ApiResponse&lt;TransferDetailsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDetailsListResult> transfersListWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName) throws ApiException {
        okhttp3.Call localVarCall = transfersListValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, null);
        Type localVarReturnType = new TypeToken<TransferDetailsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all transfer&#39;s details initiated from given invoice section.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transfers initiated from this invoice section. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transfersListAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, final ApiCallback<TransferDetailsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transfersListValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, _callback);
        Type localVarReturnType = new TypeToken<TransferDetailsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
