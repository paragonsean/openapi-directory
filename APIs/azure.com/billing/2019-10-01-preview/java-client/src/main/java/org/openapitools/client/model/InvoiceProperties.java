/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.PaymentProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the invoice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceProperties {
  public static final String SERIALIZED_NAME_AMOUNT_DUE = "amountDue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DUE)
  private Amount amountDue;

  public static final String SERIALIZED_NAME_BILLED_AMOUNT = "billedAmount";
  @SerializedName(SERIALIZED_NAME_BILLED_AMOUNT)
  private Amount billedAmount;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME = "billingProfileDisplayName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME)
  private String billingProfileDisplayName;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoiceDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_PERIOD_END_DATE = "invoicePeriodEndDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_PERIOD_END_DATE)
  private OffsetDateTime invoicePeriodEndDate;

  public static final String SERIALIZED_NAME_INVOICE_PERIOD_START_DATE = "invoicePeriodStartDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_PERIOD_START_DATE)
  private OffsetDateTime invoicePeriodStartDate;

  /**
   * Invoice type.
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    AZURE_SERVICE("AzureService"),
    
    AZURE_MARKETPLACE("AzureMarketplace"),
    
    AZURE_SUPPORT("AzureSupport");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoiceType";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<PaymentProperties> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_NUMBER = "purchaseOrderNumber";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_NUMBER)
  private String purchaseOrderNumber;

  /**
   * Invoice status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PAST_DUE("PastDue"),
    
    DUE("Due"),
    
    PAID("Paid"),
    
    VOID("Void");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public InvoiceProperties() {
  }

  public InvoiceProperties(
     String billingProfileDisplayName, 
     String billingProfileId, 
     List<Document> documents, 
     OffsetDateTime dueDate, 
     OffsetDateTime invoiceDate, 
     OffsetDateTime invoicePeriodEndDate, 
     OffsetDateTime invoicePeriodStartDate, 
     InvoiceTypeEnum invoiceType, 
     List<PaymentProperties> payments, 
     String purchaseOrderNumber, 
     StatusEnum status
  ) {
    this();
    this.billingProfileDisplayName = billingProfileDisplayName;
    this.billingProfileId = billingProfileId;
    this.documents = documents;
    this.dueDate = dueDate;
    this.invoiceDate = invoiceDate;
    this.invoicePeriodEndDate = invoicePeriodEndDate;
    this.invoicePeriodStartDate = invoicePeriodStartDate;
    this.invoiceType = invoiceType;
    this.payments = payments;
    this.purchaseOrderNumber = purchaseOrderNumber;
    this.status = status;
  }

  public InvoiceProperties amountDue(Amount amountDue) {
    this.amountDue = amountDue;
    return this;
  }

  /**
   * Get amountDue
   * @return amountDue
   */
  @javax.annotation.Nullable
  public Amount getAmountDue() {
    return amountDue;
  }

  public void setAmountDue(Amount amountDue) {
    this.amountDue = amountDue;
  }


  public InvoiceProperties billedAmount(Amount billedAmount) {
    this.billedAmount = billedAmount;
    return this;
  }

  /**
   * Get billedAmount
   * @return billedAmount
   */
  @javax.annotation.Nullable
  public Amount getBilledAmount() {
    return billedAmount;
  }

  public void setBilledAmount(Amount billedAmount) {
    this.billedAmount = billedAmount;
  }


  /**
   * The billing profile display name this invoice belongs to.
   * @return billingProfileDisplayName
   */
  @javax.annotation.Nullable
  public String getBillingProfileDisplayName() {
    return billingProfileDisplayName;
  }



  /**
   * The billing profile id this invoice belongs to.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * List of documents available to download including invoice and tax documents.
   * @return documents
   */
  @javax.annotation.Nullable
  public List<Document> getDocuments() {
    return documents;
  }



  /**
   * The due date for invoice.
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }



  /**
   * The date when invoice was created.
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }



  /**
   * The end date of the billing period.
   * @return invoicePeriodEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoicePeriodEndDate() {
    return invoicePeriodEndDate;
  }



  /**
   * The start date of the billing period.
   * @return invoicePeriodStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoicePeriodStartDate() {
    return invoicePeriodStartDate;
  }



  /**
   * Invoice type.
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }



  /**
   * List of payments.
   * @return payments
   */
  @javax.annotation.Nullable
  public List<PaymentProperties> getPayments() {
    return payments;
  }



  /**
   * The purchase identifier for the invoice.
   * @return purchaseOrderNumber
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderNumber() {
    return purchaseOrderNumber;
  }



  /**
   * Invoice status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceProperties invoiceProperties = (InvoiceProperties) o;
    return Objects.equals(this.amountDue, invoiceProperties.amountDue) &&
        Objects.equals(this.billedAmount, invoiceProperties.billedAmount) &&
        Objects.equals(this.billingProfileDisplayName, invoiceProperties.billingProfileDisplayName) &&
        Objects.equals(this.billingProfileId, invoiceProperties.billingProfileId) &&
        Objects.equals(this.documents, invoiceProperties.documents) &&
        Objects.equals(this.dueDate, invoiceProperties.dueDate) &&
        Objects.equals(this.invoiceDate, invoiceProperties.invoiceDate) &&
        Objects.equals(this.invoicePeriodEndDate, invoiceProperties.invoicePeriodEndDate) &&
        Objects.equals(this.invoicePeriodStartDate, invoiceProperties.invoicePeriodStartDate) &&
        Objects.equals(this.invoiceType, invoiceProperties.invoiceType) &&
        Objects.equals(this.payments, invoiceProperties.payments) &&
        Objects.equals(this.purchaseOrderNumber, invoiceProperties.purchaseOrderNumber) &&
        Objects.equals(this.status, invoiceProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountDue, billedAmount, billingProfileDisplayName, billingProfileId, documents, dueDate, invoiceDate, invoicePeriodEndDate, invoicePeriodStartDate, invoiceType, payments, purchaseOrderNumber, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceProperties {\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    billedAmount: ").append(toIndentedString(billedAmount)).append("\n");
    sb.append("    billingProfileDisplayName: ").append(toIndentedString(billingProfileDisplayName)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoicePeriodEndDate: ").append(toIndentedString(invoicePeriodEndDate)).append("\n");
    sb.append("    invoicePeriodStartDate: ").append(toIndentedString(invoicePeriodStartDate)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountDue");
    openapiFields.add("billedAmount");
    openapiFields.add("billingProfileDisplayName");
    openapiFields.add("billingProfileId");
    openapiFields.add("documents");
    openapiFields.add("dueDate");
    openapiFields.add("invoiceDate");
    openapiFields.add("invoicePeriodEndDate");
    openapiFields.add("invoicePeriodStartDate");
    openapiFields.add("invoiceType");
    openapiFields.add("payments");
    openapiFields.add("purchaseOrderNumber");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceProperties is not found in the empty JSON string", InvoiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amountDue`
      if (jsonObj.get("amountDue") != null && !jsonObj.get("amountDue").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("amountDue"));
      }
      // validate the optional field `billedAmount`
      if (jsonObj.get("billedAmount") != null && !jsonObj.get("billedAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("billedAmount"));
      }
      if ((jsonObj.get("billingProfileDisplayName") != null && !jsonObj.get("billingProfileDisplayName").isJsonNull()) && !jsonObj.get("billingProfileDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileDisplayName").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            Document.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) && !jsonObj.get("invoiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceType").toString()));
      }
      // validate the optional field `invoiceType`
      if (jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) {
        InvoiceTypeEnum.validateJsonElement(jsonObj.get("invoiceType"));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            PaymentProperties.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if ((jsonObj.get("purchaseOrderNumber") != null && !jsonObj.get("purchaseOrderNumber").isJsonNull()) && !jsonObj.get("purchaseOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderNumber").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceProperties>() {
           @Override
           public void write(JsonWriter out, InvoiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceProperties
   * @throws IOException if the JSON string is invalid with respect to InvoiceProperties
   */
  public static InvoiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceProperties.class);
  }

  /**
   * Convert an instance of InvoiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

