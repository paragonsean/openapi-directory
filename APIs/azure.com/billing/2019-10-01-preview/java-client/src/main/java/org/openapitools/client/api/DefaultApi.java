/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.TransferBillingSubscriptionRequestProperties;
import org.openapitools.client.model.TransferBillingSubscriptionResult;
import org.openapitools.client.model.TransferProductRequestProperties;
import org.openapitools.client.model.ValidateProductTransferEligibilityResult;
import org.openapitools.client.model.ValidateSubscriptionTransferEligibilityResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billingSubscriptionsTransfer
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Billing Subscription transfer is in progress. </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsTransferCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingSubscriptionName" + "}", localVarApiClient.escapeString(billingSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsTransferValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingSubscriptionsTransfer(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingSubscriptionsTransfer(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingSubscriptionsTransfer(Async)");
        }

        // verify the required parameter 'billingSubscriptionName' is set
        if (billingSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'billingSubscriptionName' when calling billingSubscriptionsTransfer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingSubscriptionsTransfer(Async)");
        }

        return billingSubscriptionsTransferCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, _callback);

    }

    /**
     * 
     * Transfers the subscription from one invoice section to another within a billing account.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation. (required)
     * @return TransferBillingSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Billing Subscription transfer is in progress. </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public TransferBillingSubscriptionResult billingSubscriptionsTransfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) throws ApiException {
        ApiResponse<TransferBillingSubscriptionResult> localVarResp = billingSubscriptionsTransferWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Transfers the subscription from one invoice section to another within a billing account.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation. (required)
     * @return ApiResponse&lt;TransferBillingSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Billing Subscription transfer is in progress. </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferBillingSubscriptionResult> billingSubscriptionsTransferWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, null);
        Type localVarReturnType = new TypeToken<TransferBillingSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfers the subscription from one invoice section to another within a billing account.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Billing Subscription transfer is in progress. </td><td>  * Retry-After - Recommends the retryable time after receiving this. <br>  * Location - Location URI to poll for result. <br>  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback<TransferBillingSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TransferBillingSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingSubscriptionsValidateTransfer
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsValidateTransferCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/validateTransferEligibility"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "billingSubscriptionName" + "}", localVarApiClient.escapeString(billingSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingSubscriptionsValidateTransferValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling billingSubscriptionsValidateTransfer(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling billingSubscriptionsValidateTransfer(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling billingSubscriptionsValidateTransfer(Async)");
        }

        // verify the required parameter 'billingSubscriptionName' is set
        if (billingSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'billingSubscriptionName' when calling billingSubscriptionsValidateTransfer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling billingSubscriptionsValidateTransfer(Async)");
        }

        return billingSubscriptionsValidateTransferCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, _callback);

    }

    /**
     * 
     * Validates the transfer of billing subscriptions across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation. (required)
     * @return ValidateSubscriptionTransferEligibilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateSubscriptionTransferEligibilityResult billingSubscriptionsValidateTransfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) throws ApiException {
        ApiResponse<ValidateSubscriptionTransferEligibilityResult> localVarResp = billingSubscriptionsValidateTransferWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates the transfer of billing subscriptions across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation. (required)
     * @return ApiResponse&lt;ValidateSubscriptionTransferEligibilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateSubscriptionTransferEligibilityResult> billingSubscriptionsValidateTransferWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters) throws ApiException {
        okhttp3.Call localVarCall = billingSubscriptionsValidateTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, null);
        Type localVarReturnType = new TypeToken<ValidateSubscriptionTransferEligibilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates the transfer of billing subscriptions across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param billingSubscriptionName Billing Subscription Id. (required)
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingSubscriptionsValidateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters, final ApiCallback<ValidateSubscriptionTransferEligibilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingSubscriptionsValidateTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, billingSubscriptionName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ValidateSubscriptionTransferEligibilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsValidateTransfer
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param parameters Parameters supplied to the Transfer Products operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsValidateTransferCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/validateTransferEligibility"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsValidateTransferValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling productsValidateTransfer(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling productsValidateTransfer(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling productsValidateTransfer(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling productsValidateTransfer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling productsValidateTransfer(Async)");
        }

        return productsValidateTransferCall(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters, _callback);

    }

    /**
     * 
     * Validates the transfer of products across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param parameters Parameters supplied to the Transfer Products operation. (required)
     * @return ValidateProductTransferEligibilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateProductTransferEligibilityResult productsValidateTransfer(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) throws ApiException {
        ApiResponse<ValidateProductTransferEligibilityResult> localVarResp = productsValidateTransferWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates the transfer of products across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param parameters Parameters supplied to the Transfer Products operation. (required)
     * @return ApiResponse&lt;ValidateProductTransferEligibilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateProductTransferEligibilityResult> productsValidateTransferWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) throws ApiException {
        okhttp3.Call localVarCall = productsValidateTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters, null);
        Type localVarReturnType = new TypeToken<ValidateProductTransferEligibilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates the transfer of products across invoice sections.
     * @param billingAccountName billing Account Id. (required)
     * @param billingProfileName Billing Profile Id. (required)
     * @param invoiceSectionName InvoiceSection Id. (required)
     * @param productName Invoice Id. (required)
     * @param parameters Parameters supplied to the Transfer Products operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsValidateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters, final ApiCallback<ValidateProductTransferEligibilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsValidateTransferValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ValidateProductTransferEligibilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
