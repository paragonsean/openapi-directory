/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the reservation transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionProperties {
  public static final String SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME = "billingProfileDisplayName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME)
  private String billingProfileDisplayName;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_CUSTOMER_DISPLAY_NAME = "customerDisplayName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DISPLAY_NAME)
  private String customerDisplayName;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private String invoice;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_DISPLAY_NAME = "invoiceSectionDisplayName";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_DISPLAY_NAME)
  private String invoiceSectionDisplayName;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  /**
   * The kind of transaction. Choices are all and reservation.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    ALL("all"),
    
    RESERVATION("reservation");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_NAME = "orderName";
  @SerializedName(SERIALIZED_NAME_ORDER_NAME)
  private String orderName;

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "productDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_PRODUCT_FAMILY = "productFamily";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FAMILY)
  private String productFamily;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "productTypeId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private String productTypeId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Amount transactionAmount;

  /**
   * Transaction types.
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    PURCHASE("Purchase"),
    
    USAGE_CHARGE("Usage Charge");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public TransactionProperties() {
  }

  public TransactionProperties(
     String billingProfileDisplayName, 
     String billingProfileId, 
     String customerDisplayName, 
     String customerId, 
     OffsetDateTime date, 
     String invoice, 
     String invoiceSectionDisplayName, 
     String invoiceSectionId, 
     String orderId, 
     String orderName, 
     String productDescription, 
     String productFamily, 
     String productType, 
     String productTypeId, 
     Integer quantity, 
     String subscriptionId, 
     String subscriptionName
  ) {
    this();
    this.billingProfileDisplayName = billingProfileDisplayName;
    this.billingProfileId = billingProfileId;
    this.customerDisplayName = customerDisplayName;
    this.customerId = customerId;
    this.date = date;
    this.invoice = invoice;
    this.invoiceSectionDisplayName = invoiceSectionDisplayName;
    this.invoiceSectionId = invoiceSectionId;
    this.orderId = orderId;
    this.orderName = orderName;
    this.productDescription = productDescription;
    this.productFamily = productFamily;
    this.productType = productType;
    this.productTypeId = productTypeId;
    this.quantity = quantity;
    this.subscriptionId = subscriptionId;
    this.subscriptionName = subscriptionName;
  }

  /**
   * Billing Profile display name to which this product belongs.
   * @return billingProfileDisplayName
   */
  @javax.annotation.Nullable
  public String getBillingProfileDisplayName() {
    return billingProfileDisplayName;
  }



  /**
   * Billing Profile id to which this product belongs.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * Display name of customer to which this product belongs.
   * @return customerDisplayName
   */
  @javax.annotation.Nullable
  public String getCustomerDisplayName() {
    return customerDisplayName;
  }



  /**
   * Customer id to which this product belongs.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }



  /**
   * The date of reservation transaction.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }



  /**
   * Invoice number or &#39;pending&#39; if not invoiced.
   * @return invoice
   */
  @javax.annotation.Nullable
  public String getInvoice() {
    return invoice;
  }



  /**
   * Invoice section display name to which this product belongs.
   * @return invoiceSectionDisplayName
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionDisplayName() {
    return invoiceSectionDisplayName;
  }



  /**
   * Invoice section id to which this product belongs.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  public TransactionProperties kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of transaction. Choices are all and reservation.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  /**
   * The reservation order id.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }



  /**
   * The reservation order name.
   * @return orderName
   */
  @javax.annotation.Nullable
  public String getOrderName() {
    return orderName;
  }



  /**
   * Product description.
   * @return productDescription
   */
  @javax.annotation.Nullable
  public String getProductDescription() {
    return productDescription;
  }



  /**
   * The product family.
   * @return productFamily
   */
  @javax.annotation.Nullable
  public String getProductFamily() {
    return productFamily;
  }



  /**
   * The type of product.
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }



  /**
   * The product type id.
   * @return productTypeId
   */
  @javax.annotation.Nullable
  public String getProductTypeId() {
    return productTypeId;
  }



  /**
   * Purchase quantity.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }



  /**
   * The subscription id.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  /**
   * The subscription name.
   * @return subscriptionName
   */
  @javax.annotation.Nullable
  public String getSubscriptionName() {
    return subscriptionName;
  }



  public TransactionProperties transactionAmount(Amount transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public Amount getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Amount transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public TransactionProperties transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Transaction types.
   * @return transactionType
   */
  @javax.annotation.Nullable
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionProperties transactionProperties = (TransactionProperties) o;
    return Objects.equals(this.billingProfileDisplayName, transactionProperties.billingProfileDisplayName) &&
        Objects.equals(this.billingProfileId, transactionProperties.billingProfileId) &&
        Objects.equals(this.customerDisplayName, transactionProperties.customerDisplayName) &&
        Objects.equals(this.customerId, transactionProperties.customerId) &&
        Objects.equals(this.date, transactionProperties.date) &&
        Objects.equals(this.invoice, transactionProperties.invoice) &&
        Objects.equals(this.invoiceSectionDisplayName, transactionProperties.invoiceSectionDisplayName) &&
        Objects.equals(this.invoiceSectionId, transactionProperties.invoiceSectionId) &&
        Objects.equals(this.kind, transactionProperties.kind) &&
        Objects.equals(this.orderId, transactionProperties.orderId) &&
        Objects.equals(this.orderName, transactionProperties.orderName) &&
        Objects.equals(this.productDescription, transactionProperties.productDescription) &&
        Objects.equals(this.productFamily, transactionProperties.productFamily) &&
        Objects.equals(this.productType, transactionProperties.productType) &&
        Objects.equals(this.productTypeId, transactionProperties.productTypeId) &&
        Objects.equals(this.quantity, transactionProperties.quantity) &&
        Objects.equals(this.subscriptionId, transactionProperties.subscriptionId) &&
        Objects.equals(this.subscriptionName, transactionProperties.subscriptionName) &&
        Objects.equals(this.transactionAmount, transactionProperties.transactionAmount) &&
        Objects.equals(this.transactionType, transactionProperties.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingProfileDisplayName, billingProfileId, customerDisplayName, customerId, date, invoice, invoiceSectionDisplayName, invoiceSectionId, kind, orderId, orderName, productDescription, productFamily, productType, productTypeId, quantity, subscriptionId, subscriptionName, transactionAmount, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionProperties {\n");
    sb.append("    billingProfileDisplayName: ").append(toIndentedString(billingProfileDisplayName)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    customerDisplayName: ").append(toIndentedString(customerDisplayName)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceSectionDisplayName: ").append(toIndentedString(invoiceSectionDisplayName)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderName: ").append(toIndentedString(orderName)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    productFamily: ").append(toIndentedString(productFamily)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingProfileDisplayName");
    openapiFields.add("billingProfileId");
    openapiFields.add("customerDisplayName");
    openapiFields.add("customerId");
    openapiFields.add("date");
    openapiFields.add("invoice");
    openapiFields.add("invoiceSectionDisplayName");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("kind");
    openapiFields.add("orderId");
    openapiFields.add("orderName");
    openapiFields.add("productDescription");
    openapiFields.add("productFamily");
    openapiFields.add("productType");
    openapiFields.add("productTypeId");
    openapiFields.add("quantity");
    openapiFields.add("subscriptionId");
    openapiFields.add("subscriptionName");
    openapiFields.add("transactionAmount");
    openapiFields.add("transactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionProperties is not found in the empty JSON string", TransactionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingProfileDisplayName") != null && !jsonObj.get("billingProfileDisplayName").isJsonNull()) && !jsonObj.get("billingProfileDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileDisplayName").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if ((jsonObj.get("customerDisplayName") != null && !jsonObj.get("customerDisplayName").isJsonNull()) && !jsonObj.get("customerDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerDisplayName").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) && !jsonObj.get("invoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice").toString()));
      }
      if ((jsonObj.get("invoiceSectionDisplayName") != null && !jsonObj.get("invoiceSectionDisplayName").isJsonNull()) && !jsonObj.get("invoiceSectionDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionDisplayName").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("orderName") != null && !jsonObj.get("orderName").isJsonNull()) && !jsonObj.get("orderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderName").toString()));
      }
      if ((jsonObj.get("productDescription") != null && !jsonObj.get("productDescription").isJsonNull()) && !jsonObj.get("productDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productDescription").toString()));
      }
      if ((jsonObj.get("productFamily") != null && !jsonObj.get("productFamily").isJsonNull()) && !jsonObj.get("productFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFamily").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      if ((jsonObj.get("productTypeId") != null && !jsonObj.get("productTypeId").isJsonNull()) && !jsonObj.get("productTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeId").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("subscriptionName") != null && !jsonObj.get("subscriptionName").isJsonNull()) && !jsonObj.get("subscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionName").toString()));
      }
      // validate the optional field `transactionAmount`
      if (jsonObj.get("transactionAmount") != null && !jsonObj.get("transactionAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("transactionAmount"));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      // validate the optional field `transactionType`
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) {
        TransactionTypeEnum.validateJsonElement(jsonObj.get("transactionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionProperties>() {
           @Override
           public void write(JsonWriter out, TransactionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionProperties
   * @throws IOException if the JSON string is invalid with respect to TransactionProperties
   */
  public static TransactionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionProperties.class);
  }

  /**
   * Convert an instance of TransactionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

