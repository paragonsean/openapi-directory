/*
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzurePlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Invoice section properties with create subscription permission.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:33.730549-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceSectionWithCreateSubPermission {
  public static final String SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME = "billingProfileDisplayName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_DISPLAY_NAME)
  private String billingProfileDisplayName;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_ENABLED_AZURE_PLANS = "enabledAzurePlans";
  @SerializedName(SERIALIZED_NAME_ENABLED_AZURE_PLANS)
  private List<AzurePlan> enabledAzurePlans = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVOICE_SECTION_DISPLAY_NAME = "invoiceSectionDisplayName";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_DISPLAY_NAME)
  private String invoiceSectionDisplayName;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public InvoiceSectionWithCreateSubPermission() {
  }

  public InvoiceSectionWithCreateSubPermission(
     String billingProfileDisplayName, 
     String billingProfileId, 
     String invoiceSectionDisplayName, 
     String invoiceSectionId
  ) {
    this();
    this.billingProfileDisplayName = billingProfileDisplayName;
    this.billingProfileId = billingProfileId;
    this.invoiceSectionDisplayName = invoiceSectionDisplayName;
    this.invoiceSectionId = invoiceSectionId;
  }

  /**
   * Billing profile display name.
   * @return billingProfileDisplayName
   */
  @javax.annotation.Nullable
  public String getBillingProfileDisplayName() {
    return billingProfileDisplayName;
  }



  /**
   * Billing profile Id.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  public InvoiceSectionWithCreateSubPermission enabledAzurePlans(List<AzurePlan> enabledAzurePlans) {
    this.enabledAzurePlans = enabledAzurePlans;
    return this;
  }

  public InvoiceSectionWithCreateSubPermission addEnabledAzurePlansItem(AzurePlan enabledAzurePlansItem) {
    if (this.enabledAzurePlans == null) {
      this.enabledAzurePlans = new ArrayList<>();
    }
    this.enabledAzurePlans.add(enabledAzurePlansItem);
    return this;
  }

  /**
   * Enabled azure plans for the associated billing profile.
   * @return enabledAzurePlans
   */
  @javax.annotation.Nullable
  public List<AzurePlan> getEnabledAzurePlans() {
    return enabledAzurePlans;
  }

  public void setEnabledAzurePlans(List<AzurePlan> enabledAzurePlans) {
    this.enabledAzurePlans = enabledAzurePlans;
  }


  /**
   * Invoice Section display name.
   * @return invoiceSectionDisplayName
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionDisplayName() {
    return invoiceSectionDisplayName;
  }



  /**
   * Invoice Section Id.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceSectionWithCreateSubPermission invoiceSectionWithCreateSubPermission = (InvoiceSectionWithCreateSubPermission) o;
    return Objects.equals(this.billingProfileDisplayName, invoiceSectionWithCreateSubPermission.billingProfileDisplayName) &&
        Objects.equals(this.billingProfileId, invoiceSectionWithCreateSubPermission.billingProfileId) &&
        Objects.equals(this.enabledAzurePlans, invoiceSectionWithCreateSubPermission.enabledAzurePlans) &&
        Objects.equals(this.invoiceSectionDisplayName, invoiceSectionWithCreateSubPermission.invoiceSectionDisplayName) &&
        Objects.equals(this.invoiceSectionId, invoiceSectionWithCreateSubPermission.invoiceSectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingProfileDisplayName, billingProfileId, enabledAzurePlans, invoiceSectionDisplayName, invoiceSectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceSectionWithCreateSubPermission {\n");
    sb.append("    billingProfileDisplayName: ").append(toIndentedString(billingProfileDisplayName)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    enabledAzurePlans: ").append(toIndentedString(enabledAzurePlans)).append("\n");
    sb.append("    invoiceSectionDisplayName: ").append(toIndentedString(invoiceSectionDisplayName)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingProfileDisplayName");
    openapiFields.add("billingProfileId");
    openapiFields.add("enabledAzurePlans");
    openapiFields.add("invoiceSectionDisplayName");
    openapiFields.add("invoiceSectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceSectionWithCreateSubPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceSectionWithCreateSubPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceSectionWithCreateSubPermission is not found in the empty JSON string", InvoiceSectionWithCreateSubPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceSectionWithCreateSubPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceSectionWithCreateSubPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingProfileDisplayName") != null && !jsonObj.get("billingProfileDisplayName").isJsonNull()) && !jsonObj.get("billingProfileDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileDisplayName").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if (jsonObj.get("enabledAzurePlans") != null && !jsonObj.get("enabledAzurePlans").isJsonNull()) {
        JsonArray jsonArrayenabledAzurePlans = jsonObj.getAsJsonArray("enabledAzurePlans");
        if (jsonArrayenabledAzurePlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enabledAzurePlans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enabledAzurePlans` to be an array in the JSON string but got `%s`", jsonObj.get("enabledAzurePlans").toString()));
          }

          // validate the optional field `enabledAzurePlans` (array)
          for (int i = 0; i < jsonArrayenabledAzurePlans.size(); i++) {
            AzurePlan.validateJsonElement(jsonArrayenabledAzurePlans.get(i));
          };
        }
      }
      if ((jsonObj.get("invoiceSectionDisplayName") != null && !jsonObj.get("invoiceSectionDisplayName").isJsonNull()) && !jsonObj.get("invoiceSectionDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionDisplayName").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceSectionWithCreateSubPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceSectionWithCreateSubPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceSectionWithCreateSubPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceSectionWithCreateSubPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceSectionWithCreateSubPermission>() {
           @Override
           public void write(JsonWriter out, InvoiceSectionWithCreateSubPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceSectionWithCreateSubPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceSectionWithCreateSubPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceSectionWithCreateSubPermission
   * @throws IOException if the JSON string is invalid with respect to InvoiceSectionWithCreateSubPermission
   */
  public static InvoiceSectionWithCreateSubPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceSectionWithCreateSubPermission.class);
  }

  /**
   * Convert an instance of InvoiceSectionWithCreateSubPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

