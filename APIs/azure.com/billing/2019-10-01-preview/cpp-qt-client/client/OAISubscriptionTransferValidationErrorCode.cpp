/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionTransferValidationErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionTransferValidationErrorCode::OAISubscriptionTransferValidationErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionTransferValidationErrorCode::OAISubscriptionTransferValidationErrorCode() {
    this->initializeModel();
}

OAISubscriptionTransferValidationErrorCode::~OAISubscriptionTransferValidationErrorCode() {}

void OAISubscriptionTransferValidationErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISubscriptionTransferValidationErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISubscriptionTransferValidationErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("InvalidSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::INVALIDSOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubscriptionNotActive", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::SUBSCRIPTIONNOTACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsufficientPermissionOnSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::INSUFFICIENTPERMISSIONONSOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsufficientPermissionOnDestination", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::INSUFFICIENTPERMISSIONONDESTINATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DestinationBillingProfilePastDue", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::DESTINATIONBILLINGPROFILEPASTDUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubscriptionTypeNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::SUBSCRIPTIONTYPENOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CrossBillingAccountNotAllowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::CROSSBILLINGACCOUNTNOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotAvailableForDestinationMarket", Qt::CaseInsensitive) == 0) {
        m_value = eOAISubscriptionTransferValidationErrorCode::NOTAVAILABLEFORDESTINATIONMARKET;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISubscriptionTransferValidationErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISubscriptionTransferValidationErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISubscriptionTransferValidationErrorCode::INVALIDSOURCE:
            val = "InvalidSource";
            break;
        case eOAISubscriptionTransferValidationErrorCode::SUBSCRIPTIONNOTACTIVE:
            val = "SubscriptionNotActive";
            break;
        case eOAISubscriptionTransferValidationErrorCode::INSUFFICIENTPERMISSIONONSOURCE:
            val = "InsufficientPermissionOnSource";
            break;
        case eOAISubscriptionTransferValidationErrorCode::INSUFFICIENTPERMISSIONONDESTINATION:
            val = "InsufficientPermissionOnDestination";
            break;
        case eOAISubscriptionTransferValidationErrorCode::DESTINATIONBILLINGPROFILEPASTDUE:
            val = "DestinationBillingProfilePastDue";
            break;
        case eOAISubscriptionTransferValidationErrorCode::SUBSCRIPTIONTYPENOTSUPPORTED:
            val = "SubscriptionTypeNotSupported";
            break;
        case eOAISubscriptionTransferValidationErrorCode::CROSSBILLINGACCOUNTNOTALLOWED:
            val = "CrossBillingAccountNotAllowed";
            break;
        case eOAISubscriptionTransferValidationErrorCode::NOTAVAILABLEFORDESTINATIONMARKET:
            val = "NotAvailableForDestinationMarket";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISubscriptionTransferValidationErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISubscriptionTransferValidationErrorCode::eOAISubscriptionTransferValidationErrorCode OAISubscriptionTransferValidationErrorCode::getValue() const {
    return m_value;
}

void OAISubscriptionTransferValidationErrorCode::setValue(const OAISubscriptionTransferValidationErrorCode::eOAISubscriptionTransferValidationErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISubscriptionTransferValidationErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAISubscriptionTransferValidationErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
