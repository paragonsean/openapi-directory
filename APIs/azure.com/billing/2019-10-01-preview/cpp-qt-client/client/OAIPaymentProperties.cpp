/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentProperties::OAIPaymentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentProperties::OAIPaymentProperties() {
    this->initializeModel();
}

OAIPaymentProperties::~OAIPaymentProperties() {}

void OAIPaymentProperties::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_payment_method_family_isSet = false;
    m_payment_method_family_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;
}

void OAIPaymentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentProperties::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_payment_method_family_isValid = ::OpenAPI::fromJsonValue(m_payment_method_family, json[QString("paymentMethodFamily")]);
    m_payment_method_family_isSet = !json[QString("paymentMethodFamily")].isNull() && m_payment_method_family_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;
}

QString OAIPaymentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_payment_method_family_isSet) {
        obj.insert(QString("paymentMethodFamily"), ::OpenAPI::toJsonValue(m_payment_method_family));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    return obj;
}

OAIAmount OAIPaymentProperties::getAmount() const {
    return m_amount;
}
void OAIPaymentProperties::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentProperties::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentProperties::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIPaymentProperties::getDate() const {
    return m_date;
}
void OAIPaymentProperties::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPaymentProperties::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPaymentProperties::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPaymentProperties::getPaymentMethodFamily() const {
    return m_payment_method_family;
}
void OAIPaymentProperties::setPaymentMethodFamily(const QString &payment_method_family) {
    m_payment_method_family = payment_method_family;
    m_payment_method_family_isSet = true;
}

bool OAIPaymentProperties::is_payment_method_family_Set() const{
    return m_payment_method_family_isSet;
}

bool OAIPaymentProperties::is_payment_method_family_Valid() const{
    return m_payment_method_family_isValid;
}

QString OAIPaymentProperties::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAIPaymentProperties::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAIPaymentProperties::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAIPaymentProperties::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

QString OAIPaymentProperties::getPaymentType() const {
    return m_payment_type;
}
void OAIPaymentProperties::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIPaymentProperties::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIPaymentProperties::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

bool OAIPaymentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
