/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAITransaction.h"
#include "OAITransactionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  transaction_name QString [required]
    * @param[in]  period_start_date QString [required]
    * @param[in]  period_end_date QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void transactionsGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &transaction_name, const QString &period_start_date, const QString &period_end_date, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  period_start_date QString [required]
    * @param[in]  period_end_date QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void transactionsListByBillingAccount(const QString &billing_account_name, const QString &api_version, const QString &period_start_date, const QString &period_end_date, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  period_start_date QString [required]
    * @param[in]  period_end_date QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void transactionsListByBillingProfile(const QString &billing_account_name, const QString &billing_profile_name, const QString &api_version, const QString &period_start_date, const QString &period_end_date, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  period_start_date QString [required]
    * @param[in]  period_end_date QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void transactionsListByCustomer(const QString &billing_account_name, const QString &customer_name, const QString &api_version, const QString &period_start_date, const QString &period_end_date, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  period_start_date QString [required]
    * @param[in]  period_end_date QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void transactionsListByInvoiceSection(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &api_version, const QString &period_start_date, const QString &period_end_date, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transactionsGetCallback(OAIHttpRequestWorker *worker);
    void transactionsListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void transactionsListByBillingProfileCallback(OAIHttpRequestWorker *worker);
    void transactionsListByCustomerCallback(OAIHttpRequestWorker *worker);
    void transactionsListByInvoiceSectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transactionsGetSignal(OAITransaction summary);
    void transactionsListByBillingAccountSignal(OAITransactionListResult summary);
    void transactionsListByBillingProfileSignal(OAITransactionListResult summary);
    void transactionsListByCustomerSignal(OAITransactionListResult summary);
    void transactionsListByInvoiceSectionSignal(OAITransactionListResult summary);


    void transactionsGetSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void transactionsListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAITransactionListResult summary);
    void transactionsListByBillingProfileSignalFull(OAIHttpRequestWorker *worker, OAITransactionListResult summary);
    void transactionsListByCustomerSignalFull(OAIHttpRequestWorker *worker, OAITransactionListResult summary);
    void transactionsListByInvoiceSectionSignalFull(OAIHttpRequestWorker *worker, OAITransactionListResult summary);

    Q_DECL_DEPRECATED_X("Use transactionsGetSignalError() instead")
    void transactionsGetSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByBillingAccountSignalError() instead")
    void transactionsListByBillingAccountSignalE(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByBillingAccountSignalError(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByBillingProfileSignalError() instead")
    void transactionsListByBillingProfileSignalE(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByBillingProfileSignalError(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByCustomerSignalError() instead")
    void transactionsListByCustomerSignalE(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByCustomerSignalError(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByInvoiceSectionSignalError() instead")
    void transactionsListByInvoiceSectionSignalE(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByInvoiceSectionSignalError(OAITransactionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transactionsGetSignalErrorFull() instead")
    void transactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByBillingAccountSignalErrorFull() instead")
    void transactionsListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByBillingProfileSignalErrorFull() instead")
    void transactionsListByBillingProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByBillingProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByCustomerSignalErrorFull() instead")
    void transactionsListByCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsListByInvoiceSectionSignalErrorFull() instead")
    void transactionsListByInvoiceSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsListByInvoiceSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
