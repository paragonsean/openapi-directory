/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomer.h"
#include "OAICustomerListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void customersGet(const QString &api_version, const QString &billing_account_name, const QString &customer_name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void customersListByBillingAccount(const QString &api_version, const QString &billing_account_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void customersListByBillingProfile(const QString &api_version, const QString &billing_account_name, const QString &billing_profile_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customersGetCallback(OAIHttpRequestWorker *worker);
    void customersListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void customersListByBillingProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customersGetSignal(OAICustomer summary);
    void customersListByBillingAccountSignal(OAICustomerListResult summary);
    void customersListByBillingProfileSignal(OAICustomerListResult summary);


    void customersGetSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void customersListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAICustomerListResult summary);
    void customersListByBillingProfileSignalFull(OAIHttpRequestWorker *worker, OAICustomerListResult summary);

    Q_DECL_DEPRECATED_X("Use customersGetSignalError() instead")
    void customersGetSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersListByBillingAccountSignalError() instead")
    void customersListByBillingAccountSignalE(OAICustomerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersListByBillingAccountSignalError(OAICustomerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersListByBillingProfileSignalError() instead")
    void customersListByBillingProfileSignalE(OAICustomerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersListByBillingProfileSignalError(OAICustomerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customersGetSignalErrorFull() instead")
    void customersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersListByBillingAccountSignalErrorFull() instead")
    void customersListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersListByBillingProfileSignalErrorFull() instead")
    void customersListByBillingProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersListByBillingProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
