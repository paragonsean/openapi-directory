/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransfersApi_H
#define OAI_OAITransfersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIInitiateTransferRequest.h"
#include "OAITransferDetails.h"
#include "OAITransferDetailsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransfersApi : public QObject {
    Q_OBJECT

public:
    OAITransfersApi(const int timeOut = 0);
    ~OAITransfersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  transfer_name QString [required]
    */
    virtual void partnerTransfersCancel(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const QString &transfer_name);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  transfer_name QString [required]
    */
    virtual void partnerTransfersGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const QString &transfer_name);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  parameters OAIInitiateTransferRequest [required]
    */
    virtual void partnerTransfersInitiate(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const OAIInitiateTransferRequest &parameters);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  customer_name QString [required]
    */
    virtual void partnerTransfersList(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  transfer_name QString [required]
    */
    virtual void transfersCancel(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &transfer_name);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  transfer_name QString [required]
    */
    virtual void transfersGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &transfer_name);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  parameters OAIInitiateTransferRequest [required]
    */
    virtual void transfersInitiate(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const OAIInitiateTransferRequest &parameters);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    */
    virtual void transfersList(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void partnerTransfersCancelCallback(OAIHttpRequestWorker *worker);
    void partnerTransfersGetCallback(OAIHttpRequestWorker *worker);
    void partnerTransfersInitiateCallback(OAIHttpRequestWorker *worker);
    void partnerTransfersListCallback(OAIHttpRequestWorker *worker);
    void transfersCancelCallback(OAIHttpRequestWorker *worker);
    void transfersGetCallback(OAIHttpRequestWorker *worker);
    void transfersInitiateCallback(OAIHttpRequestWorker *worker);
    void transfersListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void partnerTransfersCancelSignal(OAITransferDetails summary);
    void partnerTransfersGetSignal(OAITransferDetails summary);
    void partnerTransfersInitiateSignal(OAITransferDetails summary);
    void partnerTransfersListSignal(OAITransferDetailsListResult summary);
    void transfersCancelSignal(OAITransferDetails summary);
    void transfersGetSignal(OAITransferDetails summary);
    void transfersInitiateSignal(OAITransferDetails summary);
    void transfersListSignal(OAITransferDetailsListResult summary);


    void partnerTransfersCancelSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void partnerTransfersGetSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void partnerTransfersInitiateSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void partnerTransfersListSignalFull(OAIHttpRequestWorker *worker, OAITransferDetailsListResult summary);
    void transfersCancelSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void transfersGetSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void transfersInitiateSignalFull(OAIHttpRequestWorker *worker, OAITransferDetails summary);
    void transfersListSignalFull(OAIHttpRequestWorker *worker, OAITransferDetailsListResult summary);

    Q_DECL_DEPRECATED_X("Use partnerTransfersCancelSignalError() instead")
    void partnerTransfersCancelSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersCancelSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersGetSignalError() instead")
    void partnerTransfersGetSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersGetSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersInitiateSignalError() instead")
    void partnerTransfersInitiateSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersInitiateSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersListSignalError() instead")
    void partnerTransfersListSignalE(OAITransferDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersListSignalError(OAITransferDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersCancelSignalError() instead")
    void transfersCancelSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersCancelSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersGetSignalError() instead")
    void transfersGetSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersGetSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersInitiateSignalError() instead")
    void transfersInitiateSignalE(OAITransferDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersInitiateSignalError(OAITransferDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersListSignalError() instead")
    void transfersListSignalE(OAITransferDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersListSignalError(OAITransferDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use partnerTransfersCancelSignalErrorFull() instead")
    void partnerTransfersCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersGetSignalErrorFull() instead")
    void partnerTransfersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersInitiateSignalErrorFull() instead")
    void partnerTransfersInitiateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersInitiateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerTransfersListSignalErrorFull() instead")
    void partnerTransfersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerTransfersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersCancelSignalErrorFull() instead")
    void transfersCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersGetSignalErrorFull() instead")
    void transfersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersInitiateSignalErrorFull() instead")
    void transfersInitiateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersInitiateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transfersListSignalErrorFull() instead")
    void transfersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transfersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
