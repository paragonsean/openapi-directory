/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransfersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITransfersApi::OAITransfersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITransfersApi::~OAITransfersApi() {
}

void OAITransfersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://management.azure.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("partnerTransfersCancel", defaultConf);
    _serverIndices.insert("partnerTransfersCancel", 0);
    _serverConfigs.insert("partnerTransfersGet", defaultConf);
    _serverIndices.insert("partnerTransfersGet", 0);
    _serverConfigs.insert("partnerTransfersInitiate", defaultConf);
    _serverIndices.insert("partnerTransfersInitiate", 0);
    _serverConfigs.insert("partnerTransfersList", defaultConf);
    _serverIndices.insert("partnerTransfersList", 0);
    _serverConfigs.insert("transfersCancel", defaultConf);
    _serverIndices.insert("transfersCancel", 0);
    _serverConfigs.insert("transfersGet", defaultConf);
    _serverIndices.insert("transfersGet", 0);
    _serverConfigs.insert("transfersInitiate", defaultConf);
    _serverIndices.insert("transfersInitiate", 0);
    _serverConfigs.insert("transfersList", defaultConf);
    _serverIndices.insert("transfersList", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITransfersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITransfersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITransfersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITransfersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITransfersApi::setUsername(const QString &username) {
    _username = username;
}

void OAITransfersApi::setPassword(const QString &password) {
    _password = password;
}


void OAITransfersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITransfersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITransfersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITransfersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransfersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransfersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITransfersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITransfersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITransfersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITransfersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITransfersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITransfersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITransfersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITransfersApi::partnerTransfersCancel(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const QString &transfer_name) {
    QString fullPath = QString(_serverConfigs["partnerTransfersCancel"][_serverIndices.value("partnerTransfersCancel")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString customer_namePathParam("{");
        customer_namePathParam.append("customerName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "customerName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"customerName"+pathSuffix : pathPrefix;
        fullPath.replace(customer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(customer_name)));
    }
    
    {
        QString transfer_namePathParam("{");
        transfer_namePathParam.append("transferName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transferName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transferName"+pathSuffix : pathPrefix;
        fullPath.replace(transfer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transfer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersCancelCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersCancelCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::partnerTransfersCancelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT partnerTransfersCancelSignal(output);
        Q_EMIT partnerTransfersCancelSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT partnerTransfersCancelSignalE(output, error_type, error_str);
        Q_EMIT partnerTransfersCancelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT partnerTransfersCancelSignalError(output, error_type, error_str);
        Q_EMIT partnerTransfersCancelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::partnerTransfersGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const QString &transfer_name) {
    QString fullPath = QString(_serverConfigs["partnerTransfersGet"][_serverIndices.value("partnerTransfersGet")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString customer_namePathParam("{");
        customer_namePathParam.append("customerName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "customerName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"customerName"+pathSuffix : pathPrefix;
        fullPath.replace(customer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(customer_name)));
    }
    
    {
        QString transfer_namePathParam("{");
        transfer_namePathParam.append("transferName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transferName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transferName"+pathSuffix : pathPrefix;
        fullPath.replace(transfer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transfer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersGetCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersGetCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::partnerTransfersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT partnerTransfersGetSignal(output);
        Q_EMIT partnerTransfersGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT partnerTransfersGetSignalE(output, error_type, error_str);
        Q_EMIT partnerTransfersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT partnerTransfersGetSignalError(output, error_type, error_str);
        Q_EMIT partnerTransfersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::partnerTransfersInitiate(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name, const OAIInitiateTransferRequest &parameters) {
    QString fullPath = QString(_serverConfigs["partnerTransfersInitiate"][_serverIndices.value("partnerTransfersInitiate")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/initiateTransfer");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString customer_namePathParam("{");
        customer_namePathParam.append("customerName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "customerName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"customerName"+pathSuffix : pathPrefix;
        fullPath.replace(customer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(customer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = parameters.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersInitiateCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersInitiateCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::partnerTransfersInitiateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT partnerTransfersInitiateSignal(output);
        Q_EMIT partnerTransfersInitiateSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT partnerTransfersInitiateSignalE(output, error_type, error_str);
        Q_EMIT partnerTransfersInitiateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT partnerTransfersInitiateSignalError(output, error_type, error_str);
        Q_EMIT partnerTransfersInitiateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::partnerTransfersList(const QString &billing_account_name, const QString &billing_profile_name, const QString &customer_name) {
    QString fullPath = QString(_serverConfigs["partnerTransfersList"][_serverIndices.value("partnerTransfersList")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString customer_namePathParam("{");
        customer_namePathParam.append("customerName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "customerName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"customerName"+pathSuffix : pathPrefix;
        fullPath.replace(customer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(customer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersListCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::partnerTransfersListCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::partnerTransfersListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetailsListResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT partnerTransfersListSignal(output);
        Q_EMIT partnerTransfersListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT partnerTransfersListSignalE(output, error_type, error_str);
        Q_EMIT partnerTransfersListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT partnerTransfersListSignalError(output, error_type, error_str);
        Q_EMIT partnerTransfersListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::transfersCancel(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &transfer_name) {
    QString fullPath = QString(_serverConfigs["transfersCancel"][_serverIndices.value("transfersCancel")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString invoice_section_namePathParam("{");
        invoice_section_namePathParam.append("invoiceSectionName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceSectionName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceSectionName"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_section_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_section_name)));
    }
    
    {
        QString transfer_namePathParam("{");
        transfer_namePathParam.append("transferName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transferName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transferName"+pathSuffix : pathPrefix;
        fullPath.replace(transfer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transfer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersCancelCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersCancelCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::transfersCancelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transfersCancelSignal(output);
        Q_EMIT transfersCancelSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transfersCancelSignalE(output, error_type, error_str);
        Q_EMIT transfersCancelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transfersCancelSignalError(output, error_type, error_str);
        Q_EMIT transfersCancelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::transfersGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &transfer_name) {
    QString fullPath = QString(_serverConfigs["transfersGet"][_serverIndices.value("transfersGet")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString invoice_section_namePathParam("{");
        invoice_section_namePathParam.append("invoiceSectionName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceSectionName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceSectionName"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_section_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_section_name)));
    }
    
    {
        QString transfer_namePathParam("{");
        transfer_namePathParam.append("transferName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transferName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transferName"+pathSuffix : pathPrefix;
        fullPath.replace(transfer_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transfer_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersGetCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersGetCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::transfersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transfersGetSignal(output);
        Q_EMIT transfersGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transfersGetSignalE(output, error_type, error_str);
        Q_EMIT transfersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transfersGetSignalError(output, error_type, error_str);
        Q_EMIT transfersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::transfersInitiate(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const OAIInitiateTransferRequest &parameters) {
    QString fullPath = QString(_serverConfigs["transfersInitiate"][_serverIndices.value("transfersInitiate")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/initiateTransfer");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString invoice_section_namePathParam("{");
        invoice_section_namePathParam.append("invoiceSectionName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceSectionName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceSectionName"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_section_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_section_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = parameters.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersInitiateCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersInitiateCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::transfersInitiateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetails output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transfersInitiateSignal(output);
        Q_EMIT transfersInitiateSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transfersInitiateSignalE(output, error_type, error_str);
        Q_EMIT transfersInitiateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transfersInitiateSignalError(output, error_type, error_str);
        Q_EMIT transfersInitiateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::transfersList(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name) {
    QString fullPath = QString(_serverConfigs["transfersList"][_serverIndices.value("transfersList")].URL()+"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers");
    
    
    {
        QString billing_account_namePathParam("{");
        billing_account_namePathParam.append("billingAccountName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingAccountName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingAccountName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_account_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_account_name)));
    }
    
    {
        QString billing_profile_namePathParam("{");
        billing_profile_namePathParam.append("billingProfileName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "billingProfileName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"billingProfileName"+pathSuffix : pathPrefix;
        fullPath.replace(billing_profile_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(billing_profile_name)));
    }
    
    {
        QString invoice_section_namePathParam("{");
        invoice_section_namePathParam.append("invoiceSectionName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceSectionName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceSectionName"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_section_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_section_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersListCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 1;
    _implicitFlow.link();
    _passwordFlow.unlink();
    _authFlow.unlink();
    _credentialFlow.unlink();
    QStringList scope;
    scope.append("user_impersonation");
    auto token = _implicitFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransfersApi::transfersListCallback);
    connect(this, &OAITransfersApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;



    worker->execute(&input);
}

void OAITransfersApi::transfersListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransferDetailsListResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT transfersListSignal(output);
        Q_EMIT transfersListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_implicitFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user_impersonation");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://login.microsoftonline.com/common/oauth2/authorize");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _implicitFlow.setVariables(authorizationUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId");
        Q_EMIT _implicitFlow.authenticationNeeded();


    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT transfersListSignalE(output, error_type, error_str);
        Q_EMIT transfersListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT transfersListSignalError(output, error_type, error_str);
        Q_EMIT transfersListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransfersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
