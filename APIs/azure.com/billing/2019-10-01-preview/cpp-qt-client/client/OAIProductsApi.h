/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIProduct.h"
#include "OAIProductsListResult.h"
#include "OAITransferProductRequestProperties.h"
#include "OAIUpdateAutoRenewOperation.h"
#include "OAIUpdateAutoRenewRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  product_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productsGet(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &product_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  product_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productsGetByCustomer(const QString &billing_account_name, const QString &customer_name, const QString &product_name, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void productsListByBillingAccount(const QString &billing_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void productsListByCustomer(const QString &billing_account_name, const QString &customer_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void productsListByInvoiceSection(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  product_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAITransferProductRequestProperties [required]
    */
    virtual void productsTransfer(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &product_name, const QString &api_version, const OAITransferProductRequestProperties &parameters);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  product_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIUpdateAutoRenewRequest [required]
    */
    virtual void productsUpdateAutoRenewByInvoiceSection(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &product_name, const QString &api_version, const OAIUpdateAutoRenewRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productsGetCallback(OAIHttpRequestWorker *worker);
    void productsGetByCustomerCallback(OAIHttpRequestWorker *worker);
    void productsListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void productsListByCustomerCallback(OAIHttpRequestWorker *worker);
    void productsListByInvoiceSectionCallback(OAIHttpRequestWorker *worker);
    void productsTransferCallback(OAIHttpRequestWorker *worker);
    void productsUpdateAutoRenewByInvoiceSectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productsGetSignal(OAIProduct summary);
    void productsGetByCustomerSignal(OAIProduct summary);
    void productsListByBillingAccountSignal(OAIProductsListResult summary);
    void productsListByCustomerSignal(OAIProductsListResult summary);
    void productsListByInvoiceSectionSignal(OAIProductsListResult summary);
    void productsTransferSignal(OAIProduct summary);
    void productsUpdateAutoRenewByInvoiceSectionSignal(OAIUpdateAutoRenewOperation summary);


    void productsGetSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void productsGetByCustomerSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void productsListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIProductsListResult summary);
    void productsListByCustomerSignalFull(OAIHttpRequestWorker *worker, OAIProductsListResult summary);
    void productsListByInvoiceSectionSignalFull(OAIHttpRequestWorker *worker, OAIProductsListResult summary);
    void productsTransferSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void productsUpdateAutoRenewByInvoiceSectionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAutoRenewOperation summary);

    Q_DECL_DEPRECATED_X("Use productsGetSignalError() instead")
    void productsGetSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetByCustomerSignalError() instead")
    void productsGetByCustomerSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetByCustomerSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByBillingAccountSignalError() instead")
    void productsListByBillingAccountSignalE(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByBillingAccountSignalError(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByCustomerSignalError() instead")
    void productsListByCustomerSignalE(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByCustomerSignalError(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByInvoiceSectionSignalError() instead")
    void productsListByInvoiceSectionSignalE(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByInvoiceSectionSignalError(OAIProductsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsTransferSignalError() instead")
    void productsTransferSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsTransferSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsUpdateAutoRenewByInvoiceSectionSignalError() instead")
    void productsUpdateAutoRenewByInvoiceSectionSignalE(OAIUpdateAutoRenewOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsUpdateAutoRenewByInvoiceSectionSignalError(OAIUpdateAutoRenewOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productsGetSignalErrorFull() instead")
    void productsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetByCustomerSignalErrorFull() instead")
    void productsGetByCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetByCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByBillingAccountSignalErrorFull() instead")
    void productsListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByCustomerSignalErrorFull() instead")
    void productsListByCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByInvoiceSectionSignalErrorFull() instead")
    void productsListByInvoiceSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByInvoiceSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsTransferSignalErrorFull() instead")
    void productsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsUpdateAutoRenewByInvoiceSectionSignalErrorFull() instead")
    void productsUpdateAutoRenewByInvoiceSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsUpdateAutoRenewByInvoiceSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
