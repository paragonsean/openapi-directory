/**
 * BillingManagementClient
 * Billing client provides access to billing resources for Azure subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBillingAccountsApi_H
#define OAI_OAIBillingAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillingAccount.h"
#include "OAIBillingAccountListResult.h"
#include "OAIBillingAccountUpdateRequest.h"
#include "OAIErrorResponse.h"
#include "OAIInvoiceSectionListWithCreateSubPermissionResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBillingAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIBillingAccountsApi(const int timeOut = 0);
    ~OAIBillingAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void billingAccountsGet(const QString &api_version, const QString &billing_account_name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void billingAccountsList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    */
    virtual void billingAccountsListInvoiceSectionsByCreateSubscriptionPermission(const QString &api_version, const QString &billing_account_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  billing_account_name QString [required]
    * @param[in]  parameters OAIBillingAccountUpdateRequest [required]
    */
    virtual void billingAccountsUpdate(const QString &api_version, const QString &billing_account_name, const OAIBillingAccountUpdateRequest &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void billingAccountsGetCallback(OAIHttpRequestWorker *worker);
    void billingAccountsListCallback(OAIHttpRequestWorker *worker);
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionCallback(OAIHttpRequestWorker *worker);
    void billingAccountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void billingAccountsGetSignal(OAIBillingAccount summary);
    void billingAccountsListSignal(OAIBillingAccountListResult summary);
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignal(OAIInvoiceSectionListWithCreateSubPermissionResult summary);
    void billingAccountsUpdateSignal(OAIBillingAccount summary);


    void billingAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIBillingAccount summary);
    void billingAccountsListSignalFull(OAIHttpRequestWorker *worker, OAIBillingAccountListResult summary);
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceSectionListWithCreateSubPermissionResult summary);
    void billingAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBillingAccount summary);

    Q_DECL_DEPRECATED_X("Use billingAccountsGetSignalError() instead")
    void billingAccountsGetSignalE(OAIBillingAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsGetSignalError(OAIBillingAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsListSignalError() instead")
    void billingAccountsListSignalE(OAIBillingAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsListSignalError(OAIBillingAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalError() instead")
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalE(OAIInvoiceSectionListWithCreateSubPermissionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalError(OAIInvoiceSectionListWithCreateSubPermissionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsUpdateSignalError() instead")
    void billingAccountsUpdateSignalE(OAIBillingAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsUpdateSignalError(OAIBillingAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use billingAccountsGetSignalErrorFull() instead")
    void billingAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsListSignalErrorFull() instead")
    void billingAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalErrorFull() instead")
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsListInvoiceSectionsByCreateSubscriptionPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use billingAccountsUpdateSignalErrorFull() instead")
    void billingAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void billingAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
