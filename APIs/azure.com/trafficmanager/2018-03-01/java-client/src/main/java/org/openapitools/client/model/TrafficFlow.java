/*
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryExperience;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing a Traffic Manager HeatMap traffic flow properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:46.194241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficFlow {
  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_QUERY_EXPERIENCES = "queryExperiences";
  @SerializedName(SERIALIZED_NAME_QUERY_EXPERIENCES)
  private List<QueryExperience> queryExperiences = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_IP = "sourceIp";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public TrafficFlow() {
  }

  public TrafficFlow latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The approximate latitude that these queries originated from.
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public TrafficFlow longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The approximate longitude that these queries originated from.
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public TrafficFlow queryExperiences(List<QueryExperience> queryExperiences) {
    this.queryExperiences = queryExperiences;
    return this;
  }

  public TrafficFlow addQueryExperiencesItem(QueryExperience queryExperiencesItem) {
    if (this.queryExperiences == null) {
      this.queryExperiences = new ArrayList<>();
    }
    this.queryExperiences.add(queryExperiencesItem);
    return this;
  }

  /**
   * The query experiences produced in this HeatMap calculation.
   * @return queryExperiences
   */
  @javax.annotation.Nullable
  public List<QueryExperience> getQueryExperiences() {
    return queryExperiences;
  }

  public void setQueryExperiences(List<QueryExperience> queryExperiences) {
    this.queryExperiences = queryExperiences;
  }


  public TrafficFlow sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  /**
   * The IP address that this query experience originated from.
   * @return sourceIp
   */
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficFlow trafficFlow = (TrafficFlow) o;
    return Objects.equals(this.latitude, trafficFlow.latitude) &&
        Objects.equals(this.longitude, trafficFlow.longitude) &&
        Objects.equals(this.queryExperiences, trafficFlow.queryExperiences) &&
        Objects.equals(this.sourceIp, trafficFlow.sourceIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latitude, longitude, queryExperiences, sourceIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficFlow {\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    queryExperiences: ").append(toIndentedString(queryExperiences)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("queryExperiences");
    openapiFields.add("sourceIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficFlow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficFlow is not found in the empty JSON string", TrafficFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficFlow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("queryExperiences") != null && !jsonObj.get("queryExperiences").isJsonNull()) {
        JsonArray jsonArrayqueryExperiences = jsonObj.getAsJsonArray("queryExperiences");
        if (jsonArrayqueryExperiences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queryExperiences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queryExperiences` to be an array in the JSON string but got `%s`", jsonObj.get("queryExperiences").toString()));
          }

          // validate the optional field `queryExperiences` (array)
          for (int i = 0; i < jsonArrayqueryExperiences.size(); i++) {
            QueryExperience.validateJsonElement(jsonArrayqueryExperiences.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceIp") != null && !jsonObj.get("sourceIp").isJsonNull()) && !jsonObj.get("sourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficFlow>() {
           @Override
           public void write(JsonWriter out, TrafficFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficFlow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficFlow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficFlow
   * @throws IOException if the JSON string is invalid with respect to TrafficFlow
   */
  public static TrafficFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficFlow.class);
  }

  /**
   * Convert an instance of TrafficFlow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

