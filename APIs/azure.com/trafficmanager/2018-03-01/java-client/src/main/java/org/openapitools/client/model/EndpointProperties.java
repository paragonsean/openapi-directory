/*
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointPropertiesCustomHeadersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing a Traffic Manager endpoint properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:46.194241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointProperties {
  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  private List<EndpointPropertiesCustomHeadersInner> customHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENDPOINT_LOCATION = "endpointLocation";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_LOCATION)
  private String endpointLocation;

  /**
   * The monitoring status of the endpoint.
   */
  @JsonAdapter(EndpointMonitorStatusEnum.Adapter.class)
  public enum EndpointMonitorStatusEnum {
    CHECKING_ENDPOINT("CheckingEndpoint"),
    
    ONLINE("Online"),
    
    DEGRADED("Degraded"),
    
    DISABLED("Disabled"),
    
    INACTIVE("Inactive"),
    
    STOPPED("Stopped");

    private String value;

    EndpointMonitorStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndpointMonitorStatusEnum fromValue(String value) {
      for (EndpointMonitorStatusEnum b : EndpointMonitorStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndpointMonitorStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndpointMonitorStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndpointMonitorStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndpointMonitorStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndpointMonitorStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDPOINT_MONITOR_STATUS = "endpointMonitorStatus";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_MONITOR_STATUS)
  private EndpointMonitorStatusEnum endpointMonitorStatus;

  /**
   * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
   */
  @JsonAdapter(EndpointStatusEnum.Adapter.class)
  public enum EndpointStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EndpointStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndpointStatusEnum fromValue(String value) {
      for (EndpointStatusEnum b : EndpointStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndpointStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndpointStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndpointStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndpointStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndpointStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDPOINT_STATUS = "endpointStatus";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_STATUS)
  private EndpointStatusEnum endpointStatus;

  public static final String SERIALIZED_NAME_GEO_MAPPING = "geoMapping";
  @SerializedName(SERIALIZED_NAME_GEO_MAPPING)
  private List<String> geoMapping = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_CHILD_ENDPOINTS = "minChildEndpoints";
  @SerializedName(SERIALIZED_NAME_MIN_CHILD_ENDPOINTS)
  private Long minChildEndpoints;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Long priority;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Long weight;

  public EndpointProperties() {
  }

  public EndpointProperties customHeaders(List<EndpointPropertiesCustomHeadersInner> customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  public EndpointProperties addCustomHeadersItem(EndpointPropertiesCustomHeadersInner customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new ArrayList<>();
    }
    this.customHeaders.add(customHeadersItem);
    return this;
  }

  /**
   * List of custom headers.
   * @return customHeaders
   */
  @javax.annotation.Nullable
  public List<EndpointPropertiesCustomHeadersInner> getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(List<EndpointPropertiesCustomHeadersInner> customHeaders) {
    this.customHeaders = customHeaders;
  }


  public EndpointProperties endpointLocation(String endpointLocation) {
    this.endpointLocation = endpointLocation;
    return this;
  }

  /**
   * Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
   * @return endpointLocation
   */
  @javax.annotation.Nullable
  public String getEndpointLocation() {
    return endpointLocation;
  }

  public void setEndpointLocation(String endpointLocation) {
    this.endpointLocation = endpointLocation;
  }


  public EndpointProperties endpointMonitorStatus(EndpointMonitorStatusEnum endpointMonitorStatus) {
    this.endpointMonitorStatus = endpointMonitorStatus;
    return this;
  }

  /**
   * The monitoring status of the endpoint.
   * @return endpointMonitorStatus
   */
  @javax.annotation.Nullable
  public EndpointMonitorStatusEnum getEndpointMonitorStatus() {
    return endpointMonitorStatus;
  }

  public void setEndpointMonitorStatus(EndpointMonitorStatusEnum endpointMonitorStatus) {
    this.endpointMonitorStatus = endpointMonitorStatus;
  }


  public EndpointProperties endpointStatus(EndpointStatusEnum endpointStatus) {
    this.endpointStatus = endpointStatus;
    return this;
  }

  /**
   * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
   * @return endpointStatus
   */
  @javax.annotation.Nullable
  public EndpointStatusEnum getEndpointStatus() {
    return endpointStatus;
  }

  public void setEndpointStatus(EndpointStatusEnum endpointStatus) {
    this.endpointStatus = endpointStatus;
  }


  public EndpointProperties geoMapping(List<String> geoMapping) {
    this.geoMapping = geoMapping;
    return this;
  }

  public EndpointProperties addGeoMappingItem(String geoMappingItem) {
    if (this.geoMapping == null) {
      this.geoMapping = new ArrayList<>();
    }
    this.geoMapping.add(geoMappingItem);
    return this;
  }

  /**
   * The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
   * @return geoMapping
   */
  @javax.annotation.Nullable
  public List<String> getGeoMapping() {
    return geoMapping;
  }

  public void setGeoMapping(List<String> geoMapping) {
    this.geoMapping = geoMapping;
  }


  public EndpointProperties minChildEndpoints(Long minChildEndpoints) {
    this.minChildEndpoints = minChildEndpoints;
    return this;
  }

  /**
   * The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type &#39;NestedEndpoints&#39;.
   * @return minChildEndpoints
   */
  @javax.annotation.Nullable
  public Long getMinChildEndpoints() {
    return minChildEndpoints;
  }

  public void setMinChildEndpoints(Long minChildEndpoints) {
    this.minChildEndpoints = minChildEndpoints;
  }


  public EndpointProperties priority(Long priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
   * @return priority
   */
  @javax.annotation.Nullable
  public Long getPriority() {
    return priority;
  }

  public void setPriority(Long priority) {
    this.priority = priority;
  }


  public EndpointProperties target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public EndpointProperties targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type &#39;ExternalEndpoints&#39;.
   * @return targetResourceId
   */
  @javax.annotation.Nullable
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }


  public EndpointProperties weight(Long weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The weight of this endpoint when using the &#39;Weighted&#39; traffic routing method. Possible values are from 1 to 1000.
   * @return weight
   */
  @javax.annotation.Nullable
  public Long getWeight() {
    return weight;
  }

  public void setWeight(Long weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointProperties endpointProperties = (EndpointProperties) o;
    return Objects.equals(this.customHeaders, endpointProperties.customHeaders) &&
        Objects.equals(this.endpointLocation, endpointProperties.endpointLocation) &&
        Objects.equals(this.endpointMonitorStatus, endpointProperties.endpointMonitorStatus) &&
        Objects.equals(this.endpointStatus, endpointProperties.endpointStatus) &&
        Objects.equals(this.geoMapping, endpointProperties.geoMapping) &&
        Objects.equals(this.minChildEndpoints, endpointProperties.minChildEndpoints) &&
        Objects.equals(this.priority, endpointProperties.priority) &&
        Objects.equals(this.target, endpointProperties.target) &&
        Objects.equals(this.targetResourceId, endpointProperties.targetResourceId) &&
        Objects.equals(this.weight, endpointProperties.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customHeaders, endpointLocation, endpointMonitorStatus, endpointStatus, geoMapping, minChildEndpoints, priority, target, targetResourceId, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointProperties {\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    endpointLocation: ").append(toIndentedString(endpointLocation)).append("\n");
    sb.append("    endpointMonitorStatus: ").append(toIndentedString(endpointMonitorStatus)).append("\n");
    sb.append("    endpointStatus: ").append(toIndentedString(endpointStatus)).append("\n");
    sb.append("    geoMapping: ").append(toIndentedString(geoMapping)).append("\n");
    sb.append("    minChildEndpoints: ").append(toIndentedString(minChildEndpoints)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customHeaders");
    openapiFields.add("endpointLocation");
    openapiFields.add("endpointMonitorStatus");
    openapiFields.add("endpointStatus");
    openapiFields.add("geoMapping");
    openapiFields.add("minChildEndpoints");
    openapiFields.add("priority");
    openapiFields.add("target");
    openapiFields.add("targetResourceId");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointProperties is not found in the empty JSON string", EndpointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customHeaders") != null && !jsonObj.get("customHeaders").isJsonNull()) {
        JsonArray jsonArraycustomHeaders = jsonObj.getAsJsonArray("customHeaders");
        if (jsonArraycustomHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("customHeaders").toString()));
          }

          // validate the optional field `customHeaders` (array)
          for (int i = 0; i < jsonArraycustomHeaders.size(); i++) {
            EndpointPropertiesCustomHeadersInner.validateJsonElement(jsonArraycustomHeaders.get(i));
          };
        }
      }
      if ((jsonObj.get("endpointLocation") != null && !jsonObj.get("endpointLocation").isJsonNull()) && !jsonObj.get("endpointLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointLocation").toString()));
      }
      if ((jsonObj.get("endpointMonitorStatus") != null && !jsonObj.get("endpointMonitorStatus").isJsonNull()) && !jsonObj.get("endpointMonitorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointMonitorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointMonitorStatus").toString()));
      }
      // validate the optional field `endpointMonitorStatus`
      if (jsonObj.get("endpointMonitorStatus") != null && !jsonObj.get("endpointMonitorStatus").isJsonNull()) {
        EndpointMonitorStatusEnum.validateJsonElement(jsonObj.get("endpointMonitorStatus"));
      }
      if ((jsonObj.get("endpointStatus") != null && !jsonObj.get("endpointStatus").isJsonNull()) && !jsonObj.get("endpointStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointStatus").toString()));
      }
      // validate the optional field `endpointStatus`
      if (jsonObj.get("endpointStatus") != null && !jsonObj.get("endpointStatus").isJsonNull()) {
        EndpointStatusEnum.validateJsonElement(jsonObj.get("endpointStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geoMapping") != null && !jsonObj.get("geoMapping").isJsonNull() && !jsonObj.get("geoMapping").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoMapping` to be an array in the JSON string but got `%s`", jsonObj.get("geoMapping").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("targetResourceId") != null && !jsonObj.get("targetResourceId").isJsonNull()) && !jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointProperties>() {
           @Override
           public void write(JsonWriter out, EndpointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointProperties
   * @throws IOException if the JSON string is invalid with respect to EndpointProperties
   */
  public static EndpointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointProperties.class);
  }

  /**
   * Convert an instance of EndpointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

