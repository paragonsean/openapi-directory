/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitorConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitorConfig::OAIMonitorConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitorConfig::OAIMonitorConfig() {
    this->initializeModel();
}

OAIMonitorConfig::~OAIMonitorConfig() {}

void OAIMonitorConfig::initializeModel() {

    m_custom_headers_isSet = false;
    m_custom_headers_isValid = false;

    m_expected_status_code_ranges_isSet = false;
    m_expected_status_code_ranges_isValid = false;

    m_interval_in_seconds_isSet = false;
    m_interval_in_seconds_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_profile_monitor_status_isSet = false;
    m_profile_monitor_status_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_timeout_in_seconds_isSet = false;
    m_timeout_in_seconds_isValid = false;

    m_tolerated_number_of_failures_isSet = false;
    m_tolerated_number_of_failures_isValid = false;
}

void OAIMonitorConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitorConfig::fromJsonObject(QJsonObject json) {

    m_custom_headers_isValid = ::OpenAPI::fromJsonValue(m_custom_headers, json[QString("customHeaders")]);
    m_custom_headers_isSet = !json[QString("customHeaders")].isNull() && m_custom_headers_isValid;

    m_expected_status_code_ranges_isValid = ::OpenAPI::fromJsonValue(m_expected_status_code_ranges, json[QString("expectedStatusCodeRanges")]);
    m_expected_status_code_ranges_isSet = !json[QString("expectedStatusCodeRanges")].isNull() && m_expected_status_code_ranges_isValid;

    m_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_in_seconds, json[QString("intervalInSeconds")]);
    m_interval_in_seconds_isSet = !json[QString("intervalInSeconds")].isNull() && m_interval_in_seconds_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_profile_monitor_status_isValid = ::OpenAPI::fromJsonValue(m_profile_monitor_status, json[QString("profileMonitorStatus")]);
    m_profile_monitor_status_isSet = !json[QString("profileMonitorStatus")].isNull() && m_profile_monitor_status_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_seconds, json[QString("timeoutInSeconds")]);
    m_timeout_in_seconds_isSet = !json[QString("timeoutInSeconds")].isNull() && m_timeout_in_seconds_isValid;

    m_tolerated_number_of_failures_isValid = ::OpenAPI::fromJsonValue(m_tolerated_number_of_failures, json[QString("toleratedNumberOfFailures")]);
    m_tolerated_number_of_failures_isSet = !json[QString("toleratedNumberOfFailures")].isNull() && m_tolerated_number_of_failures_isValid;
}

QString OAIMonitorConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitorConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_headers.size() > 0) {
        obj.insert(QString("customHeaders"), ::OpenAPI::toJsonValue(m_custom_headers));
    }
    if (m_expected_status_code_ranges.size() > 0) {
        obj.insert(QString("expectedStatusCodeRanges"), ::OpenAPI::toJsonValue(m_expected_status_code_ranges));
    }
    if (m_interval_in_seconds_isSet) {
        obj.insert(QString("intervalInSeconds"), ::OpenAPI::toJsonValue(m_interval_in_seconds));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_profile_monitor_status_isSet) {
        obj.insert(QString("profileMonitorStatus"), ::OpenAPI::toJsonValue(m_profile_monitor_status));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_timeout_in_seconds_isSet) {
        obj.insert(QString("timeoutInSeconds"), ::OpenAPI::toJsonValue(m_timeout_in_seconds));
    }
    if (m_tolerated_number_of_failures_isSet) {
        obj.insert(QString("toleratedNumberOfFailures"), ::OpenAPI::toJsonValue(m_tolerated_number_of_failures));
    }
    return obj;
}

QList<OAIEndpointProperties_customHeaders_inner> OAIMonitorConfig::getCustomHeaders() const {
    return m_custom_headers;
}
void OAIMonitorConfig::setCustomHeaders(const QList<OAIEndpointProperties_customHeaders_inner> &custom_headers) {
    m_custom_headers = custom_headers;
    m_custom_headers_isSet = true;
}

bool OAIMonitorConfig::is_custom_headers_Set() const{
    return m_custom_headers_isSet;
}

bool OAIMonitorConfig::is_custom_headers_Valid() const{
    return m_custom_headers_isValid;
}

QList<OAIMonitorConfig_expectedStatusCodeRanges_inner> OAIMonitorConfig::getExpectedStatusCodeRanges() const {
    return m_expected_status_code_ranges;
}
void OAIMonitorConfig::setExpectedStatusCodeRanges(const QList<OAIMonitorConfig_expectedStatusCodeRanges_inner> &expected_status_code_ranges) {
    m_expected_status_code_ranges = expected_status_code_ranges;
    m_expected_status_code_ranges_isSet = true;
}

bool OAIMonitorConfig::is_expected_status_code_ranges_Set() const{
    return m_expected_status_code_ranges_isSet;
}

bool OAIMonitorConfig::is_expected_status_code_ranges_Valid() const{
    return m_expected_status_code_ranges_isValid;
}

qint64 OAIMonitorConfig::getIntervalInSeconds() const {
    return m_interval_in_seconds;
}
void OAIMonitorConfig::setIntervalInSeconds(const qint64 &interval_in_seconds) {
    m_interval_in_seconds = interval_in_seconds;
    m_interval_in_seconds_isSet = true;
}

bool OAIMonitorConfig::is_interval_in_seconds_Set() const{
    return m_interval_in_seconds_isSet;
}

bool OAIMonitorConfig::is_interval_in_seconds_Valid() const{
    return m_interval_in_seconds_isValid;
}

QString OAIMonitorConfig::getPath() const {
    return m_path;
}
void OAIMonitorConfig::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMonitorConfig::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMonitorConfig::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAIMonitorConfig::getPort() const {
    return m_port;
}
void OAIMonitorConfig::setPort(const qint64 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIMonitorConfig::is_port_Set() const{
    return m_port_isSet;
}

bool OAIMonitorConfig::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIMonitorConfig::getProfileMonitorStatus() const {
    return m_profile_monitor_status;
}
void OAIMonitorConfig::setProfileMonitorStatus(const QString &profile_monitor_status) {
    m_profile_monitor_status = profile_monitor_status;
    m_profile_monitor_status_isSet = true;
}

bool OAIMonitorConfig::is_profile_monitor_status_Set() const{
    return m_profile_monitor_status_isSet;
}

bool OAIMonitorConfig::is_profile_monitor_status_Valid() const{
    return m_profile_monitor_status_isValid;
}

QString OAIMonitorConfig::getProtocol() const {
    return m_protocol;
}
void OAIMonitorConfig::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIMonitorConfig::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIMonitorConfig::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint64 OAIMonitorConfig::getTimeoutInSeconds() const {
    return m_timeout_in_seconds;
}
void OAIMonitorConfig::setTimeoutInSeconds(const qint64 &timeout_in_seconds) {
    m_timeout_in_seconds = timeout_in_seconds;
    m_timeout_in_seconds_isSet = true;
}

bool OAIMonitorConfig::is_timeout_in_seconds_Set() const{
    return m_timeout_in_seconds_isSet;
}

bool OAIMonitorConfig::is_timeout_in_seconds_Valid() const{
    return m_timeout_in_seconds_isValid;
}

qint64 OAIMonitorConfig::getToleratedNumberOfFailures() const {
    return m_tolerated_number_of_failures;
}
void OAIMonitorConfig::setToleratedNumberOfFailures(const qint64 &tolerated_number_of_failures) {
    m_tolerated_number_of_failures = tolerated_number_of_failures;
    m_tolerated_number_of_failures_isSet = true;
}

bool OAIMonitorConfig::is_tolerated_number_of_failures_Set() const{
    return m_tolerated_number_of_failures_isSet;
}

bool OAIMonitorConfig::is_tolerated_number_of_failures_Valid() const{
    return m_tolerated_number_of_failures_isValid;
}

bool OAIMonitorConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_status_code_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_monitor_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerated_number_of_failures_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitorConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
