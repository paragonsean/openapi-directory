/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryExperience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryExperience::OAIQueryExperience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryExperience::OAIQueryExperience() {
    this->initializeModel();
}

OAIQueryExperience::~OAIQueryExperience() {}

void OAIQueryExperience::initializeModel() {

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_query_count_isSet = false;
    m_query_count_isValid = false;
}

void OAIQueryExperience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryExperience::fromJsonObject(QJsonObject json) {

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("endpointId")]);
    m_endpoint_id_isSet = !json[QString("endpointId")].isNull() && m_endpoint_id_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_query_count_isValid = ::OpenAPI::fromJsonValue(m_query_count, json[QString("queryCount")]);
    m_query_count_isSet = !json[QString("queryCount")].isNull() && m_query_count_isValid;
}

QString OAIQueryExperience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryExperience::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_id_isSet) {
        obj.insert(QString("endpointId"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_query_count_isSet) {
        obj.insert(QString("queryCount"), ::OpenAPI::toJsonValue(m_query_count));
    }
    return obj;
}

qint32 OAIQueryExperience::getEndpointId() const {
    return m_endpoint_id;
}
void OAIQueryExperience::setEndpointId(const qint32 &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIQueryExperience::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIQueryExperience::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

double OAIQueryExperience::getLatency() const {
    return m_latency;
}
void OAIQueryExperience::setLatency(const double &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIQueryExperience::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIQueryExperience::is_latency_Valid() const{
    return m_latency_isValid;
}

qint32 OAIQueryExperience::getQueryCount() const {
    return m_query_count;
}
void OAIQueryExperience::setQueryCount(const qint32 &query_count) {
    m_query_count = query_count;
    m_query_count_isSet = true;
}

bool OAIQueryExperience::is_query_count_Set() const{
    return m_query_count_isSet;
}

bool OAIQueryExperience::is_query_count_Valid() const{
    return m_query_count_isValid;
}

bool OAIQueryExperience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryExperience::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_id_isValid && m_query_count_isValid && true;
}

} // namespace OpenAPI
