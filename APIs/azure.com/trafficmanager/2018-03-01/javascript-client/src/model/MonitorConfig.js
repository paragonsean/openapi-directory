/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndpointPropertiesCustomHeadersInner from './EndpointPropertiesCustomHeadersInner';
import MonitorConfigExpectedStatusCodeRangesInner from './MonitorConfigExpectedStatusCodeRangesInner';

/**
 * The MonitorConfig model module.
 * @module model/MonitorConfig
 * @version 2018-03-01
 */
class MonitorConfig {
    /**
     * Constructs a new <code>MonitorConfig</code>.
     * Class containing endpoint monitoring settings in a Traffic Manager profile.
     * @alias module:model/MonitorConfig
     */
    constructor() { 
        
        MonitorConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitorConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitorConfig} obj Optional instance to populate.
     * @return {module:model/MonitorConfig} The populated <code>MonitorConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitorConfig();

            if (data.hasOwnProperty('customHeaders')) {
                obj['customHeaders'] = ApiClient.convertToType(data['customHeaders'], [EndpointPropertiesCustomHeadersInner]);
            }
            if (data.hasOwnProperty('expectedStatusCodeRanges')) {
                obj['expectedStatusCodeRanges'] = ApiClient.convertToType(data['expectedStatusCodeRanges'], [MonitorConfigExpectedStatusCodeRangesInner]);
            }
            if (data.hasOwnProperty('intervalInSeconds')) {
                obj['intervalInSeconds'] = ApiClient.convertToType(data['intervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('profileMonitorStatus')) {
                obj['profileMonitorStatus'] = ApiClient.convertToType(data['profileMonitorStatus'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('timeoutInSeconds')) {
                obj['timeoutInSeconds'] = ApiClient.convertToType(data['timeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('toleratedNumberOfFailures')) {
                obj['toleratedNumberOfFailures'] = ApiClient.convertToType(data['toleratedNumberOfFailures'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitorConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitorConfig</code>.
     */
    static validateJSON(data) {
        if (data['customHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customHeaders'])) {
                throw new Error("Expected the field `customHeaders` to be an array in the JSON data but got " + data['customHeaders']);
            }
            // validate the optional field `customHeaders` (array)
            for (const item of data['customHeaders']) {
                EndpointPropertiesCustomHeadersInner.validateJSON(item);
            };
        }
        if (data['expectedStatusCodeRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expectedStatusCodeRanges'])) {
                throw new Error("Expected the field `expectedStatusCodeRanges` to be an array in the JSON data but got " + data['expectedStatusCodeRanges']);
            }
            // validate the optional field `expectedStatusCodeRanges` (array)
            for (const item of data['expectedStatusCodeRanges']) {
                MonitorConfigExpectedStatusCodeRangesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['profileMonitorStatus'] && !(typeof data['profileMonitorStatus'] === 'string' || data['profileMonitorStatus'] instanceof String)) {
            throw new Error("Expected the field `profileMonitorStatus` to be a primitive type in the JSON string but got " + data['profileMonitorStatus']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}



/**
 * List of custom headers.
 * @member {Array.<module:model/EndpointPropertiesCustomHeadersInner>} customHeaders
 */
MonitorConfig.prototype['customHeaders'] = undefined;

/**
 * List of expected status code ranges.
 * @member {Array.<module:model/MonitorConfigExpectedStatusCodeRangesInner>} expectedStatusCodeRanges
 */
MonitorConfig.prototype['expectedStatusCodeRanges'] = undefined;

/**
 * The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
 * @member {Number} intervalInSeconds
 */
MonitorConfig.prototype['intervalInSeconds'] = undefined;

/**
 * The path relative to the endpoint domain name used to probe for endpoint health.
 * @member {String} path
 */
MonitorConfig.prototype['path'] = undefined;

/**
 * The TCP port used to probe for endpoint health.
 * @member {Number} port
 */
MonitorConfig.prototype['port'] = undefined;

/**
 * The profile-level monitoring status of the Traffic Manager profile.
 * @member {module:model/MonitorConfig.ProfileMonitorStatusEnum} profileMonitorStatus
 */
MonitorConfig.prototype['profileMonitorStatus'] = undefined;

/**
 * The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
 * @member {module:model/MonitorConfig.ProtocolEnum} protocol
 */
MonitorConfig.prototype['protocol'] = undefined;

/**
 * The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
 * @member {Number} timeoutInSeconds
 */
MonitorConfig.prototype['timeoutInSeconds'] = undefined;

/**
 * The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
 * @member {Number} toleratedNumberOfFailures
 */
MonitorConfig.prototype['toleratedNumberOfFailures'] = undefined;





/**
 * Allowed values for the <code>profileMonitorStatus</code> property.
 * @enum {String}
 * @readonly
 */
MonitorConfig['ProfileMonitorStatusEnum'] = {

    /**
     * value: "CheckingEndpoints"
     * @const
     */
    "CheckingEndpoints": "CheckingEndpoints",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Degraded"
     * @const
     */
    "Degraded": "Degraded",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
MonitorConfig['ProtocolEnum'] = {

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP",

    /**
     * value: "HTTPS"
     * @const
     */
    "HTTPS": "HTTPS",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP"
};



export default MonitorConfig;

