/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointProperties::OAIEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointProperties::OAIEndpointProperties() {
    this->initializeModel();
}

OAIEndpointProperties::~OAIEndpointProperties() {}

void OAIEndpointProperties::initializeModel() {

    m_endpoint_location_isSet = false;
    m_endpoint_location_isValid = false;

    m_endpoint_monitor_status_isSet = false;
    m_endpoint_monitor_status_isValid = false;

    m_endpoint_status_isSet = false;
    m_endpoint_status_isValid = false;

    m_min_child_endpoints_isSet = false;
    m_min_child_endpoints_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointProperties::fromJsonObject(QJsonObject json) {

    m_endpoint_location_isValid = ::OpenAPI::fromJsonValue(m_endpoint_location, json[QString("endpointLocation")]);
    m_endpoint_location_isSet = !json[QString("endpointLocation")].isNull() && m_endpoint_location_isValid;

    m_endpoint_monitor_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_monitor_status, json[QString("endpointMonitorStatus")]);
    m_endpoint_monitor_status_isSet = !json[QString("endpointMonitorStatus")].isNull() && m_endpoint_monitor_status_isValid;

    m_endpoint_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_status, json[QString("endpointStatus")]);
    m_endpoint_status_isSet = !json[QString("endpointStatus")].isNull() && m_endpoint_status_isValid;

    m_min_child_endpoints_isValid = ::OpenAPI::fromJsonValue(m_min_child_endpoints, json[QString("minChildEndpoints")]);
    m_min_child_endpoints_isSet = !json[QString("minChildEndpoints")].isNull() && m_min_child_endpoints_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_location_isSet) {
        obj.insert(QString("endpointLocation"), ::OpenAPI::toJsonValue(m_endpoint_location));
    }
    if (m_endpoint_monitor_status_isSet) {
        obj.insert(QString("endpointMonitorStatus"), ::OpenAPI::toJsonValue(m_endpoint_monitor_status));
    }
    if (m_endpoint_status_isSet) {
        obj.insert(QString("endpointStatus"), ::OpenAPI::toJsonValue(m_endpoint_status));
    }
    if (m_min_child_endpoints_isSet) {
        obj.insert(QString("minChildEndpoints"), ::OpenAPI::toJsonValue(m_min_child_endpoints));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIEndpointProperties::getEndpointLocation() const {
    return m_endpoint_location;
}
void OAIEndpointProperties::setEndpointLocation(const QString &endpoint_location) {
    m_endpoint_location = endpoint_location;
    m_endpoint_location_isSet = true;
}

bool OAIEndpointProperties::is_endpoint_location_Set() const{
    return m_endpoint_location_isSet;
}

bool OAIEndpointProperties::is_endpoint_location_Valid() const{
    return m_endpoint_location_isValid;
}

QString OAIEndpointProperties::getEndpointMonitorStatus() const {
    return m_endpoint_monitor_status;
}
void OAIEndpointProperties::setEndpointMonitorStatus(const QString &endpoint_monitor_status) {
    m_endpoint_monitor_status = endpoint_monitor_status;
    m_endpoint_monitor_status_isSet = true;
}

bool OAIEndpointProperties::is_endpoint_monitor_status_Set() const{
    return m_endpoint_monitor_status_isSet;
}

bool OAIEndpointProperties::is_endpoint_monitor_status_Valid() const{
    return m_endpoint_monitor_status_isValid;
}

QString OAIEndpointProperties::getEndpointStatus() const {
    return m_endpoint_status;
}
void OAIEndpointProperties::setEndpointStatus(const QString &endpoint_status) {
    m_endpoint_status = endpoint_status;
    m_endpoint_status_isSet = true;
}

bool OAIEndpointProperties::is_endpoint_status_Set() const{
    return m_endpoint_status_isSet;
}

bool OAIEndpointProperties::is_endpoint_status_Valid() const{
    return m_endpoint_status_isValid;
}

qint64 OAIEndpointProperties::getMinChildEndpoints() const {
    return m_min_child_endpoints;
}
void OAIEndpointProperties::setMinChildEndpoints(const qint64 &min_child_endpoints) {
    m_min_child_endpoints = min_child_endpoints;
    m_min_child_endpoints_isSet = true;
}

bool OAIEndpointProperties::is_min_child_endpoints_Set() const{
    return m_min_child_endpoints_isSet;
}

bool OAIEndpointProperties::is_min_child_endpoints_Valid() const{
    return m_min_child_endpoints_isValid;
}

qint64 OAIEndpointProperties::getPriority() const {
    return m_priority;
}
void OAIEndpointProperties::setPriority(const qint64 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIEndpointProperties::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIEndpointProperties::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIEndpointProperties::getTarget() const {
    return m_target;
}
void OAIEndpointProperties::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIEndpointProperties::is_target_Set() const{
    return m_target_isSet;
}

bool OAIEndpointProperties::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIEndpointProperties::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAIEndpointProperties::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAIEndpointProperties::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAIEndpointProperties::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

qint64 OAIEndpointProperties::getWeight() const {
    return m_weight;
}
void OAIEndpointProperties::setWeight(const qint64 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIEndpointProperties::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIEndpointProperties::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_monitor_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_child_endpoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
