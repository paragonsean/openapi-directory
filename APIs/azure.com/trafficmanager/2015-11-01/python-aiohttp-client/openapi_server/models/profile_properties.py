# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_config import DnsConfig
from openapi_server.models.endpoint import Endpoint
from openapi_server.models.monitor_config import MonitorConfig
from openapi_server import util


class ProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_config: DnsConfig=None, endpoints: List[Endpoint]=None, monitor_config: MonitorConfig=None, profile_status: str=None, traffic_routing_method: str=None):
        """ProfileProperties - a model defined in OpenAPI

        :param dns_config: The dns_config of this ProfileProperties.
        :param endpoints: The endpoints of this ProfileProperties.
        :param monitor_config: The monitor_config of this ProfileProperties.
        :param profile_status: The profile_status of this ProfileProperties.
        :param traffic_routing_method: The traffic_routing_method of this ProfileProperties.
        """
        self.openapi_types = {
            'dns_config': DnsConfig,
            'endpoints': List[Endpoint],
            'monitor_config': MonitorConfig,
            'profile_status': str,
            'traffic_routing_method': str
        }

        self.attribute_map = {
            'dns_config': 'dnsConfig',
            'endpoints': 'endpoints',
            'monitor_config': 'monitorConfig',
            'profile_status': 'profileStatus',
            'traffic_routing_method': 'trafficRoutingMethod'
        }

        self._dns_config = dns_config
        self._endpoints = endpoints
        self._monitor_config = monitor_config
        self._profile_status = profile_status
        self._traffic_routing_method = traffic_routing_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileProperties of this ProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_config(self):
        """Gets the dns_config of this ProfileProperties.


        :return: The dns_config of this ProfileProperties.
        :rtype: DnsConfig
        """
        return self._dns_config

    @dns_config.setter
    def dns_config(self, dns_config):
        """Sets the dns_config of this ProfileProperties.


        :param dns_config: The dns_config of this ProfileProperties.
        :type dns_config: DnsConfig
        """

        self._dns_config = dns_config

    @property
    def endpoints(self):
        """Gets the endpoints of this ProfileProperties.

        Gets or sets the list of endpoints in the Traffic Manager profile.

        :return: The endpoints of this ProfileProperties.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ProfileProperties.

        Gets or sets the list of endpoints in the Traffic Manager profile.

        :param endpoints: The endpoints of this ProfileProperties.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def monitor_config(self):
        """Gets the monitor_config of this ProfileProperties.


        :return: The monitor_config of this ProfileProperties.
        :rtype: MonitorConfig
        """
        return self._monitor_config

    @monitor_config.setter
    def monitor_config(self, monitor_config):
        """Sets the monitor_config of this ProfileProperties.


        :param monitor_config: The monitor_config of this ProfileProperties.
        :type monitor_config: MonitorConfig
        """

        self._monitor_config = monitor_config

    @property
    def profile_status(self):
        """Gets the profile_status of this ProfileProperties.

        Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.

        :return: The profile_status of this ProfileProperties.
        :rtype: str
        """
        return self._profile_status

    @profile_status.setter
    def profile_status(self, profile_status):
        """Sets the profile_status of this ProfileProperties.

        Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.

        :param profile_status: The profile_status of this ProfileProperties.
        :type profile_status: str
        """

        self._profile_status = profile_status

    @property
    def traffic_routing_method(self):
        """Gets the traffic_routing_method of this ProfileProperties.

        Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.

        :return: The traffic_routing_method of this ProfileProperties.
        :rtype: str
        """
        return self._traffic_routing_method

    @traffic_routing_method.setter
    def traffic_routing_method(self, traffic_routing_method):
        """Sets the traffic_routing_method of this ProfileProperties.

        Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.

        :param traffic_routing_method: The traffic_routing_method of this ProfileProperties.
        :type traffic_routing_method: str
        """

        self._traffic_routing_method = traffic_routing_method
