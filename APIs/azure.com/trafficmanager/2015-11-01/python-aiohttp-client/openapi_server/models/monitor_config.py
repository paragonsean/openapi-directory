# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, port: int=None, profile_monitor_status: str=None, protocol: str=None):
        """MonitorConfig - a model defined in OpenAPI

        :param path: The path of this MonitorConfig.
        :param port: The port of this MonitorConfig.
        :param profile_monitor_status: The profile_monitor_status of this MonitorConfig.
        :param protocol: The protocol of this MonitorConfig.
        """
        self.openapi_types = {
            'path': str,
            'port': int,
            'profile_monitor_status': str,
            'protocol': str
        }

        self.attribute_map = {
            'path': 'path',
            'port': 'port',
            'profile_monitor_status': 'profileMonitorStatus',
            'protocol': 'protocol'
        }

        self._path = path
        self._port = port
        self._profile_monitor_status = profile_monitor_status
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorConfig of this MonitorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this MonitorConfig.

        Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.

        :return: The path of this MonitorConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MonitorConfig.

        Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.

        :param path: The path of this MonitorConfig.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this MonitorConfig.

        Gets or sets the TCP port used to probe for endpoint health.

        :return: The port of this MonitorConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MonitorConfig.

        Gets or sets the TCP port used to probe for endpoint health.

        :param port: The port of this MonitorConfig.
        :type port: int
        """

        self._port = port

    @property
    def profile_monitor_status(self):
        """Gets the profile_monitor_status of this MonitorConfig.

        Gets or sets the profile-level monitoring status of the Traffic Manager profile.

        :return: The profile_monitor_status of this MonitorConfig.
        :rtype: str
        """
        return self._profile_monitor_status

    @profile_monitor_status.setter
    def profile_monitor_status(self, profile_monitor_status):
        """Sets the profile_monitor_status of this MonitorConfig.

        Gets or sets the profile-level monitoring status of the Traffic Manager profile.

        :param profile_monitor_status: The profile_monitor_status of this MonitorConfig.
        :type profile_monitor_status: str
        """

        self._profile_monitor_status = profile_monitor_status

    @property
    def protocol(self):
        """Gets the protocol of this MonitorConfig.

        Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.

        :return: The protocol of this MonitorConfig.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this MonitorConfig.

        Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.

        :param protocol: The protocol of this MonitorConfig.
        :type protocol: str
        """

        self._protocol = protocol
