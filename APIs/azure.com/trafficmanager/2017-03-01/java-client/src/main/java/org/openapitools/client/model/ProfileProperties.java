/*
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsConfig;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.MonitorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing the Traffic Manager profile properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:47.573141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileProperties {
  public static final String SERIALIZED_NAME_DNS_CONFIG = "dnsConfig";
  @SerializedName(SERIALIZED_NAME_DNS_CONFIG)
  private DnsConfig dnsConfig;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<Endpoint> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITOR_CONFIG = "monitorConfig";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONFIG)
  private MonitorConfig monitorConfig;

  public static final String SERIALIZED_NAME_PROFILE_STATUS = "profileStatus";
  @SerializedName(SERIALIZED_NAME_PROFILE_STATUS)
  private String profileStatus;

  public static final String SERIALIZED_NAME_TRAFFIC_ROUTING_METHOD = "trafficRoutingMethod";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_ROUTING_METHOD)
  private String trafficRoutingMethod;

  public ProfileProperties() {
  }

  public ProfileProperties dnsConfig(DnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
    return this;
  }

  /**
   * Get dnsConfig
   * @return dnsConfig
   */
  @javax.annotation.Nullable
  public DnsConfig getDnsConfig() {
    return dnsConfig;
  }

  public void setDnsConfig(DnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
  }


  public ProfileProperties endpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public ProfileProperties addEndpointsItem(Endpoint endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * Gets or sets the list of endpoints in the Traffic Manager profile.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<Endpoint> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
  }


  public ProfileProperties monitorConfig(MonitorConfig monitorConfig) {
    this.monitorConfig = monitorConfig;
    return this;
  }

  /**
   * Get monitorConfig
   * @return monitorConfig
   */
  @javax.annotation.Nullable
  public MonitorConfig getMonitorConfig() {
    return monitorConfig;
  }

  public void setMonitorConfig(MonitorConfig monitorConfig) {
    this.monitorConfig = monitorConfig;
  }


  public ProfileProperties profileStatus(String profileStatus) {
    this.profileStatus = profileStatus;
    return this;
  }

  /**
   * Gets or sets the status of the Traffic Manager profile.  Possible values are &#39;Enabled&#39; and &#39;Disabled&#39;.
   * @return profileStatus
   */
  @javax.annotation.Nullable
  public String getProfileStatus() {
    return profileStatus;
  }

  public void setProfileStatus(String profileStatus) {
    this.profileStatus = profileStatus;
  }


  public ProfileProperties trafficRoutingMethod(String trafficRoutingMethod) {
    this.trafficRoutingMethod = trafficRoutingMethod;
    return this;
  }

  /**
   * Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are &#39;Performance&#39;, &#39;Weighted&#39;, &#39;Priority&#39; or &#39;Geographic&#39;.
   * @return trafficRoutingMethod
   */
  @javax.annotation.Nullable
  public String getTrafficRoutingMethod() {
    return trafficRoutingMethod;
  }

  public void setTrafficRoutingMethod(String trafficRoutingMethod) {
    this.trafficRoutingMethod = trafficRoutingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileProperties profileProperties = (ProfileProperties) o;
    return Objects.equals(this.dnsConfig, profileProperties.dnsConfig) &&
        Objects.equals(this.endpoints, profileProperties.endpoints) &&
        Objects.equals(this.monitorConfig, profileProperties.monitorConfig) &&
        Objects.equals(this.profileStatus, profileProperties.profileStatus) &&
        Objects.equals(this.trafficRoutingMethod, profileProperties.trafficRoutingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsConfig, endpoints, monitorConfig, profileStatus, trafficRoutingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileProperties {\n");
    sb.append("    dnsConfig: ").append(toIndentedString(dnsConfig)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    monitorConfig: ").append(toIndentedString(monitorConfig)).append("\n");
    sb.append("    profileStatus: ").append(toIndentedString(profileStatus)).append("\n");
    sb.append("    trafficRoutingMethod: ").append(toIndentedString(trafficRoutingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsConfig");
    openapiFields.add("endpoints");
    openapiFields.add("monitorConfig");
    openapiFields.add("profileStatus");
    openapiFields.add("trafficRoutingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileProperties is not found in the empty JSON string", ProfileProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dnsConfig`
      if (jsonObj.get("dnsConfig") != null && !jsonObj.get("dnsConfig").isJsonNull()) {
        DnsConfig.validateJsonElement(jsonObj.get("dnsConfig"));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            Endpoint.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      // validate the optional field `monitorConfig`
      if (jsonObj.get("monitorConfig") != null && !jsonObj.get("monitorConfig").isJsonNull()) {
        MonitorConfig.validateJsonElement(jsonObj.get("monitorConfig"));
      }
      if ((jsonObj.get("profileStatus") != null && !jsonObj.get("profileStatus").isJsonNull()) && !jsonObj.get("profileStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileStatus").toString()));
      }
      if ((jsonObj.get("trafficRoutingMethod") != null && !jsonObj.get("trafficRoutingMethod").isJsonNull()) && !jsonObj.get("trafficRoutingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficRoutingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficRoutingMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileProperties>() {
           @Override
           public void write(JsonWriter out, ProfileProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileProperties
   * @throws IOException if the JSON string is invalid with respect to ProfileProperties
   */
  public static ProfileProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileProperties.class);
  }

  /**
   * Convert an instance of ProfileProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

