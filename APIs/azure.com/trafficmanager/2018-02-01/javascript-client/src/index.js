/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CheckTrafficManagerRelativeDnsNameAvailabilityParameters from './model/CheckTrafficManagerRelativeDnsNameAvailabilityParameters';
import CloudError from './model/CloudError';
import CloudErrorBody from './model/CloudErrorBody';
import DeleteOperationResult from './model/DeleteOperationResult';
import DnsConfig from './model/DnsConfig';
import Endpoint from './model/Endpoint';
import EndpointProperties from './model/EndpointProperties';
import GeographicHierarchyProperties from './model/GeographicHierarchyProperties';
import MonitorConfig from './model/MonitorConfig';
import Profile from './model/Profile';
import ProfileListResult from './model/ProfileListResult';
import ProfileProperties from './model/ProfileProperties';
import ProxyResource from './model/ProxyResource';
import Region from './model/Region';
import Resource from './model/Resource';
import TrackedResource from './model/TrackedResource';
import TrafficManagerGeographicHierarchy from './model/TrafficManagerGeographicHierarchy';
import TrafficManagerNameAvailability from './model/TrafficManagerNameAvailability';
import EndpointsApi from './api/EndpointsApi';
import GeographicHierarchiesApi from './api/GeographicHierarchiesApi';
import ProfilesApi from './api/ProfilesApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TrafficManagerManagementClient = require('index'); // See note below*.
* var xxxSvc = new TrafficManagerManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TrafficManagerManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TrafficManagerManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TrafficManagerManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-02-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CheckTrafficManagerRelativeDnsNameAvailabilityParameters model constructor.
     * @property {module:model/CheckTrafficManagerRelativeDnsNameAvailabilityParameters}
     */
    CheckTrafficManagerRelativeDnsNameAvailabilityParameters,

    /**
     * The CloudError model constructor.
     * @property {module:model/CloudError}
     */
    CloudError,

    /**
     * The CloudErrorBody model constructor.
     * @property {module:model/CloudErrorBody}
     */
    CloudErrorBody,

    /**
     * The DeleteOperationResult model constructor.
     * @property {module:model/DeleteOperationResult}
     */
    DeleteOperationResult,

    /**
     * The DnsConfig model constructor.
     * @property {module:model/DnsConfig}
     */
    DnsConfig,

    /**
     * The Endpoint model constructor.
     * @property {module:model/Endpoint}
     */
    Endpoint,

    /**
     * The EndpointProperties model constructor.
     * @property {module:model/EndpointProperties}
     */
    EndpointProperties,

    /**
     * The GeographicHierarchyProperties model constructor.
     * @property {module:model/GeographicHierarchyProperties}
     */
    GeographicHierarchyProperties,

    /**
     * The MonitorConfig model constructor.
     * @property {module:model/MonitorConfig}
     */
    MonitorConfig,

    /**
     * The Profile model constructor.
     * @property {module:model/Profile}
     */
    Profile,

    /**
     * The ProfileListResult model constructor.
     * @property {module:model/ProfileListResult}
     */
    ProfileListResult,

    /**
     * The ProfileProperties model constructor.
     * @property {module:model/ProfileProperties}
     */
    ProfileProperties,

    /**
     * The ProxyResource model constructor.
     * @property {module:model/ProxyResource}
     */
    ProxyResource,

    /**
     * The Region model constructor.
     * @property {module:model/Region}
     */
    Region,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The TrackedResource model constructor.
     * @property {module:model/TrackedResource}
     */
    TrackedResource,

    /**
     * The TrafficManagerGeographicHierarchy model constructor.
     * @property {module:model/TrafficManagerGeographicHierarchy}
     */
    TrafficManagerGeographicHierarchy,

    /**
     * The TrafficManagerNameAvailability model constructor.
     * @property {module:model/TrafficManagerNameAvailability}
     */
    TrafficManagerNameAvailability,

    /**
    * The EndpointsApi service constructor.
    * @property {module:api/EndpointsApi}
    */
    EndpointsApi,

    /**
    * The GeographicHierarchiesApi service constructor.
    * @property {module:api/GeographicHierarchiesApi}
    */
    GeographicHierarchiesApi,

    /**
    * The ProfilesApi service constructor.
    * @property {module:api/ProfilesApi}
    */
    ProfilesApi
};
