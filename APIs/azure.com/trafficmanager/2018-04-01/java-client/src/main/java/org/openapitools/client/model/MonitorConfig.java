/*
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointPropertiesCustomHeadersInner;
import org.openapitools.client.model.MonitorConfigExpectedStatusCodeRangesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class containing endpoint monitoring settings in a Traffic Manager profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:48.641892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitorConfig {
  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  private List<EndpointPropertiesCustomHeadersInner> customHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPECTED_STATUS_CODE_RANGES = "expectedStatusCodeRanges";
  @SerializedName(SERIALIZED_NAME_EXPECTED_STATUS_CODE_RANGES)
  private List<MonitorConfigExpectedStatusCodeRangesInner> expectedStatusCodeRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVAL_IN_SECONDS = "intervalInSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_IN_SECONDS)
  private Long intervalInSeconds;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Long port;

  /**
   * The profile-level monitoring status of the Traffic Manager profile.
   */
  @JsonAdapter(ProfileMonitorStatusEnum.Adapter.class)
  public enum ProfileMonitorStatusEnum {
    CHECKING_ENDPOINTS("CheckingEndpoints"),
    
    ONLINE("Online"),
    
    DEGRADED("Degraded"),
    
    DISABLED("Disabled"),
    
    INACTIVE("Inactive");

    private String value;

    ProfileMonitorStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfileMonitorStatusEnum fromValue(String value) {
      for (ProfileMonitorStatusEnum b : ProfileMonitorStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfileMonitorStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileMonitorStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileMonitorStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfileMonitorStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfileMonitorStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFILE_MONITOR_STATUS = "profileMonitorStatus";
  @SerializedName(SERIALIZED_NAME_PROFILE_MONITOR_STATUS)
  private ProfileMonitorStatusEnum profileMonitorStatus;

  /**
   * The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("HTTP"),
    
    HTTPS("HTTPS"),
    
    TCP("TCP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_SECONDS = "timeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_SECONDS)
  private Long timeoutInSeconds;

  public static final String SERIALIZED_NAME_TOLERATED_NUMBER_OF_FAILURES = "toleratedNumberOfFailures";
  @SerializedName(SERIALIZED_NAME_TOLERATED_NUMBER_OF_FAILURES)
  private Long toleratedNumberOfFailures;

  public MonitorConfig() {
  }

  public MonitorConfig customHeaders(List<EndpointPropertiesCustomHeadersInner> customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  public MonitorConfig addCustomHeadersItem(EndpointPropertiesCustomHeadersInner customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new ArrayList<>();
    }
    this.customHeaders.add(customHeadersItem);
    return this;
  }

  /**
   * List of custom headers.
   * @return customHeaders
   */
  @javax.annotation.Nullable
  public List<EndpointPropertiesCustomHeadersInner> getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(List<EndpointPropertiesCustomHeadersInner> customHeaders) {
    this.customHeaders = customHeaders;
  }


  public MonitorConfig expectedStatusCodeRanges(List<MonitorConfigExpectedStatusCodeRangesInner> expectedStatusCodeRanges) {
    this.expectedStatusCodeRanges = expectedStatusCodeRanges;
    return this;
  }

  public MonitorConfig addExpectedStatusCodeRangesItem(MonitorConfigExpectedStatusCodeRangesInner expectedStatusCodeRangesItem) {
    if (this.expectedStatusCodeRanges == null) {
      this.expectedStatusCodeRanges = new ArrayList<>();
    }
    this.expectedStatusCodeRanges.add(expectedStatusCodeRangesItem);
    return this;
  }

  /**
   * List of expected status code ranges.
   * @return expectedStatusCodeRanges
   */
  @javax.annotation.Nullable
  public List<MonitorConfigExpectedStatusCodeRangesInner> getExpectedStatusCodeRanges() {
    return expectedStatusCodeRanges;
  }

  public void setExpectedStatusCodeRanges(List<MonitorConfigExpectedStatusCodeRangesInner> expectedStatusCodeRanges) {
    this.expectedStatusCodeRanges = expectedStatusCodeRanges;
  }


  public MonitorConfig intervalInSeconds(Long intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
    return this;
  }

  /**
   * The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
   * @return intervalInSeconds
   */
  @javax.annotation.Nullable
  public Long getIntervalInSeconds() {
    return intervalInSeconds;
  }

  public void setIntervalInSeconds(Long intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
  }


  public MonitorConfig path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path relative to the endpoint domain name used to probe for endpoint health.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public MonitorConfig port(Long port) {
    this.port = port;
    return this;
  }

  /**
   * The TCP port used to probe for endpoint health.
   * @return port
   */
  @javax.annotation.Nullable
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }


  public MonitorConfig profileMonitorStatus(ProfileMonitorStatusEnum profileMonitorStatus) {
    this.profileMonitorStatus = profileMonitorStatus;
    return this;
  }

  /**
   * The profile-level monitoring status of the Traffic Manager profile.
   * @return profileMonitorStatus
   */
  @javax.annotation.Nullable
  public ProfileMonitorStatusEnum getProfileMonitorStatus() {
    return profileMonitorStatus;
  }

  public void setProfileMonitorStatus(ProfileMonitorStatusEnum profileMonitorStatus) {
    this.profileMonitorStatus = profileMonitorStatus;
  }


  public MonitorConfig protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public MonitorConfig timeoutInSeconds(Long timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
    return this;
  }

  /**
   * The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
   * @return timeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getTimeoutInSeconds() {
    return timeoutInSeconds;
  }

  public void setTimeoutInSeconds(Long timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
  }


  public MonitorConfig toleratedNumberOfFailures(Long toleratedNumberOfFailures) {
    this.toleratedNumberOfFailures = toleratedNumberOfFailures;
    return this;
  }

  /**
   * The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
   * @return toleratedNumberOfFailures
   */
  @javax.annotation.Nullable
  public Long getToleratedNumberOfFailures() {
    return toleratedNumberOfFailures;
  }

  public void setToleratedNumberOfFailures(Long toleratedNumberOfFailures) {
    this.toleratedNumberOfFailures = toleratedNumberOfFailures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitorConfig monitorConfig = (MonitorConfig) o;
    return Objects.equals(this.customHeaders, monitorConfig.customHeaders) &&
        Objects.equals(this.expectedStatusCodeRanges, monitorConfig.expectedStatusCodeRanges) &&
        Objects.equals(this.intervalInSeconds, monitorConfig.intervalInSeconds) &&
        Objects.equals(this.path, monitorConfig.path) &&
        Objects.equals(this.port, monitorConfig.port) &&
        Objects.equals(this.profileMonitorStatus, monitorConfig.profileMonitorStatus) &&
        Objects.equals(this.protocol, monitorConfig.protocol) &&
        Objects.equals(this.timeoutInSeconds, monitorConfig.timeoutInSeconds) &&
        Objects.equals(this.toleratedNumberOfFailures, monitorConfig.toleratedNumberOfFailures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customHeaders, expectedStatusCodeRanges, intervalInSeconds, path, port, profileMonitorStatus, protocol, timeoutInSeconds, toleratedNumberOfFailures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitorConfig {\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    expectedStatusCodeRanges: ").append(toIndentedString(expectedStatusCodeRanges)).append("\n");
    sb.append("    intervalInSeconds: ").append(toIndentedString(intervalInSeconds)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    profileMonitorStatus: ").append(toIndentedString(profileMonitorStatus)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeoutInSeconds: ").append(toIndentedString(timeoutInSeconds)).append("\n");
    sb.append("    toleratedNumberOfFailures: ").append(toIndentedString(toleratedNumberOfFailures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customHeaders");
    openapiFields.add("expectedStatusCodeRanges");
    openapiFields.add("intervalInSeconds");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("profileMonitorStatus");
    openapiFields.add("protocol");
    openapiFields.add("timeoutInSeconds");
    openapiFields.add("toleratedNumberOfFailures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitorConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitorConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitorConfig is not found in the empty JSON string", MonitorConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitorConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitorConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customHeaders") != null && !jsonObj.get("customHeaders").isJsonNull()) {
        JsonArray jsonArraycustomHeaders = jsonObj.getAsJsonArray("customHeaders");
        if (jsonArraycustomHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("customHeaders").toString()));
          }

          // validate the optional field `customHeaders` (array)
          for (int i = 0; i < jsonArraycustomHeaders.size(); i++) {
            EndpointPropertiesCustomHeadersInner.validateJsonElement(jsonArraycustomHeaders.get(i));
          };
        }
      }
      if (jsonObj.get("expectedStatusCodeRanges") != null && !jsonObj.get("expectedStatusCodeRanges").isJsonNull()) {
        JsonArray jsonArrayexpectedStatusCodeRanges = jsonObj.getAsJsonArray("expectedStatusCodeRanges");
        if (jsonArrayexpectedStatusCodeRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expectedStatusCodeRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expectedStatusCodeRanges` to be an array in the JSON string but got `%s`", jsonObj.get("expectedStatusCodeRanges").toString()));
          }

          // validate the optional field `expectedStatusCodeRanges` (array)
          for (int i = 0; i < jsonArrayexpectedStatusCodeRanges.size(); i++) {
            MonitorConfigExpectedStatusCodeRangesInner.validateJsonElement(jsonArrayexpectedStatusCodeRanges.get(i));
          };
        }
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("profileMonitorStatus") != null && !jsonObj.get("profileMonitorStatus").isJsonNull()) && !jsonObj.get("profileMonitorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileMonitorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileMonitorStatus").toString()));
      }
      // validate the optional field `profileMonitorStatus`
      if (jsonObj.get("profileMonitorStatus") != null && !jsonObj.get("profileMonitorStatus").isJsonNull()) {
        ProfileMonitorStatusEnum.validateJsonElement(jsonObj.get("profileMonitorStatus"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitorConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitorConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitorConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitorConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitorConfig>() {
           @Override
           public void write(JsonWriter out, MonitorConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitorConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitorConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitorConfig
   * @throws IOException if the JSON string is invalid with respect to MonitorConfig
   */
  public static MonitorConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitorConfig.class);
  }

  /**
   * Convert an instance of MonitorConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

