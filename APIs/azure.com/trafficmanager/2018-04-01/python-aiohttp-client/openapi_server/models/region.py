# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, name: str=None, regions: List[Region]=None):
        """Region - a model defined in OpenAPI

        :param code: The code of this Region.
        :param name: The name of this Region.
        :param regions: The regions of this Region.
        """
        self.openapi_types = {
            'code': str,
            'name': str,
            'regions': List[Region]
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'regions': 'regions'
        }

        self._code = code
        self._name = name
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Region of this Region.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Region.

        The code of the region

        :return: The code of this Region.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Region.

        The code of the region

        :param code: The code of this Region.
        :type code: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Region.

        The name of the region

        :return: The name of this Region.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Region.

        The name of the region

        :param name: The name of this Region.
        :type name: str
        """

        self._name = name

    @property
    def regions(self):
        """Gets the regions of this Region.

        The list of Regions grouped under this Region in the Geographic Hierarchy.

        :return: The regions of this Region.
        :rtype: List[Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Region.

        The list of Regions grouped under this Region in the Geographic Hierarchy.

        :param regions: The regions of this Region.
        :type regions: List[Region]
        """

        self._regions = regions
