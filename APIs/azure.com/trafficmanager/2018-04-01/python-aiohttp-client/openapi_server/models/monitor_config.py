# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_properties_custom_headers_inner import EndpointPropertiesCustomHeadersInner
from openapi_server.models.monitor_config_expected_status_code_ranges_inner import MonitorConfigExpectedStatusCodeRangesInner
from openapi_server import util


class MonitorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_headers: List[EndpointPropertiesCustomHeadersInner]=None, expected_status_code_ranges: List[MonitorConfigExpectedStatusCodeRangesInner]=None, interval_in_seconds: int=None, path: str=None, port: int=None, profile_monitor_status: str=None, protocol: str=None, timeout_in_seconds: int=None, tolerated_number_of_failures: int=None):
        """MonitorConfig - a model defined in OpenAPI

        :param custom_headers: The custom_headers of this MonitorConfig.
        :param expected_status_code_ranges: The expected_status_code_ranges of this MonitorConfig.
        :param interval_in_seconds: The interval_in_seconds of this MonitorConfig.
        :param path: The path of this MonitorConfig.
        :param port: The port of this MonitorConfig.
        :param profile_monitor_status: The profile_monitor_status of this MonitorConfig.
        :param protocol: The protocol of this MonitorConfig.
        :param timeout_in_seconds: The timeout_in_seconds of this MonitorConfig.
        :param tolerated_number_of_failures: The tolerated_number_of_failures of this MonitorConfig.
        """
        self.openapi_types = {
            'custom_headers': List[EndpointPropertiesCustomHeadersInner],
            'expected_status_code_ranges': List[MonitorConfigExpectedStatusCodeRangesInner],
            'interval_in_seconds': int,
            'path': str,
            'port': int,
            'profile_monitor_status': str,
            'protocol': str,
            'timeout_in_seconds': int,
            'tolerated_number_of_failures': int
        }

        self.attribute_map = {
            'custom_headers': 'customHeaders',
            'expected_status_code_ranges': 'expectedStatusCodeRanges',
            'interval_in_seconds': 'intervalInSeconds',
            'path': 'path',
            'port': 'port',
            'profile_monitor_status': 'profileMonitorStatus',
            'protocol': 'protocol',
            'timeout_in_seconds': 'timeoutInSeconds',
            'tolerated_number_of_failures': 'toleratedNumberOfFailures'
        }

        self._custom_headers = custom_headers
        self._expected_status_code_ranges = expected_status_code_ranges
        self._interval_in_seconds = interval_in_seconds
        self._path = path
        self._port = port
        self._profile_monitor_status = profile_monitor_status
        self._protocol = protocol
        self._timeout_in_seconds = timeout_in_seconds
        self._tolerated_number_of_failures = tolerated_number_of_failures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorConfig of this MonitorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_headers(self):
        """Gets the custom_headers of this MonitorConfig.

        List of custom headers.

        :return: The custom_headers of this MonitorConfig.
        :rtype: List[EndpointPropertiesCustomHeadersInner]
        """
        return self._custom_headers

    @custom_headers.setter
    def custom_headers(self, custom_headers):
        """Sets the custom_headers of this MonitorConfig.

        List of custom headers.

        :param custom_headers: The custom_headers of this MonitorConfig.
        :type custom_headers: List[EndpointPropertiesCustomHeadersInner]
        """

        self._custom_headers = custom_headers

    @property
    def expected_status_code_ranges(self):
        """Gets the expected_status_code_ranges of this MonitorConfig.

        List of expected status code ranges.

        :return: The expected_status_code_ranges of this MonitorConfig.
        :rtype: List[MonitorConfigExpectedStatusCodeRangesInner]
        """
        return self._expected_status_code_ranges

    @expected_status_code_ranges.setter
    def expected_status_code_ranges(self, expected_status_code_ranges):
        """Sets the expected_status_code_ranges of this MonitorConfig.

        List of expected status code ranges.

        :param expected_status_code_ranges: The expected_status_code_ranges of this MonitorConfig.
        :type expected_status_code_ranges: List[MonitorConfigExpectedStatusCodeRangesInner]
        """

        self._expected_status_code_ranges = expected_status_code_ranges

    @property
    def interval_in_seconds(self):
        """Gets the interval_in_seconds of this MonitorConfig.

        The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.

        :return: The interval_in_seconds of this MonitorConfig.
        :rtype: int
        """
        return self._interval_in_seconds

    @interval_in_seconds.setter
    def interval_in_seconds(self, interval_in_seconds):
        """Sets the interval_in_seconds of this MonitorConfig.

        The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.

        :param interval_in_seconds: The interval_in_seconds of this MonitorConfig.
        :type interval_in_seconds: int
        """

        self._interval_in_seconds = interval_in_seconds

    @property
    def path(self):
        """Gets the path of this MonitorConfig.

        The path relative to the endpoint domain name used to probe for endpoint health.

        :return: The path of this MonitorConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MonitorConfig.

        The path relative to the endpoint domain name used to probe for endpoint health.

        :param path: The path of this MonitorConfig.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this MonitorConfig.

        The TCP port used to probe for endpoint health.

        :return: The port of this MonitorConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MonitorConfig.

        The TCP port used to probe for endpoint health.

        :param port: The port of this MonitorConfig.
        :type port: int
        """

        self._port = port

    @property
    def profile_monitor_status(self):
        """Gets the profile_monitor_status of this MonitorConfig.

        The profile-level monitoring status of the Traffic Manager profile.

        :return: The profile_monitor_status of this MonitorConfig.
        :rtype: str
        """
        return self._profile_monitor_status

    @profile_monitor_status.setter
    def profile_monitor_status(self, profile_monitor_status):
        """Sets the profile_monitor_status of this MonitorConfig.

        The profile-level monitoring status of the Traffic Manager profile.

        :param profile_monitor_status: The profile_monitor_status of this MonitorConfig.
        :type profile_monitor_status: str
        """
        allowed_values = ["CheckingEndpoints", "Online", "Degraded", "Disabled", "Inactive"]  # noqa: E501
        if profile_monitor_status not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_monitor_status` ({0}), must be one of {1}"
                .format(profile_monitor_status, allowed_values)
            )

        self._profile_monitor_status = profile_monitor_status

    @property
    def protocol(self):
        """Gets the protocol of this MonitorConfig.

        The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.

        :return: The protocol of this MonitorConfig.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this MonitorConfig.

        The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.

        :param protocol: The protocol of this MonitorConfig.
        :type protocol: str
        """
        allowed_values = ["HTTP", "HTTPS", "TCP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this MonitorConfig.

        The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.

        :return: The timeout_in_seconds of this MonitorConfig.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this MonitorConfig.

        The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.

        :param timeout_in_seconds: The timeout_in_seconds of this MonitorConfig.
        :type timeout_in_seconds: int
        """

        self._timeout_in_seconds = timeout_in_seconds

    @property
    def tolerated_number_of_failures(self):
        """Gets the tolerated_number_of_failures of this MonitorConfig.

        The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.

        :return: The tolerated_number_of_failures of this MonitorConfig.
        :rtype: int
        """
        return self._tolerated_number_of_failures

    @tolerated_number_of_failures.setter
    def tolerated_number_of_failures(self, tolerated_number_of_failures):
        """Sets the tolerated_number_of_failures of this MonitorConfig.

        The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.

        :param tolerated_number_of_failures: The tolerated_number_of_failures of this MonitorConfig.
        :type tolerated_number_of_failures: int
        """

        self._tolerated_number_of_failures = tolerated_number_of_failures
