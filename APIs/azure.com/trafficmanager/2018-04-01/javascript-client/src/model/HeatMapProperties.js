/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HeatMapEndpoint from './HeatMapEndpoint';
import TrafficFlow from './TrafficFlow';

/**
 * The HeatMapProperties model module.
 * @module model/HeatMapProperties
 * @version 2018-04-01
 */
class HeatMapProperties {
    /**
     * Constructs a new <code>HeatMapProperties</code>.
     * Class representing a Traffic Manager HeatMap properties.
     * @alias module:model/HeatMapProperties
     */
    constructor() { 
        
        HeatMapProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HeatMapProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HeatMapProperties} obj Optional instance to populate.
     * @return {module:model/HeatMapProperties} The populated <code>HeatMapProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HeatMapProperties();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [HeatMapEndpoint]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('trafficFlows')) {
                obj['trafficFlows'] = ApiClient.convertToType(data['trafficFlows'], [TrafficFlow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HeatMapProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HeatMapProperties</code>.
     */
    static validateJSON(data) {
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                HeatMapEndpoint.validateJSON(item);
            };
        }
        if (data['trafficFlows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trafficFlows'])) {
                throw new Error("Expected the field `trafficFlows` to be an array in the JSON data but got " + data['trafficFlows']);
            }
            // validate the optional field `trafficFlows` (array)
            for (const item of data['trafficFlows']) {
                TrafficFlow.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ending of the time window for this HeatMap, exclusive.
 * @member {Date} endTime
 */
HeatMapProperties.prototype['endTime'] = undefined;

/**
 * The endpoints used in this HeatMap calculation.
 * @member {Array.<module:model/HeatMapEndpoint>} endpoints
 */
HeatMapProperties.prototype['endpoints'] = undefined;

/**
 * The beginning of the time window for this HeatMap, inclusive.
 * @member {Date} startTime
 */
HeatMapProperties.prototype['startTime'] = undefined;

/**
 * The traffic flows produced in this HeatMap calculation.
 * @member {Array.<module:model/TrafficFlow>} trafficFlows
 */
HeatMapProperties.prototype['trafficFlows'] = undefined;






export default HeatMapProperties;

