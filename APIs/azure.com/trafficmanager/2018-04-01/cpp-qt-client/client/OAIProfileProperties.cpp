/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileProperties::OAIProfileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileProperties::OAIProfileProperties() {
    this->initializeModel();
}

OAIProfileProperties::~OAIProfileProperties() {}

void OAIProfileProperties::initializeModel() {

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_max_return_isSet = false;
    m_max_return_isValid = false;

    m_monitor_config_isSet = false;
    m_monitor_config_isValid = false;

    m_profile_status_isSet = false;
    m_profile_status_isValid = false;

    m_traffic_routing_method_isSet = false;
    m_traffic_routing_method_isValid = false;

    m_traffic_view_enrollment_status_isSet = false;
    m_traffic_view_enrollment_status_isValid = false;
}

void OAIProfileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileProperties::fromJsonObject(QJsonObject json) {

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("dnsConfig")]);
    m_dns_config_isSet = !json[QString("dnsConfig")].isNull() && m_dns_config_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_max_return_isValid = ::OpenAPI::fromJsonValue(m_max_return, json[QString("maxReturn")]);
    m_max_return_isSet = !json[QString("maxReturn")].isNull() && m_max_return_isValid;

    m_monitor_config_isValid = ::OpenAPI::fromJsonValue(m_monitor_config, json[QString("monitorConfig")]);
    m_monitor_config_isSet = !json[QString("monitorConfig")].isNull() && m_monitor_config_isValid;

    m_profile_status_isValid = ::OpenAPI::fromJsonValue(m_profile_status, json[QString("profileStatus")]);
    m_profile_status_isSet = !json[QString("profileStatus")].isNull() && m_profile_status_isValid;

    m_traffic_routing_method_isValid = ::OpenAPI::fromJsonValue(m_traffic_routing_method, json[QString("trafficRoutingMethod")]);
    m_traffic_routing_method_isSet = !json[QString("trafficRoutingMethod")].isNull() && m_traffic_routing_method_isValid;

    m_traffic_view_enrollment_status_isValid = ::OpenAPI::fromJsonValue(m_traffic_view_enrollment_status, json[QString("trafficViewEnrollmentStatus")]);
    m_traffic_view_enrollment_status_isSet = !json[QString("trafficViewEnrollmentStatus")].isNull() && m_traffic_view_enrollment_status_isValid;
}

QString OAIProfileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_config.isSet()) {
        obj.insert(QString("dnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_max_return_isSet) {
        obj.insert(QString("maxReturn"), ::OpenAPI::toJsonValue(m_max_return));
    }
    if (m_monitor_config.isSet()) {
        obj.insert(QString("monitorConfig"), ::OpenAPI::toJsonValue(m_monitor_config));
    }
    if (m_profile_status_isSet) {
        obj.insert(QString("profileStatus"), ::OpenAPI::toJsonValue(m_profile_status));
    }
    if (m_traffic_routing_method_isSet) {
        obj.insert(QString("trafficRoutingMethod"), ::OpenAPI::toJsonValue(m_traffic_routing_method));
    }
    if (m_traffic_view_enrollment_status_isSet) {
        obj.insert(QString("trafficViewEnrollmentStatus"), ::OpenAPI::toJsonValue(m_traffic_view_enrollment_status));
    }
    return obj;
}

OAIDnsConfig OAIProfileProperties::getDnsConfig() const {
    return m_dns_config;
}
void OAIProfileProperties::setDnsConfig(const OAIDnsConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAIProfileProperties::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAIProfileProperties::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

QList<OAIEndpoint> OAIProfileProperties::getEndpoints() const {
    return m_endpoints;
}
void OAIProfileProperties::setEndpoints(const QList<OAIEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIProfileProperties::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIProfileProperties::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

qint64 OAIProfileProperties::getMaxReturn() const {
    return m_max_return;
}
void OAIProfileProperties::setMaxReturn(const qint64 &max_return) {
    m_max_return = max_return;
    m_max_return_isSet = true;
}

bool OAIProfileProperties::is_max_return_Set() const{
    return m_max_return_isSet;
}

bool OAIProfileProperties::is_max_return_Valid() const{
    return m_max_return_isValid;
}

OAIMonitorConfig OAIProfileProperties::getMonitorConfig() const {
    return m_monitor_config;
}
void OAIProfileProperties::setMonitorConfig(const OAIMonitorConfig &monitor_config) {
    m_monitor_config = monitor_config;
    m_monitor_config_isSet = true;
}

bool OAIProfileProperties::is_monitor_config_Set() const{
    return m_monitor_config_isSet;
}

bool OAIProfileProperties::is_monitor_config_Valid() const{
    return m_monitor_config_isValid;
}

QString OAIProfileProperties::getProfileStatus() const {
    return m_profile_status;
}
void OAIProfileProperties::setProfileStatus(const QString &profile_status) {
    m_profile_status = profile_status;
    m_profile_status_isSet = true;
}

bool OAIProfileProperties::is_profile_status_Set() const{
    return m_profile_status_isSet;
}

bool OAIProfileProperties::is_profile_status_Valid() const{
    return m_profile_status_isValid;
}

QString OAIProfileProperties::getTrafficRoutingMethod() const {
    return m_traffic_routing_method;
}
void OAIProfileProperties::setTrafficRoutingMethod(const QString &traffic_routing_method) {
    m_traffic_routing_method = traffic_routing_method;
    m_traffic_routing_method_isSet = true;
}

bool OAIProfileProperties::is_traffic_routing_method_Set() const{
    return m_traffic_routing_method_isSet;
}

bool OAIProfileProperties::is_traffic_routing_method_Valid() const{
    return m_traffic_routing_method_isValid;
}

QString OAIProfileProperties::getTrafficViewEnrollmentStatus() const {
    return m_traffic_view_enrollment_status;
}
void OAIProfileProperties::setTrafficViewEnrollmentStatus(const QString &traffic_view_enrollment_status) {
    m_traffic_view_enrollment_status = traffic_view_enrollment_status;
    m_traffic_view_enrollment_status_isSet = true;
}

bool OAIProfileProperties::is_traffic_view_enrollment_status_Set() const{
    return m_traffic_view_enrollment_status_isSet;
}

bool OAIProfileProperties::is_traffic_view_enrollment_status_Valid() const{
    return m_traffic_view_enrollment_status_isValid;
}

bool OAIProfileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_return_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_routing_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_view_enrollment_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
