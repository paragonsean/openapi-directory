/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsConfig::OAIDnsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsConfig::OAIDnsConfig() {
    this->initializeModel();
}

OAIDnsConfig::~OAIDnsConfig() {}

void OAIDnsConfig::initializeModel() {

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_relative_name_isSet = false;
    m_relative_name_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIDnsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsConfig::fromJsonObject(QJsonObject json) {

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_relative_name_isValid = ::OpenAPI::fromJsonValue(m_relative_name, json[QString("relativeName")]);
    m_relative_name_isSet = !json[QString("relativeName")].isNull() && m_relative_name_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIDnsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_relative_name_isSet) {
        obj.insert(QString("relativeName"), ::OpenAPI::toJsonValue(m_relative_name));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIDnsConfig::getFqdn() const {
    return m_fqdn;
}
void OAIDnsConfig::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIDnsConfig::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIDnsConfig::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIDnsConfig::getRelativeName() const {
    return m_relative_name;
}
void OAIDnsConfig::setRelativeName(const QString &relative_name) {
    m_relative_name = relative_name;
    m_relative_name_isSet = true;
}

bool OAIDnsConfig::is_relative_name_Set() const{
    return m_relative_name_isSet;
}

bool OAIDnsConfig::is_relative_name_Valid() const{
    return m_relative_name_isValid;
}

qint64 OAIDnsConfig::getTtl() const {
    return m_ttl;
}
void OAIDnsConfig::setTtl(const qint64 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDnsConfig::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDnsConfig::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIDnsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
