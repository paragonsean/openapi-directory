/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointProperties_subnets_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointProperties_subnets_inner::OAIEndpointProperties_subnets_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointProperties_subnets_inner::OAIEndpointProperties_subnets_inner() {
    this->initializeModel();
}

OAIEndpointProperties_subnets_inner::~OAIEndpointProperties_subnets_inner() {}

void OAIEndpointProperties_subnets_inner::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIEndpointProperties_subnets_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointProperties_subnets_inner::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIEndpointProperties_subnets_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointProperties_subnets_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIEndpointProperties_subnets_inner::getFirst() const {
    return m_first;
}
void OAIEndpointProperties_subnets_inner::setFirst(const QString &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIEndpointProperties_subnets_inner::is_first_Set() const{
    return m_first_isSet;
}

bool OAIEndpointProperties_subnets_inner::is_first_Valid() const{
    return m_first_isValid;
}

QString OAIEndpointProperties_subnets_inner::getLast() const {
    return m_last;
}
void OAIEndpointProperties_subnets_inner::setLast(const QString &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIEndpointProperties_subnets_inner::is_last_Set() const{
    return m_last_isSet;
}

bool OAIEndpointProperties_subnets_inner::is_last_Valid() const{
    return m_last_isValid;
}

qint32 OAIEndpointProperties_subnets_inner::getScope() const {
    return m_scope;
}
void OAIEndpointProperties_subnets_inner::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIEndpointProperties_subnets_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIEndpointProperties_subnets_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIEndpointProperties_subnets_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointProperties_subnets_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
