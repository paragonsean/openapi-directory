/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatMapProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatMapProperties::OAIHeatMapProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatMapProperties::OAIHeatMapProperties() {
    this->initializeModel();
}

OAIHeatMapProperties::~OAIHeatMapProperties() {}

void OAIHeatMapProperties::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_traffic_flows_isSet = false;
    m_traffic_flows_isValid = false;
}

void OAIHeatMapProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatMapProperties::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_traffic_flows_isValid = ::OpenAPI::fromJsonValue(m_traffic_flows, json[QString("trafficFlows")]);
    m_traffic_flows_isSet = !json[QString("trafficFlows")].isNull() && m_traffic_flows_isValid;
}

QString OAIHeatMapProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatMapProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_traffic_flows.size() > 0) {
        obj.insert(QString("trafficFlows"), ::OpenAPI::toJsonValue(m_traffic_flows));
    }
    return obj;
}

QDateTime OAIHeatMapProperties::getEndTime() const {
    return m_end_time;
}
void OAIHeatMapProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIHeatMapProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIHeatMapProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIHeatMapEndpoint> OAIHeatMapProperties::getEndpoints() const {
    return m_endpoints;
}
void OAIHeatMapProperties::setEndpoints(const QList<OAIHeatMapEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIHeatMapProperties::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIHeatMapProperties::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QDateTime OAIHeatMapProperties::getStartTime() const {
    return m_start_time;
}
void OAIHeatMapProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIHeatMapProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIHeatMapProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<OAITrafficFlow> OAIHeatMapProperties::getTrafficFlows() const {
    return m_traffic_flows;
}
void OAIHeatMapProperties::setTrafficFlows(const QList<OAITrafficFlow> &traffic_flows) {
    m_traffic_flows = traffic_flows;
    m_traffic_flows_isSet = true;
}

bool OAIHeatMapProperties::is_traffic_flows_Set() const{
    return m_traffic_flows_isSet;
}

bool OAIHeatMapProperties::is_traffic_flows_Valid() const{
    return m_traffic_flows_isValid;
}

bool OAIHeatMapProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_flows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatMapProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
