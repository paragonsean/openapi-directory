/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EndpointProperties model module.
 * @module model/EndpointProperties
 * @version 2017-05-01
 */
class EndpointProperties {
    /**
     * Constructs a new <code>EndpointProperties</code>.
     * Class representing a Traffic Manager endpoint properties.
     * @alias module:model/EndpointProperties
     */
    constructor() { 
        
        EndpointProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EndpointProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EndpointProperties} obj Optional instance to populate.
     * @return {module:model/EndpointProperties} The populated <code>EndpointProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EndpointProperties();

            if (data.hasOwnProperty('endpointLocation')) {
                obj['endpointLocation'] = ApiClient.convertToType(data['endpointLocation'], 'String');
            }
            if (data.hasOwnProperty('endpointMonitorStatus')) {
                obj['endpointMonitorStatus'] = ApiClient.convertToType(data['endpointMonitorStatus'], 'String');
            }
            if (data.hasOwnProperty('endpointStatus')) {
                obj['endpointStatus'] = ApiClient.convertToType(data['endpointStatus'], 'String');
            }
            if (data.hasOwnProperty('geoMapping')) {
                obj['geoMapping'] = ApiClient.convertToType(data['geoMapping'], ['String']);
            }
            if (data.hasOwnProperty('minChildEndpoints')) {
                obj['minChildEndpoints'] = ApiClient.convertToType(data['minChildEndpoints'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('targetResourceId')) {
                obj['targetResourceId'] = ApiClient.convertToType(data['targetResourceId'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EndpointProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EndpointProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointLocation'] && !(typeof data['endpointLocation'] === 'string' || data['endpointLocation'] instanceof String)) {
            throw new Error("Expected the field `endpointLocation` to be a primitive type in the JSON string but got " + data['endpointLocation']);
        }
        // ensure the json data is a string
        if (data['endpointMonitorStatus'] && !(typeof data['endpointMonitorStatus'] === 'string' || data['endpointMonitorStatus'] instanceof String)) {
            throw new Error("Expected the field `endpointMonitorStatus` to be a primitive type in the JSON string but got " + data['endpointMonitorStatus']);
        }
        // ensure the json data is a string
        if (data['endpointStatus'] && !(typeof data['endpointStatus'] === 'string' || data['endpointStatus'] instanceof String)) {
            throw new Error("Expected the field `endpointStatus` to be a primitive type in the JSON string but got " + data['endpointStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['geoMapping'])) {
            throw new Error("Expected the field `geoMapping` to be an array in the JSON data but got " + data['geoMapping']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['targetResourceId'] && !(typeof data['targetResourceId'] === 'string' || data['targetResourceId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceId` to be a primitive type in the JSON string but got " + data['targetResourceId']);
        }

        return true;
    }


}



/**
 * Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
 * @member {String} endpointLocation
 */
EndpointProperties.prototype['endpointLocation'] = undefined;

/**
 * The monitoring status of the endpoint.
 * @member {module:model/EndpointProperties.EndpointMonitorStatusEnum} endpointMonitorStatus
 */
EndpointProperties.prototype['endpointMonitorStatus'] = undefined;

/**
 * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
 * @member {module:model/EndpointProperties.EndpointStatusEnum} endpointStatus
 */
EndpointProperties.prototype['endpointStatus'] = undefined;

/**
 * The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
 * @member {Array.<String>} geoMapping
 */
EndpointProperties.prototype['geoMapping'] = undefined;

/**
 * The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
 * @member {Number} minChildEndpoints
 */
EndpointProperties.prototype['minChildEndpoints'] = undefined;

/**
 * The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
 * @member {Number} priority
 */
EndpointProperties.prototype['priority'] = undefined;

/**
 * The fully-qualified DNS name of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
 * @member {String} target
 */
EndpointProperties.prototype['target'] = undefined;

/**
 * The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
 * @member {String} targetResourceId
 */
EndpointProperties.prototype['targetResourceId'] = undefined;

/**
 * The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
 * @member {Number} weight
 */
EndpointProperties.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>endpointMonitorStatus</code> property.
 * @enum {String}
 * @readonly
 */
EndpointProperties['EndpointMonitorStatusEnum'] = {

    /**
     * value: "CheckingEndpoint"
     * @const
     */
    "CheckingEndpoint": "CheckingEndpoint",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Degraded"
     * @const
     */
    "Degraded": "Degraded",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped"
};


/**
 * Allowed values for the <code>endpointStatus</code> property.
 * @enum {String}
 * @readonly
 */
EndpointProperties['EndpointStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default EndpointProperties;

