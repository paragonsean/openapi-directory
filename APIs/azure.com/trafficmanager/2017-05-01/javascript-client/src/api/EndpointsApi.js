/**
 * TrafficManagerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import DeleteOperationResult from '../model/DeleteOperationResult';
import Endpoint from '../model/Endpoint';

/**
* Endpoints service.
* @module api/EndpointsApi
* @version 2017-05-01
*/
export default class EndpointsApi {

    /**
    * Constructs a new EndpointsApi. 
    * @alias module:api/EndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the endpointsCreateOrUpdate operation.
     * @callback module:api/EndpointsApi~endpointsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Traffic Manager endpoint.
     * @param {String} resourceGroupName The name of the resource group containing the Traffic Manager endpoint to be created or updated.
     * @param {String} profileName The name of the Traffic Manager profile.
     * @param {String} endpointType The type of the Traffic Manager endpoint to be created or updated.
     * @param {String} endpointName The name of the Traffic Manager endpoint to be created or updated.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Endpoint} parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/EndpointsApi~endpointsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    endpointsCreateOrUpdate(resourceGroupName, profileName, endpointType, endpointName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'endpointType' is set
      if (endpointType === undefined || endpointType === null) {
        throw new Error("Missing the required parameter 'endpointType' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling endpointsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling endpointsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'endpointType': endpointType,
        'endpointName': endpointName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsDelete operation.
     * @callback module:api/EndpointsApi~endpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Traffic Manager endpoint.
     * @param {String} resourceGroupName The name of the resource group containing the Traffic Manager endpoint to be deleted.
     * @param {String} profileName The name of the Traffic Manager profile.
     * @param {String} endpointType The type of the Traffic Manager endpoint to be deleted.
     * @param {String} endpointName The name of the Traffic Manager endpoint to be deleted.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EndpointsApi~endpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteOperationResult}
     */
    endpointsDelete(resourceGroupName, profileName, endpointType, endpointName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling endpointsDelete");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling endpointsDelete");
      }
      // verify the required parameter 'endpointType' is set
      if (endpointType === undefined || endpointType === null) {
        throw new Error("Missing the required parameter 'endpointType' when calling endpointsDelete");
      }
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling endpointsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling endpointsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'endpointType': endpointType,
        'endpointName': endpointName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteOperationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsGet operation.
     * @callback module:api/EndpointsApi~endpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Traffic Manager endpoint.
     * @param {String} resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
     * @param {String} profileName The name of the Traffic Manager profile.
     * @param {String} endpointType The type of the Traffic Manager endpoint.
     * @param {String} endpointName The name of the Traffic Manager endpoint.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EndpointsApi~endpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    endpointsGet(resourceGroupName, profileName, endpointType, endpointName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling endpointsGet");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling endpointsGet");
      }
      // verify the required parameter 'endpointType' is set
      if (endpointType === undefined || endpointType === null) {
        throw new Error("Missing the required parameter 'endpointType' when calling endpointsGet");
      }
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling endpointsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling endpointsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'endpointType': endpointType,
        'endpointName': endpointName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointsUpdate operation.
     * @callback module:api/EndpointsApi~endpointsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Traffic Manager endpoint.
     * @param {String} resourceGroupName The name of the resource group containing the Traffic Manager endpoint to be updated.
     * @param {String} profileName The name of the Traffic Manager profile.
     * @param {String} endpointType The type of the Traffic Manager endpoint to be updated.
     * @param {String} endpointName The name of the Traffic Manager endpoint to be updated.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Endpoint} parameters The Traffic Manager endpoint parameters supplied to the Update operation.
     * @param {module:api/EndpointsApi~endpointsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    endpointsUpdate(resourceGroupName, profileName, endpointType, endpointName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling endpointsUpdate");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling endpointsUpdate");
      }
      // verify the required parameter 'endpointType' is set
      if (endpointType === undefined || endpointType === null) {
        throw new Error("Missing the required parameter 'endpointType' when calling endpointsUpdate");
      }
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling endpointsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling endpointsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling endpointsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'endpointType': endpointType,
        'endpointName': endpointName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
