# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_location: str=None, endpoint_monitor_status: str=None, endpoint_status: str=None, geo_mapping: List[str]=None, min_child_endpoints: int=None, priority: int=None, target: str=None, target_resource_id: str=None, weight: int=None):
        """EndpointProperties - a model defined in OpenAPI

        :param endpoint_location: The endpoint_location of this EndpointProperties.
        :param endpoint_monitor_status: The endpoint_monitor_status of this EndpointProperties.
        :param endpoint_status: The endpoint_status of this EndpointProperties.
        :param geo_mapping: The geo_mapping of this EndpointProperties.
        :param min_child_endpoints: The min_child_endpoints of this EndpointProperties.
        :param priority: The priority of this EndpointProperties.
        :param target: The target of this EndpointProperties.
        :param target_resource_id: The target_resource_id of this EndpointProperties.
        :param weight: The weight of this EndpointProperties.
        """
        self.openapi_types = {
            'endpoint_location': str,
            'endpoint_monitor_status': str,
            'endpoint_status': str,
            'geo_mapping': List[str],
            'min_child_endpoints': int,
            'priority': int,
            'target': str,
            'target_resource_id': str,
            'weight': int
        }

        self.attribute_map = {
            'endpoint_location': 'endpointLocation',
            'endpoint_monitor_status': 'endpointMonitorStatus',
            'endpoint_status': 'endpointStatus',
            'geo_mapping': 'geoMapping',
            'min_child_endpoints': 'minChildEndpoints',
            'priority': 'priority',
            'target': 'target',
            'target_resource_id': 'targetResourceId',
            'weight': 'weight'
        }

        self._endpoint_location = endpoint_location
        self._endpoint_monitor_status = endpoint_monitor_status
        self._endpoint_status = endpoint_status
        self._geo_mapping = geo_mapping
        self._min_child_endpoints = min_child_endpoints
        self._priority = priority
        self._target = target
        self._target_resource_id = target_resource_id
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointProperties of this EndpointProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_location(self):
        """Gets the endpoint_location of this EndpointProperties.

        Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.

        :return: The endpoint_location of this EndpointProperties.
        :rtype: str
        """
        return self._endpoint_location

    @endpoint_location.setter
    def endpoint_location(self, endpoint_location):
        """Sets the endpoint_location of this EndpointProperties.

        Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.

        :param endpoint_location: The endpoint_location of this EndpointProperties.
        :type endpoint_location: str
        """

        self._endpoint_location = endpoint_location

    @property
    def endpoint_monitor_status(self):
        """Gets the endpoint_monitor_status of this EndpointProperties.

        The monitoring status of the endpoint.

        :return: The endpoint_monitor_status of this EndpointProperties.
        :rtype: str
        """
        return self._endpoint_monitor_status

    @endpoint_monitor_status.setter
    def endpoint_monitor_status(self, endpoint_monitor_status):
        """Sets the endpoint_monitor_status of this EndpointProperties.

        The monitoring status of the endpoint.

        :param endpoint_monitor_status: The endpoint_monitor_status of this EndpointProperties.
        :type endpoint_monitor_status: str
        """
        allowed_values = ["CheckingEndpoint", "Online", "Degraded", "Disabled", "Inactive", "Stopped"]  # noqa: E501
        if endpoint_monitor_status not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_monitor_status` ({0}), must be one of {1}"
                .format(endpoint_monitor_status, allowed_values)
            )

        self._endpoint_monitor_status = endpoint_monitor_status

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this EndpointProperties.

        The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.

        :return: The endpoint_status of this EndpointProperties.
        :rtype: str
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this EndpointProperties.

        The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.

        :param endpoint_status: The endpoint_status of this EndpointProperties.
        :type endpoint_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if endpoint_status not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_status` ({0}), must be one of {1}"
                .format(endpoint_status, allowed_values)
            )

        self._endpoint_status = endpoint_status

    @property
    def geo_mapping(self):
        """Gets the geo_mapping of this EndpointProperties.

        The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.

        :return: The geo_mapping of this EndpointProperties.
        :rtype: List[str]
        """
        return self._geo_mapping

    @geo_mapping.setter
    def geo_mapping(self, geo_mapping):
        """Sets the geo_mapping of this EndpointProperties.

        The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.

        :param geo_mapping: The geo_mapping of this EndpointProperties.
        :type geo_mapping: List[str]
        """

        self._geo_mapping = geo_mapping

    @property
    def min_child_endpoints(self):
        """Gets the min_child_endpoints of this EndpointProperties.

        The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.

        :return: The min_child_endpoints of this EndpointProperties.
        :rtype: int
        """
        return self._min_child_endpoints

    @min_child_endpoints.setter
    def min_child_endpoints(self, min_child_endpoints):
        """Sets the min_child_endpoints of this EndpointProperties.

        The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.

        :param min_child_endpoints: The min_child_endpoints of this EndpointProperties.
        :type min_child_endpoints: int
        """

        self._min_child_endpoints = min_child_endpoints

    @property
    def priority(self):
        """Gets the priority of this EndpointProperties.

        The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.

        :return: The priority of this EndpointProperties.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this EndpointProperties.

        The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.

        :param priority: The priority of this EndpointProperties.
        :type priority: int
        """

        self._priority = priority

    @property
    def target(self):
        """Gets the target of this EndpointProperties.

        The fully-qualified DNS name of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.

        :return: The target of this EndpointProperties.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this EndpointProperties.

        The fully-qualified DNS name of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.

        :param target: The target of this EndpointProperties.
        :type target: str
        """

        self._target = target

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this EndpointProperties.

        The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.

        :return: The target_resource_id of this EndpointProperties.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this EndpointProperties.

        The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.

        :param target_resource_id: The target_resource_id of this EndpointProperties.
        :type target_resource_id: str
        """

        self._target_resource_id = target_resource_id

    @property
    def weight(self):
        """Gets the weight of this EndpointProperties.

        The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.

        :return: The weight of this EndpointProperties.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EndpointProperties.

        The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.

        :param weight: The weight of this EndpointProperties.
        :type weight: int
        """

        self._weight = weight
