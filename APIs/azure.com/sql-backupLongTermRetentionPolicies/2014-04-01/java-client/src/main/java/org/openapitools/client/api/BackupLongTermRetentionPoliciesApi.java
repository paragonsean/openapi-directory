/*
 * Azure SQL Database Backup Long Term Retention Policy
 * Provides read and update functionality for Azure SQL Database backup long term retention policy
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupLongTermRetentionPolicy;
import org.openapitools.client.model.BackupLongTermRetentionPolicyListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupLongTermRetentionPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupLongTermRetentionPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupLongTermRetentionPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupLongTermRetentionPoliciesCreateOrUpdate
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param parameters The required parameters to update a backup long term retention policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, BackupLongTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{backupLongTermRetentionPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "backupLongTermRetentionPolicyName" + "}", localVarApiClient.escapeString(backupLongTermRetentionPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupLongTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, BackupLongTermRetentionPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'backupLongTermRetentionPolicyName' is set
        if (backupLongTermRetentionPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupLongTermRetentionPolicyName' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling backupLongTermRetentionPoliciesCreateOrUpdate(Async)");
        }

        return backupLongTermRetentionPoliciesCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param parameters The required parameters to update a backup long term retention policy (required)
     * @return BackupLongTermRetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public BackupLongTermRetentionPolicy backupLongTermRetentionPoliciesCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, BackupLongTermRetentionPolicy parameters) throws ApiException {
        ApiResponse<BackupLongTermRetentionPolicy> localVarResp = backupLongTermRetentionPoliciesCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param parameters The required parameters to update a backup long term retention policy (required)
     * @return ApiResponse&lt;BackupLongTermRetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupLongTermRetentionPolicy> backupLongTermRetentionPoliciesCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, BackupLongTermRetentionPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, parameters, null);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param parameters The required parameters to update a backup long term retention policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, BackupLongTermRetentionPolicy parameters, final ApiCallback<BackupLongTermRetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, parameters, _callback);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupLongTermRetentionPoliciesGet
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{backupLongTermRetentionPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "backupLongTermRetentionPolicyName" + "}", localVarApiClient.escapeString(backupLongTermRetentionPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupLongTermRetentionPoliciesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        // verify the required parameter 'backupLongTermRetentionPolicyName' is set
        if (backupLongTermRetentionPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupLongTermRetentionPolicyName' when calling backupLongTermRetentionPoliciesGet(Async)");
        }

        return backupLongTermRetentionPoliciesGetCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, _callback);

    }

    /**
     * 
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @return BackupLongTermRetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupLongTermRetentionPolicy backupLongTermRetentionPoliciesGet(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName) throws ApiException {
        ApiResponse<BackupLongTermRetentionPolicy> localVarResp = backupLongTermRetentionPoliciesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @return ApiResponse&lt;BackupLongTermRetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupLongTermRetentionPolicy> backupLongTermRetentionPoliciesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName) throws ApiException {
        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, null);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param backupLongTermRetentionPolicyName The name of the backup long term retention policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String backupLongTermRetentionPolicyName, final ApiCallback<BackupLongTermRetentionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, _callback);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupLongTermRetentionPoliciesListByDatabase
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesListByDatabaseCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupLongTermRetentionPoliciesListByDatabaseValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesListByDatabase(Async)");
        }

        return backupLongTermRetentionPoliciesListByDatabaseCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, _callback);

    }

    /**
     * 
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @return BackupLongTermRetentionPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupLongTermRetentionPolicyListResult backupLongTermRetentionPoliciesListByDatabase(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName) throws ApiException {
        ApiResponse<BackupLongTermRetentionPolicyListResult> localVarResp = backupLongTermRetentionPoliciesListByDatabaseWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @return ApiResponse&lt;BackupLongTermRetentionPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupLongTermRetentionPolicyListResult> backupLongTermRetentionPoliciesListByDatabaseWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName) throws ApiException {
        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesListByDatabaseValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, null);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a database backup long term retention policy
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupLongTermRetentionPoliciesListByDatabaseAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback<BackupLongTermRetentionPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupLongTermRetentionPoliciesListByDatabaseValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, _callback);
        Type localVarReturnType = new TypeToken<BackupLongTermRetentionPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
