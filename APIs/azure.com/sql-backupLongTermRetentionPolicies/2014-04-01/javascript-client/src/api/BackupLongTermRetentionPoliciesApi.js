/**
 * Azure SQL Database Backup Long Term Retention Policy
 * Provides read and update functionality for Azure SQL Database backup long term retention policy
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupLongTermRetentionPolicy from '../model/BackupLongTermRetentionPolicy';
import BackupLongTermRetentionPolicyListResult from '../model/BackupLongTermRetentionPolicyListResult';

/**
* BackupLongTermRetentionPolicies service.
* @module api/BackupLongTermRetentionPoliciesApi
* @version 2014-04-01
*/
export default class BackupLongTermRetentionPoliciesApi {

    /**
    * Constructs a new BackupLongTermRetentionPoliciesApi. 
    * @alias module:api/BackupLongTermRetentionPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupLongTermRetentionPoliciesCreateOrUpdate operation.
     * @callback module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupLongTermRetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database backup long term retention policy
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database
     * @param {module:model/String} backupLongTermRetentionPolicyName The name of the backup long term retention policy
     * @param {module:model/BackupLongTermRetentionPolicy} parameters The required parameters to update a backup long term retention policy
     * @param {module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupLongTermRetentionPolicy}
     */
    backupLongTermRetentionPoliciesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'backupLongTermRetentionPolicyName' is set
      if (backupLongTermRetentionPolicyName === undefined || backupLongTermRetentionPolicyName === null) {
        throw new Error("Missing the required parameter 'backupLongTermRetentionPolicyName' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling backupLongTermRetentionPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'backupLongTermRetentionPolicyName': backupLongTermRetentionPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupLongTermRetentionPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{backupLongTermRetentionPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupLongTermRetentionPoliciesGet operation.
     * @callback module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupLongTermRetentionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a database backup long term retention policy
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} backupLongTermRetentionPolicyName The name of the backup long term retention policy
     * @param {module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupLongTermRetentionPolicy}
     */
    backupLongTermRetentionPoliciesGet(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, backupLongTermRetentionPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesGet");
      }
      // verify the required parameter 'backupLongTermRetentionPolicyName' is set
      if (backupLongTermRetentionPolicyName === undefined || backupLongTermRetentionPolicyName === null) {
        throw new Error("Missing the required parameter 'backupLongTermRetentionPolicyName' when calling backupLongTermRetentionPoliciesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'backupLongTermRetentionPolicyName': backupLongTermRetentionPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupLongTermRetentionPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{backupLongTermRetentionPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backupLongTermRetentionPoliciesListByDatabase operation.
     * @callback module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupLongTermRetentionPolicyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a database backup long term retention policy
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:api/BackupLongTermRetentionPoliciesApi~backupLongTermRetentionPoliciesListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupLongTermRetentionPolicyListResult}
     */
    backupLongTermRetentionPoliciesListByDatabase(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupLongTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling backupLongTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling backupLongTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling backupLongTermRetentionPoliciesListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling backupLongTermRetentionPoliciesListByDatabase");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupLongTermRetentionPolicyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
