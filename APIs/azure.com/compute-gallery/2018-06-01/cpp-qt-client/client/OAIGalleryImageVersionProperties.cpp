/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryImageVersionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryImageVersionProperties::OAIGalleryImageVersionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryImageVersionProperties::OAIGalleryImageVersionProperties() {
    this->initializeModel();
}

OAIGalleryImageVersionProperties::~OAIGalleryImageVersionProperties() {}

void OAIGalleryImageVersionProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_publishing_profile_isSet = false;
    m_publishing_profile_isValid = false;

    m_replication_status_isSet = false;
    m_replication_status_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;
}

void OAIGalleryImageVersionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryImageVersionProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_publishing_profile_isValid = ::OpenAPI::fromJsonValue(m_publishing_profile, json[QString("publishingProfile")]);
    m_publishing_profile_isSet = !json[QString("publishingProfile")].isNull() && m_publishing_profile_isValid;

    m_replication_status_isValid = ::OpenAPI::fromJsonValue(m_replication_status, json[QString("replicationStatus")]);
    m_replication_status_isSet = !json[QString("replicationStatus")].isNull() && m_replication_status_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;
}

QString OAIGalleryImageVersionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryImageVersionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_publishing_profile.isSet()) {
        obj.insert(QString("publishingProfile"), ::OpenAPI::toJsonValue(m_publishing_profile));
    }
    if (m_replication_status.isSet()) {
        obj.insert(QString("replicationStatus"), ::OpenAPI::toJsonValue(m_replication_status));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    return obj;
}

QString OAIGalleryImageVersionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIGalleryImageVersionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIGalleryImageVersionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIGalleryImageVersionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIGalleryImageVersionPublishingProfile OAIGalleryImageVersionProperties::getPublishingProfile() const {
    return m_publishing_profile;
}
void OAIGalleryImageVersionProperties::setPublishingProfile(const OAIGalleryImageVersionPublishingProfile &publishing_profile) {
    m_publishing_profile = publishing_profile;
    m_publishing_profile_isSet = true;
}

bool OAIGalleryImageVersionProperties::is_publishing_profile_Set() const{
    return m_publishing_profile_isSet;
}

bool OAIGalleryImageVersionProperties::is_publishing_profile_Valid() const{
    return m_publishing_profile_isValid;
}

OAIReplicationStatus OAIGalleryImageVersionProperties::getReplicationStatus() const {
    return m_replication_status;
}
void OAIGalleryImageVersionProperties::setReplicationStatus(const OAIReplicationStatus &replication_status) {
    m_replication_status = replication_status;
    m_replication_status_isSet = true;
}

bool OAIGalleryImageVersionProperties::is_replication_status_Set() const{
    return m_replication_status_isSet;
}

bool OAIGalleryImageVersionProperties::is_replication_status_Valid() const{
    return m_replication_status_isValid;
}

OAIGalleryImageVersionStorageProfile OAIGalleryImageVersionProperties::getStorageProfile() const {
    return m_storage_profile;
}
void OAIGalleryImageVersionProperties::setStorageProfile(const OAIGalleryImageVersionStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIGalleryImageVersionProperties::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIGalleryImageVersionProperties::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

bool OAIGalleryImageVersionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryImageVersionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_publishing_profile_isValid && true;
}

} // namespace OpenAPI
