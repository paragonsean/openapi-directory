/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryImageProperties::OAIGalleryImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryImageProperties::OAIGalleryImageProperties() {
    this->initializeModel();
}

OAIGalleryImageProperties::~OAIGalleryImageProperties() {}

void OAIGalleryImageProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_disallowed_isSet = false;
    m_disallowed_isValid = false;

    m_end_of_life_date_isSet = false;
    m_end_of_life_date_isValid = false;

    m_eula_isSet = false;
    m_eula_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_os_state_isSet = false;
    m_os_state_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_privacy_statement_uri_isSet = false;
    m_privacy_statement_uri_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_purchase_plan_isSet = false;
    m_purchase_plan_isValid = false;

    m_recommended_isSet = false;
    m_recommended_isValid = false;

    m_release_note_uri_isSet = false;
    m_release_note_uri_isValid = false;
}

void OAIGalleryImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryImageProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disallowed_isValid = ::OpenAPI::fromJsonValue(m_disallowed, json[QString("disallowed")]);
    m_disallowed_isSet = !json[QString("disallowed")].isNull() && m_disallowed_isValid;

    m_end_of_life_date_isValid = ::OpenAPI::fromJsonValue(m_end_of_life_date, json[QString("endOfLifeDate")]);
    m_end_of_life_date_isSet = !json[QString("endOfLifeDate")].isNull() && m_end_of_life_date_isValid;

    m_eula_isValid = ::OpenAPI::fromJsonValue(m_eula, json[QString("eula")]);
    m_eula_isSet = !json[QString("eula")].isNull() && m_eula_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_os_state_isValid = ::OpenAPI::fromJsonValue(m_os_state, json[QString("osState")]);
    m_os_state_isSet = !json[QString("osState")].isNull() && m_os_state_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_privacy_statement_uri_isValid = ::OpenAPI::fromJsonValue(m_privacy_statement_uri, json[QString("privacyStatementUri")]);
    m_privacy_statement_uri_isSet = !json[QString("privacyStatementUri")].isNull() && m_privacy_statement_uri_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_purchase_plan_isValid = ::OpenAPI::fromJsonValue(m_purchase_plan, json[QString("purchasePlan")]);
    m_purchase_plan_isSet = !json[QString("purchasePlan")].isNull() && m_purchase_plan_isValid;

    m_recommended_isValid = ::OpenAPI::fromJsonValue(m_recommended, json[QString("recommended")]);
    m_recommended_isSet = !json[QString("recommended")].isNull() && m_recommended_isValid;

    m_release_note_uri_isValid = ::OpenAPI::fromJsonValue(m_release_note_uri, json[QString("releaseNoteUri")]);
    m_release_note_uri_isSet = !json[QString("releaseNoteUri")].isNull() && m_release_note_uri_isValid;
}

QString OAIGalleryImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disallowed.isSet()) {
        obj.insert(QString("disallowed"), ::OpenAPI::toJsonValue(m_disallowed));
    }
    if (m_end_of_life_date_isSet) {
        obj.insert(QString("endOfLifeDate"), ::OpenAPI::toJsonValue(m_end_of_life_date));
    }
    if (m_eula_isSet) {
        obj.insert(QString("eula"), ::OpenAPI::toJsonValue(m_eula));
    }
    if (m_identifier.isSet()) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_os_state_isSet) {
        obj.insert(QString("osState"), ::OpenAPI::toJsonValue(m_os_state));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_privacy_statement_uri_isSet) {
        obj.insert(QString("privacyStatementUri"), ::OpenAPI::toJsonValue(m_privacy_statement_uri));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_purchase_plan.isSet()) {
        obj.insert(QString("purchasePlan"), ::OpenAPI::toJsonValue(m_purchase_plan));
    }
    if (m_recommended.isSet()) {
        obj.insert(QString("recommended"), ::OpenAPI::toJsonValue(m_recommended));
    }
    if (m_release_note_uri_isSet) {
        obj.insert(QString("releaseNoteUri"), ::OpenAPI::toJsonValue(m_release_note_uri));
    }
    return obj;
}

QString OAIGalleryImageProperties::getDescription() const {
    return m_description;
}
void OAIGalleryImageProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGalleryImageProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGalleryImageProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIDisallowed OAIGalleryImageProperties::getDisallowed() const {
    return m_disallowed;
}
void OAIGalleryImageProperties::setDisallowed(const OAIDisallowed &disallowed) {
    m_disallowed = disallowed;
    m_disallowed_isSet = true;
}

bool OAIGalleryImageProperties::is_disallowed_Set() const{
    return m_disallowed_isSet;
}

bool OAIGalleryImageProperties::is_disallowed_Valid() const{
    return m_disallowed_isValid;
}

QDateTime OAIGalleryImageProperties::getEndOfLifeDate() const {
    return m_end_of_life_date;
}
void OAIGalleryImageProperties::setEndOfLifeDate(const QDateTime &end_of_life_date) {
    m_end_of_life_date = end_of_life_date;
    m_end_of_life_date_isSet = true;
}

bool OAIGalleryImageProperties::is_end_of_life_date_Set() const{
    return m_end_of_life_date_isSet;
}

bool OAIGalleryImageProperties::is_end_of_life_date_Valid() const{
    return m_end_of_life_date_isValid;
}

QString OAIGalleryImageProperties::getEula() const {
    return m_eula;
}
void OAIGalleryImageProperties::setEula(const QString &eula) {
    m_eula = eula;
    m_eula_isSet = true;
}

bool OAIGalleryImageProperties::is_eula_Set() const{
    return m_eula_isSet;
}

bool OAIGalleryImageProperties::is_eula_Valid() const{
    return m_eula_isValid;
}

OAIGalleryImageIdentifier OAIGalleryImageProperties::getIdentifier() const {
    return m_identifier;
}
void OAIGalleryImageProperties::setIdentifier(const OAIGalleryImageIdentifier &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGalleryImageProperties::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGalleryImageProperties::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIGalleryImageProperties::getOsState() const {
    return m_os_state;
}
void OAIGalleryImageProperties::setOsState(const QString &os_state) {
    m_os_state = os_state;
    m_os_state_isSet = true;
}

bool OAIGalleryImageProperties::is_os_state_Set() const{
    return m_os_state_isSet;
}

bool OAIGalleryImageProperties::is_os_state_Valid() const{
    return m_os_state_isValid;
}

QString OAIGalleryImageProperties::getOsType() const {
    return m_os_type;
}
void OAIGalleryImageProperties::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIGalleryImageProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIGalleryImageProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIGalleryImageProperties::getPrivacyStatementUri() const {
    return m_privacy_statement_uri;
}
void OAIGalleryImageProperties::setPrivacyStatementUri(const QString &privacy_statement_uri) {
    m_privacy_statement_uri = privacy_statement_uri;
    m_privacy_statement_uri_isSet = true;
}

bool OAIGalleryImageProperties::is_privacy_statement_uri_Set() const{
    return m_privacy_statement_uri_isSet;
}

bool OAIGalleryImageProperties::is_privacy_statement_uri_Valid() const{
    return m_privacy_statement_uri_isValid;
}

QString OAIGalleryImageProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIGalleryImageProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIGalleryImageProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIGalleryImageProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIImagePurchasePlan OAIGalleryImageProperties::getPurchasePlan() const {
    return m_purchase_plan;
}
void OAIGalleryImageProperties::setPurchasePlan(const OAIImagePurchasePlan &purchase_plan) {
    m_purchase_plan = purchase_plan;
    m_purchase_plan_isSet = true;
}

bool OAIGalleryImageProperties::is_purchase_plan_Set() const{
    return m_purchase_plan_isSet;
}

bool OAIGalleryImageProperties::is_purchase_plan_Valid() const{
    return m_purchase_plan_isValid;
}

OAIRecommendedMachineConfiguration OAIGalleryImageProperties::getRecommended() const {
    return m_recommended;
}
void OAIGalleryImageProperties::setRecommended(const OAIRecommendedMachineConfiguration &recommended) {
    m_recommended = recommended;
    m_recommended_isSet = true;
}

bool OAIGalleryImageProperties::is_recommended_Set() const{
    return m_recommended_isSet;
}

bool OAIGalleryImageProperties::is_recommended_Valid() const{
    return m_recommended_isValid;
}

QString OAIGalleryImageProperties::getReleaseNoteUri() const {
    return m_release_note_uri;
}
void OAIGalleryImageProperties::setReleaseNoteUri(const QString &release_note_uri) {
    m_release_note_uri = release_note_uri;
    m_release_note_uri_isSet = true;
}

bool OAIGalleryImageProperties::is_release_note_uri_Set() const{
    return m_release_note_uri_isSet;
}

bool OAIGalleryImageProperties::is_release_note_uri_Valid() const{
    return m_release_note_uri_isValid;
}

bool OAIGalleryImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallowed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_life_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_statement_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_note_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_os_state_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
