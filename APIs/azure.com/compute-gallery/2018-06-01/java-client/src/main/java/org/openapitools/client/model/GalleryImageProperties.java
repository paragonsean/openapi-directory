/*
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Disallowed;
import org.openapitools.client.model.GalleryImageIdentifier;
import org.openapitools.client.model.ImagePurchasePlan;
import org.openapitools.client.model.RecommendedMachineConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a gallery Image Definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:46.361178-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GalleryImageProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISALLOWED = "disallowed";
  @SerializedName(SERIALIZED_NAME_DISALLOWED)
  private Disallowed disallowed;

  public static final String SERIALIZED_NAME_END_OF_LIFE_DATE = "endOfLifeDate";
  @SerializedName(SERIALIZED_NAME_END_OF_LIFE_DATE)
  private OffsetDateTime endOfLifeDate;

  public static final String SERIALIZED_NAME_EULA = "eula";
  @SerializedName(SERIALIZED_NAME_EULA)
  private String eula;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private GalleryImageIdentifier identifier;

  /**
   * The allowed values for OS State are &#39;Generalized&#39;.
   */
  @JsonAdapter(OsStateEnum.Adapter.class)
  public enum OsStateEnum {
    GENERALIZED("Generalized"),
    
    SPECIALIZED("Specialized");

    private String value;

    OsStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsStateEnum fromValue(String value) {
      for (OsStateEnum b : OsStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_STATE = "osState";
  @SerializedName(SERIALIZED_NAME_OS_STATE)
  private OsStateEnum osState;

  /**
   * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_PRIVACY_STATEMENT_URI = "privacyStatementUri";
  @SerializedName(SERIALIZED_NAME_PRIVACY_STATEMENT_URI)
  private String privacyStatementUri;

  /**
   * The provisioning state, which only appears in the response.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    DELETING("Deleting"),
    
    MIGRATING("Migrating");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_PURCHASE_PLAN = "purchasePlan";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PLAN)
  private ImagePurchasePlan purchasePlan;

  public static final String SERIALIZED_NAME_RECOMMENDED = "recommended";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED)
  private RecommendedMachineConfiguration recommended;

  public static final String SERIALIZED_NAME_RELEASE_NOTE_URI = "releaseNoteUri";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTE_URI)
  private String releaseNoteUri;

  public GalleryImageProperties() {
  }

  public GalleryImageProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public GalleryImageProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this gallery Image Definition resource. This property is updatable.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GalleryImageProperties disallowed(Disallowed disallowed) {
    this.disallowed = disallowed;
    return this;
  }

  /**
   * Get disallowed
   * @return disallowed
   */
  @javax.annotation.Nullable
  public Disallowed getDisallowed() {
    return disallowed;
  }

  public void setDisallowed(Disallowed disallowed) {
    this.disallowed = disallowed;
  }


  public GalleryImageProperties endOfLifeDate(OffsetDateTime endOfLifeDate) {
    this.endOfLifeDate = endOfLifeDate;
    return this;
  }

  /**
   * The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
   * @return endOfLifeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndOfLifeDate() {
    return endOfLifeDate;
  }

  public void setEndOfLifeDate(OffsetDateTime endOfLifeDate) {
    this.endOfLifeDate = endOfLifeDate;
  }


  public GalleryImageProperties eula(String eula) {
    this.eula = eula;
    return this;
  }

  /**
   * The Eula agreement for the gallery Image Definition.
   * @return eula
   */
  @javax.annotation.Nullable
  public String getEula() {
    return eula;
  }

  public void setEula(String eula) {
    this.eula = eula;
  }


  public GalleryImageProperties identifier(GalleryImageIdentifier identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public GalleryImageIdentifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(GalleryImageIdentifier identifier) {
    this.identifier = identifier;
  }


  public GalleryImageProperties osState(OsStateEnum osState) {
    this.osState = osState;
    return this;
  }

  /**
   * The allowed values for OS State are &#39;Generalized&#39;.
   * @return osState
   */
  @javax.annotation.Nonnull
  public OsStateEnum getOsState() {
    return osState;
  }

  public void setOsState(OsStateEnum osState) {
    this.osState = osState;
  }


  public GalleryImageProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
   * @return osType
   */
  @javax.annotation.Nonnull
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public GalleryImageProperties privacyStatementUri(String privacyStatementUri) {
    this.privacyStatementUri = privacyStatementUri;
    return this;
  }

  /**
   * The privacy statement uri.
   * @return privacyStatementUri
   */
  @javax.annotation.Nullable
  public String getPrivacyStatementUri() {
    return privacyStatementUri;
  }

  public void setPrivacyStatementUri(String privacyStatementUri) {
    this.privacyStatementUri = privacyStatementUri;
  }


  /**
   * The provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public GalleryImageProperties purchasePlan(ImagePurchasePlan purchasePlan) {
    this.purchasePlan = purchasePlan;
    return this;
  }

  /**
   * Get purchasePlan
   * @return purchasePlan
   */
  @javax.annotation.Nullable
  public ImagePurchasePlan getPurchasePlan() {
    return purchasePlan;
  }

  public void setPurchasePlan(ImagePurchasePlan purchasePlan) {
    this.purchasePlan = purchasePlan;
  }


  public GalleryImageProperties recommended(RecommendedMachineConfiguration recommended) {
    this.recommended = recommended;
    return this;
  }

  /**
   * Get recommended
   * @return recommended
   */
  @javax.annotation.Nullable
  public RecommendedMachineConfiguration getRecommended() {
    return recommended;
  }

  public void setRecommended(RecommendedMachineConfiguration recommended) {
    this.recommended = recommended;
  }


  public GalleryImageProperties releaseNoteUri(String releaseNoteUri) {
    this.releaseNoteUri = releaseNoteUri;
    return this;
  }

  /**
   * The release note uri.
   * @return releaseNoteUri
   */
  @javax.annotation.Nullable
  public String getReleaseNoteUri() {
    return releaseNoteUri;
  }

  public void setReleaseNoteUri(String releaseNoteUri) {
    this.releaseNoteUri = releaseNoteUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryImageProperties galleryImageProperties = (GalleryImageProperties) o;
    return Objects.equals(this.description, galleryImageProperties.description) &&
        Objects.equals(this.disallowed, galleryImageProperties.disallowed) &&
        Objects.equals(this.endOfLifeDate, galleryImageProperties.endOfLifeDate) &&
        Objects.equals(this.eula, galleryImageProperties.eula) &&
        Objects.equals(this.identifier, galleryImageProperties.identifier) &&
        Objects.equals(this.osState, galleryImageProperties.osState) &&
        Objects.equals(this.osType, galleryImageProperties.osType) &&
        Objects.equals(this.privacyStatementUri, galleryImageProperties.privacyStatementUri) &&
        Objects.equals(this.provisioningState, galleryImageProperties.provisioningState) &&
        Objects.equals(this.purchasePlan, galleryImageProperties.purchasePlan) &&
        Objects.equals(this.recommended, galleryImageProperties.recommended) &&
        Objects.equals(this.releaseNoteUri, galleryImageProperties.releaseNoteUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, disallowed, endOfLifeDate, eula, identifier, osState, osType, privacyStatementUri, provisioningState, purchasePlan, recommended, releaseNoteUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryImageProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disallowed: ").append(toIndentedString(disallowed)).append("\n");
    sb.append("    endOfLifeDate: ").append(toIndentedString(endOfLifeDate)).append("\n");
    sb.append("    eula: ").append(toIndentedString(eula)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    osState: ").append(toIndentedString(osState)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    privacyStatementUri: ").append(toIndentedString(privacyStatementUri)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    purchasePlan: ").append(toIndentedString(purchasePlan)).append("\n");
    sb.append("    recommended: ").append(toIndentedString(recommended)).append("\n");
    sb.append("    releaseNoteUri: ").append(toIndentedString(releaseNoteUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("disallowed");
    openapiFields.add("endOfLifeDate");
    openapiFields.add("eula");
    openapiFields.add("identifier");
    openapiFields.add("osState");
    openapiFields.add("osType");
    openapiFields.add("privacyStatementUri");
    openapiFields.add("provisioningState");
    openapiFields.add("purchasePlan");
    openapiFields.add("recommended");
    openapiFields.add("releaseNoteUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("osState");
    openapiRequiredFields.add("osType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalleryImageProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalleryImageProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalleryImageProperties is not found in the empty JSON string", GalleryImageProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalleryImageProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalleryImageProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GalleryImageProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `disallowed`
      if (jsonObj.get("disallowed") != null && !jsonObj.get("disallowed").isJsonNull()) {
        Disallowed.validateJsonElement(jsonObj.get("disallowed"));
      }
      if ((jsonObj.get("eula") != null && !jsonObj.get("eula").isJsonNull()) && !jsonObj.get("eula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eula").toString()));
      }
      // validate the required field `identifier`
      GalleryImageIdentifier.validateJsonElement(jsonObj.get("identifier"));
      if (!jsonObj.get("osState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osState").toString()));
      }
      // validate the required field `osState`
      OsStateEnum.validateJsonElement(jsonObj.get("osState"));
      if (!jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the required field `osType`
      OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      if ((jsonObj.get("privacyStatementUri") != null && !jsonObj.get("privacyStatementUri").isJsonNull()) && !jsonObj.get("privacyStatementUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyStatementUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyStatementUri").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `purchasePlan`
      if (jsonObj.get("purchasePlan") != null && !jsonObj.get("purchasePlan").isJsonNull()) {
        ImagePurchasePlan.validateJsonElement(jsonObj.get("purchasePlan"));
      }
      // validate the optional field `recommended`
      if (jsonObj.get("recommended") != null && !jsonObj.get("recommended").isJsonNull()) {
        RecommendedMachineConfiguration.validateJsonElement(jsonObj.get("recommended"));
      }
      if ((jsonObj.get("releaseNoteUri") != null && !jsonObj.get("releaseNoteUri").isJsonNull()) && !jsonObj.get("releaseNoteUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseNoteUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseNoteUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalleryImageProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalleryImageProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalleryImageProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalleryImageProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GalleryImageProperties>() {
           @Override
           public void write(JsonWriter out, GalleryImageProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalleryImageProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalleryImageProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalleryImageProperties
   * @throws IOException if the JSON string is invalid with respect to GalleryImageProperties
   */
  public static GalleryImageProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalleryImageProperties.class);
  }

  /**
   * Convert an instance of GalleryImageProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

