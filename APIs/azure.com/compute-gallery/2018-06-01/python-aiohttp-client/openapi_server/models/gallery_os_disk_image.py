# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GalleryOSDiskImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_caching: str=None, size_in_gb: int=None):
        """GalleryOSDiskImage - a model defined in OpenAPI

        :param host_caching: The host_caching of this GalleryOSDiskImage.
        :param size_in_gb: The size_in_gb of this GalleryOSDiskImage.
        """
        self.openapi_types = {
            'host_caching': str,
            'size_in_gb': int
        }

        self.attribute_map = {
            'host_caching': 'hostCaching',
            'size_in_gb': 'sizeInGB'
        }

        self._host_caching = host_caching
        self._size_in_gb = size_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryOSDiskImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryOSDiskImage of this GalleryOSDiskImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_caching(self):
        """Gets the host_caching of this GalleryOSDiskImage.

        The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'

        :return: The host_caching of this GalleryOSDiskImage.
        :rtype: str
        """
        return self._host_caching

    @host_caching.setter
    def host_caching(self, host_caching):
        """Sets the host_caching of this GalleryOSDiskImage.

        The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'

        :param host_caching: The host_caching of this GalleryOSDiskImage.
        :type host_caching: str
        """
        allowed_values = ["None", "ReadOnly", "ReadWrite"]  # noqa: E501
        if host_caching not in allowed_values:
            raise ValueError(
                "Invalid value for `host_caching` ({0}), must be one of {1}"
                .format(host_caching, allowed_values)
            )

        self._host_caching = host_caching

    @property
    def size_in_gb(self):
        """Gets the size_in_gb of this GalleryOSDiskImage.

        This property indicates the size of the VHD to be created.

        :return: The size_in_gb of this GalleryOSDiskImage.
        :rtype: int
        """
        return self._size_in_gb

    @size_in_gb.setter
    def size_in_gb(self, size_in_gb):
        """Sets the size_in_gb of this GalleryOSDiskImage.

        This property indicates the size of the VHD to be created.

        :param size_in_gb: The size_in_gb of this GalleryOSDiskImage.
        :type size_in_gb: int
        """

        self._size_in_gb = size_in_gb
