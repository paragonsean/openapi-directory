# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GalleryDataDiskImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lun: int=None, host_caching: str=None, size_in_gb: int=None):
        """GalleryDataDiskImage - a model defined in OpenAPI

        :param lun: The lun of this GalleryDataDiskImage.
        :param host_caching: The host_caching of this GalleryDataDiskImage.
        :param size_in_gb: The size_in_gb of this GalleryDataDiskImage.
        """
        self.openapi_types = {
            'lun': int,
            'host_caching': str,
            'size_in_gb': int
        }

        self.attribute_map = {
            'lun': 'lun',
            'host_caching': 'hostCaching',
            'size_in_gb': 'sizeInGB'
        }

        self._lun = lun
        self._host_caching = host_caching
        self._size_in_gb = size_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryDataDiskImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryDataDiskImage of this GalleryDataDiskImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lun(self):
        """Gets the lun of this GalleryDataDiskImage.

        This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.

        :return: The lun of this GalleryDataDiskImage.
        :rtype: int
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this GalleryDataDiskImage.

        This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.

        :param lun: The lun of this GalleryDataDiskImage.
        :type lun: int
        """

        self._lun = lun

    @property
    def host_caching(self):
        """Gets the host_caching of this GalleryDataDiskImage.

        The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'

        :return: The host_caching of this GalleryDataDiskImage.
        :rtype: str
        """
        return self._host_caching

    @host_caching.setter
    def host_caching(self, host_caching):
        """Sets the host_caching of this GalleryDataDiskImage.

        The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'

        :param host_caching: The host_caching of this GalleryDataDiskImage.
        :type host_caching: str
        """
        allowed_values = ["None", "ReadOnly", "ReadWrite"]  # noqa: E501
        if host_caching not in allowed_values:
            raise ValueError(
                "Invalid value for `host_caching` ({0}), must be one of {1}"
                .format(host_caching, allowed_values)
            )

        self._host_caching = host_caching

    @property
    def size_in_gb(self):
        """Gets the size_in_gb of this GalleryDataDiskImage.

        This property indicates the size of the VHD to be created.

        :return: The size_in_gb of this GalleryDataDiskImage.
        :rtype: int
        """
        return self._size_in_gb

    @size_in_gb.setter
    def size_in_gb(self, size_in_gb):
        """Sets the size_in_gb of this GalleryDataDiskImage.

        This property indicates the size of the VHD to be created.

        :param size_in_gb: The size_in_gb of this GalleryDataDiskImage.
        :type size_in_gb: int
        """

        self._size_in_gb = size_in_gb
