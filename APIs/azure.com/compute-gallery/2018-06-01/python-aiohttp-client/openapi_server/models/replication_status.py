# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regional_replication_status import RegionalReplicationStatus
from openapi_server import util


class ReplicationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_state: str=None, summary: List[RegionalReplicationStatus]=None):
        """ReplicationStatus - a model defined in OpenAPI

        :param aggregated_state: The aggregated_state of this ReplicationStatus.
        :param summary: The summary of this ReplicationStatus.
        """
        self.openapi_types = {
            'aggregated_state': str,
            'summary': List[RegionalReplicationStatus]
        }

        self.attribute_map = {
            'aggregated_state': 'aggregatedState',
            'summary': 'summary'
        }

        self._aggregated_state = aggregated_state
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationStatus of this ReplicationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_state(self):
        """Gets the aggregated_state of this ReplicationStatus.

        This is the aggregated replication status based on all the regional replication status flags.

        :return: The aggregated_state of this ReplicationStatus.
        :rtype: str
        """
        return self._aggregated_state

    @aggregated_state.setter
    def aggregated_state(self, aggregated_state):
        """Sets the aggregated_state of this ReplicationStatus.

        This is the aggregated replication status based on all the regional replication status flags.

        :param aggregated_state: The aggregated_state of this ReplicationStatus.
        :type aggregated_state: str
        """
        allowed_values = ["Unknown", "InProgress", "Completed", "Failed"]  # noqa: E501
        if aggregated_state not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregated_state` ({0}), must be one of {1}"
                .format(aggregated_state, allowed_values)
            )

        self._aggregated_state = aggregated_state

    @property
    def summary(self):
        """Gets the summary of this ReplicationStatus.

        This is a summary of replication status for each region.

        :return: The summary of this ReplicationStatus.
        :rtype: List[RegionalReplicationStatus]
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ReplicationStatus.

        This is a summary of replication status for each region.

        :param summary: The summary of this ReplicationStatus.
        :type summary: List[RegionalReplicationStatus]
        """

        self._summary = summary
