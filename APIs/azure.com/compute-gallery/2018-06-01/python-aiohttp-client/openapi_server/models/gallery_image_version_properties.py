# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gallery_image_version_publishing_profile import GalleryImageVersionPublishingProfile
from openapi_server.models.gallery_image_version_storage_profile import GalleryImageVersionStorageProfile
from openapi_server.models.replication_status import ReplicationStatus
from openapi_server import util


class GalleryImageVersionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, publishing_profile: GalleryImageVersionPublishingProfile=None, replication_status: ReplicationStatus=None, storage_profile: GalleryImageVersionStorageProfile=None):
        """GalleryImageVersionProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this GalleryImageVersionProperties.
        :param publishing_profile: The publishing_profile of this GalleryImageVersionProperties.
        :param replication_status: The replication_status of this GalleryImageVersionProperties.
        :param storage_profile: The storage_profile of this GalleryImageVersionProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'publishing_profile': GalleryImageVersionPublishingProfile,
            'replication_status': ReplicationStatus,
            'storage_profile': GalleryImageVersionStorageProfile
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'publishing_profile': 'publishingProfile',
            'replication_status': 'replicationStatus',
            'storage_profile': 'storageProfile'
        }

        self._provisioning_state = provisioning_state
        self._publishing_profile = publishing_profile
        self._replication_status = replication_status
        self._storage_profile = storage_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryImageVersionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryImageVersionProperties of this GalleryImageVersionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this GalleryImageVersionProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this GalleryImageVersionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this GalleryImageVersionProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this GalleryImageVersionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def publishing_profile(self):
        """Gets the publishing_profile of this GalleryImageVersionProperties.


        :return: The publishing_profile of this GalleryImageVersionProperties.
        :rtype: GalleryImageVersionPublishingProfile
        """
        return self._publishing_profile

    @publishing_profile.setter
    def publishing_profile(self, publishing_profile):
        """Sets the publishing_profile of this GalleryImageVersionProperties.


        :param publishing_profile: The publishing_profile of this GalleryImageVersionProperties.
        :type publishing_profile: GalleryImageVersionPublishingProfile
        """
        if publishing_profile is None:
            raise ValueError("Invalid value for `publishing_profile`, must not be `None`")

        self._publishing_profile = publishing_profile

    @property
    def replication_status(self):
        """Gets the replication_status of this GalleryImageVersionProperties.


        :return: The replication_status of this GalleryImageVersionProperties.
        :rtype: ReplicationStatus
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this GalleryImageVersionProperties.


        :param replication_status: The replication_status of this GalleryImageVersionProperties.
        :type replication_status: ReplicationStatus
        """

        self._replication_status = replication_status

    @property
    def storage_profile(self):
        """Gets the storage_profile of this GalleryImageVersionProperties.


        :return: The storage_profile of this GalleryImageVersionProperties.
        :rtype: GalleryImageVersionStorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this GalleryImageVersionProperties.


        :param storage_profile: The storage_profile of this GalleryImageVersionProperties.
        :type storage_profile: GalleryImageVersionStorageProfile
        """

        self._storage_profile = storage_profile
