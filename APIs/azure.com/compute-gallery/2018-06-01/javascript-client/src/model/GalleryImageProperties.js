/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Disallowed from './Disallowed';
import GalleryImageIdentifier from './GalleryImageIdentifier';
import ImagePurchasePlan from './ImagePurchasePlan';
import RecommendedMachineConfiguration from './RecommendedMachineConfiguration';

/**
 * The GalleryImageProperties model module.
 * @module model/GalleryImageProperties
 * @version 2018-06-01
 */
class GalleryImageProperties {
    /**
     * Constructs a new <code>GalleryImageProperties</code>.
     * Describes the properties of a gallery Image Definition.
     * @alias module:model/GalleryImageProperties
     * @param identifier {module:model/GalleryImageIdentifier} 
     * @param osState {module:model/GalleryImageProperties.OsStateEnum} The allowed values for OS State are 'Generalized'.
     * @param osType {module:model/GalleryImageProperties.OsTypeEnum} This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
     */
    constructor(identifier, osState, osType) { 
        
        GalleryImageProperties.initialize(this, identifier, osState, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier, osState, osType) { 
        obj['identifier'] = identifier;
        obj['osState'] = osState;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>GalleryImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GalleryImageProperties} obj Optional instance to populate.
     * @return {module:model/GalleryImageProperties} The populated <code>GalleryImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GalleryImageProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disallowed')) {
                obj['disallowed'] = Disallowed.constructFromObject(data['disallowed']);
            }
            if (data.hasOwnProperty('endOfLifeDate')) {
                obj['endOfLifeDate'] = ApiClient.convertToType(data['endOfLifeDate'], 'Date');
            }
            if (data.hasOwnProperty('eula')) {
                obj['eula'] = ApiClient.convertToType(data['eula'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = GalleryImageIdentifier.constructFromObject(data['identifier']);
            }
            if (data.hasOwnProperty('osState')) {
                obj['osState'] = ApiClient.convertToType(data['osState'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('privacyStatementUri')) {
                obj['privacyStatementUri'] = ApiClient.convertToType(data['privacyStatementUri'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('purchasePlan')) {
                obj['purchasePlan'] = ImagePurchasePlan.constructFromObject(data['purchasePlan']);
            }
            if (data.hasOwnProperty('recommended')) {
                obj['recommended'] = RecommendedMachineConfiguration.constructFromObject(data['recommended']);
            }
            if (data.hasOwnProperty('releaseNoteUri')) {
                obj['releaseNoteUri'] = ApiClient.convertToType(data['releaseNoteUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GalleryImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GalleryImageProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GalleryImageProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `disallowed`
        if (data['disallowed']) { // data not null
          Disallowed.validateJSON(data['disallowed']);
        }
        // ensure the json data is a string
        if (data['eula'] && !(typeof data['eula'] === 'string' || data['eula'] instanceof String)) {
            throw new Error("Expected the field `eula` to be a primitive type in the JSON string but got " + data['eula']);
        }
        // validate the optional field `identifier`
        if (data['identifier']) { // data not null
          GalleryImageIdentifier.validateJSON(data['identifier']);
        }
        // ensure the json data is a string
        if (data['osState'] && !(typeof data['osState'] === 'string' || data['osState'] instanceof String)) {
            throw new Error("Expected the field `osState` to be a primitive type in the JSON string but got " + data['osState']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['privacyStatementUri'] && !(typeof data['privacyStatementUri'] === 'string' || data['privacyStatementUri'] instanceof String)) {
            throw new Error("Expected the field `privacyStatementUri` to be a primitive type in the JSON string but got " + data['privacyStatementUri']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `purchasePlan`
        if (data['purchasePlan']) { // data not null
          ImagePurchasePlan.validateJSON(data['purchasePlan']);
        }
        // validate the optional field `recommended`
        if (data['recommended']) { // data not null
          RecommendedMachineConfiguration.validateJSON(data['recommended']);
        }
        // ensure the json data is a string
        if (data['releaseNoteUri'] && !(typeof data['releaseNoteUri'] === 'string' || data['releaseNoteUri'] instanceof String)) {
            throw new Error("Expected the field `releaseNoteUri` to be a primitive type in the JSON string but got " + data['releaseNoteUri']);
        }

        return true;
    }


}

GalleryImageProperties.RequiredProperties = ["identifier", "osState", "osType"];

/**
 * The description of this gallery Image Definition resource. This property is updatable.
 * @member {String} description
 */
GalleryImageProperties.prototype['description'] = undefined;

/**
 * @member {module:model/Disallowed} disallowed
 */
GalleryImageProperties.prototype['disallowed'] = undefined;

/**
 * The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
 * @member {Date} endOfLifeDate
 */
GalleryImageProperties.prototype['endOfLifeDate'] = undefined;

/**
 * The Eula agreement for the gallery Image Definition.
 * @member {String} eula
 */
GalleryImageProperties.prototype['eula'] = undefined;

/**
 * @member {module:model/GalleryImageIdentifier} identifier
 */
GalleryImageProperties.prototype['identifier'] = undefined;

/**
 * The allowed values for OS State are 'Generalized'.
 * @member {module:model/GalleryImageProperties.OsStateEnum} osState
 */
GalleryImageProperties.prototype['osState'] = undefined;

/**
 * This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
 * @member {module:model/GalleryImageProperties.OsTypeEnum} osType
 */
GalleryImageProperties.prototype['osType'] = undefined;

/**
 * The privacy statement uri.
 * @member {String} privacyStatementUri
 */
GalleryImageProperties.prototype['privacyStatementUri'] = undefined;

/**
 * The provisioning state, which only appears in the response.
 * @member {module:model/GalleryImageProperties.ProvisioningStateEnum} provisioningState
 */
GalleryImageProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ImagePurchasePlan} purchasePlan
 */
GalleryImageProperties.prototype['purchasePlan'] = undefined;

/**
 * @member {module:model/RecommendedMachineConfiguration} recommended
 */
GalleryImageProperties.prototype['recommended'] = undefined;

/**
 * The release note uri.
 * @member {String} releaseNoteUri
 */
GalleryImageProperties.prototype['releaseNoteUri'] = undefined;





/**
 * Allowed values for the <code>osState</code> property.
 * @enum {String}
 * @readonly
 */
GalleryImageProperties['OsStateEnum'] = {

    /**
     * value: "Generalized"
     * @const
     */
    "Generalized": "Generalized",

    /**
     * value: "Specialized"
     * @const
     */
    "Specialized": "Specialized"
};


/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
GalleryImageProperties['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
GalleryImageProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Migrating"
     * @const
     */
    "Migrating": "Migrating"
};



export default GalleryImageProperties;

