# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserArtifactSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, media_link: str=None):
        """UserArtifactSource - a model defined in OpenAPI

        :param file_name: The file_name of this UserArtifactSource.
        :param media_link: The media_link of this UserArtifactSource.
        """
        self.openapi_types = {
            'file_name': str,
            'media_link': str
        }

        self.attribute_map = {
            'file_name': 'fileName',
            'media_link': 'mediaLink'
        }

        self._file_name = file_name
        self._media_link = media_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserArtifactSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserArtifactSource of this UserArtifactSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self):
        """Gets the file_name of this UserArtifactSource.

        Required. The fileName of the artifact.

        :return: The file_name of this UserArtifactSource.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this UserArtifactSource.

        Required. The fileName of the artifact.

        :param file_name: The file_name of this UserArtifactSource.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def media_link(self):
        """Gets the media_link of this UserArtifactSource.

        Required. The mediaLink of the artifact, must be a readable storage blob.

        :return: The media_link of this UserArtifactSource.
        :rtype: str
        """
        return self._media_link

    @media_link.setter
    def media_link(self, media_link):
        """Sets the media_link of this UserArtifactSource.

        Required. The mediaLink of the artifact, must be a readable storage blob.

        :param media_link: The media_link of this UserArtifactSource.
        :type media_link: str
        """
        if media_link is None:
            raise ValueError("Invalid value for `media_link`, must not be `None`")

        self._media_link = media_link
