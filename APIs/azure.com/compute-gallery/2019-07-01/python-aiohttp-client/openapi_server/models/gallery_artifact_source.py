# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_artifact import ManagedArtifact
from openapi_server import util


class GalleryArtifactSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_image: ManagedArtifact=None):
        """GalleryArtifactSource - a model defined in OpenAPI

        :param managed_image: The managed_image of this GalleryArtifactSource.
        """
        self.openapi_types = {
            'managed_image': ManagedArtifact
        }

        self.attribute_map = {
            'managed_image': 'managedImage'
        }

        self._managed_image = managed_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryArtifactSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryArtifactSource of this GalleryArtifactSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_image(self):
        """Gets the managed_image of this GalleryArtifactSource.


        :return: The managed_image of this GalleryArtifactSource.
        :rtype: ManagedArtifact
        """
        return self._managed_image

    @managed_image.setter
    def managed_image(self, managed_image):
        """Sets the managed_image of this GalleryArtifactSource.


        :param managed_image: The managed_image of this GalleryArtifactSource.
        :type managed_image: ManagedArtifact
        """
        if managed_image is None:
            raise ValueError("Invalid value for `managed_image`, must not be `None`")

        self._managed_image = managed_image
