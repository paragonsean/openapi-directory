/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedMachineConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedMachineConfiguration::OAIRecommendedMachineConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedMachineConfiguration::OAIRecommendedMachineConfiguration() {
    this->initializeModel();
}

OAIRecommendedMachineConfiguration::~OAIRecommendedMachineConfiguration() {}

void OAIRecommendedMachineConfiguration::initializeModel() {

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_v_cpus_isSet = false;
    m_v_cpus_isValid = false;
}

void OAIRecommendedMachineConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedMachineConfiguration::fromJsonObject(QJsonObject json) {

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_v_cpus_isValid = ::OpenAPI::fromJsonValue(m_v_cpus, json[QString("vCPUs")]);
    m_v_cpus_isSet = !json[QString("vCPUs")].isNull() && m_v_cpus_isValid;
}

QString OAIRecommendedMachineConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedMachineConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_memory.isSet()) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_v_cpus.isSet()) {
        obj.insert(QString("vCPUs"), ::OpenAPI::toJsonValue(m_v_cpus));
    }
    return obj;
}

OAIResourceRange OAIRecommendedMachineConfiguration::getMemory() const {
    return m_memory;
}
void OAIRecommendedMachineConfiguration::setMemory(const OAIResourceRange &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIRecommendedMachineConfiguration::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIRecommendedMachineConfiguration::is_memory_Valid() const{
    return m_memory_isValid;
}

OAIResourceRange OAIRecommendedMachineConfiguration::getVCpus() const {
    return m_v_cpus;
}
void OAIRecommendedMachineConfiguration::setVCpus(const OAIResourceRange &v_cpus) {
    m_v_cpus = v_cpus;
    m_v_cpus_isSet = true;
}

bool OAIRecommendedMachineConfiguration::is_v_cpus_Set() const{
    return m_v_cpus_isSet;
}

bool OAIRecommendedMachineConfiguration::is_v_cpus_Valid() const{
    return m_v_cpus_isValid;
}

bool OAIRecommendedMachineConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_memory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_cpus.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedMachineConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
