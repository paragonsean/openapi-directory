/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryDiskImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryDiskImage::OAIGalleryDiskImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryDiskImage::OAIGalleryDiskImage() {
    this->initializeModel();
}

OAIGalleryDiskImage::~OAIGalleryDiskImage() {}

void OAIGalleryDiskImage::initializeModel() {

    m_host_caching_isSet = false;
    m_host_caching_isValid = false;

    m_size_in_gb_isSet = false;
    m_size_in_gb_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIGalleryDiskImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryDiskImage::fromJsonObject(QJsonObject json) {

    m_host_caching_isValid = ::OpenAPI::fromJsonValue(m_host_caching, json[QString("hostCaching")]);
    m_host_caching_isSet = !json[QString("hostCaching")].isNull() && m_host_caching_isValid;

    m_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_size_in_gb, json[QString("sizeInGB")]);
    m_size_in_gb_isSet = !json[QString("sizeInGB")].isNull() && m_size_in_gb_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIGalleryDiskImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryDiskImage::asJsonObject() const {
    QJsonObject obj;
    if (m_host_caching_isSet) {
        obj.insert(QString("hostCaching"), ::OpenAPI::toJsonValue(m_host_caching));
    }
    if (m_size_in_gb_isSet) {
        obj.insert(QString("sizeInGB"), ::OpenAPI::toJsonValue(m_size_in_gb));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIGalleryDiskImage::getHostCaching() const {
    return m_host_caching;
}
void OAIGalleryDiskImage::setHostCaching(const QString &host_caching) {
    m_host_caching = host_caching;
    m_host_caching_isSet = true;
}

bool OAIGalleryDiskImage::is_host_caching_Set() const{
    return m_host_caching_isSet;
}

bool OAIGalleryDiskImage::is_host_caching_Valid() const{
    return m_host_caching_isValid;
}

qint32 OAIGalleryDiskImage::getSizeInGb() const {
    return m_size_in_gb;
}
void OAIGalleryDiskImage::setSizeInGb(const qint32 &size_in_gb) {
    m_size_in_gb = size_in_gb;
    m_size_in_gb_isSet = true;
}

bool OAIGalleryDiskImage::is_size_in_gb_Set() const{
    return m_size_in_gb_isSet;
}

bool OAIGalleryDiskImage::is_size_in_gb_Valid() const{
    return m_size_in_gb_isValid;
}

OAIGalleryArtifactVersionSource OAIGalleryDiskImage::getSource() const {
    return m_source;
}
void OAIGalleryDiskImage::setSource(const OAIGalleryArtifactVersionSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGalleryDiskImage::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGalleryDiskImage::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIGalleryDiskImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_caching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryDiskImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
