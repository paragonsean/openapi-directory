/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGalleryApplicationsApi_H
#define OAI_OAIGalleryApplicationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIGalleryApplication.h"
#include "OAIGalleryApplicationList.h"
#include "OAIGalleryApplicationUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGalleryApplicationsApi : public QObject {
    Q_OBJECT

public:
    OAIGalleryApplicationsApi(const int timeOut = 0);
    ~OAIGalleryApplicationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  gallery_application OAIGalleryApplication [required]
    */
    virtual void galleryApplicationsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &api_version, const OAIGalleryApplication &gallery_application);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleryApplicationsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleryApplicationsGet(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleryApplicationsListByGallery(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  gallery_application OAIGalleryApplicationUpdate [required]
    */
    virtual void galleryApplicationsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &api_version, const OAIGalleryApplicationUpdate &gallery_application);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void galleryApplicationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationsDeleteCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationsGetCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationsListByGalleryCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void galleryApplicationsCreateOrUpdateSignal(OAIGalleryApplication summary);
    void galleryApplicationsDeleteSignal();
    void galleryApplicationsGetSignal(OAIGalleryApplication summary);
    void galleryApplicationsListByGallerySignal(OAIGalleryApplicationList summary);
    void galleryApplicationsUpdateSignal(OAIGalleryApplication summary);


    void galleryApplicationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplication summary);
    void galleryApplicationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void galleryApplicationsGetSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplication summary);
    void galleryApplicationsListByGallerySignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplicationList summary);
    void galleryApplicationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplication summary);

    Q_DECL_DEPRECATED_X("Use galleryApplicationsCreateOrUpdateSignalError() instead")
    void galleryApplicationsCreateOrUpdateSignalE(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsCreateOrUpdateSignalError(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsDeleteSignalError() instead")
    void galleryApplicationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsGetSignalError() instead")
    void galleryApplicationsGetSignalE(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsGetSignalError(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsListByGallerySignalError() instead")
    void galleryApplicationsListByGallerySignalE(OAIGalleryApplicationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsListByGallerySignalError(OAIGalleryApplicationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsUpdateSignalError() instead")
    void galleryApplicationsUpdateSignalE(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsUpdateSignalError(OAIGalleryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use galleryApplicationsCreateOrUpdateSignalErrorFull() instead")
    void galleryApplicationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsDeleteSignalErrorFull() instead")
    void galleryApplicationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsGetSignalErrorFull() instead")
    void galleryApplicationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsListByGallerySignalErrorFull() instead")
    void galleryApplicationsListByGallerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsListByGallerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationsUpdateSignalErrorFull() instead")
    void galleryApplicationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
