/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryApplicationVersionPublishingProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryApplicationVersionPublishingProfile::OAIGalleryApplicationVersionPublishingProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryApplicationVersionPublishingProfile::OAIGalleryApplicationVersionPublishingProfile() {
    this->initializeModel();
}

OAIGalleryApplicationVersionPublishingProfile::~OAIGalleryApplicationVersionPublishingProfile() {}

void OAIGalleryApplicationVersionPublishingProfile::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_enable_health_check_isSet = false;
    m_enable_health_check_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_end_of_life_date_isSet = false;
    m_end_of_life_date_isValid = false;

    m_exclude_from_latest_isSet = false;
    m_exclude_from_latest_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;

    m_target_regions_isSet = false;
    m_target_regions_isValid = false;
}

void OAIGalleryApplicationVersionPublishingProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryApplicationVersionPublishingProfile::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_enable_health_check_isValid = ::OpenAPI::fromJsonValue(m_enable_health_check, json[QString("enableHealthCheck")]);
    m_enable_health_check_isSet = !json[QString("enableHealthCheck")].isNull() && m_enable_health_check_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_end_of_life_date_isValid = ::OpenAPI::fromJsonValue(m_end_of_life_date, json[QString("endOfLifeDate")]);
    m_end_of_life_date_isSet = !json[QString("endOfLifeDate")].isNull() && m_end_of_life_date_isValid;

    m_exclude_from_latest_isValid = ::OpenAPI::fromJsonValue(m_exclude_from_latest, json[QString("excludeFromLatest")]);
    m_exclude_from_latest_isSet = !json[QString("excludeFromLatest")].isNull() && m_exclude_from_latest_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("publishedDate")]);
    m_published_date_isSet = !json[QString("publishedDate")].isNull() && m_published_date_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;

    m_target_regions_isValid = ::OpenAPI::fromJsonValue(m_target_regions, json[QString("targetRegions")]);
    m_target_regions_isSet = !json[QString("targetRegions")].isNull() && m_target_regions_isValid;
}

QString OAIGalleryApplicationVersionPublishingProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryApplicationVersionPublishingProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_enable_health_check_isSet) {
        obj.insert(QString("enableHealthCheck"), ::OpenAPI::toJsonValue(m_enable_health_check));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_end_of_life_date_isSet) {
        obj.insert(QString("endOfLifeDate"), ::OpenAPI::toJsonValue(m_end_of_life_date));
    }
    if (m_exclude_from_latest_isSet) {
        obj.insert(QString("excludeFromLatest"), ::OpenAPI::toJsonValue(m_exclude_from_latest));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("publishedDate"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    if (m_storage_account_type_isSet) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    if (m_target_regions.size() > 0) {
        obj.insert(QString("targetRegions"), ::OpenAPI::toJsonValue(m_target_regions));
    }
    return obj;
}

QString OAIGalleryApplicationVersionPublishingProfile::getContentType() const {
    return m_content_type;
}
void OAIGalleryApplicationVersionPublishingProfile::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIGalleryApplicationVersionPublishingProfile::isEnableHealthCheck() const {
    return m_enable_health_check;
}
void OAIGalleryApplicationVersionPublishingProfile::setEnableHealthCheck(const bool &enable_health_check) {
    m_enable_health_check = enable_health_check;
    m_enable_health_check_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_enable_health_check_Set() const{
    return m_enable_health_check_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_enable_health_check_Valid() const{
    return m_enable_health_check_isValid;
}

OAIUserArtifactSource OAIGalleryApplicationVersionPublishingProfile::getSource() const {
    return m_source;
}
void OAIGalleryApplicationVersionPublishingProfile::setSource(const OAIUserArtifactSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAIGalleryApplicationVersionPublishingProfile::getEndOfLifeDate() const {
    return m_end_of_life_date;
}
void OAIGalleryApplicationVersionPublishingProfile::setEndOfLifeDate(const QDateTime &end_of_life_date) {
    m_end_of_life_date = end_of_life_date;
    m_end_of_life_date_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_end_of_life_date_Set() const{
    return m_end_of_life_date_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_end_of_life_date_Valid() const{
    return m_end_of_life_date_isValid;
}

bool OAIGalleryApplicationVersionPublishingProfile::isExcludeFromLatest() const {
    return m_exclude_from_latest;
}
void OAIGalleryApplicationVersionPublishingProfile::setExcludeFromLatest(const bool &exclude_from_latest) {
    m_exclude_from_latest = exclude_from_latest;
    m_exclude_from_latest_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_exclude_from_latest_Set() const{
    return m_exclude_from_latest_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_exclude_from_latest_Valid() const{
    return m_exclude_from_latest_isValid;
}

QDateTime OAIGalleryApplicationVersionPublishingProfile::getPublishedDate() const {
    return m_published_date;
}
void OAIGalleryApplicationVersionPublishingProfile::setPublishedDate(const QDateTime &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_published_date_Valid() const{
    return m_published_date_isValid;
}

qint32 OAIGalleryApplicationVersionPublishingProfile::getReplicaCount() const {
    return m_replica_count;
}
void OAIGalleryApplicationVersionPublishingProfile::setReplicaCount(const qint32 &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

QString OAIGalleryApplicationVersionPublishingProfile::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAIGalleryApplicationVersionPublishingProfile::setStorageAccountType(const QString &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

QList<OAITargetRegion> OAIGalleryApplicationVersionPublishingProfile::getTargetRegions() const {
    return m_target_regions;
}
void OAIGalleryApplicationVersionPublishingProfile::setTargetRegions(const QList<OAITargetRegion> &target_regions) {
    m_target_regions = target_regions;
    m_target_regions_isSet = true;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_target_regions_Set() const{
    return m_target_regions_isSet;
}

bool OAIGalleryApplicationVersionPublishingProfile::is_target_regions_Valid() const{
    return m_target_regions_isValid;
}

bool OAIGalleryApplicationVersionPublishingProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_health_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_life_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_from_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryApplicationVersionPublishingProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
