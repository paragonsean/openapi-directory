/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserArtifactSource model module.
 * @module model/UserArtifactSource
 * @version 2019-07-01
 */
class UserArtifactSource {
    /**
     * Constructs a new <code>UserArtifactSource</code>.
     * The source image from which the Image Version is going to be created.
     * @alias module:model/UserArtifactSource
     * @param fileName {String} Required. The fileName of the artifact.
     * @param mediaLink {String} Required. The mediaLink of the artifact, must be a readable storage blob.
     */
    constructor(fileName, mediaLink) { 
        
        UserArtifactSource.initialize(this, fileName, mediaLink);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileName, mediaLink) { 
        obj['fileName'] = fileName;
        obj['mediaLink'] = mediaLink;
    }

    /**
     * Constructs a <code>UserArtifactSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserArtifactSource} obj Optional instance to populate.
     * @return {module:model/UserArtifactSource} The populated <code>UserArtifactSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserArtifactSource();

            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('mediaLink')) {
                obj['mediaLink'] = ApiClient.convertToType(data['mediaLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserArtifactSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserArtifactSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserArtifactSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['mediaLink'] && !(typeof data['mediaLink'] === 'string' || data['mediaLink'] instanceof String)) {
            throw new Error("Expected the field `mediaLink` to be a primitive type in the JSON string but got " + data['mediaLink']);
        }

        return true;
    }


}

UserArtifactSource.RequiredProperties = ["fileName", "mediaLink"];

/**
 * Required. The fileName of the artifact.
 * @member {String} fileName
 */
UserArtifactSource.prototype['fileName'] = undefined;

/**
 * Required. The mediaLink of the artifact, must be a readable storage blob.
 * @member {String} mediaLink
 */
UserArtifactSource.prototype['mediaLink'] = undefined;






export default UserArtifactSource;

