/*
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GalleryArtifactVersionSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the data disk image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:45.321970-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GalleryDataDiskImage {
  public static final String SERIALIZED_NAME_LUN = "lun";
  @SerializedName(SERIALIZED_NAME_LUN)
  private Integer lun;

  /**
   * The host caching of the disk. Valid values are &#39;None&#39;, &#39;ReadOnly&#39;, and &#39;ReadWrite&#39;
   */
  @JsonAdapter(HostCachingEnum.Adapter.class)
  public enum HostCachingEnum {
    NONE("None"),
    
    READ_ONLY("ReadOnly"),
    
    READ_WRITE("ReadWrite");

    private String value;

    HostCachingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostCachingEnum fromValue(String value) {
      for (HostCachingEnum b : HostCachingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostCachingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostCachingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostCachingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostCachingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostCachingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_CACHING = "hostCaching";
  @SerializedName(SERIALIZED_NAME_HOST_CACHING)
  private HostCachingEnum hostCaching;

  public static final String SERIALIZED_NAME_SIZE_IN_G_B = "sizeInGB";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_G_B)
  private Integer sizeInGB;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private GalleryArtifactVersionSource source;

  public GalleryDataDiskImage() {
  }

  public GalleryDataDiskImage(
     Integer sizeInGB
  ) {
    this();
    this.sizeInGB = sizeInGB;
  }

  public GalleryDataDiskImage lun(Integer lun) {
    this.lun = lun;
    return this;
  }

  /**
   * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
   * @return lun
   */
  @javax.annotation.Nonnull
  public Integer getLun() {
    return lun;
  }

  public void setLun(Integer lun) {
    this.lun = lun;
  }


  public GalleryDataDiskImage hostCaching(HostCachingEnum hostCaching) {
    this.hostCaching = hostCaching;
    return this;
  }

  /**
   * The host caching of the disk. Valid values are &#39;None&#39;, &#39;ReadOnly&#39;, and &#39;ReadWrite&#39;
   * @return hostCaching
   */
  @javax.annotation.Nullable
  public HostCachingEnum getHostCaching() {
    return hostCaching;
  }

  public void setHostCaching(HostCachingEnum hostCaching) {
    this.hostCaching = hostCaching;
  }


  /**
   * This property indicates the size of the VHD to be created.
   * @return sizeInGB
   */
  @javax.annotation.Nullable
  public Integer getSizeInGB() {
    return sizeInGB;
  }



  public GalleryDataDiskImage source(GalleryArtifactVersionSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public GalleryArtifactVersionSource getSource() {
    return source;
  }

  public void setSource(GalleryArtifactVersionSource source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryDataDiskImage galleryDataDiskImage = (GalleryDataDiskImage) o;
    return Objects.equals(this.lun, galleryDataDiskImage.lun) &&
        Objects.equals(this.hostCaching, galleryDataDiskImage.hostCaching) &&
        Objects.equals(this.sizeInGB, galleryDataDiskImage.sizeInGB) &&
        Objects.equals(this.source, galleryDataDiskImage.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lun, hostCaching, sizeInGB, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryDataDiskImage {\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    hostCaching: ").append(toIndentedString(hostCaching)).append("\n");
    sb.append("    sizeInGB: ").append(toIndentedString(sizeInGB)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostCaching");
    openapiFields.add("sizeInGB");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lun");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalleryDataDiskImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalleryDataDiskImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalleryDataDiskImage is not found in the empty JSON string", GalleryDataDiskImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalleryDataDiskImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalleryDataDiskImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GalleryDataDiskImage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostCaching") != null && !jsonObj.get("hostCaching").isJsonNull()) && !jsonObj.get("hostCaching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostCaching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostCaching").toString()));
      }
      // validate the optional field `hostCaching`
      if (jsonObj.get("hostCaching") != null && !jsonObj.get("hostCaching").isJsonNull()) {
        HostCachingEnum.validateJsonElement(jsonObj.get("hostCaching"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        GalleryArtifactVersionSource.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalleryDataDiskImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalleryDataDiskImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalleryDataDiskImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalleryDataDiskImage.class));

       return (TypeAdapter<T>) new TypeAdapter<GalleryDataDiskImage>() {
           @Override
           public void write(JsonWriter out, GalleryDataDiskImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalleryDataDiskImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalleryDataDiskImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalleryDataDiskImage
   * @throws IOException if the JSON string is invalid with respect to GalleryDataDiskImage
   */
  public static GalleryDataDiskImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalleryDataDiskImage.class);
  }

  /**
   * Convert an instance of GalleryDataDiskImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

