/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import GalleryApplication from '../model/GalleryApplication';
import GalleryApplicationList from '../model/GalleryApplicationList';

/**
* GalleryApplications service.
* @module api/GalleryApplicationsApi
* @version 2019-03-01
*/
export default class GalleryApplicationsApi {

    /**
    * Constructs a new GalleryApplicationsApi. 
    * @alias module:api/GalleryApplicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the galleryApplicationsCreateOrUpdate operation.
     * @callback module:api/GalleryApplicationsApi~galleryApplicationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GalleryApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a gallery Application Definition.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} galleryName The name of the Shared Application Gallery in which the Application Definition is to be created.
     * @param {String} galleryApplicationName The name of the gallery Application Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/GalleryApplication} galleryApplication Parameters supplied to the create or update gallery Application operation.
     * @param {module:api/GalleryApplicationsApi~galleryApplicationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GalleryApplication}
     */
    galleryApplicationsCreateOrUpdate(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, apiVersion, galleryApplication, callback) {
      let postBody = galleryApplication;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling galleryApplicationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling galleryApplicationsCreateOrUpdate");
      }
      // verify the required parameter 'galleryName' is set
      if (galleryName === undefined || galleryName === null) {
        throw new Error("Missing the required parameter 'galleryName' when calling galleryApplicationsCreateOrUpdate");
      }
      // verify the required parameter 'galleryApplicationName' is set
      if (galleryApplicationName === undefined || galleryApplicationName === null) {
        throw new Error("Missing the required parameter 'galleryApplicationName' when calling galleryApplicationsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling galleryApplicationsCreateOrUpdate");
      }
      // verify the required parameter 'galleryApplication' is set
      if (galleryApplication === undefined || galleryApplication === null) {
        throw new Error("Missing the required parameter 'galleryApplication' when calling galleryApplicationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'galleryName': galleryName,
        'galleryApplicationName': galleryApplicationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GalleryApplication;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the galleryApplicationsDelete operation.
     * @callback module:api/GalleryApplicationsApi~galleryApplicationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a gallery Application.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} galleryName The name of the Shared Application Gallery in which the Application Definition is to be deleted.
     * @param {String} galleryApplicationName The name of the gallery Application Definition to be deleted.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/GalleryApplicationsApi~galleryApplicationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    galleryApplicationsDelete(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling galleryApplicationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling galleryApplicationsDelete");
      }
      // verify the required parameter 'galleryName' is set
      if (galleryName === undefined || galleryName === null) {
        throw new Error("Missing the required parameter 'galleryName' when calling galleryApplicationsDelete");
      }
      // verify the required parameter 'galleryApplicationName' is set
      if (galleryApplicationName === undefined || galleryApplicationName === null) {
        throw new Error("Missing the required parameter 'galleryApplicationName' when calling galleryApplicationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling galleryApplicationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'galleryName': galleryName,
        'galleryApplicationName': galleryApplicationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the galleryApplicationsGet operation.
     * @callback module:api/GalleryApplicationsApi~galleryApplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GalleryApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a gallery Application Definition.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} galleryName The name of the Shared Application Gallery from which the Application Definitions are to be retrieved.
     * @param {String} galleryApplicationName The name of the gallery Application Definition to be retrieved.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/GalleryApplicationsApi~galleryApplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GalleryApplication}
     */
    galleryApplicationsGet(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling galleryApplicationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling galleryApplicationsGet");
      }
      // verify the required parameter 'galleryName' is set
      if (galleryName === undefined || galleryName === null) {
        throw new Error("Missing the required parameter 'galleryName' when calling galleryApplicationsGet");
      }
      // verify the required parameter 'galleryApplicationName' is set
      if (galleryApplicationName === undefined || galleryApplicationName === null) {
        throw new Error("Missing the required parameter 'galleryApplicationName' when calling galleryApplicationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling galleryApplicationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'galleryName': galleryName,
        'galleryApplicationName': galleryApplicationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GalleryApplication;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the galleryApplicationsListByGallery operation.
     * @callback module:api/GalleryApplicationsApi~galleryApplicationsListByGalleryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GalleryApplicationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gallery Application Definitions in a gallery.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} galleryName The name of the Shared Application Gallery from which Application Definitions are to be listed.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/GalleryApplicationsApi~galleryApplicationsListByGalleryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GalleryApplicationList}
     */
    galleryApplicationsListByGallery(subscriptionId, resourceGroupName, galleryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling galleryApplicationsListByGallery");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling galleryApplicationsListByGallery");
      }
      // verify the required parameter 'galleryName' is set
      if (galleryName === undefined || galleryName === null) {
        throw new Error("Missing the required parameter 'galleryName' when calling galleryApplicationsListByGallery");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling galleryApplicationsListByGallery");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'galleryName': galleryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GalleryApplicationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
