/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GalleryApplicationProperties model module.
 * @module model/GalleryApplicationProperties
 * @version 2019-03-01
 */
class GalleryApplicationProperties {
    /**
     * Constructs a new <code>GalleryApplicationProperties</code>.
     * Describes the properties of a gallery Application Definition.
     * @alias module:model/GalleryApplicationProperties
     * @param supportedOSType {module:model/GalleryApplicationProperties.SupportedOSTypeEnum} This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
     */
    constructor(supportedOSType) { 
        
        GalleryApplicationProperties.initialize(this, supportedOSType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, supportedOSType) { 
        obj['supportedOSType'] = supportedOSType;
    }

    /**
     * Constructs a <code>GalleryApplicationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GalleryApplicationProperties} obj Optional instance to populate.
     * @return {module:model/GalleryApplicationProperties} The populated <code>GalleryApplicationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GalleryApplicationProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endOfLifeDate')) {
                obj['endOfLifeDate'] = ApiClient.convertToType(data['endOfLifeDate'], 'Date');
            }
            if (data.hasOwnProperty('eula')) {
                obj['eula'] = ApiClient.convertToType(data['eula'], 'String');
            }
            if (data.hasOwnProperty('privacyStatementUri')) {
                obj['privacyStatementUri'] = ApiClient.convertToType(data['privacyStatementUri'], 'String');
            }
            if (data.hasOwnProperty('releaseNoteUri')) {
                obj['releaseNoteUri'] = ApiClient.convertToType(data['releaseNoteUri'], 'String');
            }
            if (data.hasOwnProperty('supportedOSType')) {
                obj['supportedOSType'] = ApiClient.convertToType(data['supportedOSType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GalleryApplicationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GalleryApplicationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GalleryApplicationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eula'] && !(typeof data['eula'] === 'string' || data['eula'] instanceof String)) {
            throw new Error("Expected the field `eula` to be a primitive type in the JSON string but got " + data['eula']);
        }
        // ensure the json data is a string
        if (data['privacyStatementUri'] && !(typeof data['privacyStatementUri'] === 'string' || data['privacyStatementUri'] instanceof String)) {
            throw new Error("Expected the field `privacyStatementUri` to be a primitive type in the JSON string but got " + data['privacyStatementUri']);
        }
        // ensure the json data is a string
        if (data['releaseNoteUri'] && !(typeof data['releaseNoteUri'] === 'string' || data['releaseNoteUri'] instanceof String)) {
            throw new Error("Expected the field `releaseNoteUri` to be a primitive type in the JSON string but got " + data['releaseNoteUri']);
        }
        // ensure the json data is a string
        if (data['supportedOSType'] && !(typeof data['supportedOSType'] === 'string' || data['supportedOSType'] instanceof String)) {
            throw new Error("Expected the field `supportedOSType` to be a primitive type in the JSON string but got " + data['supportedOSType']);
        }

        return true;
    }


}

GalleryApplicationProperties.RequiredProperties = ["supportedOSType"];

/**
 * The description of this gallery Application Definition resource. This property is updatable.
 * @member {String} description
 */
GalleryApplicationProperties.prototype['description'] = undefined;

/**
 * The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
 * @member {Date} endOfLifeDate
 */
GalleryApplicationProperties.prototype['endOfLifeDate'] = undefined;

/**
 * The Eula agreement for the gallery Application Definition.
 * @member {String} eula
 */
GalleryApplicationProperties.prototype['eula'] = undefined;

/**
 * The privacy statement uri.
 * @member {String} privacyStatementUri
 */
GalleryApplicationProperties.prototype['privacyStatementUri'] = undefined;

/**
 * The release note uri.
 * @member {String} releaseNoteUri
 */
GalleryApplicationProperties.prototype['releaseNoteUri'] = undefined;

/**
 * This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
 * @member {module:model/GalleryApplicationProperties.SupportedOSTypeEnum} supportedOSType
 */
GalleryApplicationProperties.prototype['supportedOSType'] = undefined;





/**
 * Allowed values for the <code>supportedOSType</code> property.
 * @enum {String}
 * @readonly
 */
GalleryApplicationProperties['SupportedOSTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default GalleryApplicationProperties;

