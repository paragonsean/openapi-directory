# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalReplicationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, progress: int=None, region: str=None, state: str=None):
        """RegionalReplicationStatus - a model defined in OpenAPI

        :param details: The details of this RegionalReplicationStatus.
        :param progress: The progress of this RegionalReplicationStatus.
        :param region: The region of this RegionalReplicationStatus.
        :param state: The state of this RegionalReplicationStatus.
        """
        self.openapi_types = {
            'details': str,
            'progress': int,
            'region': str,
            'state': str
        }

        self.attribute_map = {
            'details': 'details',
            'progress': 'progress',
            'region': 'region',
            'state': 'state'
        }

        self._details = details
        self._progress = progress
        self._region = region
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalReplicationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalReplicationStatus of this RegionalReplicationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this RegionalReplicationStatus.

        The details of the replication status.

        :return: The details of this RegionalReplicationStatus.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RegionalReplicationStatus.

        The details of the replication status.

        :param details: The details of this RegionalReplicationStatus.
        :type details: str
        """

        self._details = details

    @property
    def progress(self):
        """Gets the progress of this RegionalReplicationStatus.

        It indicates progress of the replication job.

        :return: The progress of this RegionalReplicationStatus.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RegionalReplicationStatus.

        It indicates progress of the replication job.

        :param progress: The progress of this RegionalReplicationStatus.
        :type progress: int
        """

        self._progress = progress

    @property
    def region(self):
        """Gets the region of this RegionalReplicationStatus.

        The region to which the gallery Image Version is being replicated to.

        :return: The region of this RegionalReplicationStatus.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegionalReplicationStatus.

        The region to which the gallery Image Version is being replicated to.

        :param region: The region of this RegionalReplicationStatus.
        :type region: str
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this RegionalReplicationStatus.

        This is the regional replication state.

        :return: The state of this RegionalReplicationStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegionalReplicationStatus.

        This is the regional replication state.

        :param state: The state of this RegionalReplicationStatus.
        :type state: str
        """
        allowed_values = ["Unknown", "Replicating", "Completed", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
