# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disallowed import Disallowed
from openapi_server.models.gallery_image_identifier import GalleryImageIdentifier
from openapi_server.models.image_purchase_plan import ImagePurchasePlan
from openapi_server.models.recommended_machine_configuration import RecommendedMachineConfiguration
from openapi_server import util


class GalleryImageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, disallowed: Disallowed=None, end_of_life_date: datetime=None, eula: str=None, identifier: GalleryImageIdentifier=None, os_state: str=None, os_type: str=None, privacy_statement_uri: str=None, provisioning_state: str=None, purchase_plan: ImagePurchasePlan=None, recommended: RecommendedMachineConfiguration=None, release_note_uri: str=None):
        """GalleryImageProperties - a model defined in OpenAPI

        :param description: The description of this GalleryImageProperties.
        :param disallowed: The disallowed of this GalleryImageProperties.
        :param end_of_life_date: The end_of_life_date of this GalleryImageProperties.
        :param eula: The eula of this GalleryImageProperties.
        :param identifier: The identifier of this GalleryImageProperties.
        :param os_state: The os_state of this GalleryImageProperties.
        :param os_type: The os_type of this GalleryImageProperties.
        :param privacy_statement_uri: The privacy_statement_uri of this GalleryImageProperties.
        :param provisioning_state: The provisioning_state of this GalleryImageProperties.
        :param purchase_plan: The purchase_plan of this GalleryImageProperties.
        :param recommended: The recommended of this GalleryImageProperties.
        :param release_note_uri: The release_note_uri of this GalleryImageProperties.
        """
        self.openapi_types = {
            'description': str,
            'disallowed': Disallowed,
            'end_of_life_date': datetime,
            'eula': str,
            'identifier': GalleryImageIdentifier,
            'os_state': str,
            'os_type': str,
            'privacy_statement_uri': str,
            'provisioning_state': str,
            'purchase_plan': ImagePurchasePlan,
            'recommended': RecommendedMachineConfiguration,
            'release_note_uri': str
        }

        self.attribute_map = {
            'description': 'description',
            'disallowed': 'disallowed',
            'end_of_life_date': 'endOfLifeDate',
            'eula': 'eula',
            'identifier': 'identifier',
            'os_state': 'osState',
            'os_type': 'osType',
            'privacy_statement_uri': 'privacyStatementUri',
            'provisioning_state': 'provisioningState',
            'purchase_plan': 'purchasePlan',
            'recommended': 'recommended',
            'release_note_uri': 'releaseNoteUri'
        }

        self._description = description
        self._disallowed = disallowed
        self._end_of_life_date = end_of_life_date
        self._eula = eula
        self._identifier = identifier
        self._os_state = os_state
        self._os_type = os_type
        self._privacy_statement_uri = privacy_statement_uri
        self._provisioning_state = provisioning_state
        self._purchase_plan = purchase_plan
        self._recommended = recommended
        self._release_note_uri = release_note_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryImageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryImageProperties of this GalleryImageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GalleryImageProperties.

        The description of this gallery Image Definition resource. This property is updatable.

        :return: The description of this GalleryImageProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GalleryImageProperties.

        The description of this gallery Image Definition resource. This property is updatable.

        :param description: The description of this GalleryImageProperties.
        :type description: str
        """

        self._description = description

    @property
    def disallowed(self):
        """Gets the disallowed of this GalleryImageProperties.


        :return: The disallowed of this GalleryImageProperties.
        :rtype: Disallowed
        """
        return self._disallowed

    @disallowed.setter
    def disallowed(self, disallowed):
        """Sets the disallowed of this GalleryImageProperties.


        :param disallowed: The disallowed of this GalleryImageProperties.
        :type disallowed: Disallowed
        """

        self._disallowed = disallowed

    @property
    def end_of_life_date(self):
        """Gets the end_of_life_date of this GalleryImageProperties.

        The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.

        :return: The end_of_life_date of this GalleryImageProperties.
        :rtype: datetime
        """
        return self._end_of_life_date

    @end_of_life_date.setter
    def end_of_life_date(self, end_of_life_date):
        """Sets the end_of_life_date of this GalleryImageProperties.

        The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.

        :param end_of_life_date: The end_of_life_date of this GalleryImageProperties.
        :type end_of_life_date: datetime
        """

        self._end_of_life_date = end_of_life_date

    @property
    def eula(self):
        """Gets the eula of this GalleryImageProperties.

        The Eula agreement for the gallery Image Definition.

        :return: The eula of this GalleryImageProperties.
        :rtype: str
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this GalleryImageProperties.

        The Eula agreement for the gallery Image Definition.

        :param eula: The eula of this GalleryImageProperties.
        :type eula: str
        """

        self._eula = eula

    @property
    def identifier(self):
        """Gets the identifier of this GalleryImageProperties.


        :return: The identifier of this GalleryImageProperties.
        :rtype: GalleryImageIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GalleryImageProperties.


        :param identifier: The identifier of this GalleryImageProperties.
        :type identifier: GalleryImageIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def os_state(self):
        """Gets the os_state of this GalleryImageProperties.

        This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.

        :return: The os_state of this GalleryImageProperties.
        :rtype: str
        """
        return self._os_state

    @os_state.setter
    def os_state(self, os_state):
        """Sets the os_state of this GalleryImageProperties.

        This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.

        :param os_state: The os_state of this GalleryImageProperties.
        :type os_state: str
        """
        allowed_values = ["Generalized", "Specialized"]  # noqa: E501
        if os_state not in allowed_values:
            raise ValueError(
                "Invalid value for `os_state` ({0}), must be one of {1}"
                .format(os_state, allowed_values)
            )

        self._os_state = os_state

    @property
    def os_type(self):
        """Gets the os_type of this GalleryImageProperties.

        This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :return: The os_type of this GalleryImageProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this GalleryImageProperties.

        This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :param os_type: The os_type of this GalleryImageProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def privacy_statement_uri(self):
        """Gets the privacy_statement_uri of this GalleryImageProperties.

        The privacy statement uri.

        :return: The privacy_statement_uri of this GalleryImageProperties.
        :rtype: str
        """
        return self._privacy_statement_uri

    @privacy_statement_uri.setter
    def privacy_statement_uri(self, privacy_statement_uri):
        """Sets the privacy_statement_uri of this GalleryImageProperties.

        The privacy statement uri.

        :param privacy_statement_uri: The privacy_statement_uri of this GalleryImageProperties.
        :type privacy_statement_uri: str
        """

        self._privacy_statement_uri = privacy_statement_uri

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this GalleryImageProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this GalleryImageProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this GalleryImageProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this GalleryImageProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def purchase_plan(self):
        """Gets the purchase_plan of this GalleryImageProperties.


        :return: The purchase_plan of this GalleryImageProperties.
        :rtype: ImagePurchasePlan
        """
        return self._purchase_plan

    @purchase_plan.setter
    def purchase_plan(self, purchase_plan):
        """Sets the purchase_plan of this GalleryImageProperties.


        :param purchase_plan: The purchase_plan of this GalleryImageProperties.
        :type purchase_plan: ImagePurchasePlan
        """

        self._purchase_plan = purchase_plan

    @property
    def recommended(self):
        """Gets the recommended of this GalleryImageProperties.


        :return: The recommended of this GalleryImageProperties.
        :rtype: RecommendedMachineConfiguration
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """Sets the recommended of this GalleryImageProperties.


        :param recommended: The recommended of this GalleryImageProperties.
        :type recommended: RecommendedMachineConfiguration
        """

        self._recommended = recommended

    @property
    def release_note_uri(self):
        """Gets the release_note_uri of this GalleryImageProperties.

        The release note uri.

        :return: The release_note_uri of this GalleryImageProperties.
        :rtype: str
        """
        return self._release_note_uri

    @release_note_uri.setter
    def release_note_uri(self, release_note_uri):
        """Sets the release_note_uri of this GalleryImageProperties.

        The release note uri.

        :param release_note_uri: The release_note_uri of this GalleryImageProperties.
        :type release_note_uri: str
        """

        self._release_note_uri = release_note_uri
