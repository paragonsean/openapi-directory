# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, regional_replica_count: int=None, storage_account_type: str=None):
        """TargetRegion - a model defined in OpenAPI

        :param name: The name of this TargetRegion.
        :param regional_replica_count: The regional_replica_count of this TargetRegion.
        :param storage_account_type: The storage_account_type of this TargetRegion.
        """
        self.openapi_types = {
            'name': str,
            'regional_replica_count': int,
            'storage_account_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'regional_replica_count': 'regionalReplicaCount',
            'storage_account_type': 'storageAccountType'
        }

        self._name = name
        self._regional_replica_count = regional_replica_count
        self._storage_account_type = storage_account_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetRegion of this TargetRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TargetRegion.

        The name of the region.

        :return: The name of this TargetRegion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TargetRegion.

        The name of the region.

        :param name: The name of this TargetRegion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def regional_replica_count(self):
        """Gets the regional_replica_count of this TargetRegion.

        The number of replicas of the Image Version to be created per region. This property is updatable.

        :return: The regional_replica_count of this TargetRegion.
        :rtype: int
        """
        return self._regional_replica_count

    @regional_replica_count.setter
    def regional_replica_count(self, regional_replica_count):
        """Sets the regional_replica_count of this TargetRegion.

        The number of replicas of the Image Version to be created per region. This property is updatable.

        :param regional_replica_count: The regional_replica_count of this TargetRegion.
        :type regional_replica_count: int
        """

        self._regional_replica_count = regional_replica_count

    @property
    def storage_account_type(self):
        """Gets the storage_account_type of this TargetRegion.

        Specifies the storage account type to be used to store the image. This property is not updatable.

        :return: The storage_account_type of this TargetRegion.
        :rtype: str
        """
        return self._storage_account_type

    @storage_account_type.setter
    def storage_account_type(self, storage_account_type):
        """Sets the storage_account_type of this TargetRegion.

        Specifies the storage account type to be used to store the image. This property is not updatable.

        :param storage_account_type: The storage_account_type of this TargetRegion.
        :type storage_account_type: str
        """
        allowed_values = ["Standard_LRS", "Standard_ZRS"]  # noqa: E501
        if storage_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_account_type` ({0}), must be one of {1}"
                .format(storage_account_type, allowed_values)
            )

        self._storage_account_type = storage_account_type
