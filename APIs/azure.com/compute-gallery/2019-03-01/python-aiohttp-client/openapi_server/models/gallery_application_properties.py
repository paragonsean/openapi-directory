# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GalleryApplicationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, end_of_life_date: datetime=None, eula: str=None, privacy_statement_uri: str=None, release_note_uri: str=None, supported_os_type: str=None):
        """GalleryApplicationProperties - a model defined in OpenAPI

        :param description: The description of this GalleryApplicationProperties.
        :param end_of_life_date: The end_of_life_date of this GalleryApplicationProperties.
        :param eula: The eula of this GalleryApplicationProperties.
        :param privacy_statement_uri: The privacy_statement_uri of this GalleryApplicationProperties.
        :param release_note_uri: The release_note_uri of this GalleryApplicationProperties.
        :param supported_os_type: The supported_os_type of this GalleryApplicationProperties.
        """
        self.openapi_types = {
            'description': str,
            'end_of_life_date': datetime,
            'eula': str,
            'privacy_statement_uri': str,
            'release_note_uri': str,
            'supported_os_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'end_of_life_date': 'endOfLifeDate',
            'eula': 'eula',
            'privacy_statement_uri': 'privacyStatementUri',
            'release_note_uri': 'releaseNoteUri',
            'supported_os_type': 'supportedOSType'
        }

        self._description = description
        self._end_of_life_date = end_of_life_date
        self._eula = eula
        self._privacy_statement_uri = privacy_statement_uri
        self._release_note_uri = release_note_uri
        self._supported_os_type = supported_os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GalleryApplicationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GalleryApplicationProperties of this GalleryApplicationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GalleryApplicationProperties.

        The description of this gallery Application Definition resource. This property is updatable.

        :return: The description of this GalleryApplicationProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GalleryApplicationProperties.

        The description of this gallery Application Definition resource. This property is updatable.

        :param description: The description of this GalleryApplicationProperties.
        :type description: str
        """

        self._description = description

    @property
    def end_of_life_date(self):
        """Gets the end_of_life_date of this GalleryApplicationProperties.

        The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.

        :return: The end_of_life_date of this GalleryApplicationProperties.
        :rtype: datetime
        """
        return self._end_of_life_date

    @end_of_life_date.setter
    def end_of_life_date(self, end_of_life_date):
        """Sets the end_of_life_date of this GalleryApplicationProperties.

        The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.

        :param end_of_life_date: The end_of_life_date of this GalleryApplicationProperties.
        :type end_of_life_date: datetime
        """

        self._end_of_life_date = end_of_life_date

    @property
    def eula(self):
        """Gets the eula of this GalleryApplicationProperties.

        The Eula agreement for the gallery Application Definition.

        :return: The eula of this GalleryApplicationProperties.
        :rtype: str
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this GalleryApplicationProperties.

        The Eula agreement for the gallery Application Definition.

        :param eula: The eula of this GalleryApplicationProperties.
        :type eula: str
        """

        self._eula = eula

    @property
    def privacy_statement_uri(self):
        """Gets the privacy_statement_uri of this GalleryApplicationProperties.

        The privacy statement uri.

        :return: The privacy_statement_uri of this GalleryApplicationProperties.
        :rtype: str
        """
        return self._privacy_statement_uri

    @privacy_statement_uri.setter
    def privacy_statement_uri(self, privacy_statement_uri):
        """Sets the privacy_statement_uri of this GalleryApplicationProperties.

        The privacy statement uri.

        :param privacy_statement_uri: The privacy_statement_uri of this GalleryApplicationProperties.
        :type privacy_statement_uri: str
        """

        self._privacy_statement_uri = privacy_statement_uri

    @property
    def release_note_uri(self):
        """Gets the release_note_uri of this GalleryApplicationProperties.

        The release note uri.

        :return: The release_note_uri of this GalleryApplicationProperties.
        :rtype: str
        """
        return self._release_note_uri

    @release_note_uri.setter
    def release_note_uri(self, release_note_uri):
        """Sets the release_note_uri of this GalleryApplicationProperties.

        The release note uri.

        :param release_note_uri: The release_note_uri of this GalleryApplicationProperties.
        :type release_note_uri: str
        """

        self._release_note_uri = release_note_uri

    @property
    def supported_os_type(self):
        """Gets the supported_os_type of this GalleryApplicationProperties.

        This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :return: The supported_os_type of this GalleryApplicationProperties.
        :rtype: str
        """
        return self._supported_os_type

    @supported_os_type.setter
    def supported_os_type(self, supported_os_type):
        """Sets the supported_os_type of this GalleryApplicationProperties.

        This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**

        :param supported_os_type: The supported_os_type of this GalleryApplicationProperties.
        :type supported_os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if supported_os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `supported_os_type` ({0}), must be one of {1}"
                .format(supported_os_type, allowed_values)
            )

        self._supported_os_type = supported_os_type
