/*
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TargetRegion;
import org.openapitools.client.model.UserArtifactSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The publishing profile of a gallery Image Version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:47.648167-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GalleryApplicationVersionPublishingProfile {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ENABLE_HEALTH_CHECK = "enableHealthCheck";
  @SerializedName(SERIALIZED_NAME_ENABLE_HEALTH_CHECK)
  private Boolean enableHealthCheck;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private UserArtifactSource source;

  public static final String SERIALIZED_NAME_END_OF_LIFE_DATE = "endOfLifeDate";
  @SerializedName(SERIALIZED_NAME_END_OF_LIFE_DATE)
  private OffsetDateTime endOfLifeDate;

  public static final String SERIALIZED_NAME_EXCLUDE_FROM_LATEST = "excludeFromLatest";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FROM_LATEST)
  private Boolean excludeFromLatest;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "publishedDate";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private OffsetDateTime publishedDate;

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  /**
   * Specifies the storage account type to be used to store the image. This property is not updatable.
   */
  @JsonAdapter(StorageAccountTypeEnum.Adapter.class)
  public enum StorageAccountTypeEnum {
    LRS("Standard_LRS"),
    
    ZRS("Standard_ZRS");

    private String value;

    StorageAccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageAccountTypeEnum fromValue(String value) {
      for (StorageAccountTypeEnum b : StorageAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageAccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageAccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageAccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageAccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE = "storageAccountType";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE)
  private StorageAccountTypeEnum storageAccountType;

  public static final String SERIALIZED_NAME_TARGET_REGIONS = "targetRegions";
  @SerializedName(SERIALIZED_NAME_TARGET_REGIONS)
  private List<TargetRegion> targetRegions = new ArrayList<>();

  public GalleryApplicationVersionPublishingProfile() {
  }

  public GalleryApplicationVersionPublishingProfile(
     OffsetDateTime publishedDate
  ) {
    this();
    this.publishedDate = publishedDate;
  }

  public GalleryApplicationVersionPublishingProfile contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public GalleryApplicationVersionPublishingProfile enableHealthCheck(Boolean enableHealthCheck) {
    this.enableHealthCheck = enableHealthCheck;
    return this;
  }

  /**
   * Optional. Whether or not this application reports health.
   * @return enableHealthCheck
   */
  @javax.annotation.Nullable
  public Boolean getEnableHealthCheck() {
    return enableHealthCheck;
  }

  public void setEnableHealthCheck(Boolean enableHealthCheck) {
    this.enableHealthCheck = enableHealthCheck;
  }


  public GalleryApplicationVersionPublishingProfile source(UserArtifactSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public UserArtifactSource getSource() {
    return source;
  }

  public void setSource(UserArtifactSource source) {
    this.source = source;
  }


  public GalleryApplicationVersionPublishingProfile endOfLifeDate(OffsetDateTime endOfLifeDate) {
    this.endOfLifeDate = endOfLifeDate;
    return this;
  }

  /**
   * The end of life date of the gallery Image Version. This property can be used for decommissioning purposes. This property is updatable.
   * @return endOfLifeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndOfLifeDate() {
    return endOfLifeDate;
  }

  public void setEndOfLifeDate(OffsetDateTime endOfLifeDate) {
    this.endOfLifeDate = endOfLifeDate;
  }


  public GalleryApplicationVersionPublishingProfile excludeFromLatest(Boolean excludeFromLatest) {
    this.excludeFromLatest = excludeFromLatest;
    return this;
  }

  /**
   * If set to true, Virtual Machines deployed from the latest version of the Image Definition won&#39;t use this Image Version.
   * @return excludeFromLatest
   */
  @javax.annotation.Nullable
  public Boolean getExcludeFromLatest() {
    return excludeFromLatest;
  }

  public void setExcludeFromLatest(Boolean excludeFromLatest) {
    this.excludeFromLatest = excludeFromLatest;
  }


  /**
   * The timestamp for when the gallery Image Version is published.
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedDate() {
    return publishedDate;
  }



  public GalleryApplicationVersionPublishingProfile replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  public GalleryApplicationVersionPublishingProfile storageAccountType(StorageAccountTypeEnum storageAccountType) {
    this.storageAccountType = storageAccountType;
    return this;
  }

  /**
   * Specifies the storage account type to be used to store the image. This property is not updatable.
   * @return storageAccountType
   */
  @javax.annotation.Nullable
  public StorageAccountTypeEnum getStorageAccountType() {
    return storageAccountType;
  }

  public void setStorageAccountType(StorageAccountTypeEnum storageAccountType) {
    this.storageAccountType = storageAccountType;
  }


  public GalleryApplicationVersionPublishingProfile targetRegions(List<TargetRegion> targetRegions) {
    this.targetRegions = targetRegions;
    return this;
  }

  public GalleryApplicationVersionPublishingProfile addTargetRegionsItem(TargetRegion targetRegionsItem) {
    if (this.targetRegions == null) {
      this.targetRegions = new ArrayList<>();
    }
    this.targetRegions.add(targetRegionsItem);
    return this;
  }

  /**
   * The target regions where the Image Version is going to be replicated to. This property is updatable.
   * @return targetRegions
   */
  @javax.annotation.Nullable
  public List<TargetRegion> getTargetRegions() {
    return targetRegions;
  }

  public void setTargetRegions(List<TargetRegion> targetRegions) {
    this.targetRegions = targetRegions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryApplicationVersionPublishingProfile galleryApplicationVersionPublishingProfile = (GalleryApplicationVersionPublishingProfile) o;
    return Objects.equals(this.contentType, galleryApplicationVersionPublishingProfile.contentType) &&
        Objects.equals(this.enableHealthCheck, galleryApplicationVersionPublishingProfile.enableHealthCheck) &&
        Objects.equals(this.source, galleryApplicationVersionPublishingProfile.source) &&
        Objects.equals(this.endOfLifeDate, galleryApplicationVersionPublishingProfile.endOfLifeDate) &&
        Objects.equals(this.excludeFromLatest, galleryApplicationVersionPublishingProfile.excludeFromLatest) &&
        Objects.equals(this.publishedDate, galleryApplicationVersionPublishingProfile.publishedDate) &&
        Objects.equals(this.replicaCount, galleryApplicationVersionPublishingProfile.replicaCount) &&
        Objects.equals(this.storageAccountType, galleryApplicationVersionPublishingProfile.storageAccountType) &&
        Objects.equals(this.targetRegions, galleryApplicationVersionPublishingProfile.targetRegions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, enableHealthCheck, source, endOfLifeDate, excludeFromLatest, publishedDate, replicaCount, storageAccountType, targetRegions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryApplicationVersionPublishingProfile {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    enableHealthCheck: ").append(toIndentedString(enableHealthCheck)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    endOfLifeDate: ").append(toIndentedString(endOfLifeDate)).append("\n");
    sb.append("    excludeFromLatest: ").append(toIndentedString(excludeFromLatest)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    storageAccountType: ").append(toIndentedString(storageAccountType)).append("\n");
    sb.append("    targetRegions: ").append(toIndentedString(targetRegions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endOfLifeDate");
    openapiFields.add("excludeFromLatest");
    openapiFields.add("publishedDate");
    openapiFields.add("replicaCount");
    openapiFields.add("storageAccountType");
    openapiFields.add("targetRegions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalleryApplicationVersionPublishingProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalleryApplicationVersionPublishingProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalleryApplicationVersionPublishingProfile is not found in the empty JSON string", GalleryApplicationVersionPublishingProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalleryApplicationVersionPublishingProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalleryApplicationVersionPublishingProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GalleryApplicationVersionPublishingProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the required field `source`
      UserArtifactSource.validateJsonElement(jsonObj.get("source"));
      if ((jsonObj.get("storageAccountType") != null && !jsonObj.get("storageAccountType").isJsonNull()) && !jsonObj.get("storageAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountType").toString()));
      }
      // validate the optional field `storageAccountType`
      if (jsonObj.get("storageAccountType") != null && !jsonObj.get("storageAccountType").isJsonNull()) {
        StorageAccountTypeEnum.validateJsonElement(jsonObj.get("storageAccountType"));
      }
      if (jsonObj.get("targetRegions") != null && !jsonObj.get("targetRegions").isJsonNull()) {
        JsonArray jsonArraytargetRegions = jsonObj.getAsJsonArray("targetRegions");
        if (jsonArraytargetRegions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetRegions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetRegions` to be an array in the JSON string but got `%s`", jsonObj.get("targetRegions").toString()));
          }

          // validate the optional field `targetRegions` (array)
          for (int i = 0; i < jsonArraytargetRegions.size(); i++) {
            TargetRegion.validateJsonElement(jsonArraytargetRegions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalleryApplicationVersionPublishingProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalleryApplicationVersionPublishingProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalleryApplicationVersionPublishingProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalleryApplicationVersionPublishingProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<GalleryApplicationVersionPublishingProfile>() {
           @Override
           public void write(JsonWriter out, GalleryApplicationVersionPublishingProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalleryApplicationVersionPublishingProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalleryApplicationVersionPublishingProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalleryApplicationVersionPublishingProfile
   * @throws IOException if the JSON string is invalid with respect to GalleryApplicationVersionPublishingProfile
   */
  public static GalleryApplicationVersionPublishingProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalleryApplicationVersionPublishingProfile.class);
  }

  /**
   * Convert an instance of GalleryApplicationVersionPublishingProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

