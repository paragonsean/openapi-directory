/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGalleriesApi_H
#define OAI_OAIGalleriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIGallery.h"
#include "OAIGalleryList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGalleriesApi : public QObject {
    Q_OBJECT

public:
    OAIGalleriesApi(const int timeOut = 0);
    ~OAIGalleriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  gallery OAIGallery [required]
    */
    virtual void galleriesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &api_version, const OAIGallery &gallery);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleriesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleriesGet(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleriesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleriesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void galleriesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void galleriesDeleteCallback(OAIHttpRequestWorker *worker);
    void galleriesGetCallback(OAIHttpRequestWorker *worker);
    void galleriesListCallback(OAIHttpRequestWorker *worker);
    void galleriesListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void galleriesCreateOrUpdateSignal(OAIGallery summary);
    void galleriesDeleteSignal();
    void galleriesGetSignal(OAIGallery summary);
    void galleriesListSignal(OAIGalleryList summary);
    void galleriesListByResourceGroupSignal(OAIGalleryList summary);


    void galleriesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGallery summary);
    void galleriesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void galleriesGetSignalFull(OAIHttpRequestWorker *worker, OAIGallery summary);
    void galleriesListSignalFull(OAIHttpRequestWorker *worker, OAIGalleryList summary);
    void galleriesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIGalleryList summary);

    Q_DECL_DEPRECATED_X("Use galleriesCreateOrUpdateSignalError() instead")
    void galleriesCreateOrUpdateSignalE(OAIGallery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesCreateOrUpdateSignalError(OAIGallery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesDeleteSignalError() instead")
    void galleriesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesGetSignalError() instead")
    void galleriesGetSignalE(OAIGallery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesGetSignalError(OAIGallery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesListSignalError() instead")
    void galleriesListSignalE(OAIGalleryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesListSignalError(OAIGalleryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesListByResourceGroupSignalError() instead")
    void galleriesListByResourceGroupSignalE(OAIGalleryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesListByResourceGroupSignalError(OAIGalleryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use galleriesCreateOrUpdateSignalErrorFull() instead")
    void galleriesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesDeleteSignalErrorFull() instead")
    void galleriesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesGetSignalErrorFull() instead")
    void galleriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesListSignalErrorFull() instead")
    void galleriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleriesListByResourceGroupSignalErrorFull() instead")
    void galleriesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleriesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
