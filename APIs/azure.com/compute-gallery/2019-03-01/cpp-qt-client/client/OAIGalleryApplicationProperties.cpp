/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryApplicationProperties::OAIGalleryApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryApplicationProperties::OAIGalleryApplicationProperties() {
    this->initializeModel();
}

OAIGalleryApplicationProperties::~OAIGalleryApplicationProperties() {}

void OAIGalleryApplicationProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_of_life_date_isSet = false;
    m_end_of_life_date_isValid = false;

    m_eula_isSet = false;
    m_eula_isValid = false;

    m_privacy_statement_uri_isSet = false;
    m_privacy_statement_uri_isValid = false;

    m_release_note_uri_isSet = false;
    m_release_note_uri_isValid = false;

    m_supported_os_type_isSet = false;
    m_supported_os_type_isValid = false;
}

void OAIGalleryApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryApplicationProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_of_life_date_isValid = ::OpenAPI::fromJsonValue(m_end_of_life_date, json[QString("endOfLifeDate")]);
    m_end_of_life_date_isSet = !json[QString("endOfLifeDate")].isNull() && m_end_of_life_date_isValid;

    m_eula_isValid = ::OpenAPI::fromJsonValue(m_eula, json[QString("eula")]);
    m_eula_isSet = !json[QString("eula")].isNull() && m_eula_isValid;

    m_privacy_statement_uri_isValid = ::OpenAPI::fromJsonValue(m_privacy_statement_uri, json[QString("privacyStatementUri")]);
    m_privacy_statement_uri_isSet = !json[QString("privacyStatementUri")].isNull() && m_privacy_statement_uri_isValid;

    m_release_note_uri_isValid = ::OpenAPI::fromJsonValue(m_release_note_uri, json[QString("releaseNoteUri")]);
    m_release_note_uri_isSet = !json[QString("releaseNoteUri")].isNull() && m_release_note_uri_isValid;

    m_supported_os_type_isValid = ::OpenAPI::fromJsonValue(m_supported_os_type, json[QString("supportedOSType")]);
    m_supported_os_type_isSet = !json[QString("supportedOSType")].isNull() && m_supported_os_type_isValid;
}

QString OAIGalleryApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_of_life_date_isSet) {
        obj.insert(QString("endOfLifeDate"), ::OpenAPI::toJsonValue(m_end_of_life_date));
    }
    if (m_eula_isSet) {
        obj.insert(QString("eula"), ::OpenAPI::toJsonValue(m_eula));
    }
    if (m_privacy_statement_uri_isSet) {
        obj.insert(QString("privacyStatementUri"), ::OpenAPI::toJsonValue(m_privacy_statement_uri));
    }
    if (m_release_note_uri_isSet) {
        obj.insert(QString("releaseNoteUri"), ::OpenAPI::toJsonValue(m_release_note_uri));
    }
    if (m_supported_os_type_isSet) {
        obj.insert(QString("supportedOSType"), ::OpenAPI::toJsonValue(m_supported_os_type));
    }
    return obj;
}

QString OAIGalleryApplicationProperties::getDescription() const {
    return m_description;
}
void OAIGalleryApplicationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGalleryApplicationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGalleryApplicationProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIGalleryApplicationProperties::getEndOfLifeDate() const {
    return m_end_of_life_date;
}
void OAIGalleryApplicationProperties::setEndOfLifeDate(const QDateTime &end_of_life_date) {
    m_end_of_life_date = end_of_life_date;
    m_end_of_life_date_isSet = true;
}

bool OAIGalleryApplicationProperties::is_end_of_life_date_Set() const{
    return m_end_of_life_date_isSet;
}

bool OAIGalleryApplicationProperties::is_end_of_life_date_Valid() const{
    return m_end_of_life_date_isValid;
}

QString OAIGalleryApplicationProperties::getEula() const {
    return m_eula;
}
void OAIGalleryApplicationProperties::setEula(const QString &eula) {
    m_eula = eula;
    m_eula_isSet = true;
}

bool OAIGalleryApplicationProperties::is_eula_Set() const{
    return m_eula_isSet;
}

bool OAIGalleryApplicationProperties::is_eula_Valid() const{
    return m_eula_isValid;
}

QString OAIGalleryApplicationProperties::getPrivacyStatementUri() const {
    return m_privacy_statement_uri;
}
void OAIGalleryApplicationProperties::setPrivacyStatementUri(const QString &privacy_statement_uri) {
    m_privacy_statement_uri = privacy_statement_uri;
    m_privacy_statement_uri_isSet = true;
}

bool OAIGalleryApplicationProperties::is_privacy_statement_uri_Set() const{
    return m_privacy_statement_uri_isSet;
}

bool OAIGalleryApplicationProperties::is_privacy_statement_uri_Valid() const{
    return m_privacy_statement_uri_isValid;
}

QString OAIGalleryApplicationProperties::getReleaseNoteUri() const {
    return m_release_note_uri;
}
void OAIGalleryApplicationProperties::setReleaseNoteUri(const QString &release_note_uri) {
    m_release_note_uri = release_note_uri;
    m_release_note_uri_isSet = true;
}

bool OAIGalleryApplicationProperties::is_release_note_uri_Set() const{
    return m_release_note_uri_isSet;
}

bool OAIGalleryApplicationProperties::is_release_note_uri_Valid() const{
    return m_release_note_uri_isValid;
}

QString OAIGalleryApplicationProperties::getSupportedOsType() const {
    return m_supported_os_type;
}
void OAIGalleryApplicationProperties::setSupportedOsType(const QString &supported_os_type) {
    m_supported_os_type = supported_os_type;
    m_supported_os_type_isSet = true;
}

bool OAIGalleryApplicationProperties::is_supported_os_type_Set() const{
    return m_supported_os_type_isSet;
}

bool OAIGalleryApplicationProperties::is_supported_os_type_Valid() const{
    return m_supported_os_type_isValid;
}

bool OAIGalleryApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_life_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_statement_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_note_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_supported_os_type_isValid && true;
}

} // namespace OpenAPI
