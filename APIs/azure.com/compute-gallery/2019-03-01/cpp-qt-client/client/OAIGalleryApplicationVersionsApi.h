/**
 * SharedImageGalleryServiceClient
 * Shared Image Gallery Service Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGalleryApplicationVersionsApi_H
#define OAI_OAIGalleryApplicationVersionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIGalleryApplicationVersion.h"
#include "OAIGalleryApplicationVersionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGalleryApplicationVersionsApi : public QObject {
    Q_OBJECT

public:
    OAIGalleryApplicationVersionsApi(const int timeOut = 0);
    ~OAIGalleryApplicationVersionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  gallery_application_version_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  gallery_application_version OAIGalleryApplicationVersion [required]
    */
    virtual void galleryApplicationVersionsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &gallery_application_version_name, const QString &api_version, const OAIGalleryApplicationVersion &gallery_application_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  gallery_application_version_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleryApplicationVersionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &gallery_application_version_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  gallery_application_version_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void galleryApplicationVersionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &gallery_application_version_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  gallery_name QString [required]
    * @param[in]  gallery_application_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void galleryApplicationVersionsListByGalleryApplication(const QString &subscription_id, const QString &resource_group_name, const QString &gallery_name, const QString &gallery_application_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void galleryApplicationVersionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationVersionsDeleteCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationVersionsGetCallback(OAIHttpRequestWorker *worker);
    void galleryApplicationVersionsListByGalleryApplicationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void galleryApplicationVersionsCreateOrUpdateSignal(OAIGalleryApplicationVersion summary);
    void galleryApplicationVersionsDeleteSignal();
    void galleryApplicationVersionsGetSignal(OAIGalleryApplicationVersion summary);
    void galleryApplicationVersionsListByGalleryApplicationSignal(OAIGalleryApplicationVersionList summary);


    void galleryApplicationVersionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplicationVersion summary);
    void galleryApplicationVersionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void galleryApplicationVersionsGetSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplicationVersion summary);
    void galleryApplicationVersionsListByGalleryApplicationSignalFull(OAIHttpRequestWorker *worker, OAIGalleryApplicationVersionList summary);

    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsCreateOrUpdateSignalError() instead")
    void galleryApplicationVersionsCreateOrUpdateSignalE(OAIGalleryApplicationVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsCreateOrUpdateSignalError(OAIGalleryApplicationVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsDeleteSignalError() instead")
    void galleryApplicationVersionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsGetSignalError() instead")
    void galleryApplicationVersionsGetSignalE(OAIGalleryApplicationVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsGetSignalError(OAIGalleryApplicationVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsListByGalleryApplicationSignalError() instead")
    void galleryApplicationVersionsListByGalleryApplicationSignalE(OAIGalleryApplicationVersionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsListByGalleryApplicationSignalError(OAIGalleryApplicationVersionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsCreateOrUpdateSignalErrorFull() instead")
    void galleryApplicationVersionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsDeleteSignalErrorFull() instead")
    void galleryApplicationVersionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsGetSignalErrorFull() instead")
    void galleryApplicationVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use galleryApplicationVersionsListByGalleryApplicationSignalErrorFull() instead")
    void galleryApplicationVersionsListByGalleryApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void galleryApplicationVersionsListByGalleryApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
