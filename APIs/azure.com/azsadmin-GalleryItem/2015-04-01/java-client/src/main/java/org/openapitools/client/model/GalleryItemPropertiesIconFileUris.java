/*
 * GalleryManagementClient
 * The Admin Gallery Management Client.
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URIs to icon files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:26.367896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GalleryItemPropertiesIconFileUris {
  public static final String SERIALIZED_NAME_HERO = "hero";
  @SerializedName(SERIALIZED_NAME_HERO)
  private String hero;

  public static final String SERIALIZED_NAME_LARGE = "large";
  @SerializedName(SERIALIZED_NAME_LARGE)
  private String large;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_SMALL = "small";
  @SerializedName(SERIALIZED_NAME_SMALL)
  private String small;

  public static final String SERIALIZED_NAME_WIDE = "wide";
  @SerializedName(SERIALIZED_NAME_WIDE)
  private String wide;

  public GalleryItemPropertiesIconFileUris() {
  }

  public GalleryItemPropertiesIconFileUris hero(String hero) {
    this.hero = hero;
    return this;
  }

  /**
   * URI to the hero icon.
   * @return hero
   */
  @javax.annotation.Nullable
  public String getHero() {
    return hero;
  }

  public void setHero(String hero) {
    this.hero = hero;
  }


  public GalleryItemPropertiesIconFileUris large(String large) {
    this.large = large;
    return this;
  }

  /**
   * URI to the large icon.
   * @return large
   */
  @javax.annotation.Nullable
  public String getLarge() {
    return large;
  }

  public void setLarge(String large) {
    this.large = large;
  }


  public GalleryItemPropertiesIconFileUris medium(String medium) {
    this.medium = medium;
    return this;
  }

  /**
   * URI to the medium icon.
   * @return medium
   */
  @javax.annotation.Nullable
  public String getMedium() {
    return medium;
  }

  public void setMedium(String medium) {
    this.medium = medium;
  }


  public GalleryItemPropertiesIconFileUris small(String small) {
    this.small = small;
    return this;
  }

  /**
   * URI to the small icon.
   * @return small
   */
  @javax.annotation.Nullable
  public String getSmall() {
    return small;
  }

  public void setSmall(String small) {
    this.small = small;
  }


  public GalleryItemPropertiesIconFileUris wide(String wide) {
    this.wide = wide;
    return this;
  }

  /**
   * URI to the wide icon.
   * @return wide
   */
  @javax.annotation.Nullable
  public String getWide() {
    return wide;
  }

  public void setWide(String wide) {
    this.wide = wide;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryItemPropertiesIconFileUris galleryItemPropertiesIconFileUris = (GalleryItemPropertiesIconFileUris) o;
    return Objects.equals(this.hero, galleryItemPropertiesIconFileUris.hero) &&
        Objects.equals(this.large, galleryItemPropertiesIconFileUris.large) &&
        Objects.equals(this.medium, galleryItemPropertiesIconFileUris.medium) &&
        Objects.equals(this.small, galleryItemPropertiesIconFileUris.small) &&
        Objects.equals(this.wide, galleryItemPropertiesIconFileUris.wide);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hero, large, medium, small, wide);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryItemPropertiesIconFileUris {\n");
    sb.append("    hero: ").append(toIndentedString(hero)).append("\n");
    sb.append("    large: ").append(toIndentedString(large)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    wide: ").append(toIndentedString(wide)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hero");
    openapiFields.add("large");
    openapiFields.add("medium");
    openapiFields.add("small");
    openapiFields.add("wide");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalleryItemPropertiesIconFileUris
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalleryItemPropertiesIconFileUris.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalleryItemPropertiesIconFileUris is not found in the empty JSON string", GalleryItemPropertiesIconFileUris.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalleryItemPropertiesIconFileUris.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalleryItemPropertiesIconFileUris` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hero") != null && !jsonObj.get("hero").isJsonNull()) && !jsonObj.get("hero").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hero` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hero").toString()));
      }
      if ((jsonObj.get("large") != null && !jsonObj.get("large").isJsonNull()) && !jsonObj.get("large").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `large` to be a primitive type in the JSON string but got `%s`", jsonObj.get("large").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if ((jsonObj.get("small") != null && !jsonObj.get("small").isJsonNull()) && !jsonObj.get("small").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `small` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small").toString()));
      }
      if ((jsonObj.get("wide") != null && !jsonObj.get("wide").isJsonNull()) && !jsonObj.get("wide").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wide` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wide").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalleryItemPropertiesIconFileUris.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalleryItemPropertiesIconFileUris' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalleryItemPropertiesIconFileUris> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalleryItemPropertiesIconFileUris.class));

       return (TypeAdapter<T>) new TypeAdapter<GalleryItemPropertiesIconFileUris>() {
           @Override
           public void write(JsonWriter out, GalleryItemPropertiesIconFileUris value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalleryItemPropertiesIconFileUris read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalleryItemPropertiesIconFileUris given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalleryItemPropertiesIconFileUris
   * @throws IOException if the JSON string is invalid with respect to GalleryItemPropertiesIconFileUris
   */
  public static GalleryItemPropertiesIconFileUris fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalleryItemPropertiesIconFileUris.class);
  }

  /**
   * Convert an instance of GalleryItemPropertiesIconFileUris to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

