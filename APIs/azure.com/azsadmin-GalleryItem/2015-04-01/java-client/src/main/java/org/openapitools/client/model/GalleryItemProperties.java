/*
 * GalleryManagementClient
 * The Admin Gallery Management Client.
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.DefinitionTemplates;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.GalleryItemPropertiesIconFileUris;
import org.openapitools.client.model.ImageGroup;
import org.openapitools.client.model.LinkProperties;
import org.openapitools.client.model.MarketingMaterial;
import org.openapitools.client.model.OpenProperty;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a gallery item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:26.367896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GalleryItemProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private Map<String, String> additionalProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<Artifact> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_IDS = "categoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<String> categoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEFINITION_TEMPLATES = "definitionTemplates";
  @SerializedName(SERIALIZED_NAME_DEFINITION_TEMPLATES)
  private DefinitionTemplates definitionTemplates;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<Filter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON_FILE_URIS = "iconFileUris";
  @SerializedName(SERIALIZED_NAME_ICON_FILE_URIS)
  private GalleryItemPropertiesIconFileUris iconFileUris;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private String identity;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImageGroup> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_DISPLAY_NAME = "itemDisplayName";
  @SerializedName(SERIALIZED_NAME_ITEM_DISPLAY_NAME)
  private String itemDisplayName;

  public static final String SERIALIZED_NAME_ITEM_NAME = "itemName";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  /**
   * Describes the type of the gallery item, either GalleryItem or ItemGroup.
   */
  @JsonAdapter(ItemTypeEnum.Adapter.class)
  public enum ItemTypeEnum {
    GALLERY_ITEM("GalleryItem"),
    
    ITEM_GROUP("ItemGroup");

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemTypeEnum fromValue(String value) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private ItemTypeEnum itemType;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<LinkProperties> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_SUMMARY = "longSummary";
  @SerializedName(SERIALIZED_NAME_LONG_SUMMARY)
  private String longSummary;

  public static final String SERIALIZED_NAME_MARKETING_MATERIAL = "marketingMaterial";
  @SerializedName(SERIALIZED_NAME_MARKETING_MATERIAL)
  private MarketingMaterial marketingMaterial;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OpenProperty metadata;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Product> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_PUBLISHER_DISPLAY_NAME = "publisherDisplayName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_DISPLAY_NAME)
  private String publisherDisplayName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_SCREENSHOT_URIS = "screenshotUris";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_URIS)
  private List<String> screenshotUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_UI_DEFINITION_URI = "uiDefinitionUri";
  @SerializedName(SERIALIZED_NAME_UI_DEFINITION_URI)
  private String uiDefinitionUri;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GalleryItemProperties() {
  }

  public GalleryItemProperties(
     Map<String, String> additionalProperties, 
     List<Artifact> artifacts, 
     List<String> categoryIds, 
     List<Filter> filters, 
     List<ImageGroup> images, 
     List<LinkProperties> links, 
     List<Product> products, 
     Map<String, String> properties, 
     List<String> screenshotUris
  ) {
    this();
    this.additionalProperties = additionalProperties;
    this.artifacts = artifacts;
    this.categoryIds = categoryIds;
    this.filters = filters;
    this.images = images;
    this.links = links;
    this.products = products;
    this.properties = properties;
    this.screenshotUris = screenshotUris;
  }

  /**
   * List of additional properties provided for the item.
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalProperties() {
    return additionalProperties;
  }



  /**
   * List of artifacts for the gallery item.
   * @return artifacts
   */
  @javax.annotation.Nullable
  public List<Artifact> getArtifacts() {
    return artifacts;
  }



  /**
   * List of category IDs the gallery item belongs to.
   * @return categoryIds
   */
  @javax.annotation.Nullable
  public List<String> getCategoryIds() {
    return categoryIds;
  }



  public GalleryItemProperties changedTime(OffsetDateTime changedTime) {
    this.changedTime = changedTime;
    return this;
  }

  /**
   * Last update time of gallery item.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }

  public void setChangedTime(OffsetDateTime changedTime) {
    this.changedTime = changedTime;
  }


  public GalleryItemProperties createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The date and time that the gallery item was created.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public GalleryItemProperties definitionTemplates(DefinitionTemplates definitionTemplates) {
    this.definitionTemplates = definitionTemplates;
    return this;
  }

  /**
   * Get definitionTemplates
   * @return definitionTemplates
   */
  @javax.annotation.Nullable
  public DefinitionTemplates getDefinitionTemplates() {
    return definitionTemplates;
  }

  public void setDefinitionTemplates(DefinitionTemplates definitionTemplates) {
    this.definitionTemplates = definitionTemplates;
  }


  public GalleryItemProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the gallery item.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * List of filters for the gallery item.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<Filter> getFilters() {
    return filters;
  }



  public GalleryItemProperties iconFileUris(GalleryItemPropertiesIconFileUris iconFileUris) {
    this.iconFileUris = iconFileUris;
    return this;
  }

  /**
   * Get iconFileUris
   * @return iconFileUris
   */
  @javax.annotation.Nullable
  public GalleryItemPropertiesIconFileUris getIconFileUris() {
    return iconFileUris;
  }

  public void setIconFileUris(GalleryItemPropertiesIconFileUris iconFileUris) {
    this.iconFileUris = iconFileUris;
  }


  public GalleryItemProperties identity(String identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Identity of the gallery item.
   * @return identity
   */
  @javax.annotation.Nullable
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }


  /**
   * List of images.
   * @return images
   */
  @javax.annotation.Nullable
  public List<ImageGroup> getImages() {
    return images;
  }



  public GalleryItemProperties itemDisplayName(String itemDisplayName) {
    this.itemDisplayName = itemDisplayName;
    return this;
  }

  /**
   * Displayed name in the portal.
   * @return itemDisplayName
   */
  @javax.annotation.Nullable
  public String getItemDisplayName() {
    return itemDisplayName;
  }

  public void setItemDisplayName(String itemDisplayName) {
    this.itemDisplayName = itemDisplayName;
  }


  public GalleryItemProperties itemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * The display name for the gallery item, for the locale of the request.
   * @return itemName
   */
  @javax.annotation.Nullable
  public String getItemName() {
    return itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }


  public GalleryItemProperties itemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * Describes the type of the gallery item, either GalleryItem or ItemGroup.
   * @return itemType
   */
  @javax.annotation.Nullable
  public ItemTypeEnum getItemType() {
    return itemType;
  }

  public void setItemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
  }


  /**
   * Links provided for the item.
   * @return links
   */
  @javax.annotation.Nullable
  public List<LinkProperties> getLinks() {
    return links;
  }



  public GalleryItemProperties longSummary(String longSummary) {
    this.longSummary = longSummary;
    return this;
  }

  /**
   * Long summary of the gallery item.
   * @return longSummary
   */
  @javax.annotation.Nullable
  public String getLongSummary() {
    return longSummary;
  }

  public void setLongSummary(String longSummary) {
    this.longSummary = longSummary;
  }


  public GalleryItemProperties marketingMaterial(MarketingMaterial marketingMaterial) {
    this.marketingMaterial = marketingMaterial;
    return this;
  }

  /**
   * Get marketingMaterial
   * @return marketingMaterial
   */
  @javax.annotation.Nullable
  public MarketingMaterial getMarketingMaterial() {
    return marketingMaterial;
  }

  public void setMarketingMaterial(MarketingMaterial marketingMaterial) {
    this.marketingMaterial = marketingMaterial;
  }


  public GalleryItemProperties metadata(OpenProperty metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public OpenProperty getMetadata() {
    return metadata;
  }

  public void setMetadata(OpenProperty metadata) {
    this.metadata = metadata;
  }


  /**
   * List of products.
   * @return products
   */
  @javax.annotation.Nullable
  public List<Product> getProducts() {
    return products;
  }



  /**
   * List of properties provided for the gallery item.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }



  public GalleryItemProperties publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * The publisher of the gallery item.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public GalleryItemProperties publisherDisplayName(String publisherDisplayName) {
    this.publisherDisplayName = publisherDisplayName;
    return this;
  }

  /**
   * Display name of the publisher.
   * @return publisherDisplayName
   */
  @javax.annotation.Nullable
  public String getPublisherDisplayName() {
    return publisherDisplayName;
  }

  public void setPublisherDisplayName(String publisherDisplayName) {
    this.publisherDisplayName = publisherDisplayName;
  }


  public GalleryItemProperties resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * Resource group name the gallery item belongs too.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  /**
   * List of screenshot image URIs provided for the item.
   * @return screenshotUris
   */
  @javax.annotation.Nullable
  public List<String> getScreenshotUris() {
    return screenshotUris;
  }



  public GalleryItemProperties summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Short summary of the gallery item.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public GalleryItemProperties uiDefinitionUri(String uiDefinitionUri) {
    this.uiDefinitionUri = uiDefinitionUri;
    return this;
  }

  /**
   * The URL of the view definition object that defines the UI information that is used when an instance of the gallery item resource definition is created.
   * @return uiDefinitionUri
   */
  @javax.annotation.Nullable
  public String getUiDefinitionUri() {
    return uiDefinitionUri;
  }

  public void setUiDefinitionUri(String uiDefinitionUri) {
    this.uiDefinitionUri = uiDefinitionUri;
  }


  public GalleryItemProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version identifier of the gallery item, in Major.Minor.Build format.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryItemProperties galleryItemProperties = (GalleryItemProperties) o;
    return Objects.equals(this.additionalProperties, galleryItemProperties.additionalProperties) &&
        Objects.equals(this.artifacts, galleryItemProperties.artifacts) &&
        Objects.equals(this.categoryIds, galleryItemProperties.categoryIds) &&
        Objects.equals(this.changedTime, galleryItemProperties.changedTime) &&
        Objects.equals(this.createdTime, galleryItemProperties.createdTime) &&
        Objects.equals(this.definitionTemplates, galleryItemProperties.definitionTemplates) &&
        Objects.equals(this.description, galleryItemProperties.description) &&
        Objects.equals(this.filters, galleryItemProperties.filters) &&
        Objects.equals(this.iconFileUris, galleryItemProperties.iconFileUris) &&
        Objects.equals(this.identity, galleryItemProperties.identity) &&
        Objects.equals(this.images, galleryItemProperties.images) &&
        Objects.equals(this.itemDisplayName, galleryItemProperties.itemDisplayName) &&
        Objects.equals(this.itemName, galleryItemProperties.itemName) &&
        Objects.equals(this.itemType, galleryItemProperties.itemType) &&
        Objects.equals(this.links, galleryItemProperties.links) &&
        Objects.equals(this.longSummary, galleryItemProperties.longSummary) &&
        Objects.equals(this.marketingMaterial, galleryItemProperties.marketingMaterial) &&
        Objects.equals(this.metadata, galleryItemProperties.metadata) &&
        Objects.equals(this.products, galleryItemProperties.products) &&
        Objects.equals(this.properties, galleryItemProperties.properties) &&
        Objects.equals(this.publisher, galleryItemProperties.publisher) &&
        Objects.equals(this.publisherDisplayName, galleryItemProperties.publisherDisplayName) &&
        Objects.equals(this.resourceGroupName, galleryItemProperties.resourceGroupName) &&
        Objects.equals(this.screenshotUris, galleryItemProperties.screenshotUris) &&
        Objects.equals(this.summary, galleryItemProperties.summary) &&
        Objects.equals(this.uiDefinitionUri, galleryItemProperties.uiDefinitionUri) &&
        Objects.equals(this.version, galleryItemProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, artifacts, categoryIds, changedTime, createdTime, definitionTemplates, description, filters, iconFileUris, identity, images, itemDisplayName, itemName, itemType, links, longSummary, marketingMaterial, metadata, products, properties, publisher, publisherDisplayName, resourceGroupName, screenshotUris, summary, uiDefinitionUri, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryItemProperties {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    definitionTemplates: ").append(toIndentedString(definitionTemplates)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    iconFileUris: ").append(toIndentedString(iconFileUris)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    itemDisplayName: ").append(toIndentedString(itemDisplayName)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    longSummary: ").append(toIndentedString(longSummary)).append("\n");
    sb.append("    marketingMaterial: ").append(toIndentedString(marketingMaterial)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    publisherDisplayName: ").append(toIndentedString(publisherDisplayName)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    screenshotUris: ").append(toIndentedString(screenshotUris)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    uiDefinitionUri: ").append(toIndentedString(uiDefinitionUri)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("artifacts");
    openapiFields.add("categoryIds");
    openapiFields.add("changedTime");
    openapiFields.add("createdTime");
    openapiFields.add("definitionTemplates");
    openapiFields.add("description");
    openapiFields.add("filters");
    openapiFields.add("iconFileUris");
    openapiFields.add("identity");
    openapiFields.add("images");
    openapiFields.add("itemDisplayName");
    openapiFields.add("itemName");
    openapiFields.add("itemType");
    openapiFields.add("links");
    openapiFields.add("longSummary");
    openapiFields.add("marketingMaterial");
    openapiFields.add("metadata");
    openapiFields.add("products");
    openapiFields.add("properties");
    openapiFields.add("publisher");
    openapiFields.add("publisherDisplayName");
    openapiFields.add("resourceGroupName");
    openapiFields.add("screenshotUris");
    openapiFields.add("summary");
    openapiFields.add("uiDefinitionUri");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GalleryItemProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GalleryItemProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GalleryItemProperties is not found in the empty JSON string", GalleryItemProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GalleryItemProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GalleryItemProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        JsonArray jsonArrayartifacts = jsonObj.getAsJsonArray("artifacts");
        if (jsonArrayartifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
          }

          // validate the optional field `artifacts` (array)
          for (int i = 0; i < jsonArrayartifacts.size(); i++) {
            Artifact.validateJsonElement(jsonArrayartifacts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryIds") != null && !jsonObj.get("categoryIds").isJsonNull() && !jsonObj.get("categoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryIds").toString()));
      }
      // validate the optional field `definitionTemplates`
      if (jsonObj.get("definitionTemplates") != null && !jsonObj.get("definitionTemplates").isJsonNull()) {
        DefinitionTemplates.validateJsonElement(jsonObj.get("definitionTemplates"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            Filter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      // validate the optional field `iconFileUris`
      if (jsonObj.get("iconFileUris") != null && !jsonObj.get("iconFileUris").isJsonNull()) {
        GalleryItemPropertiesIconFileUris.validateJsonElement(jsonObj.get("iconFileUris"));
      }
      if ((jsonObj.get("identity") != null && !jsonObj.get("identity").isJsonNull()) && !jsonObj.get("identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            ImageGroup.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("itemDisplayName") != null && !jsonObj.get("itemDisplayName").isJsonNull()) && !jsonObj.get("itemDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDisplayName").toString()));
      }
      if ((jsonObj.get("itemName") != null && !jsonObj.get("itemName").isJsonNull()) && !jsonObj.get("itemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemName").toString()));
      }
      if ((jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // validate the optional field `itemType`
      if (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) {
        ItemTypeEnum.validateJsonElement(jsonObj.get("itemType"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            LinkProperties.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("longSummary") != null && !jsonObj.get("longSummary").isJsonNull()) && !jsonObj.get("longSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longSummary").toString()));
      }
      // validate the optional field `marketingMaterial`
      if (jsonObj.get("marketingMaterial") != null && !jsonObj.get("marketingMaterial").isJsonNull()) {
        MarketingMaterial.validateJsonElement(jsonObj.get("marketingMaterial"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        OpenProperty.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            Product.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("publisherDisplayName") != null && !jsonObj.get("publisherDisplayName").isJsonNull()) && !jsonObj.get("publisherDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherDisplayName").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("screenshotUris") != null && !jsonObj.get("screenshotUris").isJsonNull() && !jsonObj.get("screenshotUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshotUris` to be an array in the JSON string but got `%s`", jsonObj.get("screenshotUris").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("uiDefinitionUri") != null && !jsonObj.get("uiDefinitionUri").isJsonNull()) && !jsonObj.get("uiDefinitionUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiDefinitionUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiDefinitionUri").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GalleryItemProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GalleryItemProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GalleryItemProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GalleryItemProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GalleryItemProperties>() {
           @Override
           public void write(JsonWriter out, GalleryItemProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GalleryItemProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GalleryItemProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GalleryItemProperties
   * @throws IOException if the JSON string is invalid with respect to GalleryItemProperties
   */
  public static GalleryItemProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GalleryItemProperties.class);
  }

  /**
   * Convert an instance of GalleryItemProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

