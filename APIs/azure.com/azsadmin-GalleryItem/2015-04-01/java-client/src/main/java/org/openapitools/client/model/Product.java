/*
 * GalleryManagementClient
 * The Admin Gallery Management Client.
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OfferDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a product item read from the gallery item package.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:26.367896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LEGAL_TERMS = "legalTerms";
  @SerializedName(SERIALIZED_NAME_LEGAL_TERMS)
  private String legalTerms;

  public static final String SERIALIZED_NAME_LEGAL_TERMS_URI = "legalTermsUri";
  @SerializedName(SERIALIZED_NAME_LEGAL_TERMS_URI)
  private String legalTermsUri;

  public static final String SERIALIZED_NAME_OFFER_DETAILS = "offerDetails";
  @SerializedName(SERIALIZED_NAME_OFFER_DETAILS)
  private OfferDetails offerDetails;

  public static final String SERIALIZED_NAME_PRICING_DETAILS_URI = "pricingDetailsUri";
  @SerializedName(SERIALIZED_NAME_PRICING_DETAILS_URI)
  private String pricingDetailsUri;

  public static final String SERIALIZED_NAME_PRIVACY_POLICY = "privacyPolicy";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY)
  private String privacyPolicy;

  public static final String SERIALIZED_NAME_PRIVACY_POLICY_URI = "privacyPolicyUri";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY_URI)
  private String privacyPolicyUri;

  public static final String SERIALIZED_NAME_PUBLISHER_DISPLAY_NAME = "publisherDisplayName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_DISPLAY_NAME)
  private String publisherDisplayName;

  public Product() {
  }

  public Product displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the product.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Product legalTerms(String legalTerms) {
    this.legalTerms = legalTerms;
    return this;
  }

  /**
   * Legal terms of the product.
   * @return legalTerms
   */
  @javax.annotation.Nullable
  public String getLegalTerms() {
    return legalTerms;
  }

  public void setLegalTerms(String legalTerms) {
    this.legalTerms = legalTerms;
  }


  public Product legalTermsUri(String legalTermsUri) {
    this.legalTermsUri = legalTermsUri;
    return this;
  }

  /**
   * URI to the legal terms of the product.
   * @return legalTermsUri
   */
  @javax.annotation.Nullable
  public String getLegalTermsUri() {
    return legalTermsUri;
  }

  public void setLegalTermsUri(String legalTermsUri) {
    this.legalTermsUri = legalTermsUri;
  }


  public Product offerDetails(OfferDetails offerDetails) {
    this.offerDetails = offerDetails;
    return this;
  }

  /**
   * Get offerDetails
   * @return offerDetails
   */
  @javax.annotation.Nullable
  public OfferDetails getOfferDetails() {
    return offerDetails;
  }

  public void setOfferDetails(OfferDetails offerDetails) {
    this.offerDetails = offerDetails;
  }


  public Product pricingDetailsUri(String pricingDetailsUri) {
    this.pricingDetailsUri = pricingDetailsUri;
    return this;
  }

  /**
   * URI to the pricing details of the product.
   * @return pricingDetailsUri
   */
  @javax.annotation.Nullable
  public String getPricingDetailsUri() {
    return pricingDetailsUri;
  }

  public void setPricingDetailsUri(String pricingDetailsUri) {
    this.pricingDetailsUri = pricingDetailsUri;
  }


  public Product privacyPolicy(String privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
    return this;
  }

  /**
   * Privacy policy of the product.
   * @return privacyPolicy
   */
  @javax.annotation.Nullable
  public String getPrivacyPolicy() {
    return privacyPolicy;
  }

  public void setPrivacyPolicy(String privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
  }


  public Product privacyPolicyUri(String privacyPolicyUri) {
    this.privacyPolicyUri = privacyPolicyUri;
    return this;
  }

  /**
   * URI to the privacy policy of the product.
   * @return privacyPolicyUri
   */
  @javax.annotation.Nullable
  public String getPrivacyPolicyUri() {
    return privacyPolicyUri;
  }

  public void setPrivacyPolicyUri(String privacyPolicyUri) {
    this.privacyPolicyUri = privacyPolicyUri;
  }


  public Product publisherDisplayName(String publisherDisplayName) {
    this.publisherDisplayName = publisherDisplayName;
    return this;
  }

  /**
   * Publisher display name of the product.
   * @return publisherDisplayName
   */
  @javax.annotation.Nullable
  public String getPublisherDisplayName() {
    return publisherDisplayName;
  }

  public void setPublisherDisplayName(String publisherDisplayName) {
    this.publisherDisplayName = publisherDisplayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.displayName, product.displayName) &&
        Objects.equals(this.legalTerms, product.legalTerms) &&
        Objects.equals(this.legalTermsUri, product.legalTermsUri) &&
        Objects.equals(this.offerDetails, product.offerDetails) &&
        Objects.equals(this.pricingDetailsUri, product.pricingDetailsUri) &&
        Objects.equals(this.privacyPolicy, product.privacyPolicy) &&
        Objects.equals(this.privacyPolicyUri, product.privacyPolicyUri) &&
        Objects.equals(this.publisherDisplayName, product.publisherDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, legalTerms, legalTermsUri, offerDetails, pricingDetailsUri, privacyPolicy, privacyPolicyUri, publisherDisplayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    legalTerms: ").append(toIndentedString(legalTerms)).append("\n");
    sb.append("    legalTermsUri: ").append(toIndentedString(legalTermsUri)).append("\n");
    sb.append("    offerDetails: ").append(toIndentedString(offerDetails)).append("\n");
    sb.append("    pricingDetailsUri: ").append(toIndentedString(pricingDetailsUri)).append("\n");
    sb.append("    privacyPolicy: ").append(toIndentedString(privacyPolicy)).append("\n");
    sb.append("    privacyPolicyUri: ").append(toIndentedString(privacyPolicyUri)).append("\n");
    sb.append("    publisherDisplayName: ").append(toIndentedString(publisherDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("legalTerms");
    openapiFields.add("legalTermsUri");
    openapiFields.add("offerDetails");
    openapiFields.add("pricingDetailsUri");
    openapiFields.add("privacyPolicy");
    openapiFields.add("privacyPolicyUri");
    openapiFields.add("publisherDisplayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("legalTerms") != null && !jsonObj.get("legalTerms").isJsonNull()) && !jsonObj.get("legalTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalTerms").toString()));
      }
      if ((jsonObj.get("legalTermsUri") != null && !jsonObj.get("legalTermsUri").isJsonNull()) && !jsonObj.get("legalTermsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalTermsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalTermsUri").toString()));
      }
      // validate the optional field `offerDetails`
      if (jsonObj.get("offerDetails") != null && !jsonObj.get("offerDetails").isJsonNull()) {
        OfferDetails.validateJsonElement(jsonObj.get("offerDetails"));
      }
      if ((jsonObj.get("pricingDetailsUri") != null && !jsonObj.get("pricingDetailsUri").isJsonNull()) && !jsonObj.get("pricingDetailsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingDetailsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingDetailsUri").toString()));
      }
      if ((jsonObj.get("privacyPolicy") != null && !jsonObj.get("privacyPolicy").isJsonNull()) && !jsonObj.get("privacyPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyPolicy").toString()));
      }
      if ((jsonObj.get("privacyPolicyUri") != null && !jsonObj.get("privacyPolicyUri").isJsonNull()) && !jsonObj.get("privacyPolicyUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyPolicyUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyPolicyUri").toString()));
      }
      if ((jsonObj.get("publisherDisplayName") != null && !jsonObj.get("publisherDisplayName").isJsonNull()) && !jsonObj.get("publisherDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

