/**
 * GalleryManagementClient
 * The Admin Gallery Management Client.
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Plan from './Plan';

/**
 * The OfferDetails model module.
 * @module model/OfferDetails
 * @version 2015-04-01
 */
class OfferDetails {
    /**
     * Constructs a new <code>OfferDetails</code>.
     * Represents a offer details item read from the gallery item package.
     * @alias module:model/OfferDetails
     */
    constructor() { 
        
        OfferDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OfferDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferDetails} obj Optional instance to populate.
     * @return {module:model/OfferDetails} The populated <code>OfferDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferDetails();

            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('plans')) {
                obj['plans'] = ApiClient.convertToType(data['plans'], [Plan]);
            }
            if (data.hasOwnProperty('publisherId')) {
                obj['publisherId'] = ApiClient.convertToType(data['publisherId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        if (data['plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plans'])) {
                throw new Error("Expected the field `plans` to be an array in the JSON data but got " + data['plans']);
            }
            // validate the optional field `plans` (array)
            for (const item of data['plans']) {
                Plan.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publisherId'] && !(typeof data['publisherId'] === 'string' || data['publisherId'] instanceof String)) {
            throw new Error("Expected the field `publisherId` to be a primitive type in the JSON string but got " + data['publisherId']);
        }

        return true;
    }


}



/**
 * Offer identifier.
 * @member {String} offerId
 */
OfferDetails.prototype['offerId'] = undefined;

/**
 * List of plans available for the offer.
 * @member {Array.<module:model/Plan>} plans
 */
OfferDetails.prototype['plans'] = undefined;

/**
 * Publisher identifier.
 * @member {String} publisherId
 */
OfferDetails.prototype['publisherId'] = undefined;






export default OfferDetails;

