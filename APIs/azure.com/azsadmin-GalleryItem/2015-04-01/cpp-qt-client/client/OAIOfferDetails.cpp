/**
 * GalleryManagementClient
 * The Admin Gallery Management Client.
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferDetails::OAIOfferDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferDetails::OAIOfferDetails() {
    this->initializeModel();
}

OAIOfferDetails::~OAIOfferDetails() {}

void OAIOfferDetails::initializeModel() {

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_plans_isSet = false;
    m_plans_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;
}

void OAIOfferDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferDetails::fromJsonObject(QJsonObject json) {

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_plans_isValid = ::OpenAPI::fromJsonValue(m_plans, json[QString("plans")]);
    m_plans_isSet = !json[QString("plans")].isNull() && m_plans_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("publisherId")]);
    m_publisher_id_isSet = !json[QString("publisherId")].isNull() && m_publisher_id_isValid;
}

QString OAIOfferDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_plans.size() > 0) {
        obj.insert(QString("plans"), ::OpenAPI::toJsonValue(m_plans));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("publisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    return obj;
}

QString OAIOfferDetails::getOfferId() const {
    return m_offer_id;
}
void OAIOfferDetails::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIOfferDetails::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOfferDetails::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<OAIPlan> OAIOfferDetails::getPlans() const {
    return m_plans;
}
void OAIOfferDetails::setPlans(const QList<OAIPlan> &plans) {
    m_plans = plans;
    m_plans_isSet = true;
}

bool OAIOfferDetails::is_plans_Set() const{
    return m_plans_isSet;
}

bool OAIOfferDetails::is_plans_Valid() const{
    return m_plans_isValid;
}

QString OAIOfferDetails::getPublisherId() const {
    return m_publisher_id;
}
void OAIOfferDetails::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIOfferDetails::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIOfferDetails::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

bool OAIOfferDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
