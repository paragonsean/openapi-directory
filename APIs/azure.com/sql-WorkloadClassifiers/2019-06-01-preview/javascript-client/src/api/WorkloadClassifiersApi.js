/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WorkloadClassifier from '../model/WorkloadClassifier';
import WorkloadClassifierListResult from '../model/WorkloadClassifierListResult';

/**
* WorkloadClassifiers service.
* @module api/WorkloadClassifiersApi
* @version 2019-06-01-preview
*/
export default class WorkloadClassifiersApi {

    /**
    * Constructs a new WorkloadClassifiersApi. 
    * @alias module:api/WorkloadClassifiersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workloadClassifiersCreateOrUpdate operation.
     * @callback module:api/WorkloadClassifiersApi~workloadClassifiersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkloadClassifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a workload classifier.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} workloadGroupName The name of the workload group from which to receive the classifier from.
     * @param {String} workloadClassifierName The name of the workload classifier to create/update.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/WorkloadClassifier} parameters The properties of the workload classifier.
     * @param {module:api/WorkloadClassifiersApi~workloadClassifiersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkloadClassifier}
     */
    workloadClassifiersCreateOrUpdate(resourceGroupName, serverName, databaseName, workloadGroupName, workloadClassifierName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'workloadGroupName' is set
      if (workloadGroupName === undefined || workloadGroupName === null) {
        throw new Error("Missing the required parameter 'workloadGroupName' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'workloadClassifierName' is set
      if (workloadClassifierName === undefined || workloadClassifierName === null) {
        throw new Error("Missing the required parameter 'workloadClassifierName' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workloadClassifiersCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling workloadClassifiersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'workloadGroupName': workloadGroupName,
        'workloadClassifierName': workloadClassifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkloadClassifier;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workloadClassifiersDelete operation.
     * @callback module:api/WorkloadClassifiersApi~workloadClassifiersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workload classifier.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} workloadGroupName The name of the workload group from which to receive the classifier from.
     * @param {String} workloadClassifierName The name of the workload classifier to delete.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/WorkloadClassifiersApi~workloadClassifiersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workloadClassifiersDelete(resourceGroupName, serverName, databaseName, workloadGroupName, workloadClassifierName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'workloadGroupName' is set
      if (workloadGroupName === undefined || workloadGroupName === null) {
        throw new Error("Missing the required parameter 'workloadGroupName' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'workloadClassifierName' is set
      if (workloadClassifierName === undefined || workloadClassifierName === null) {
        throw new Error("Missing the required parameter 'workloadClassifierName' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workloadClassifiersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workloadClassifiersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'workloadGroupName': workloadGroupName,
        'workloadClassifierName': workloadClassifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workloadClassifiersGet operation.
     * @callback module:api/WorkloadClassifiersApi~workloadClassifiersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkloadClassifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workload classifier
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} workloadGroupName The name of the workload group from which to receive the classifier from.
     * @param {String} workloadClassifierName The name of the workload classifier.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/WorkloadClassifiersApi~workloadClassifiersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkloadClassifier}
     */
    workloadClassifiersGet(resourceGroupName, serverName, databaseName, workloadGroupName, workloadClassifierName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'workloadGroupName' is set
      if (workloadGroupName === undefined || workloadGroupName === null) {
        throw new Error("Missing the required parameter 'workloadGroupName' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'workloadClassifierName' is set
      if (workloadClassifierName === undefined || workloadClassifierName === null) {
        throw new Error("Missing the required parameter 'workloadClassifierName' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workloadClassifiersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workloadClassifiersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'workloadGroupName': workloadGroupName,
        'workloadClassifierName': workloadClassifierName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkloadClassifier;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workloadClassifiersListByWorkloadGroup operation.
     * @callback module:api/WorkloadClassifiersApi~workloadClassifiersListByWorkloadGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkloadClassifierListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of workload classifiers for a workload group
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} workloadGroupName The name of the workload group from which to receive the classifiers from.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/WorkloadClassifiersApi~workloadClassifiersListByWorkloadGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkloadClassifierListResult}
     */
    workloadClassifiersListByWorkloadGroup(resourceGroupName, serverName, databaseName, workloadGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workloadClassifiersListByWorkloadGroup");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling workloadClassifiersListByWorkloadGroup");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling workloadClassifiersListByWorkloadGroup");
      }
      // verify the required parameter 'workloadGroupName' is set
      if (workloadGroupName === undefined || workloadGroupName === null) {
        throw new Error("Missing the required parameter 'workloadGroupName' when calling workloadClassifiersListByWorkloadGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workloadClassifiersListByWorkloadGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workloadClassifiersListByWorkloadGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'workloadGroupName': workloadGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkloadClassifierListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
