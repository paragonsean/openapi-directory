/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkloadClassifierProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkloadClassifierProperties::OAIWorkloadClassifierProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkloadClassifierProperties::OAIWorkloadClassifierProperties() {
    this->initializeModel();
}

OAIWorkloadClassifierProperties::~OAIWorkloadClassifierProperties() {}

void OAIWorkloadClassifierProperties::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_member_name_isSet = false;
    m_member_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIWorkloadClassifierProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkloadClassifierProperties::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_member_name_isValid = ::OpenAPI::fromJsonValue(m_member_name, json[QString("memberName")]);
    m_member_name_isSet = !json[QString("memberName")].isNull() && m_member_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIWorkloadClassifierProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkloadClassifierProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_member_name_isSet) {
        obj.insert(QString("memberName"), ::OpenAPI::toJsonValue(m_member_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIWorkloadClassifierProperties::getContext() const {
    return m_context;
}
void OAIWorkloadClassifierProperties::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_context_Set() const{
    return m_context_isSet;
}

bool OAIWorkloadClassifierProperties::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIWorkloadClassifierProperties::getEndTime() const {
    return m_end_time;
}
void OAIWorkloadClassifierProperties::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkloadClassifierProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIWorkloadClassifierProperties::getImportance() const {
    return m_importance;
}
void OAIWorkloadClassifierProperties::setImportance(const QString &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAIWorkloadClassifierProperties::is_importance_Valid() const{
    return m_importance_isValid;
}

QString OAIWorkloadClassifierProperties::getLabel() const {
    return m_label;
}
void OAIWorkloadClassifierProperties::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_label_Set() const{
    return m_label_isSet;
}

bool OAIWorkloadClassifierProperties::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIWorkloadClassifierProperties::getMemberName() const {
    return m_member_name;
}
void OAIWorkloadClassifierProperties::setMemberName(const QString &member_name) {
    m_member_name = member_name;
    m_member_name_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_member_name_Set() const{
    return m_member_name_isSet;
}

bool OAIWorkloadClassifierProperties::is_member_name_Valid() const{
    return m_member_name_isValid;
}

QString OAIWorkloadClassifierProperties::getStartTime() const {
    return m_start_time;
}
void OAIWorkloadClassifierProperties::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkloadClassifierProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkloadClassifierProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIWorkloadClassifierProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkloadClassifierProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_member_name_isValid && true;
}

} // namespace OpenAPI
