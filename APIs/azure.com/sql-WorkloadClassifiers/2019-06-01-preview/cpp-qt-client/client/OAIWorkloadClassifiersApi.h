/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkloadClassifiersApi_H
#define OAI_OAIWorkloadClassifiersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWorkloadClassifier.h"
#include "OAIWorkloadClassifierListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkloadClassifiersApi : public QObject {
    Q_OBJECT

public:
    OAIWorkloadClassifiersApi(const int timeOut = 0);
    ~OAIWorkloadClassifiersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  workload_classifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIWorkloadClassifier [required]
    */
    virtual void workloadClassifiersCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &workload_classifier_name, const QString &subscription_id, const QString &api_version, const OAIWorkloadClassifier &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  workload_classifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadClassifiersDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &workload_classifier_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  workload_classifier_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadClassifiersGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &workload_classifier_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadClassifiersListByWorkloadGroup(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workloadClassifiersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workloadClassifiersDeleteCallback(OAIHttpRequestWorker *worker);
    void workloadClassifiersGetCallback(OAIHttpRequestWorker *worker);
    void workloadClassifiersListByWorkloadGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workloadClassifiersCreateOrUpdateSignal(OAIWorkloadClassifier summary);
    void workloadClassifiersDeleteSignal();
    void workloadClassifiersGetSignal(OAIWorkloadClassifier summary);
    void workloadClassifiersListByWorkloadGroupSignal(OAIWorkloadClassifierListResult summary);


    void workloadClassifiersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadClassifier summary);
    void workloadClassifiersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workloadClassifiersGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadClassifier summary);
    void workloadClassifiersListByWorkloadGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadClassifierListResult summary);

    Q_DECL_DEPRECATED_X("Use workloadClassifiersCreateOrUpdateSignalError() instead")
    void workloadClassifiersCreateOrUpdateSignalE(OAIWorkloadClassifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersCreateOrUpdateSignalError(OAIWorkloadClassifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersDeleteSignalError() instead")
    void workloadClassifiersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersGetSignalError() instead")
    void workloadClassifiersGetSignalE(OAIWorkloadClassifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersGetSignalError(OAIWorkloadClassifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersListByWorkloadGroupSignalError() instead")
    void workloadClassifiersListByWorkloadGroupSignalE(OAIWorkloadClassifierListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersListByWorkloadGroupSignalError(OAIWorkloadClassifierListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workloadClassifiersCreateOrUpdateSignalErrorFull() instead")
    void workloadClassifiersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersDeleteSignalErrorFull() instead")
    void workloadClassifiersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersGetSignalErrorFull() instead")
    void workloadClassifiersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadClassifiersListByWorkloadGroupSignalErrorFull() instead")
    void workloadClassifiersListByWorkloadGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadClassifiersListByWorkloadGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
