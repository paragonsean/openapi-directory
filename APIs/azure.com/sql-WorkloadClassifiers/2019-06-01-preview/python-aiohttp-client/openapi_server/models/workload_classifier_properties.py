# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkloadClassifierProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, end_time: str=None, importance: str=None, label: str=None, member_name: str=None, start_time: str=None):
        """WorkloadClassifierProperties - a model defined in OpenAPI

        :param context: The context of this WorkloadClassifierProperties.
        :param end_time: The end_time of this WorkloadClassifierProperties.
        :param importance: The importance of this WorkloadClassifierProperties.
        :param label: The label of this WorkloadClassifierProperties.
        :param member_name: The member_name of this WorkloadClassifierProperties.
        :param start_time: The start_time of this WorkloadClassifierProperties.
        """
        self.openapi_types = {
            'context': str,
            'end_time': str,
            'importance': str,
            'label': str,
            'member_name': str,
            'start_time': str
        }

        self.attribute_map = {
            'context': 'context',
            'end_time': 'endTime',
            'importance': 'importance',
            'label': 'label',
            'member_name': 'memberName',
            'start_time': 'startTime'
        }

        self._context = context
        self._end_time = end_time
        self._importance = importance
        self._label = label
        self._member_name = member_name
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadClassifierProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadClassifierProperties of this WorkloadClassifierProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this WorkloadClassifierProperties.

        The workload classifier context.

        :return: The context of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this WorkloadClassifierProperties.

        The workload classifier context.

        :param context: The context of this WorkloadClassifierProperties.
        :type context: str
        """

        self._context = context

    @property
    def end_time(self):
        """Gets the end_time of this WorkloadClassifierProperties.

        The workload classifier end time for classification.

        :return: The end_time of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkloadClassifierProperties.

        The workload classifier end time for classification.

        :param end_time: The end_time of this WorkloadClassifierProperties.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def importance(self):
        """Gets the importance of this WorkloadClassifierProperties.

        The workload classifier importance.

        :return: The importance of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this WorkloadClassifierProperties.

        The workload classifier importance.

        :param importance: The importance of this WorkloadClassifierProperties.
        :type importance: str
        """

        self._importance = importance

    @property
    def label(self):
        """Gets the label of this WorkloadClassifierProperties.

        The workload classifier label.

        :return: The label of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WorkloadClassifierProperties.

        The workload classifier label.

        :param label: The label of this WorkloadClassifierProperties.
        :type label: str
        """

        self._label = label

    @property
    def member_name(self):
        """Gets the member_name of this WorkloadClassifierProperties.

        The workload classifier member name.

        :return: The member_name of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._member_name

    @member_name.setter
    def member_name(self, member_name):
        """Sets the member_name of this WorkloadClassifierProperties.

        The workload classifier member name.

        :param member_name: The member_name of this WorkloadClassifierProperties.
        :type member_name: str
        """
        if member_name is None:
            raise ValueError("Invalid value for `member_name`, must not be `None`")

        self._member_name = member_name

    @property
    def start_time(self):
        """Gets the start_time of this WorkloadClassifierProperties.

        The workload classifier start time for classification.

        :return: The start_time of this WorkloadClassifierProperties.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkloadClassifierProperties.

        The workload classifier start time for classification.

        :param start_time: The start_time of this WorkloadClassifierProperties.
        :type start_time: str
        """

        self._start_time = start_time
