/**
 * Azure SQL Server API spec
 * The Azure SQL Server management API provides a RESTful set of web services that interact with Azure SQL Server services to manage your databases. The API enables users update server connection policy.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerConnectionPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerConnectionPolicyProperties::OAIServerConnectionPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerConnectionPolicyProperties::OAIServerConnectionPolicyProperties() {
    this->initializeModel();
}

OAIServerConnectionPolicyProperties::~OAIServerConnectionPolicyProperties() {}

void OAIServerConnectionPolicyProperties::initializeModel() {

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;
}

void OAIServerConnectionPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerConnectionPolicyProperties::fromJsonObject(QJsonObject json) {

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;
}

QString OAIServerConnectionPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerConnectionPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    return obj;
}

QString OAIServerConnectionPolicyProperties::getConnectionType() const {
    return m_connection_type;
}
void OAIServerConnectionPolicyProperties::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIServerConnectionPolicyProperties::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIServerConnectionPolicyProperties::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

bool OAIServerConnectionPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerConnectionPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_type_isValid && true;
}

} // namespace OpenAPI
