/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ClassicAdministrator from './model/ClassicAdministrator';
import ClassicAdministratorListResult from './model/ClassicAdministratorListResult';
import ClassicAdministratorProperties from './model/ClassicAdministratorProperties';
import ClassicAdministratorsApi from './api/ClassicAdministratorsApi';


/**
* Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AuthorizationManagementClient = require('index'); // See note below*.
* var xxxSvc = new AuthorizationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AuthorizationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AuthorizationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AuthorizationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2015-06-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ClassicAdministrator model constructor.
     * @property {module:model/ClassicAdministrator}
     */
    ClassicAdministrator,

    /**
     * The ClassicAdministratorListResult model constructor.
     * @property {module:model/ClassicAdministratorListResult}
     */
    ClassicAdministratorListResult,

    /**
     * The ClassicAdministratorProperties model constructor.
     * @property {module:model/ClassicAdministratorProperties}
     */
    ClassicAdministratorProperties,

    /**
    * The ClassicAdministratorsApi service constructor.
    * @property {module:api/ClassicAdministratorsApi}
    */
    ClassicAdministratorsApi
};
