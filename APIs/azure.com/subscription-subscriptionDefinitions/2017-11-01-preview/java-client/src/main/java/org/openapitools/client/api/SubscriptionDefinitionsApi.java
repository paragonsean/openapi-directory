/*
 * SubscriptionDefinitionsClient
 * Subscription definitions client provides an interface to create, modify and retrieve azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationListResult;
import org.openapitools.client.model.SubscriptionDefinition;
import org.openapitools.client.model.SubscriptionDefinitionList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionDefinitionsCreate
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param body The subscription definition creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsCreateCall(String subscriptionDefinitionName, String apiVersion, SubscriptionDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/subscriptionDefinitions/{subscriptionDefinitionName}"
            .replace("{" + "subscriptionDefinitionName" + "}", localVarApiClient.escapeString(subscriptionDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDefinitionsCreateValidateBeforeCall(String subscriptionDefinitionName, String apiVersion, SubscriptionDefinition body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionDefinitionName' is set
        if (subscriptionDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionDefinitionName' when calling subscriptionDefinitionsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDefinitionsCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionDefinitionsCreate(Async)");
        }

        return subscriptionDefinitionsCreateCall(subscriptionDefinitionName, apiVersion, body, _callback);

    }

    /**
     * 
     * Create an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param body The subscription definition creation. (required)
     * @return SubscriptionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDefinition subscriptionDefinitionsCreate(String subscriptionDefinitionName, String apiVersion, SubscriptionDefinition body) throws ApiException {
        ApiResponse<SubscriptionDefinition> localVarResp = subscriptionDefinitionsCreateWithHttpInfo(subscriptionDefinitionName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param body The subscription definition creation. (required)
     * @return ApiResponse&lt;SubscriptionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDefinition> subscriptionDefinitionsCreateWithHttpInfo(String subscriptionDefinitionName, String apiVersion, SubscriptionDefinition body) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDefinitionsCreateValidateBeforeCall(subscriptionDefinitionName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param body The subscription definition creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsCreateAsync(String subscriptionDefinitionName, String apiVersion, SubscriptionDefinition body, final ApiCallback<SubscriptionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDefinitionsCreateValidateBeforeCall(subscriptionDefinitionName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDefinitionsGet
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsGetCall(String subscriptionDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/subscriptionDefinitions/{subscriptionDefinitionName}"
            .replace("{" + "subscriptionDefinitionName" + "}", localVarApiClient.escapeString(subscriptionDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDefinitionsGetValidateBeforeCall(String subscriptionDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionDefinitionName' is set
        if (subscriptionDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionDefinitionName' when calling subscriptionDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDefinitionsGet(Async)");
        }

        return subscriptionDefinitionsGetCall(subscriptionDefinitionName, apiVersion, _callback);

    }

    /**
     * 
     * Get an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return SubscriptionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDefinition subscriptionDefinitionsGet(String subscriptionDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<SubscriptionDefinition> localVarResp = subscriptionDefinitionsGetWithHttpInfo(subscriptionDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;SubscriptionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDefinition> subscriptionDefinitionsGetWithHttpInfo(String subscriptionDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDefinitionsGetValidateBeforeCall(subscriptionDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an Azure subscription definition.
     * @param subscriptionDefinitionName The name of the Azure subscription definition. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsGetAsync(String subscriptionDefinitionName, String apiVersion, final ApiCallback<SubscriptionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDefinitionsGetValidateBeforeCall(subscriptionDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDefinitionsGetOperationStatus
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsGetOperationStatusCall(String apiVersion, UUID operationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/subscriptionOperations/{operationId}"
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDefinitionsGetOperationStatusValidateBeforeCall(String apiVersion, UUID operationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDefinitionsGetOperationStatus(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling subscriptionDefinitionsGetOperationStatus(Async)");
        }

        return subscriptionDefinitionsGetOperationStatusCall(apiVersion, operationId, _callback);

    }

    /**
     * 
     * Retrieves the status of the subscription definition PUT operation. The URI of this API is returned in the Location field of the response header.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @return SubscriptionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public SubscriptionDefinition subscriptionDefinitionsGetOperationStatus(String apiVersion, UUID operationId) throws ApiException {
        ApiResponse<SubscriptionDefinition> localVarResp = subscriptionDefinitionsGetOperationStatusWithHttpInfo(apiVersion, operationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the status of the subscription definition PUT operation. The URI of this API is returned in the Location field of the response header.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @return ApiResponse&lt;SubscriptionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDefinition> subscriptionDefinitionsGetOperationStatusWithHttpInfo(String apiVersion, UUID operationId) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDefinitionsGetOperationStatusValidateBeforeCall(apiVersion, operationId, null);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the status of the subscription definition PUT operation. The URI of this API is returned in the Location field of the response header.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsGetOperationStatusAsync(String apiVersion, UUID operationId, final ApiCallback<SubscriptionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDefinitionsGetOperationStatusValidateBeforeCall(apiVersion, operationId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDefinitionsList
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/subscriptionDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDefinitionsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDefinitionsList(Async)");
        }

        return subscriptionDefinitionsListCall(apiVersion, _callback);

    }

    /**
     * 
     * List an Azure subscription definition by subscriptionId.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return SubscriptionDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDefinitionList subscriptionDefinitionsList(String apiVersion) throws ApiException {
        ApiResponse<SubscriptionDefinitionList> localVarResp = subscriptionDefinitionsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List an Azure subscription definition by subscriptionId.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;SubscriptionDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDefinitionList> subscriptionDefinitionsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDefinitionsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<SubscriptionDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List an Azure subscription definition by subscriptionId.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsListAsync(String apiVersion, final ApiCallback<SubscriptionDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDefinitionsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDefinitionsOperationMetadataList
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsOperationMetadataListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDefinitionsOperationMetadataListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDefinitionsOperationMetadataList(Async)");
        }

        return subscriptionDefinitionsOperationMetadataListCall(apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return OperationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OperationListResult subscriptionDefinitionsOperationMetadataList(String apiVersion) throws ApiException {
        ApiResponse<OperationListResult> localVarResp = subscriptionDefinitionsOperationMetadataListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @return ApiResponse&lt;OperationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationListResult> subscriptionDefinitionsOperationMetadataListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDefinitionsOperationMetadataListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2015-06-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDefinitionsOperationMetadataListAsync(String apiVersion, final ApiCallback<OperationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDefinitionsOperationMetadataListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
