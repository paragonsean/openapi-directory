/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessPolicyEntry from './AccessPolicyEntry';
import NetworkRuleSet from './NetworkRuleSet';
import Sku from './Sku';

/**
 * The VaultPatchProperties model module.
 * @module model/VaultPatchProperties
 * @version 2018-02-14
 */
class VaultPatchProperties {
    /**
     * Constructs a new <code>VaultPatchProperties</code>.
     * Properties of the vault
     * @alias module:model/VaultPatchProperties
     */
    constructor() { 
        
        VaultPatchProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VaultPatchProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VaultPatchProperties} obj Optional instance to populate.
     * @return {module:model/VaultPatchProperties} The populated <code>VaultPatchProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VaultPatchProperties();

            if (data.hasOwnProperty('accessPolicies')) {
                obj['accessPolicies'] = ApiClient.convertToType(data['accessPolicies'], [AccessPolicyEntry]);
            }
            if (data.hasOwnProperty('createMode')) {
                obj['createMode'] = ApiClient.convertToType(data['createMode'], 'String');
            }
            if (data.hasOwnProperty('enablePurgeProtection')) {
                obj['enablePurgeProtection'] = ApiClient.convertToType(data['enablePurgeProtection'], 'Boolean');
            }
            if (data.hasOwnProperty('enableSoftDelete')) {
                obj['enableSoftDelete'] = ApiClient.convertToType(data['enableSoftDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForDeployment')) {
                obj['enabledForDeployment'] = ApiClient.convertToType(data['enabledForDeployment'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForDiskEncryption')) {
                obj['enabledForDiskEncryption'] = ApiClient.convertToType(data['enabledForDiskEncryption'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForTemplateDeployment')) {
                obj['enabledForTemplateDeployment'] = ApiClient.convertToType(data['enabledForTemplateDeployment'], 'Boolean');
            }
            if (data.hasOwnProperty('networkAcls')) {
                obj['networkAcls'] = NetworkRuleSet.constructFromObject(data['networkAcls']);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VaultPatchProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VaultPatchProperties</code>.
     */
    static validateJSON(data) {
        if (data['accessPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessPolicies'])) {
                throw new Error("Expected the field `accessPolicies` to be an array in the JSON data but got " + data['accessPolicies']);
            }
            // validate the optional field `accessPolicies` (array)
            for (const item of data['accessPolicies']) {
                AccessPolicyEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createMode'] && !(typeof data['createMode'] === 'string' || data['createMode'] instanceof String)) {
            throw new Error("Expected the field `createMode` to be a primitive type in the JSON string but got " + data['createMode']);
        }
        // validate the optional field `networkAcls`
        if (data['networkAcls']) { // data not null
          NetworkRuleSet.validateJSON(data['networkAcls']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
 * @member {Array.<module:model/AccessPolicyEntry>} accessPolicies
 */
VaultPatchProperties.prototype['accessPolicies'] = undefined;

/**
 * The vault's create mode to indicate whether the vault need to be recovered or not.
 * @member {module:model/VaultPatchProperties.CreateModeEnum} createMode
 */
VaultPatchProperties.prototype['createMode'] = undefined;

/**
 * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
 * @member {Boolean} enablePurgeProtection
 */
VaultPatchProperties.prototype['enablePurgeProtection'] = undefined;

/**
 * Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.
 * @member {Boolean} enableSoftDelete
 */
VaultPatchProperties.prototype['enableSoftDelete'] = undefined;

/**
 * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
 * @member {Boolean} enabledForDeployment
 */
VaultPatchProperties.prototype['enabledForDeployment'] = undefined;

/**
 * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
 * @member {Boolean} enabledForDiskEncryption
 */
VaultPatchProperties.prototype['enabledForDiskEncryption'] = undefined;

/**
 * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
 * @member {Boolean} enabledForTemplateDeployment
 */
VaultPatchProperties.prototype['enabledForTemplateDeployment'] = undefined;

/**
 * @member {module:model/NetworkRuleSet} networkAcls
 */
VaultPatchProperties.prototype['networkAcls'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
VaultPatchProperties.prototype['sku'] = undefined;

/**
 * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
 * @member {String} tenantId
 */
VaultPatchProperties.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>createMode</code> property.
 * @enum {String}
 * @readonly
 */
VaultPatchProperties['CreateModeEnum'] = {

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "default"
     * @const
     */
    "default": "default"
};



export default VaultPatchProperties;

