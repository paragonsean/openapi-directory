/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVaultsApi_H
#define OAI_OAIVaultsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckNameAvailabilityResult.h"
#include "OAIDeletedVault.h"
#include "OAIDeletedVaultListResult.h"
#include "OAIResourceListResult.h"
#include "OAIVault.h"
#include "OAIVaultAccessPolicyParameters.h"
#include "OAIVaultCheckNameAvailabilityParameters.h"
#include "OAIVaultCreateOrUpdateParameters.h"
#include "OAIVaultListResult.h"
#include "OAIVaultPatchParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVaultsApi : public QObject {
    Q_OBJECT

public:
    OAIVaultsApi(const int timeOut = 0);
    ~OAIVaultsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vault_name OAIVaultCheckNameAvailabilityParameters [required]
    */
    virtual void vaultsCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAIVaultCheckNameAvailabilityParameters &vault_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVaultCreateOrUpdateParameters [required]
    */
    virtual void vaultsCreateOrUpdate(const QString &resource_group_name, const QString &vault_name, const QString &api_version, const QString &subscription_id, const OAIVaultCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void vaultsDelete(const QString &resource_group_name, const QString &vault_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void vaultsGet(const QString &resource_group_name, const QString &vault_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  vault_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void vaultsGetDeleted(const QString &vault_name, const QString &location, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  filter QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void vaultsList(const QString &filter, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void vaultsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void vaultsListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void vaultsListDeleted(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  vault_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void vaultsPurgeDeleted(const QString &vault_name, const QString &location, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVaultPatchParameters [required]
    */
    virtual void vaultsUpdate(const QString &resource_group_name, const QString &vault_name, const QString &api_version, const QString &subscription_id, const OAIVaultPatchParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  operation_kind QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVaultAccessPolicyParameters [required]
    */
    virtual void vaultsUpdateAccessPolicy(const QString &resource_group_name, const QString &vault_name, const QString &operation_kind, const QString &api_version, const QString &subscription_id, const OAIVaultAccessPolicyParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void vaultsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void vaultsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void vaultsDeleteCallback(OAIHttpRequestWorker *worker);
    void vaultsGetCallback(OAIHttpRequestWorker *worker);
    void vaultsGetDeletedCallback(OAIHttpRequestWorker *worker);
    void vaultsListCallback(OAIHttpRequestWorker *worker);
    void vaultsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void vaultsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void vaultsListDeletedCallback(OAIHttpRequestWorker *worker);
    void vaultsPurgeDeletedCallback(OAIHttpRequestWorker *worker);
    void vaultsUpdateCallback(OAIHttpRequestWorker *worker);
    void vaultsUpdateAccessPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void vaultsCheckNameAvailabilitySignal(OAICheckNameAvailabilityResult summary);
    void vaultsCreateOrUpdateSignal(OAIVault summary);
    void vaultsDeleteSignal();
    void vaultsGetSignal(OAIVault summary);
    void vaultsGetDeletedSignal(OAIDeletedVault summary);
    void vaultsListSignal(OAIResourceListResult summary);
    void vaultsListByResourceGroupSignal(OAIVaultListResult summary);
    void vaultsListBySubscriptionSignal(OAIVaultListResult summary);
    void vaultsListDeletedSignal(OAIDeletedVaultListResult summary);
    void vaultsPurgeDeletedSignal();
    void vaultsUpdateSignal(OAIVault summary);
    void vaultsUpdateAccessPolicySignal(OAIVaultAccessPolicyParameters summary);


    void vaultsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResult summary);
    void vaultsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVault summary);
    void vaultsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vaultsGetSignalFull(OAIHttpRequestWorker *worker, OAIVault summary);
    void vaultsGetDeletedSignalFull(OAIHttpRequestWorker *worker, OAIDeletedVault summary);
    void vaultsListSignalFull(OAIHttpRequestWorker *worker, OAIResourceListResult summary);
    void vaultsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIVaultListResult summary);
    void vaultsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIVaultListResult summary);
    void vaultsListDeletedSignalFull(OAIHttpRequestWorker *worker, OAIDeletedVaultListResult summary);
    void vaultsPurgeDeletedSignalFull(OAIHttpRequestWorker *worker);
    void vaultsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVault summary);
    void vaultsUpdateAccessPolicySignalFull(OAIHttpRequestWorker *worker, OAIVaultAccessPolicyParameters summary);

    Q_DECL_DEPRECATED_X("Use vaultsCheckNameAvailabilitySignalError() instead")
    void vaultsCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsCreateOrUpdateSignalError() instead")
    void vaultsCreateOrUpdateSignalE(OAIVault summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsCreateOrUpdateSignalError(OAIVault summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsDeleteSignalError() instead")
    void vaultsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsGetSignalError() instead")
    void vaultsGetSignalE(OAIVault summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsGetSignalError(OAIVault summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsGetDeletedSignalError() instead")
    void vaultsGetDeletedSignalE(OAIDeletedVault summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsGetDeletedSignalError(OAIDeletedVault summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListSignalError() instead")
    void vaultsListSignalE(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListSignalError(OAIResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListByResourceGroupSignalError() instead")
    void vaultsListByResourceGroupSignalE(OAIVaultListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListByResourceGroupSignalError(OAIVaultListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListBySubscriptionSignalError() instead")
    void vaultsListBySubscriptionSignalE(OAIVaultListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListBySubscriptionSignalError(OAIVaultListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListDeletedSignalError() instead")
    void vaultsListDeletedSignalE(OAIDeletedVaultListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListDeletedSignalError(OAIDeletedVaultListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsPurgeDeletedSignalError() instead")
    void vaultsPurgeDeletedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsPurgeDeletedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsUpdateSignalError() instead")
    void vaultsUpdateSignalE(OAIVault summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsUpdateSignalError(OAIVault summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsUpdateAccessPolicySignalError() instead")
    void vaultsUpdateAccessPolicySignalE(OAIVaultAccessPolicyParameters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsUpdateAccessPolicySignalError(OAIVaultAccessPolicyParameters summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use vaultsCheckNameAvailabilitySignalErrorFull() instead")
    void vaultsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsCreateOrUpdateSignalErrorFull() instead")
    void vaultsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsDeleteSignalErrorFull() instead")
    void vaultsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsGetSignalErrorFull() instead")
    void vaultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsGetDeletedSignalErrorFull() instead")
    void vaultsGetDeletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsGetDeletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListSignalErrorFull() instead")
    void vaultsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListByResourceGroupSignalErrorFull() instead")
    void vaultsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListBySubscriptionSignalErrorFull() instead")
    void vaultsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsListDeletedSignalErrorFull() instead")
    void vaultsListDeletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsListDeletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsPurgeDeletedSignalErrorFull() instead")
    void vaultsPurgeDeletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsPurgeDeletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsUpdateSignalErrorFull() instead")
    void vaultsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vaultsUpdateAccessPolicySignalErrorFull() instead")
    void vaultsUpdateAccessPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vaultsUpdateAccessPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
