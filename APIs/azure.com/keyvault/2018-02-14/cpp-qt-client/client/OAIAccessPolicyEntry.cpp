/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPolicyEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPolicyEntry::OAIAccessPolicyEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPolicyEntry::OAIAccessPolicyEntry() {
    this->initializeModel();
}

OAIAccessPolicyEntry::~OAIAccessPolicyEntry() {}

void OAIAccessPolicyEntry::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIAccessPolicyEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPolicyEntry::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIAccessPolicyEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPolicyEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIAccessPolicyEntry::getApplicationId() const {
    return m_application_id;
}
void OAIAccessPolicyEntry::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIAccessPolicyEntry::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIAccessPolicyEntry::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIAccessPolicyEntry::getObjectId() const {
    return m_object_id;
}
void OAIAccessPolicyEntry::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIAccessPolicyEntry::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIAccessPolicyEntry::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIPermissions OAIAccessPolicyEntry::getPermissions() const {
    return m_permissions;
}
void OAIAccessPolicyEntry::setPermissions(const OAIPermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAccessPolicyEntry::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAccessPolicyEntry::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAccessPolicyEntry::getTenantId() const {
    return m_tenant_id;
}
void OAIAccessPolicyEntry::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIAccessPolicyEntry::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIAccessPolicyEntry::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIAccessPolicyEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPolicyEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_id_isValid && m_permissions_isValid && m_tenant_id_isValid && true;
}

} // namespace OpenAPI
