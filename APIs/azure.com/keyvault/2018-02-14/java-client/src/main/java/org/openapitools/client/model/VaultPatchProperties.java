/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AccessPolicyEntry;
import org.openapitools.client.model.NetworkRuleSet;
import org.openapitools.client.model.Sku;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the vault
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:29.871806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VaultPatchProperties {
  public static final String SERIALIZED_NAME_ACCESS_POLICIES = "accessPolicies";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICIES)
  private List<AccessPolicyEntry> accessPolicies = new ArrayList<>();

  /**
   * The vault&#39;s create mode to indicate whether the vault need to be recovered or not.
   */
  @JsonAdapter(CreateModeEnum.Adapter.class)
  public enum CreateModeEnum {
    RECOVER("recover"),
    
    DEFAULT("default");

    private String value;

    CreateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateModeEnum fromValue(String value) {
      for (CreateModeEnum b : CreateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATE_MODE = "createMode";
  @SerializedName(SERIALIZED_NAME_CREATE_MODE)
  private CreateModeEnum createMode;

  public static final String SERIALIZED_NAME_ENABLE_PURGE_PROTECTION = "enablePurgeProtection";
  @SerializedName(SERIALIZED_NAME_ENABLE_PURGE_PROTECTION)
  private Boolean enablePurgeProtection;

  public static final String SERIALIZED_NAME_ENABLE_SOFT_DELETE = "enableSoftDelete";
  @SerializedName(SERIALIZED_NAME_ENABLE_SOFT_DELETE)
  private Boolean enableSoftDelete;

  public static final String SERIALIZED_NAME_ENABLED_FOR_DEPLOYMENT = "enabledForDeployment";
  @SerializedName(SERIALIZED_NAME_ENABLED_FOR_DEPLOYMENT)
  private Boolean enabledForDeployment;

  public static final String SERIALIZED_NAME_ENABLED_FOR_DISK_ENCRYPTION = "enabledForDiskEncryption";
  @SerializedName(SERIALIZED_NAME_ENABLED_FOR_DISK_ENCRYPTION)
  private Boolean enabledForDiskEncryption;

  public static final String SERIALIZED_NAME_ENABLED_FOR_TEMPLATE_DEPLOYMENT = "enabledForTemplateDeployment";
  @SerializedName(SERIALIZED_NAME_ENABLED_FOR_TEMPLATE_DEPLOYMENT)
  private Boolean enabledForTemplateDeployment;

  public static final String SERIALIZED_NAME_NETWORK_ACLS = "networkAcls";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACLS)
  private NetworkRuleSet networkAcls;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private Sku sku;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private UUID tenantId;

  public VaultPatchProperties() {
  }

  public VaultPatchProperties accessPolicies(List<AccessPolicyEntry> accessPolicies) {
    this.accessPolicies = accessPolicies;
    return this;
  }

  public VaultPatchProperties addAccessPoliciesItem(AccessPolicyEntry accessPoliciesItem) {
    if (this.accessPolicies == null) {
      this.accessPolicies = new ArrayList<>();
    }
    this.accessPolicies.add(accessPoliciesItem);
    return this;
  }

  /**
   * An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&#39;s tenant ID.
   * @return accessPolicies
   */
  @javax.annotation.Nullable
  public List<AccessPolicyEntry> getAccessPolicies() {
    return accessPolicies;
  }

  public void setAccessPolicies(List<AccessPolicyEntry> accessPolicies) {
    this.accessPolicies = accessPolicies;
  }


  public VaultPatchProperties createMode(CreateModeEnum createMode) {
    this.createMode = createMode;
    return this;
  }

  /**
   * The vault&#39;s create mode to indicate whether the vault need to be recovered or not.
   * @return createMode
   */
  @javax.annotation.Nullable
  public CreateModeEnum getCreateMode() {
    return createMode;
  }

  public void setCreateMode(CreateModeEnum createMode) {
    this.createMode = createMode;
  }


  public VaultPatchProperties enablePurgeProtection(Boolean enablePurgeProtection) {
    this.enablePurgeProtection = enablePurgeProtection;
    return this;
  }

  /**
   * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
   * @return enablePurgeProtection
   */
  @javax.annotation.Nullable
  public Boolean getEnablePurgeProtection() {
    return enablePurgeProtection;
  }

  public void setEnablePurgeProtection(Boolean enablePurgeProtection) {
    this.enablePurgeProtection = enablePurgeProtection;
  }


  public VaultPatchProperties enableSoftDelete(Boolean enableSoftDelete) {
    this.enableSoftDelete = enableSoftDelete;
    return this;
  }

  /**
   * Property to specify whether the &#39;soft delete&#39; functionality is enabled for this key vault. It does not accept false value.
   * @return enableSoftDelete
   */
  @javax.annotation.Nullable
  public Boolean getEnableSoftDelete() {
    return enableSoftDelete;
  }

  public void setEnableSoftDelete(Boolean enableSoftDelete) {
    this.enableSoftDelete = enableSoftDelete;
  }


  public VaultPatchProperties enabledForDeployment(Boolean enabledForDeployment) {
    this.enabledForDeployment = enabledForDeployment;
    return this;
  }

  /**
   * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
   * @return enabledForDeployment
   */
  @javax.annotation.Nullable
  public Boolean getEnabledForDeployment() {
    return enabledForDeployment;
  }

  public void setEnabledForDeployment(Boolean enabledForDeployment) {
    this.enabledForDeployment = enabledForDeployment;
  }


  public VaultPatchProperties enabledForDiskEncryption(Boolean enabledForDiskEncryption) {
    this.enabledForDiskEncryption = enabledForDiskEncryption;
    return this;
  }

  /**
   * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
   * @return enabledForDiskEncryption
   */
  @javax.annotation.Nullable
  public Boolean getEnabledForDiskEncryption() {
    return enabledForDiskEncryption;
  }

  public void setEnabledForDiskEncryption(Boolean enabledForDiskEncryption) {
    this.enabledForDiskEncryption = enabledForDiskEncryption;
  }


  public VaultPatchProperties enabledForTemplateDeployment(Boolean enabledForTemplateDeployment) {
    this.enabledForTemplateDeployment = enabledForTemplateDeployment;
    return this;
  }

  /**
   * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
   * @return enabledForTemplateDeployment
   */
  @javax.annotation.Nullable
  public Boolean getEnabledForTemplateDeployment() {
    return enabledForTemplateDeployment;
  }

  public void setEnabledForTemplateDeployment(Boolean enabledForTemplateDeployment) {
    this.enabledForTemplateDeployment = enabledForTemplateDeployment;
  }


  public VaultPatchProperties networkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
    return this;
  }

  /**
   * Get networkAcls
   * @return networkAcls
   */
  @javax.annotation.Nullable
  public NetworkRuleSet getNetworkAcls() {
    return networkAcls;
  }

  public void setNetworkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
  }


  public VaultPatchProperties sku(Sku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public Sku getSku() {
    return sku;
  }

  public void setSku(Sku sku) {
    this.sku = sku;
  }


  public VaultPatchProperties tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public UUID getTenantId() {
    return tenantId;
  }

  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VaultPatchProperties vaultPatchProperties = (VaultPatchProperties) o;
    return Objects.equals(this.accessPolicies, vaultPatchProperties.accessPolicies) &&
        Objects.equals(this.createMode, vaultPatchProperties.createMode) &&
        Objects.equals(this.enablePurgeProtection, vaultPatchProperties.enablePurgeProtection) &&
        Objects.equals(this.enableSoftDelete, vaultPatchProperties.enableSoftDelete) &&
        Objects.equals(this.enabledForDeployment, vaultPatchProperties.enabledForDeployment) &&
        Objects.equals(this.enabledForDiskEncryption, vaultPatchProperties.enabledForDiskEncryption) &&
        Objects.equals(this.enabledForTemplateDeployment, vaultPatchProperties.enabledForTemplateDeployment) &&
        Objects.equals(this.networkAcls, vaultPatchProperties.networkAcls) &&
        Objects.equals(this.sku, vaultPatchProperties.sku) &&
        Objects.equals(this.tenantId, vaultPatchProperties.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicies, createMode, enablePurgeProtection, enableSoftDelete, enabledForDeployment, enabledForDiskEncryption, enabledForTemplateDeployment, networkAcls, sku, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VaultPatchProperties {\n");
    sb.append("    accessPolicies: ").append(toIndentedString(accessPolicies)).append("\n");
    sb.append("    createMode: ").append(toIndentedString(createMode)).append("\n");
    sb.append("    enablePurgeProtection: ").append(toIndentedString(enablePurgeProtection)).append("\n");
    sb.append("    enableSoftDelete: ").append(toIndentedString(enableSoftDelete)).append("\n");
    sb.append("    enabledForDeployment: ").append(toIndentedString(enabledForDeployment)).append("\n");
    sb.append("    enabledForDiskEncryption: ").append(toIndentedString(enabledForDiskEncryption)).append("\n");
    sb.append("    enabledForTemplateDeployment: ").append(toIndentedString(enabledForTemplateDeployment)).append("\n");
    sb.append("    networkAcls: ").append(toIndentedString(networkAcls)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicies");
    openapiFields.add("createMode");
    openapiFields.add("enablePurgeProtection");
    openapiFields.add("enableSoftDelete");
    openapiFields.add("enabledForDeployment");
    openapiFields.add("enabledForDiskEncryption");
    openapiFields.add("enabledForTemplateDeployment");
    openapiFields.add("networkAcls");
    openapiFields.add("sku");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VaultPatchProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VaultPatchProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VaultPatchProperties is not found in the empty JSON string", VaultPatchProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VaultPatchProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VaultPatchProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessPolicies") != null && !jsonObj.get("accessPolicies").isJsonNull()) {
        JsonArray jsonArrayaccessPolicies = jsonObj.getAsJsonArray("accessPolicies");
        if (jsonArrayaccessPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("accessPolicies").toString()));
          }

          // validate the optional field `accessPolicies` (array)
          for (int i = 0; i < jsonArrayaccessPolicies.size(); i++) {
            AccessPolicyEntry.validateJsonElement(jsonArrayaccessPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("createMode") != null && !jsonObj.get("createMode").isJsonNull()) && !jsonObj.get("createMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createMode").toString()));
      }
      // validate the optional field `createMode`
      if (jsonObj.get("createMode") != null && !jsonObj.get("createMode").isJsonNull()) {
        CreateModeEnum.validateJsonElement(jsonObj.get("createMode"));
      }
      // validate the optional field `networkAcls`
      if (jsonObj.get("networkAcls") != null && !jsonObj.get("networkAcls").isJsonNull()) {
        NetworkRuleSet.validateJsonElement(jsonObj.get("networkAcls"));
      }
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        Sku.validateJsonElement(jsonObj.get("sku"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VaultPatchProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VaultPatchProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VaultPatchProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VaultPatchProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VaultPatchProperties>() {
           @Override
           public void write(JsonWriter out, VaultPatchProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VaultPatchProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VaultPatchProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VaultPatchProperties
   * @throws IOException if the JSON string is invalid with respect to VaultPatchProperties
   */
  public static VaultPatchProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VaultPatchProperties.class);
  }

  /**
   * Convert an instance of VaultPatchProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

