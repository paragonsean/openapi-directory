/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the deleted vault.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:30.939597-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletedVaultProperties {
  public static final String SERIALIZED_NAME_DELETION_DATE = "deletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_SCHEDULED_PURGE_DATE = "scheduledPurgeDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_PURGE_DATE)
  private OffsetDateTime scheduledPurgeDate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VAULT_ID = "vaultId";
  @SerializedName(SERIALIZED_NAME_VAULT_ID)
  private String vaultId;

  public DeletedVaultProperties() {
  }

  public DeletedVaultProperties(
     OffsetDateTime deletionDate, 
     String location, 
     OffsetDateTime scheduledPurgeDate, 
     Map<String, String> tags, 
     String vaultId
  ) {
    this();
    this.deletionDate = deletionDate;
    this.location = location;
    this.scheduledPurgeDate = scheduledPurgeDate;
    this.tags = tags;
    this.vaultId = vaultId;
  }

  /**
   * The deleted date.
   * @return deletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }



  /**
   * The location of the original vault.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  /**
   * The scheduled purged date.
   * @return scheduledPurgeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledPurgeDate() {
    return scheduledPurgeDate;
  }



  /**
   * Tags of the original vault.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }



  /**
   * The resource id of the original vault.
   * @return vaultId
   */
  @javax.annotation.Nullable
  public String getVaultId() {
    return vaultId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletedVaultProperties deletedVaultProperties = (DeletedVaultProperties) o;
    return Objects.equals(this.deletionDate, deletedVaultProperties.deletionDate) &&
        Objects.equals(this.location, deletedVaultProperties.location) &&
        Objects.equals(this.scheduledPurgeDate, deletedVaultProperties.scheduledPurgeDate) &&
        Objects.equals(this.tags, deletedVaultProperties.tags) &&
        Objects.equals(this.vaultId, deletedVaultProperties.vaultId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletionDate, location, scheduledPurgeDate, tags, vaultId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletedVaultProperties {\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    scheduledPurgeDate: ").append(toIndentedString(scheduledPurgeDate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vaultId: ").append(toIndentedString(vaultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletionDate");
    openapiFields.add("location");
    openapiFields.add("scheduledPurgeDate");
    openapiFields.add("tags");
    openapiFields.add("vaultId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletedVaultProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletedVaultProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletedVaultProperties is not found in the empty JSON string", DeletedVaultProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletedVaultProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletedVaultProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("vaultId") != null && !jsonObj.get("vaultId").isJsonNull()) && !jsonObj.get("vaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletedVaultProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletedVaultProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletedVaultProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletedVaultProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletedVaultProperties>() {
           @Override
           public void write(JsonWriter out, DeletedVaultProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletedVaultProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletedVaultProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletedVaultProperties
   * @throws IOException if the JSON string is invalid with respect to DeletedVaultProperties
   */
  public static DeletedVaultProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletedVaultProperties.class);
  }

  /**
   * Convert an instance of DeletedVaultProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

