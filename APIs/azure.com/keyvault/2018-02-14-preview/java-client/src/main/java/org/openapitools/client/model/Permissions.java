/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:30.939597-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Permissions {
  /**
   * Gets or Sets certificates
   */
  @JsonAdapter(CertificatesEnum.Adapter.class)
  public enum CertificatesEnum {
    GET("get"),
    
    LIST("list"),
    
    DELETE("delete"),
    
    CREATE("create"),
    
    IMPORT("import"),
    
    UPDATE("update"),
    
    MANAGECONTACTS("managecontacts"),
    
    GETISSUERS("getissuers"),
    
    LISTISSUERS("listissuers"),
    
    SETISSUERS("setissuers"),
    
    DELETEISSUERS("deleteissuers"),
    
    MANAGEISSUERS("manageissuers"),
    
    RECOVER("recover"),
    
    PURGE("purge"),
    
    BACKUP("backup"),
    
    RESTORE("restore");

    private String value;

    CertificatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificatesEnum fromValue(String value) {
      for (CertificatesEnum b : CertificatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificatesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificatesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificatesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<CertificatesEnum> certificates = new ArrayList<>();

  /**
   * Gets or Sets keys
   */
  @JsonAdapter(KeysEnum.Adapter.class)
  public enum KeysEnum {
    ENCRYPT("encrypt"),
    
    DECRYPT("decrypt"),
    
    WRAP_KEY("wrapKey"),
    
    UNWRAP_KEY("unwrapKey"),
    
    SIGN("sign"),
    
    VERIFY("verify"),
    
    GET("get"),
    
    LIST("list"),
    
    CREATE("create"),
    
    UPDATE("update"),
    
    IMPORT("import"),
    
    DELETE("delete"),
    
    BACKUP("backup"),
    
    RESTORE("restore"),
    
    RECOVER("recover"),
    
    PURGE("purge");

    private String value;

    KeysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeysEnum fromValue(String value) {
      for (KeysEnum b : KeysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List<KeysEnum> keys = new ArrayList<>();

  /**
   * Gets or Sets secrets
   */
  @JsonAdapter(SecretsEnum.Adapter.class)
  public enum SecretsEnum {
    GET("get"),
    
    LIST("list"),
    
    SET("set"),
    
    DELETE("delete"),
    
    BACKUP("backup"),
    
    RESTORE("restore"),
    
    RECOVER("recover"),
    
    PURGE("purge");

    private String value;

    SecretsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretsEnum fromValue(String value) {
      for (SecretsEnum b : SecretsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecretsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<SecretsEnum> secrets = new ArrayList<>();

  /**
   * Gets or Sets storage
   */
  @JsonAdapter(StorageEnum.Adapter.class)
  public enum StorageEnum {
    GET("get"),
    
    LIST("list"),
    
    DELETE("delete"),
    
    SET("set"),
    
    UPDATE("update"),
    
    REGENERATEKEY("regeneratekey"),
    
    RECOVER("recover"),
    
    PURGE("purge"),
    
    BACKUP("backup"),
    
    RESTORE("restore"),
    
    SETSAS("setsas"),
    
    LISTSAS("listsas"),
    
    GETSAS("getsas"),
    
    DELETESAS("deletesas");

    private String value;

    StorageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageEnum fromValue(String value) {
      for (StorageEnum b : StorageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private List<StorageEnum> storage = new ArrayList<>();

  public Permissions() {
  }

  public Permissions certificates(List<CertificatesEnum> certificates) {
    this.certificates = certificates;
    return this;
  }

  public Permissions addCertificatesItem(CertificatesEnum certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

  /**
   * Permissions to certificates
   * @return certificates
   */
  @javax.annotation.Nullable
  public List<CertificatesEnum> getCertificates() {
    return certificates;
  }

  public void setCertificates(List<CertificatesEnum> certificates) {
    this.certificates = certificates;
  }


  public Permissions keys(List<KeysEnum> keys) {
    this.keys = keys;
    return this;
  }

  public Permissions addKeysItem(KeysEnum keysItem) {
    if (this.keys == null) {
      this.keys = new ArrayList<>();
    }
    this.keys.add(keysItem);
    return this;
  }

  /**
   * Permissions to keys
   * @return keys
   */
  @javax.annotation.Nullable
  public List<KeysEnum> getKeys() {
    return keys;
  }

  public void setKeys(List<KeysEnum> keys) {
    this.keys = keys;
  }


  public Permissions secrets(List<SecretsEnum> secrets) {
    this.secrets = secrets;
    return this;
  }

  public Permissions addSecretsItem(SecretsEnum secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

  /**
   * Permissions to secrets
   * @return secrets
   */
  @javax.annotation.Nullable
  public List<SecretsEnum> getSecrets() {
    return secrets;
  }

  public void setSecrets(List<SecretsEnum> secrets) {
    this.secrets = secrets;
  }


  public Permissions storage(List<StorageEnum> storage) {
    this.storage = storage;
    return this;
  }

  public Permissions addStorageItem(StorageEnum storageItem) {
    if (this.storage == null) {
      this.storage = new ArrayList<>();
    }
    this.storage.add(storageItem);
    return this;
  }

  /**
   * Permissions to storage accounts
   * @return storage
   */
  @javax.annotation.Nullable
  public List<StorageEnum> getStorage() {
    return storage;
  }

  public void setStorage(List<StorageEnum> storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permissions permissions = (Permissions) o;
    return Objects.equals(this.certificates, permissions.certificates) &&
        Objects.equals(this.keys, permissions.keys) &&
        Objects.equals(this.secrets, permissions.secrets) &&
        Objects.equals(this.storage, permissions.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificates, keys, secrets, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permissions {\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificates");
    openapiFields.add("keys");
    openapiFields.add("secrets");
    openapiFields.add("storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Permissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permissions is not found in the empty JSON string", Permissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificates") != null && !jsonObj.get("certificates").isJsonNull() && !jsonObj.get("certificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull() && !jsonObj.get("keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys` to be an array in the JSON string but got `%s`", jsonObj.get("keys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull() && !jsonObj.get("secrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull() && !jsonObj.get("storage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage` to be an array in the JSON string but got `%s`", jsonObj.get("storage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permissions.class));

       return (TypeAdapter<T>) new TypeAdapter<Permissions>() {
           @Override
           public void write(JsonWriter out, Permissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Permissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Permissions
   * @throws IOException if the JSON string is invalid with respect to Permissions
   */
  public static Permissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permissions.class);
  }

  /**
   * Convert an instance of Permissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

