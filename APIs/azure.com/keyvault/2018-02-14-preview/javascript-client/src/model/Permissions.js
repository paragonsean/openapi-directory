/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Permissions model module.
 * @module model/Permissions
 * @version 2018-02-14-preview
 */
class Permissions {
    /**
     * Constructs a new <code>Permissions</code>.
     * Permissions the identity has for keys, secrets, certificates and storage.
     * @alias module:model/Permissions
     */
    constructor() { 
        
        Permissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permissions} obj Optional instance to populate.
     * @return {module:model/Permissions} The populated <code>Permissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permissions();

            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], ['String']);
            }
            if (data.hasOwnProperty('keys')) {
                obj['keys'] = ApiClient.convertToType(data['keys'], ['String']);
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], ['String']);
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permissions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['certificates'])) {
            throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keys'])) {
            throw new Error("Expected the field `keys` to be an array in the JSON data but got " + data['keys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secrets'])) {
            throw new Error("Expected the field `secrets` to be an array in the JSON data but got " + data['secrets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['storage'])) {
            throw new Error("Expected the field `storage` to be an array in the JSON data but got " + data['storage']);
        }

        return true;
    }


}



/**
 * Permissions to certificates
 * @member {Array.<module:model/Permissions.CertificatesEnum>} certificates
 */
Permissions.prototype['certificates'] = undefined;

/**
 * Permissions to keys
 * @member {Array.<module:model/Permissions.KeysEnum>} keys
 */
Permissions.prototype['keys'] = undefined;

/**
 * Permissions to secrets
 * @member {Array.<module:model/Permissions.SecretsEnum>} secrets
 */
Permissions.prototype['secrets'] = undefined;

/**
 * Permissions to storage accounts
 * @member {Array.<module:model/Permissions.StorageEnum>} storage
 */
Permissions.prototype['storage'] = undefined;





/**
 * Allowed values for the <code>certificates</code> property.
 * @enum {String}
 * @readonly
 */
Permissions['CertificatesEnum'] = {

    /**
     * value: "get"
     * @const
     */
    "get": "get",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "create"
     * @const
     */
    "create": "create",

    /**
     * value: "import"
     * @const
     */
    "import": "import",

    /**
     * value: "update"
     * @const
     */
    "update": "update",

    /**
     * value: "managecontacts"
     * @const
     */
    "managecontacts": "managecontacts",

    /**
     * value: "getissuers"
     * @const
     */
    "getissuers": "getissuers",

    /**
     * value: "listissuers"
     * @const
     */
    "listissuers": "listissuers",

    /**
     * value: "setissuers"
     * @const
     */
    "setissuers": "setissuers",

    /**
     * value: "deleteissuers"
     * @const
     */
    "deleteissuers": "deleteissuers",

    /**
     * value: "manageissuers"
     * @const
     */
    "manageissuers": "manageissuers",

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "purge"
     * @const
     */
    "purge": "purge",

    /**
     * value: "backup"
     * @const
     */
    "backup": "backup",

    /**
     * value: "restore"
     * @const
     */
    "restore": "restore"
};


/**
 * Allowed values for the <code>keys</code> property.
 * @enum {String}
 * @readonly
 */
Permissions['KeysEnum'] = {

    /**
     * value: "encrypt"
     * @const
     */
    "encrypt": "encrypt",

    /**
     * value: "decrypt"
     * @const
     */
    "decrypt": "decrypt",

    /**
     * value: "wrapKey"
     * @const
     */
    "wrapKey": "wrapKey",

    /**
     * value: "unwrapKey"
     * @const
     */
    "unwrapKey": "unwrapKey",

    /**
     * value: "sign"
     * @const
     */
    "sign": "sign",

    /**
     * value: "verify"
     * @const
     */
    "verify": "verify",

    /**
     * value: "get"
     * @const
     */
    "get": "get",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "create"
     * @const
     */
    "create": "create",

    /**
     * value: "update"
     * @const
     */
    "update": "update",

    /**
     * value: "import"
     * @const
     */
    "import": "import",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "backup"
     * @const
     */
    "backup": "backup",

    /**
     * value: "restore"
     * @const
     */
    "restore": "restore",

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "purge"
     * @const
     */
    "purge": "purge"
};


/**
 * Allowed values for the <code>secrets</code> property.
 * @enum {String}
 * @readonly
 */
Permissions['SecretsEnum'] = {

    /**
     * value: "get"
     * @const
     */
    "get": "get",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "set"
     * @const
     */
    "set": "set",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "backup"
     * @const
     */
    "backup": "backup",

    /**
     * value: "restore"
     * @const
     */
    "restore": "restore",

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "purge"
     * @const
     */
    "purge": "purge"
};


/**
 * Allowed values for the <code>storage</code> property.
 * @enum {String}
 * @readonly
 */
Permissions['StorageEnum'] = {

    /**
     * value: "get"
     * @const
     */
    "get": "get",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "set"
     * @const
     */
    "set": "set",

    /**
     * value: "update"
     * @const
     */
    "update": "update",

    /**
     * value: "regeneratekey"
     * @const
     */
    "regeneratekey": "regeneratekey",

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "purge"
     * @const
     */
    "purge": "purge",

    /**
     * value: "backup"
     * @const
     */
    "backup": "backup",

    /**
     * value: "restore"
     * @const
     */
    "restore": "restore",

    /**
     * value: "setsas"
     * @const
     */
    "setsas": "setsas",

    /**
     * value: "listsas"
     * @const
     */
    "listsas": "listsas",

    /**
     * value: "getsas"
     * @const
     */
    "getsas": "getsas",

    /**
     * value: "deletesas"
     * @const
     */
    "deletesas": "deletesas"
};



export default Permissions;

