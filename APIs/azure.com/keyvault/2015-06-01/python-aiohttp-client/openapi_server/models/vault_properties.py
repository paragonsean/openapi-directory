# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_policy_entry import AccessPolicyEntry
from openapi_server.models.sku import Sku
from openapi_server import util


class VaultProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policies: List[AccessPolicyEntry]=None, enable_soft_delete: bool=None, enabled_for_deployment: bool=None, enabled_for_disk_encryption: bool=None, enabled_for_template_deployment: bool=None, sku: Sku=None, tenant_id: str=None, vault_uri: str=None):
        """VaultProperties - a model defined in OpenAPI

        :param access_policies: The access_policies of this VaultProperties.
        :param enable_soft_delete: The enable_soft_delete of this VaultProperties.
        :param enabled_for_deployment: The enabled_for_deployment of this VaultProperties.
        :param enabled_for_disk_encryption: The enabled_for_disk_encryption of this VaultProperties.
        :param enabled_for_template_deployment: The enabled_for_template_deployment of this VaultProperties.
        :param sku: The sku of this VaultProperties.
        :param tenant_id: The tenant_id of this VaultProperties.
        :param vault_uri: The vault_uri of this VaultProperties.
        """
        self.openapi_types = {
            'access_policies': List[AccessPolicyEntry],
            'enable_soft_delete': bool,
            'enabled_for_deployment': bool,
            'enabled_for_disk_encryption': bool,
            'enabled_for_template_deployment': bool,
            'sku': Sku,
            'tenant_id': str,
            'vault_uri': str
        }

        self.attribute_map = {
            'access_policies': 'accessPolicies',
            'enable_soft_delete': 'enableSoftDelete',
            'enabled_for_deployment': 'enabledForDeployment',
            'enabled_for_disk_encryption': 'enabledForDiskEncryption',
            'enabled_for_template_deployment': 'enabledForTemplateDeployment',
            'sku': 'sku',
            'tenant_id': 'tenantId',
            'vault_uri': 'vaultUri'
        }

        self._access_policies = access_policies
        self._enable_soft_delete = enable_soft_delete
        self._enabled_for_deployment = enabled_for_deployment
        self._enabled_for_disk_encryption = enabled_for_disk_encryption
        self._enabled_for_template_deployment = enabled_for_template_deployment
        self._sku = sku
        self._tenant_id = tenant_id
        self._vault_uri = vault_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VaultProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VaultProperties of this VaultProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policies(self):
        """Gets the access_policies of this VaultProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :return: The access_policies of this VaultProperties.
        :rtype: List[AccessPolicyEntry]
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this VaultProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :param access_policies: The access_policies of this VaultProperties.
        :type access_policies: List[AccessPolicyEntry]
        """
        if access_policies is None:
            raise ValueError("Invalid value for `access_policies`, must not be `None`")
        if access_policies is not None and len(access_policies) > 16:
            raise ValueError("Invalid value for `access_policies`, number of items must be less than or equal to `16`")

        self._access_policies = access_policies

    @property
    def enable_soft_delete(self):
        """Gets the enable_soft_delete of this VaultProperties.

        Property to specify whether the 'soft delete' functionality is enabled for this key vault.

        :return: The enable_soft_delete of this VaultProperties.
        :rtype: bool
        """
        return self._enable_soft_delete

    @enable_soft_delete.setter
    def enable_soft_delete(self, enable_soft_delete):
        """Sets the enable_soft_delete of this VaultProperties.

        Property to specify whether the 'soft delete' functionality is enabled for this key vault.

        :param enable_soft_delete: The enable_soft_delete of this VaultProperties.
        :type enable_soft_delete: bool
        """

        self._enable_soft_delete = enable_soft_delete

    @property
    def enabled_for_deployment(self):
        """Gets the enabled_for_deployment of this VaultProperties.

        Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.

        :return: The enabled_for_deployment of this VaultProperties.
        :rtype: bool
        """
        return self._enabled_for_deployment

    @enabled_for_deployment.setter
    def enabled_for_deployment(self, enabled_for_deployment):
        """Sets the enabled_for_deployment of this VaultProperties.

        Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.

        :param enabled_for_deployment: The enabled_for_deployment of this VaultProperties.
        :type enabled_for_deployment: bool
        """

        self._enabled_for_deployment = enabled_for_deployment

    @property
    def enabled_for_disk_encryption(self):
        """Gets the enabled_for_disk_encryption of this VaultProperties.

        Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.

        :return: The enabled_for_disk_encryption of this VaultProperties.
        :rtype: bool
        """
        return self._enabled_for_disk_encryption

    @enabled_for_disk_encryption.setter
    def enabled_for_disk_encryption(self, enabled_for_disk_encryption):
        """Sets the enabled_for_disk_encryption of this VaultProperties.

        Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.

        :param enabled_for_disk_encryption: The enabled_for_disk_encryption of this VaultProperties.
        :type enabled_for_disk_encryption: bool
        """

        self._enabled_for_disk_encryption = enabled_for_disk_encryption

    @property
    def enabled_for_template_deployment(self):
        """Gets the enabled_for_template_deployment of this VaultProperties.

        Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.

        :return: The enabled_for_template_deployment of this VaultProperties.
        :rtype: bool
        """
        return self._enabled_for_template_deployment

    @enabled_for_template_deployment.setter
    def enabled_for_template_deployment(self, enabled_for_template_deployment):
        """Sets the enabled_for_template_deployment of this VaultProperties.

        Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.

        :param enabled_for_template_deployment: The enabled_for_template_deployment of this VaultProperties.
        :type enabled_for_template_deployment: bool
        """

        self._enabled_for_template_deployment = enabled_for_template_deployment

    @property
    def sku(self):
        """Gets the sku of this VaultProperties.


        :return: The sku of this VaultProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this VaultProperties.


        :param sku: The sku of this VaultProperties.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def tenant_id(self):
        """Gets the tenant_id of this VaultProperties.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :return: The tenant_id of this VaultProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this VaultProperties.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :param tenant_id: The tenant_id of this VaultProperties.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")

        self._tenant_id = tenant_id

    @property
    def vault_uri(self):
        """Gets the vault_uri of this VaultProperties.

        The URI of the vault for performing operations on keys and secrets.

        :return: The vault_uri of this VaultProperties.
        :rtype: str
        """
        return self._vault_uri

    @vault_uri.setter
    def vault_uri(self, vault_uri):
        """Sets the vault_uri of this VaultProperties.

        The URI of the vault for performing operations on keys and secrets.

        :param vault_uri: The vault_uri of this VaultProperties.
        :type vault_uri: str
        """

        self._vault_uri = vault_uri
