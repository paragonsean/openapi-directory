/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResourceListResult from '../model/ResourceListResult';
import Vault from '../model/Vault';
import VaultCreateOrUpdateParameters from '../model/VaultCreateOrUpdateParameters';
import VaultListResult from '../model/VaultListResult';

/**
* Vaults service.
* @module api/VaultsApi
* @version 2015-06-01
*/
export default class VaultsApi {

    /**
    * Constructs a new VaultsApi. 
    * @alias module:api/VaultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vaultsCreateOrUpdate operation.
     * @callback module:api/VaultsApi~vaultsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a key vault in the specified subscription.
     * @param {String} resourceGroupName The name of the Resource Group to which the server belongs.
     * @param {String} vaultName Name of the vault
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/VaultCreateOrUpdateParameters} parameters Parameters to create or update the vault
     * @param {module:api/VaultsApi~vaultsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    vaultsCreateOrUpdate(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling vaultsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsDelete operation.
     * @callback module:api/VaultsApi~vaultsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Azure key vault.
     * @param {String} resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param {String} vaultName The name of the vault to delete
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/VaultsApi~vaultsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vaultsDelete(resourceGroupName, vaultName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsDelete");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsGet operation.
     * @callback module:api/VaultsApi~vaultsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified Azure key vault.
     * @param {String} resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param {String} vaultName The name of the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/VaultsApi~vaultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    vaultsGet(resourceGroupName, vaultName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsGet");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsList operation.
     * @callback module:api/VaultsApi~vaultsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List operation gets information about the vaults associated with the subscription.
     * @param {module:model/String} filter The filter to apply on the operation.
     * @param {module:model/String} apiVersion Azure Resource Manager Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of results to return.
     * @param {module:api/VaultsApi~vaultsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListResult}
     */
    vaultsList(filter, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling vaultsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': filter,
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsListByResourceGroup operation.
     * @callback module:api/VaultsApi~vaultsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VaultListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List operation gets information about the vaults associated with the subscription and within the specified resource group.
     * @param {String} resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of results to return.
     * @param {module:api/VaultsApi~vaultsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VaultListResult}
     */
    vaultsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VaultListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
