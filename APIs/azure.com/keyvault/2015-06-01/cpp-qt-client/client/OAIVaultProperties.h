/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2015-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVaultProperties.h
 *
 * Properties of the vault
 */

#ifndef OAIVaultProperties_H
#define OAIVaultProperties_H

#include <QJsonObject>

#include "OAIAccessPolicyEntry.h"
#include "OAISku.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessPolicyEntry;
class OAISku;

class OAIVaultProperties : public OAIObject {
public:
    OAIVaultProperties();
    OAIVaultProperties(QString json);
    ~OAIVaultProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccessPolicyEntry> getAccessPolicies() const;
    void setAccessPolicies(const QList<OAIAccessPolicyEntry> &access_policies);
    bool is_access_policies_Set() const;
    bool is_access_policies_Valid() const;

    bool isEnableSoftDelete() const;
    void setEnableSoftDelete(const bool &enable_soft_delete);
    bool is_enable_soft_delete_Set() const;
    bool is_enable_soft_delete_Valid() const;

    bool isEnabledForDeployment() const;
    void setEnabledForDeployment(const bool &enabled_for_deployment);
    bool is_enabled_for_deployment_Set() const;
    bool is_enabled_for_deployment_Valid() const;

    bool isEnabledForDiskEncryption() const;
    void setEnabledForDiskEncryption(const bool &enabled_for_disk_encryption);
    bool is_enabled_for_disk_encryption_Set() const;
    bool is_enabled_for_disk_encryption_Valid() const;

    bool isEnabledForTemplateDeployment() const;
    void setEnabledForTemplateDeployment(const bool &enabled_for_template_deployment);
    bool is_enabled_for_template_deployment_Set() const;
    bool is_enabled_for_template_deployment_Valid() const;

    OAISku getSku() const;
    void setSku(const OAISku &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QString getTenantId() const;
    void setTenantId(const QString &tenant_id);
    bool is_tenant_id_Set() const;
    bool is_tenant_id_Valid() const;

    QString getVaultUri() const;
    void setVaultUri(const QString &vault_uri);
    bool is_vault_uri_Set() const;
    bool is_vault_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccessPolicyEntry> m_access_policies;
    bool m_access_policies_isSet;
    bool m_access_policies_isValid;

    bool m_enable_soft_delete;
    bool m_enable_soft_delete_isSet;
    bool m_enable_soft_delete_isValid;

    bool m_enabled_for_deployment;
    bool m_enabled_for_deployment_isSet;
    bool m_enabled_for_deployment_isValid;

    bool m_enabled_for_disk_encryption;
    bool m_enabled_for_disk_encryption_isSet;
    bool m_enabled_for_disk_encryption_isValid;

    bool m_enabled_for_template_deployment;
    bool m_enabled_for_template_deployment_isSet;
    bool m_enabled_for_template_deployment_isValid;

    OAISku m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QString m_tenant_id;
    bool m_tenant_id_isSet;
    bool m_tenant_id_isValid;

    QString m_vault_uri;
    bool m_vault_uri_isSet;
    bool m_vault_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVaultProperties)

#endif // OAIVaultProperties_H
