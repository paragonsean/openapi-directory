/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyVerifyParameters model module.
 * @module model/KeyVerifyParameters
 * @version 7.0-preview
 */
class KeyVerifyParameters {
    /**
     * Constructs a new <code>KeyVerifyParameters</code>.
     * The key verify parameters.
     * @alias module:model/KeyVerifyParameters
     * @param alg {module:model/KeyVerifyParameters.AlgEnum} The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
     * @param digest {String} The digest used for signing.
     * @param value {String} The signature to be verified.
     */
    constructor(alg, digest, value) { 
        
        KeyVerifyParameters.initialize(this, alg, digest, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alg, digest, value) { 
        obj['alg'] = alg;
        obj['digest'] = digest;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>KeyVerifyParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVerifyParameters} obj Optional instance to populate.
     * @return {module:model/KeyVerifyParameters} The populated <code>KeyVerifyParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVerifyParameters();

            if (data.hasOwnProperty('alg')) {
                obj['alg'] = ApiClient.convertToType(data['alg'], 'String');
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVerifyParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVerifyParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyVerifyParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alg'] && !(typeof data['alg'] === 'string' || data['alg'] instanceof String)) {
            throw new Error("Expected the field `alg` to be a primitive type in the JSON string but got " + data['alg']);
        }
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

KeyVerifyParameters.RequiredProperties = ["alg", "digest", "value"];

/**
 * The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
 * @member {module:model/KeyVerifyParameters.AlgEnum} alg
 */
KeyVerifyParameters.prototype['alg'] = undefined;

/**
 * The digest used for signing.
 * @member {String} digest
 */
KeyVerifyParameters.prototype['digest'] = undefined;

/**
 * The signature to be verified.
 * @member {String} value
 */
KeyVerifyParameters.prototype['value'] = undefined;





/**
 * Allowed values for the <code>alg</code> property.
 * @enum {String}
 * @readonly
 */
KeyVerifyParameters['AlgEnum'] = {

    /**
     * value: "PS256"
     * @const
     */
    "PS256": "PS256",

    /**
     * value: "PS384"
     * @const
     */
    "PS384": "PS384",

    /**
     * value: "PS512"
     * @const
     */
    "PS512": "PS512",

    /**
     * value: "RS256"
     * @const
     */
    "RS256": "RS256",

    /**
     * value: "RS384"
     * @const
     */
    "RS384": "RS384",

    /**
     * value: "RS512"
     * @const
     */
    "RS512": "RS512",

    /**
     * value: "RSNULL"
     * @const
     */
    "RSNULL": "RSNULL",

    /**
     * value: "ES256"
     * @const
     */
    "ES256": "ES256",

    /**
     * value: "ES384"
     * @const
     */
    "ES384": "ES384",

    /**
     * value: "ES512"
     * @const
     */
    "ES512": "ES512",

    /**
     * value: "ES256K"
     * @const
     */
    "ES256K": "ES256K"
};



export default KeyVerifyParameters;

