/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubjectAlternativeNames model module.
 * @module model/SubjectAlternativeNames
 * @version 7.0-preview
 */
class SubjectAlternativeNames {
    /**
     * Constructs a new <code>SubjectAlternativeNames</code>.
     * The subject alternate names of a X509 object.
     * @alias module:model/SubjectAlternativeNames
     */
    constructor() { 
        
        SubjectAlternativeNames.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubjectAlternativeNames</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubjectAlternativeNames} obj Optional instance to populate.
     * @return {module:model/SubjectAlternativeNames} The populated <code>SubjectAlternativeNames</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubjectAlternativeNames();

            if (data.hasOwnProperty('dns_names')) {
                obj['dns_names'] = ApiClient.convertToType(data['dns_names'], ['String']);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('upns')) {
                obj['upns'] = ApiClient.convertToType(data['upns'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubjectAlternativeNames</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubjectAlternativeNames</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dns_names'])) {
            throw new Error("Expected the field `dns_names` to be an array in the JSON data but got " + data['dns_names']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upns'])) {
            throw new Error("Expected the field `upns` to be an array in the JSON data but got " + data['upns']);
        }

        return true;
    }


}



/**
 * Domain names.
 * @member {Array.<String>} dns_names
 */
SubjectAlternativeNames.prototype['dns_names'] = undefined;

/**
 * Email addresses.
 * @member {Array.<String>} emails
 */
SubjectAlternativeNames.prototype['emails'] = undefined;

/**
 * User principal names.
 * @member {Array.<String>} upns
 */
SubjectAlternativeNames.prototype['upns'] = undefined;






export default SubjectAlternativeNames;

