/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonWebKey from './JsonWebKey';
import KeyAttributes from './KeyAttributes';
import KeyBundle from './KeyBundle';

/**
 * The DeletedKeyBundle model module.
 * @module model/DeletedKeyBundle
 * @version 7.0-preview
 */
class DeletedKeyBundle {
    /**
     * Constructs a new <code>DeletedKeyBundle</code>.
     * A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info
     * @alias module:model/DeletedKeyBundle
     * @implements module:model/KeyBundle
     */
    constructor() { 
        KeyBundle.initialize(this);
        DeletedKeyBundle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeletedKeyBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeletedKeyBundle} obj Optional instance to populate.
     * @return {module:model/DeletedKeyBundle} The populated <code>DeletedKeyBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeletedKeyBundle();
            KeyBundle.constructFromObject(data, obj);

            if (data.hasOwnProperty('deletedDate')) {
                obj['deletedDate'] = ApiClient.convertToType(data['deletedDate'], 'Number');
            }
            if (data.hasOwnProperty('recoveryId')) {
                obj['recoveryId'] = ApiClient.convertToType(data['recoveryId'], 'String');
            }
            if (data.hasOwnProperty('scheduledPurgeDate')) {
                obj['scheduledPurgeDate'] = ApiClient.convertToType(data['scheduledPurgeDate'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = KeyAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = JsonWebKey.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeletedKeyBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeletedKeyBundle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recoveryId'] && !(typeof data['recoveryId'] === 'string' || data['recoveryId'] instanceof String)) {
            throw new Error("Expected the field `recoveryId` to be a primitive type in the JSON string but got " + data['recoveryId']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          KeyAttributes.validateJSON(data['attributes']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          JsonWebKey.validateJSON(data['key']);
        }

        return true;
    }


}



/**
 * The time when the key was deleted, in UTC
 * @member {Number} deletedDate
 */
DeletedKeyBundle.prototype['deletedDate'] = undefined;

/**
 * The url of the recovery object, used to identify and recover the deleted key.
 * @member {String} recoveryId
 */
DeletedKeyBundle.prototype['recoveryId'] = undefined;

/**
 * The time when the key is scheduled to be purged, in UTC
 * @member {Number} scheduledPurgeDate
 */
DeletedKeyBundle.prototype['scheduledPurgeDate'] = undefined;

/**
 * @member {module:model/KeyAttributes} attributes
 */
DeletedKeyBundle.prototype['attributes'] = undefined;

/**
 * @member {module:model/JsonWebKey} key
 */
DeletedKeyBundle.prototype['key'] = undefined;

/**
 * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
 * @member {Boolean} managed
 */
DeletedKeyBundle.prototype['managed'] = undefined;

/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
DeletedKeyBundle.prototype['tags'] = undefined;


// Implement KeyBundle interface:
/**
 * @member {module:model/KeyAttributes} attributes
 */
KeyBundle.prototype['attributes'] = undefined;
/**
 * @member {module:model/JsonWebKey} key
 */
KeyBundle.prototype['key'] = undefined;
/**
 * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
 * @member {Boolean} managed
 */
KeyBundle.prototype['managed'] = undefined;
/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
KeyBundle.prototype['tags'] = undefined;




export default DeletedKeyBundle;

