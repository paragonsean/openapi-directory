/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubjectAlternativeNames from './SubjectAlternativeNames';

/**
 * The X509CertificateProperties model module.
 * @module model/X509CertificateProperties
 * @version 7.0-preview
 */
class X509CertificateProperties {
    /**
     * Constructs a new <code>X509CertificateProperties</code>.
     * Properties of the X509 component of a certificate.
     * @alias module:model/X509CertificateProperties
     */
    constructor() { 
        
        X509CertificateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>X509CertificateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X509CertificateProperties} obj Optional instance to populate.
     * @return {module:model/X509CertificateProperties} The populated <code>X509CertificateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X509CertificateProperties();

            if (data.hasOwnProperty('ekus')) {
                obj['ekus'] = ApiClient.convertToType(data['ekus'], ['String']);
            }
            if (data.hasOwnProperty('key_usage')) {
                obj['key_usage'] = ApiClient.convertToType(data['key_usage'], ['String']);
            }
            if (data.hasOwnProperty('sans')) {
                obj['sans'] = SubjectAlternativeNames.constructFromObject(data['sans']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('validity_months')) {
                obj['validity_months'] = ApiClient.convertToType(data['validity_months'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X509CertificateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X509CertificateProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ekus'])) {
            throw new Error("Expected the field `ekus` to be an array in the JSON data but got " + data['ekus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['key_usage'])) {
            throw new Error("Expected the field `key_usage` to be an array in the JSON data but got " + data['key_usage']);
        }
        // validate the optional field `sans`
        if (data['sans']) { // data not null
          SubjectAlternativeNames.validateJSON(data['sans']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * The enhanced key usage.
 * @member {Array.<String>} ekus
 */
X509CertificateProperties.prototype['ekus'] = undefined;

/**
 * List of key usages.
 * @member {Array.<module:model/X509CertificateProperties.KeyUsageEnum>} key_usage
 */
X509CertificateProperties.prototype['key_usage'] = undefined;

/**
 * @member {module:model/SubjectAlternativeNames} sans
 */
X509CertificateProperties.prototype['sans'] = undefined;

/**
 * The subject name. Should be a valid X509 distinguished Name.
 * @member {String} subject
 */
X509CertificateProperties.prototype['subject'] = undefined;

/**
 * The duration that the certificate is valid in months.
 * @member {Number} validity_months
 */
X509CertificateProperties.prototype['validity_months'] = undefined;





/**
 * Allowed values for the <code>keyUsage</code> property.
 * @enum {String}
 * @readonly
 */
X509CertificateProperties['KeyUsageEnum'] = {

    /**
     * value: "digitalSignature"
     * @const
     */
    "digitalSignature": "digitalSignature",

    /**
     * value: "nonRepudiation"
     * @const
     */
    "nonRepudiation": "nonRepudiation",

    /**
     * value: "keyEncipherment"
     * @const
     */
    "keyEncipherment": "keyEncipherment",

    /**
     * value: "dataEncipherment"
     * @const
     */
    "dataEncipherment": "dataEncipherment",

    /**
     * value: "keyAgreement"
     * @const
     */
    "keyAgreement": "keyAgreement",

    /**
     * value: "keyCertSign"
     * @const
     */
    "keyCertSign": "keyCertSign",

    /**
     * value: "cRLSign"
     * @const
     */
    "cRLSign": "cRLSign",

    /**
     * value: "encipherOnly"
     * @const
     */
    "encipherOnly": "encipherOnly",

    /**
     * value: "decipherOnly"
     * @const
     */
    "decipherOnly": "decipherOnly"
};



export default X509CertificateProperties;

