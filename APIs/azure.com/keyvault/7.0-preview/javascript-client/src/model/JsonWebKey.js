/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonWebKey model module.
 * @module model/JsonWebKey
 * @version 7.0-preview
 */
class JsonWebKey {
    /**
     * Constructs a new <code>JsonWebKey</code>.
     * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
     * @alias module:model/JsonWebKey
     */
    constructor() { 
        
        JsonWebKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonWebKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonWebKey} obj Optional instance to populate.
     * @return {module:model/JsonWebKey} The populated <code>JsonWebKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonWebKey();

            if (data.hasOwnProperty('crv')) {
                obj['crv'] = ApiClient.convertToType(data['crv'], 'String');
            }
            if (data.hasOwnProperty('d')) {
                obj['d'] = ApiClient.convertToType(data['d'], 'String');
            }
            if (data.hasOwnProperty('dp')) {
                obj['dp'] = ApiClient.convertToType(data['dp'], 'String');
            }
            if (data.hasOwnProperty('dq')) {
                obj['dq'] = ApiClient.convertToType(data['dq'], 'String');
            }
            if (data.hasOwnProperty('e')) {
                obj['e'] = ApiClient.convertToType(data['e'], 'String');
            }
            if (data.hasOwnProperty('k')) {
                obj['k'] = ApiClient.convertToType(data['k'], 'String');
            }
            if (data.hasOwnProperty('key_hsm')) {
                obj['key_hsm'] = ApiClient.convertToType(data['key_hsm'], 'String');
            }
            if (data.hasOwnProperty('key_ops')) {
                obj['key_ops'] = ApiClient.convertToType(data['key_ops'], ['String']);
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('kty')) {
                obj['kty'] = ApiClient.convertToType(data['kty'], 'String');
            }
            if (data.hasOwnProperty('n')) {
                obj['n'] = ApiClient.convertToType(data['n'], 'String');
            }
            if (data.hasOwnProperty('p')) {
                obj['p'] = ApiClient.convertToType(data['p'], 'String');
            }
            if (data.hasOwnProperty('q')) {
                obj['q'] = ApiClient.convertToType(data['q'], 'String');
            }
            if (data.hasOwnProperty('qi')) {
                obj['qi'] = ApiClient.convertToType(data['qi'], 'String');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'String');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonWebKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonWebKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['crv'] && !(typeof data['crv'] === 'string' || data['crv'] instanceof String)) {
            throw new Error("Expected the field `crv` to be a primitive type in the JSON string but got " + data['crv']);
        }
        // ensure the json data is a string
        if (data['d'] && !(typeof data['d'] === 'string' || data['d'] instanceof String)) {
            throw new Error("Expected the field `d` to be a primitive type in the JSON string but got " + data['d']);
        }
        // ensure the json data is a string
        if (data['dp'] && !(typeof data['dp'] === 'string' || data['dp'] instanceof String)) {
            throw new Error("Expected the field `dp` to be a primitive type in the JSON string but got " + data['dp']);
        }
        // ensure the json data is a string
        if (data['dq'] && !(typeof data['dq'] === 'string' || data['dq'] instanceof String)) {
            throw new Error("Expected the field `dq` to be a primitive type in the JSON string but got " + data['dq']);
        }
        // ensure the json data is a string
        if (data['e'] && !(typeof data['e'] === 'string' || data['e'] instanceof String)) {
            throw new Error("Expected the field `e` to be a primitive type in the JSON string but got " + data['e']);
        }
        // ensure the json data is a string
        if (data['k'] && !(typeof data['k'] === 'string' || data['k'] instanceof String)) {
            throw new Error("Expected the field `k` to be a primitive type in the JSON string but got " + data['k']);
        }
        // ensure the json data is a string
        if (data['key_hsm'] && !(typeof data['key_hsm'] === 'string' || data['key_hsm'] instanceof String)) {
            throw new Error("Expected the field `key_hsm` to be a primitive type in the JSON string but got " + data['key_hsm']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['key_ops'])) {
            throw new Error("Expected the field `key_ops` to be an array in the JSON data but got " + data['key_ops']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['kty'] && !(typeof data['kty'] === 'string' || data['kty'] instanceof String)) {
            throw new Error("Expected the field `kty` to be a primitive type in the JSON string but got " + data['kty']);
        }
        // ensure the json data is a string
        if (data['n'] && !(typeof data['n'] === 'string' || data['n'] instanceof String)) {
            throw new Error("Expected the field `n` to be a primitive type in the JSON string but got " + data['n']);
        }
        // ensure the json data is a string
        if (data['p'] && !(typeof data['p'] === 'string' || data['p'] instanceof String)) {
            throw new Error("Expected the field `p` to be a primitive type in the JSON string but got " + data['p']);
        }
        // ensure the json data is a string
        if (data['q'] && !(typeof data['q'] === 'string' || data['q'] instanceof String)) {
            throw new Error("Expected the field `q` to be a primitive type in the JSON string but got " + data['q']);
        }
        // ensure the json data is a string
        if (data['qi'] && !(typeof data['qi'] === 'string' || data['qi'] instanceof String)) {
            throw new Error("Expected the field `qi` to be a primitive type in the JSON string but got " + data['qi']);
        }
        // ensure the json data is a string
        if (data['x'] && !(typeof data['x'] === 'string' || data['x'] instanceof String)) {
            throw new Error("Expected the field `x` to be a primitive type in the JSON string but got " + data['x']);
        }
        // ensure the json data is a string
        if (data['y'] && !(typeof data['y'] === 'string' || data['y'] instanceof String)) {
            throw new Error("Expected the field `y` to be a primitive type in the JSON string but got " + data['y']);
        }

        return true;
    }


}



/**
 * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
 * @member {module:model/JsonWebKey.CrvEnum} crv
 */
JsonWebKey.prototype['crv'] = undefined;

/**
 * RSA private exponent, or the D component of an EC private key.
 * @member {String} d
 */
JsonWebKey.prototype['d'] = undefined;

/**
 * RSA private key parameter.
 * @member {String} dp
 */
JsonWebKey.prototype['dp'] = undefined;

/**
 * RSA private key parameter.
 * @member {String} dq
 */
JsonWebKey.prototype['dq'] = undefined;

/**
 * RSA public exponent.
 * @member {String} e
 */
JsonWebKey.prototype['e'] = undefined;

/**
 * Symmetric key.
 * @member {String} k
 */
JsonWebKey.prototype['k'] = undefined;

/**
 * HSM Token, used with 'Bring Your Own Key'.
 * @member {String} key_hsm
 */
JsonWebKey.prototype['key_hsm'] = undefined;

/**
 * @member {Array.<String>} key_ops
 */
JsonWebKey.prototype['key_ops'] = undefined;

/**
 * Key identifier.
 * @member {String} kid
 */
JsonWebKey.prototype['kid'] = undefined;

/**
 * JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
 * @member {module:model/JsonWebKey.KtyEnum} kty
 */
JsonWebKey.prototype['kty'] = undefined;

/**
 * RSA modulus.
 * @member {String} n
 */
JsonWebKey.prototype['n'] = undefined;

/**
 * RSA secret prime.
 * @member {String} p
 */
JsonWebKey.prototype['p'] = undefined;

/**
 * RSA secret prime, with p < q.
 * @member {String} q
 */
JsonWebKey.prototype['q'] = undefined;

/**
 * RSA private key parameter.
 * @member {String} qi
 */
JsonWebKey.prototype['qi'] = undefined;

/**
 * X component of an EC public key.
 * @member {String} x
 */
JsonWebKey.prototype['x'] = undefined;

/**
 * Y component of an EC public key.
 * @member {String} y
 */
JsonWebKey.prototype['y'] = undefined;





/**
 * Allowed values for the <code>crv</code> property.
 * @enum {String}
 * @readonly
 */
JsonWebKey['CrvEnum'] = {

    /**
     * value: "P-256"
     * @const
     */
    "256": "P-256",

    /**
     * value: "P-384"
     * @const
     */
    "384": "P-384",

    /**
     * value: "P-521"
     * @const
     */
    "521": "P-521",

    /**
     * value: "P-256K"
     * @const
     */
    "256K": "P-256K"
};


/**
 * Allowed values for the <code>kty</code> property.
 * @enum {String}
 * @readonly
 */
JsonWebKey['KtyEnum'] = {

    /**
     * value: "EC"
     * @const
     */
    "EC": "EC",

    /**
     * value: "EC-HSM"
     * @const
     */
    "EC-HSM": "EC-HSM",

    /**
     * value: "RSA"
     * @const
     */
    "RSA": "RSA",

    /**
     * value: "RSA-HSM"
     * @const
     */
    "RSA-HSM": "RSA-HSM",

    /**
     * value: "oct"
     * @const
     */
    "oct": "oct"
};



export default JsonWebKey;

