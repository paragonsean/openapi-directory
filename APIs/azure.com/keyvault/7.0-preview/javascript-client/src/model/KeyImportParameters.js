/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonWebKey from './JsonWebKey';
import KeyAttributes from './KeyAttributes';

/**
 * The KeyImportParameters model module.
 * @module model/KeyImportParameters
 * @version 7.0-preview
 */
class KeyImportParameters {
    /**
     * Constructs a new <code>KeyImportParameters</code>.
     * The key import parameters.
     * @alias module:model/KeyImportParameters
     * @param key {module:model/JsonWebKey} 
     */
    constructor(key) { 
        
        KeyImportParameters.initialize(this, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key) { 
        obj['key'] = key;
    }

    /**
     * Constructs a <code>KeyImportParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyImportParameters} obj Optional instance to populate.
     * @return {module:model/KeyImportParameters} The populated <code>KeyImportParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyImportParameters();

            if (data.hasOwnProperty('Hsm')) {
                obj['Hsm'] = ApiClient.convertToType(data['Hsm'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = KeyAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = JsonWebKey.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyImportParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyImportParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyImportParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          KeyAttributes.validateJSON(data['attributes']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          JsonWebKey.validateJSON(data['key']);
        }

        return true;
    }


}

KeyImportParameters.RequiredProperties = ["key"];

/**
 * Whether to import as a hardware key (HSM) or software key.
 * @member {Boolean} Hsm
 */
KeyImportParameters.prototype['Hsm'] = undefined;

/**
 * @member {module:model/KeyAttributes} attributes
 */
KeyImportParameters.prototype['attributes'] = undefined;

/**
 * @member {module:model/JsonWebKey} key
 */
KeyImportParameters.prototype['key'] = undefined;

/**
 * Application specific metadata in the form of key-value pairs.
 * @member {Object.<String, String>} tags
 */
KeyImportParameters.prototype['tags'] = undefined;






export default KeyImportParameters;

