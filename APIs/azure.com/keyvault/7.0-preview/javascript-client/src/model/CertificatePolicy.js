/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateAttributes from './CertificateAttributes';
import IssuerParameters from './IssuerParameters';
import KeyProperties from './KeyProperties';
import LifetimeAction from './LifetimeAction';
import SecretProperties from './SecretProperties';
import X509CertificateProperties from './X509CertificateProperties';

/**
 * The CertificatePolicy model module.
 * @module model/CertificatePolicy
 * @version 7.0-preview
 */
class CertificatePolicy {
    /**
     * Constructs a new <code>CertificatePolicy</code>.
     * Management policy for a certificate.
     * @alias module:model/CertificatePolicy
     */
    constructor() { 
        
        CertificatePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificatePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificatePolicy} obj Optional instance to populate.
     * @return {module:model/CertificatePolicy} The populated <code>CertificatePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificatePolicy();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = CertificateAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = IssuerParameters.constructFromObject(data['issuer']);
            }
            if (data.hasOwnProperty('key_props')) {
                obj['key_props'] = KeyProperties.constructFromObject(data['key_props']);
            }
            if (data.hasOwnProperty('lifetime_actions')) {
                obj['lifetime_actions'] = ApiClient.convertToType(data['lifetime_actions'], [LifetimeAction]);
            }
            if (data.hasOwnProperty('secret_props')) {
                obj['secret_props'] = SecretProperties.constructFromObject(data['secret_props']);
            }
            if (data.hasOwnProperty('x509_props')) {
                obj['x509_props'] = X509CertificateProperties.constructFromObject(data['x509_props']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificatePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificatePolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          CertificateAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `issuer`
        if (data['issuer']) { // data not null
          IssuerParameters.validateJSON(data['issuer']);
        }
        // validate the optional field `key_props`
        if (data['key_props']) { // data not null
          KeyProperties.validateJSON(data['key_props']);
        }
        if (data['lifetime_actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lifetime_actions'])) {
                throw new Error("Expected the field `lifetime_actions` to be an array in the JSON data but got " + data['lifetime_actions']);
            }
            // validate the optional field `lifetime_actions` (array)
            for (const item of data['lifetime_actions']) {
                LifetimeAction.validateJSON(item);
            };
        }
        // validate the optional field `secret_props`
        if (data['secret_props']) { // data not null
          SecretProperties.validateJSON(data['secret_props']);
        }
        // validate the optional field `x509_props`
        if (data['x509_props']) { // data not null
          X509CertificateProperties.validateJSON(data['x509_props']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateAttributes} attributes
 */
CertificatePolicy.prototype['attributes'] = undefined;

/**
 * The certificate id.
 * @member {String} id
 */
CertificatePolicy.prototype['id'] = undefined;

/**
 * @member {module:model/IssuerParameters} issuer
 */
CertificatePolicy.prototype['issuer'] = undefined;

/**
 * @member {module:model/KeyProperties} key_props
 */
CertificatePolicy.prototype['key_props'] = undefined;

/**
 * Actions that will be performed by Key Vault over the lifetime of a certificate.
 * @member {Array.<module:model/LifetimeAction>} lifetime_actions
 */
CertificatePolicy.prototype['lifetime_actions'] = undefined;

/**
 * @member {module:model/SecretProperties} secret_props
 */
CertificatePolicy.prototype['secret_props'] = undefined;

/**
 * @member {module:model/X509CertificateProperties} x509_props
 */
CertificatePolicy.prototype['x509_props'] = undefined;






export default CertificatePolicy;

