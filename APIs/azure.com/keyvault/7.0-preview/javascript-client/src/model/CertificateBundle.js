/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateAttributes from './CertificateAttributes';
import CertificatePolicy from './CertificatePolicy';

/**
 * The CertificateBundle model module.
 * @module model/CertificateBundle
 * @version 7.0-preview
 */
class CertificateBundle {
    /**
     * Constructs a new <code>CertificateBundle</code>.
     * A certificate bundle consists of a certificate (X509) plus its attributes.
     * @alias module:model/CertificateBundle
     */
    constructor() { 
        
        CertificateBundle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateBundle} obj Optional instance to populate.
     * @return {module:model/CertificateBundle} The populated <code>CertificateBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateBundle();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = CertificateAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('cer')) {
                obj['cer'] = ApiClient.convertToType(data['cer'], 'Blob');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = CertificatePolicy.constructFromObject(data['policy']);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('x5t')) {
                obj['x5t'] = ApiClient.convertToType(data['x5t'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateBundle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          CertificateAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          CertificatePolicy.validateJSON(data['policy']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['x5t'] && !(typeof data['x5t'] === 'string' || data['x5t'] instanceof String)) {
            throw new Error("Expected the field `x5t` to be a primitive type in the JSON string but got " + data['x5t']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateAttributes} attributes
 */
CertificateBundle.prototype['attributes'] = undefined;

/**
 * CER contents of x509 certificate.
 * @member {Blob} cer
 */
CertificateBundle.prototype['cer'] = undefined;

/**
 * The content type of the secret.
 * @member {String} contentType
 */
CertificateBundle.prototype['contentType'] = undefined;

/**
 * The certificate id.
 * @member {String} id
 */
CertificateBundle.prototype['id'] = undefined;

/**
 * The key id.
 * @member {String} kid
 */
CertificateBundle.prototype['kid'] = undefined;

/**
 * @member {module:model/CertificatePolicy} policy
 */
CertificateBundle.prototype['policy'] = undefined;

/**
 * The secret id.
 * @member {String} sid
 */
CertificateBundle.prototype['sid'] = undefined;

/**
 * Application specific metadata in the form of key-value pairs
 * @member {Object.<String, String>} tags
 */
CertificateBundle.prototype['tags'] = undefined;

/**
 * Thumbprint of the certificate.
 * @member {String} x5t
 */
CertificateBundle.prototype['x5t'] = undefined;






export default CertificateBundle;

