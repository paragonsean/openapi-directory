/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssuerParameters model module.
 * @module model/IssuerParameters
 * @version 7.0-preview
 */
class IssuerParameters {
    /**
     * Constructs a new <code>IssuerParameters</code>.
     * Parameters for the issuer of the X509 component of a certificate.
     * @alias module:model/IssuerParameters
     */
    constructor() { 
        
        IssuerParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuerParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuerParameters} obj Optional instance to populate.
     * @return {module:model/IssuerParameters} The populated <code>IssuerParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuerParameters();

            if (data.hasOwnProperty('cert_transparency')) {
                obj['cert_transparency'] = ApiClient.convertToType(data['cert_transparency'], 'Boolean');
            }
            if (data.hasOwnProperty('cty')) {
                obj['cty'] = ApiClient.convertToType(data['cty'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuerParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuerParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cty'] && !(typeof data['cty'] === 'string' || data['cty'] instanceof String)) {
            throw new Error("Expected the field `cty` to be a primitive type in the JSON string but got " + data['cty']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Indicates if the certificates generated under this policy should be published to certificate transparency logs.
 * @member {Boolean} cert_transparency
 */
IssuerParameters.prototype['cert_transparency'] = undefined;

/**
 * Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL'
 * @member {String} cty
 */
IssuerParameters.prototype['cty'] = undefined;

/**
 * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
 * @member {String} name
 */
IssuerParameters.prototype['name'] = undefined;






export default IssuerParameters;

