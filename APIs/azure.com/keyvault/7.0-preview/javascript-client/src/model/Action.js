/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Action model module.
 * @module model/Action
 * @version 7.0-preview
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * The action that will be executed.
     * @alias module:model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('action_type')) {
                obj['action_type'] = ApiClient.convertToType(data['action_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action_type'] && !(typeof data['action_type'] === 'string' || data['action_type'] instanceof String)) {
            throw new Error("Expected the field `action_type` to be a primitive type in the JSON string but got " + data['action_type']);
        }

        return true;
    }


}



/**
 * The type of the action.
 * @member {module:model/Action.ActionTypeEnum} action_type
 */
Action.prototype['action_type'] = undefined;





/**
 * Allowed values for the <code>action_type</code> property.
 * @enum {String}
 * @readonly
 */
Action['ActionTypeEnum'] = {

    /**
     * value: "EmailContacts"
     * @const
     */
    "EmailContacts": "EmailContacts",

    /**
     * value: "AutoRenew"
     * @const
     */
    "AutoRenew": "AutoRenew"
};



export default Action;

