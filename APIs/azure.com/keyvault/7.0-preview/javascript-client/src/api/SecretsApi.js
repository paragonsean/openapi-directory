/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupSecretResult from '../model/BackupSecretResult';
import DeletedSecretBundle from '../model/DeletedSecretBundle';
import KeyVaultError from '../model/KeyVaultError';
import SecretBundle from '../model/SecretBundle';
import SecretListResult from '../model/SecretListResult';
import SecretRestoreParameters from '../model/SecretRestoreParameters';
import SecretSetParameters from '../model/SecretSetParameters';
import SecretUpdateParameters from '../model/SecretUpdateParameters';

/**
* Secrets service.
* @module api/SecretsApi
* @version 7.0-preview
*/
export default class SecretsApi {

    /**
    * Constructs a new SecretsApi. 
    * @alias module:api/SecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupSecret operation.
     * @callback module:api/SecretsApi~backupSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupSecretResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/SecretsApi~backupSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupSecretResult}
     */
    backupSecret(secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling backupSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupSecretResult;
      return this.apiClient.callApi(
        '/secrets/{secret-name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecret operation.
     * @callback module:api/SecretsApi~deleteSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/SecretsApi~deleteSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSecretBundle}
     */
    deleteSecret(secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling deleteSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSecretBundle;
      return this.apiClient.callApi(
        '/secrets/{secret-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecret operation.
     * @callback module:api/SecretsApi~getSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     * @param {String} secretName The name of the secret.
     * @param {String} secretVersion The version of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/SecretsApi~getSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretBundle}
     */
    getSecret(secretName, secretVersion, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling getSecret");
      }
      // verify the required parameter 'secretVersion' is set
      if (secretVersion === undefined || secretVersion === null) {
        throw new Error("Missing the required parameter 'secretVersion' when calling getSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSecret");
      }

      let pathParams = {
        'secret-name': secretName,
        'secret-version': secretVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretBundle;
      return this.apiClient.callApi(
        '/secrets/{secret-name}/{secret-version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecretVersions operation.
     * @callback module:api/SecretsApi~getSecretVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @param {module:api/SecretsApi~getSecretVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretListResult}
     */
    getSecretVersions(secretName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling getSecretVersions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSecretVersions");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretListResult;
      return this.apiClient.callApi(
        '/secrets/{secret-name}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecrets operation.
     * @callback module:api/SecretsApi~getSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified, the service will return up to 25 results.
     * @param {module:api/SecretsApi~getSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretListResult}
     */
    getSecrets(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSecrets");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretListResult;
      return this.apiClient.callApi(
        '/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreSecret operation.
     * @callback module:api/SecretsApi~restoreSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     * @param {String} apiVersion Client API version.
     * @param {module:model/SecretRestoreParameters} parameters The parameters to restore the secret.
     * @param {module:api/SecretsApi~restoreSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretBundle}
     */
    restoreSecret(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling restoreSecret");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling restoreSecret");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretBundle;
      return this.apiClient.callApi(
        '/secrets/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSecret operation.
     * @callback module:api/SecretsApi~setSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:model/SecretSetParameters} parameters The parameters for setting the secret.
     * @param {module:api/SecretsApi~setSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretBundle}
     */
    setSecret(secretName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling setSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setSecret");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling setSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretBundle;
      return this.apiClient.callApi(
        '/secrets/{secret-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecret operation.
     * @callback module:api/SecretsApi~updateSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     * @param {String} secretName The name of the secret.
     * @param {String} secretVersion The version of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:model/SecretUpdateParameters} parameters The parameters for update secret operation.
     * @param {module:api/SecretsApi~updateSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretBundle}
     */
    updateSecret(secretName, secretVersion, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling updateSecret");
      }
      // verify the required parameter 'secretVersion' is set
      if (secretVersion === undefined || secretVersion === null) {
        throw new Error("Missing the required parameter 'secretVersion' when calling updateSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateSecret");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateSecret");
      }

      let pathParams = {
        'secret-name': secretName,
        'secret-version': secretVersion
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretBundle;
      return this.apiClient.callApi(
        '/secrets/{secret-name}/{secret-version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
