/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletedSecretBundle from '../model/DeletedSecretBundle';
import DeletedSecretListResult from '../model/DeletedSecretListResult';
import KeyVaultError from '../model/KeyVaultError';
import SecretBundle from '../model/SecretBundle';

/**
* DeletedSecrets service.
* @module api/DeletedSecretsApi
* @version 7.0-preview
*/
export default class DeletedSecretsApi {

    /**
    * Constructs a new DeletedSecretsApi. 
    * @alias module:api/DeletedSecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeletedSecret operation.
     * @callback module:api/DeletedSecretsApi~getDeletedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedSecretsApi~getDeletedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSecretBundle}
     */
    getDeletedSecret(secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling getDeletedSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSecretBundle;
      return this.apiClient.callApi(
        '/deletedsecrets/{secret-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedSecrets operation.
     * @callback module:api/DeletedSecretsApi~getDeletedSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSecretListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/DeletedSecretsApi~getDeletedSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSecretListResult}
     */
    getDeletedSecrets(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedSecrets");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSecretListResult;
      return this.apiClient.callApi(
        '/deletedsecrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purgeDeletedSecret operation.
     * @callback module:api/DeletedSecretsApi~purgeDeletedSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedSecretsApi~purgeDeletedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    purgeDeletedSecret(secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling purgeDeletedSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling purgeDeletedSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deletedsecrets/{secret-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverDeletedSecret operation.
     * @callback module:api/DeletedSecretsApi~recoverDeletedSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     * @param {String} secretName The name of the deleted secret.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedSecretsApi~recoverDeletedSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretBundle}
     */
    recoverDeletedSecret(secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling recoverDeletedSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recoverDeletedSecret");
      }

      let pathParams = {
        'secret-name': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretBundle;
      return this.apiClient.callApi(
        '/deletedsecrets/{secret-name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
