/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletedSasDefinitionBundle from '../model/DeletedSasDefinitionBundle';
import DeletedSasDefinitionListResult from '../model/DeletedSasDefinitionListResult';
import DeletedStorageBundle from '../model/DeletedStorageBundle';
import DeletedStorageListResult from '../model/DeletedStorageListResult';
import KeyVaultError from '../model/KeyVaultError';
import SasDefinitionBundle from '../model/SasDefinitionBundle';
import StorageBundle from '../model/StorageBundle';

/**
* DeletedStorage service.
* @module api/DeletedStorageApi
* @version 7.0-preview
*/
export default class DeletedStorageApi {

    /**
    * Constructs a new DeletedStorageApi. 
    * @alias module:api/DeletedStorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeletedSasDefinition operation.
     * @callback module:api/DeletedStorageApi~getDeletedSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedStorageApi~getDeletedSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSasDefinitionBundle}
     */
    getDeletedSasDefinition(storageAccountName, sasDefinitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getDeletedSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling getDeletedSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSasDefinitionBundle;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}/sas/{sas-definition-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedSasDefinitions operation.
     * @callback module:api/DeletedStorageApi~getDeletedSasDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSasDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/DeletedStorageApi~getDeletedSasDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSasDefinitionListResult}
     */
    getDeletedSasDefinitions(storageAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getDeletedSasDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedSasDefinitions");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSasDefinitionListResult;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}/sas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedStorageAccount operation.
     * @callback module:api/DeletedStorageApi~getDeletedStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedStorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedStorageApi~getDeletedStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedStorageBundle}
     */
    getDeletedStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getDeletedStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedStorageBundle;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeletedStorageAccounts operation.
     * @callback module:api/DeletedStorageApi~getDeletedStorageAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedStorageListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/DeletedStorageApi~getDeletedStorageAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedStorageListResult}
     */
    getDeletedStorageAccounts(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeletedStorageAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedStorageListResult;
      return this.apiClient.callApi(
        '/deletedstorage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purgeDeletedStorageAccount operation.
     * @callback module:api/DeletedStorageApi~purgeDeletedStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedStorageApi~purgeDeletedStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    purgeDeletedStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling purgeDeletedStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling purgeDeletedStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverDeletedSasDefinition operation.
     * @callback module:api/DeletedStorageApi~recoverDeletedSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedStorageApi~recoverDeletedSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SasDefinitionBundle}
     */
    recoverDeletedSasDefinition(storageAccountName, sasDefinitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling recoverDeletedSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling recoverDeletedSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recoverDeletedSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SasDefinitionBundle;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverDeletedStorageAccount operation.
     * @callback module:api/DeletedStorageApi~recoverDeletedStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/DeletedStorageApi~recoverDeletedStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    recoverDeletedStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling recoverDeletedStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recoverDeletedStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/deletedstorage/{storage-account-name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
