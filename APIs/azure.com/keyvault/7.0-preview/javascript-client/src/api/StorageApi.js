/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupStorageResult from '../model/BackupStorageResult';
import DeletedSasDefinitionBundle from '../model/DeletedSasDefinitionBundle';
import DeletedStorageBundle from '../model/DeletedStorageBundle';
import KeyVaultError from '../model/KeyVaultError';
import SasDefinitionBundle from '../model/SasDefinitionBundle';
import SasDefinitionCreateParameters from '../model/SasDefinitionCreateParameters';
import SasDefinitionListResult from '../model/SasDefinitionListResult';
import SasDefinitionUpdateParameters from '../model/SasDefinitionUpdateParameters';
import StorageAccountCreateParameters from '../model/StorageAccountCreateParameters';
import StorageAccountRegenerteKeyParameters from '../model/StorageAccountRegenerteKeyParameters';
import StorageAccountUpdateParameters from '../model/StorageAccountUpdateParameters';
import StorageBundle from '../model/StorageBundle';
import StorageListResult from '../model/StorageListResult';
import StorageRestoreParameters from '../model/StorageRestoreParameters';

/**
* Storage service.
* @module api/StorageApi
* @version 7.0-preview
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backupStorageAccount operation.
     * @callback module:api/StorageApi~backupStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupStorageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/StorageApi~backupStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupStorageResult}
     */
    backupStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling backupStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling backupStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupStorageResult;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSasDefinition operation.
     * @callback module:api/StorageApi~deleteSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:api/StorageApi~deleteSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSasDefinitionBundle}
     */
    deleteSasDefinition(storageAccountName, sasDefinitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling deleteSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling deleteSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedSasDefinitionBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/sas/{sas-definition-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStorageAccount operation.
     * @callback module:api/StorageApi~deleteStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedStorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/StorageApi~deleteStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedStorageBundle}
     */
    deleteStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling deleteStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedStorageBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSasDefinition operation.
     * @callback module:api/StorageApi~getSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:api/StorageApi~getSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SasDefinitionBundle}
     */
    getSasDefinition(storageAccountName, sasDefinitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling getSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SasDefinitionBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/sas/{sas-definition-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSasDefinitions operation.
     * @callback module:api/StorageApi~getSasDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SasDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/StorageApi~getSasDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SasDefinitionListResult}
     */
    getSasDefinitions(storageAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getSasDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSasDefinitions");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SasDefinitionListResult;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/sas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStorageAccount operation.
     * @callback module:api/StorageApi~getStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:api/StorageApi~getStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    getStorageAccount(storageAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling getStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStorageAccounts operation.
     * @callback module:api/StorageApi~getStorageAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] Maximum number of results to return in a page. If not specified the service will return up to 25 results.
     * @param {module:api/StorageApi~getStorageAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageListResult}
     */
    getStorageAccounts(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getStorageAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageListResult;
      return this.apiClient.callApi(
        '/storage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateStorageAccountKey operation.
     * @callback module:api/StorageApi~regenerateStorageAccountKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/StorageAccountRegenerteKeyParameters} parameters The parameters to regenerate storage account key.
     * @param {module:api/StorageApi~regenerateStorageAccountKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    regenerateStorageAccountKey(storageAccountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling regenerateStorageAccountKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regenerateStorageAccountKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling regenerateStorageAccountKey");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/regeneratekey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreStorageAccount operation.
     * @callback module:api/StorageApi~restoreStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     * @param {String} apiVersion Client API version.
     * @param {module:model/StorageRestoreParameters} parameters The parameters to restore the storage account.
     * @param {module:api/StorageApi~restoreStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    restoreStorageAccount(apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling restoreStorageAccount");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling restoreStorageAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/storage/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSasDefinition operation.
     * @callback module:api/StorageApi~setSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:model/SasDefinitionCreateParameters} parameters The parameters to create a SAS definition.
     * @param {module:api/StorageApi~setSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SasDefinitionBundle}
     */
    setSasDefinition(storageAccountName, sasDefinitionName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling setSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling setSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setSasDefinition");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling setSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SasDefinitionBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/sas/{sas-definition-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStorageAccount operation.
     * @callback module:api/StorageApi~setStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/StorageAccountCreateParameters} parameters The parameters to create a storage account.
     * @param {module:api/StorageApi~setStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    setStorageAccount(storageAccountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling setStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setStorageAccount");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling setStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSasDefinition operation.
     * @callback module:api/StorageApi~updateSasDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SasDefinitionBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} sasDefinitionName The name of the SAS definition.
     * @param {String} apiVersion Client API version.
     * @param {module:model/SasDefinitionUpdateParameters} parameters The parameters to update a SAS definition.
     * @param {module:api/StorageApi~updateSasDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SasDefinitionBundle}
     */
    updateSasDefinition(storageAccountName, sasDefinitionName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling updateSasDefinition");
      }
      // verify the required parameter 'sasDefinitionName' is set
      if (sasDefinitionName === undefined || sasDefinitionName === null) {
        throw new Error("Missing the required parameter 'sasDefinitionName' when calling updateSasDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateSasDefinition");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateSasDefinition");
      }

      let pathParams = {
        'storage-account-name': storageAccountName,
        'sas-definition-name': sasDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SasDefinitionBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}/sas/{sas-definition-name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStorageAccount operation.
     * @callback module:api/StorageApi~updateStorageAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param {String} storageAccountName The name of the storage account.
     * @param {String} apiVersion Client API version.
     * @param {module:model/StorageAccountUpdateParameters} parameters The parameters to update a storage account.
     * @param {module:api/StorageApi~updateStorageAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageBundle}
     */
    updateStorageAccount(storageAccountName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'storageAccountName' is set
      if (storageAccountName === undefined || storageAccountName === null) {
        throw new Error("Missing the required parameter 'storageAccountName' when calling updateStorageAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateStorageAccount");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling updateStorageAccount");
      }

      let pathParams = {
        'storage-account-name': storageAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageBundle;
      return this.apiClient.callApi(
        '/storage/{storage-account-name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
