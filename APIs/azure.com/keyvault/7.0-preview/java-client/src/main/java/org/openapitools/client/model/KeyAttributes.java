/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes of a key managed by the key vault service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:41.971524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyAttributes {
  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it contains &#39;Purgeable&#39; the key can be permanently deleted by a privileged user; otherwise, only the system can purge the key, at the end of the retention interval.
   */
  @JsonAdapter(RecoveryLevelEnum.Adapter.class)
  public enum RecoveryLevelEnum {
    PURGEABLE("Purgeable"),
    
    RECOVERABLE_PURGEABLE("Recoverable+Purgeable"),
    
    RECOVERABLE("Recoverable"),
    
    RECOVERABLE_PROTECTED_SUBSCRIPTION("Recoverable+ProtectedSubscription");

    private String value;

    RecoveryLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecoveryLevelEnum fromValue(String value) {
      for (RecoveryLevelEnum b : RecoveryLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecoveryLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecoveryLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecoveryLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecoveryLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecoveryLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOVERY_LEVEL = "recoveryLevel";
  @SerializedName(SERIALIZED_NAME_RECOVERY_LEVEL)
  private RecoveryLevelEnum recoveryLevel;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private Integer exp;

  public static final String SERIALIZED_NAME_NBF = "nbf";
  @SerializedName(SERIALIZED_NAME_NBF)
  private Integer nbf;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private Integer updated;

  public KeyAttributes() {
  }

  public KeyAttributes(
     RecoveryLevelEnum recoveryLevel, 
     Integer created, 
     Integer updated
  ) {
    this();
    this.recoveryLevel = recoveryLevel;
    this.created = created;
    this.updated = updated;
  }

  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it contains &#39;Purgeable&#39; the key can be permanently deleted by a privileged user; otherwise, only the system can purge the key, at the end of the retention interval.
   * @return recoveryLevel
   */
  @javax.annotation.Nullable
  public RecoveryLevelEnum getRecoveryLevel() {
    return recoveryLevel;
  }



  /**
   * Creation time in UTC.
   * @return created
   */
  @javax.annotation.Nullable
  public Integer getCreated() {
    return created;
  }



  public KeyAttributes enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Determines whether the object is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public KeyAttributes exp(Integer exp) {
    this.exp = exp;
    return this;
  }

  /**
   * Expiry date in UTC.
   * @return exp
   */
  @javax.annotation.Nullable
  public Integer getExp() {
    return exp;
  }

  public void setExp(Integer exp) {
    this.exp = exp;
  }


  public KeyAttributes nbf(Integer nbf) {
    this.nbf = nbf;
    return this;
  }

  /**
   * Not before date in UTC.
   * @return nbf
   */
  @javax.annotation.Nullable
  public Integer getNbf() {
    return nbf;
  }

  public void setNbf(Integer nbf) {
    this.nbf = nbf;
  }


  /**
   * Last updated time in UTC.
   * @return updated
   */
  @javax.annotation.Nullable
  public Integer getUpdated() {
    return updated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyAttributes keyAttributes = (KeyAttributes) o;
    return Objects.equals(this.recoveryLevel, keyAttributes.recoveryLevel) &&
        Objects.equals(this.created, keyAttributes.created) &&
        Objects.equals(this.enabled, keyAttributes.enabled) &&
        Objects.equals(this.exp, keyAttributes.exp) &&
        Objects.equals(this.nbf, keyAttributes.nbf) &&
        Objects.equals(this.updated, keyAttributes.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recoveryLevel, created, enabled, exp, nbf, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyAttributes {\n");
    sb.append("    recoveryLevel: ").append(toIndentedString(recoveryLevel)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("enabled");
    openapiFields.add("exp");
    openapiFields.add("nbf");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyAttributes is not found in the empty JSON string", KeyAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recoveryLevel") != null && !jsonObj.get("recoveryLevel").isJsonNull()) && !jsonObj.get("recoveryLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryLevel").toString()));
      }
      // validate the optional field `recoveryLevel`
      if (jsonObj.get("recoveryLevel") != null && !jsonObj.get("recoveryLevel").isJsonNull()) {
        RecoveryLevelEnum.validateJsonElement(jsonObj.get("recoveryLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyAttributes>() {
           @Override
           public void write(JsonWriter out, KeyAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyAttributes
   * @throws IOException if the JSON string is invalid with respect to KeyAttributes
   */
  public static KeyAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyAttributes.class);
  }

  /**
   * Convert an instance of KeyAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

