/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CertificateAttributes;
import org.openapitools.client.model.CertificatePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A certificate bundle consists of a certificate (X509) plus its attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:41.971524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateBundle {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private CertificateAttributes attributes;

  public static final String SERIALIZED_NAME_CER = "cer";
  @SerializedName(SERIALIZED_NAME_CER)
  private byte[] cer;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private CertificatePolicy policy;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_X5T = "x5t";
  @SerializedName(SERIALIZED_NAME_X5T)
  private String x5t;

  public CertificateBundle() {
  }

  public CertificateBundle(
     String id, 
     String kid, 
     String sid, 
     String x5t
  ) {
    this();
    this.id = id;
    this.kid = kid;
    this.sid = sid;
    this.x5t = x5t;
  }

  public CertificateBundle attributes(CertificateAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public CertificateAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(CertificateAttributes attributes) {
    this.attributes = attributes;
  }


  public CertificateBundle cer(byte[] cer) {
    this.cer = cer;
    return this;
  }

  /**
   * CER contents of x509 certificate.
   * @return cer
   */
  @javax.annotation.Nullable
  public byte[] getCer() {
    return cer;
  }

  public void setCer(byte[] cer) {
    this.cer = cer;
  }


  public CertificateBundle contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the secret.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  /**
   * The certificate id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The key id.
   * @return kid
   */
  @javax.annotation.Nullable
  public String getKid() {
    return kid;
  }



  public CertificateBundle policy(CertificatePolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public CertificatePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(CertificatePolicy policy) {
    this.policy = policy;
  }


  /**
   * The secret id.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }



  public CertificateBundle tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CertificateBundle putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Application specific metadata in the form of key-value pairs
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  /**
   * Thumbprint of the certificate.
   * @return x5t
   */
  @javax.annotation.Nullable
  public String getX5t() {
    return x5t;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateBundle certificateBundle = (CertificateBundle) o;
    return Objects.equals(this.attributes, certificateBundle.attributes) &&
        Arrays.equals(this.cer, certificateBundle.cer) &&
        Objects.equals(this.contentType, certificateBundle.contentType) &&
        Objects.equals(this.id, certificateBundle.id) &&
        Objects.equals(this.kid, certificateBundle.kid) &&
        Objects.equals(this.policy, certificateBundle.policy) &&
        Objects.equals(this.sid, certificateBundle.sid) &&
        Objects.equals(this.tags, certificateBundle.tags) &&
        Objects.equals(this.x5t, certificateBundle.x5t);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, Arrays.hashCode(cer), contentType, id, kid, policy, sid, tags, x5t);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateBundle {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    cer: ").append(toIndentedString(cer)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    x5t: ").append(toIndentedString(x5t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("cer");
    openapiFields.add("contentType");
    openapiFields.add("id");
    openapiFields.add("kid");
    openapiFields.add("policy");
    openapiFields.add("sid");
    openapiFields.add("tags");
    openapiFields.add("x5t");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateBundle is not found in the empty JSON string", CertificateBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        CertificateAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        CertificatePolicy.validateJsonElement(jsonObj.get("policy"));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("x5t") != null && !jsonObj.get("x5t").isJsonNull()) && !jsonObj.get("x5t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x5t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x5t").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateBundle>() {
           @Override
           public void write(JsonWriter out, CertificateBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateBundle
   * @throws IOException if the JSON string is invalid with respect to CertificateBundle
   */
  public static CertificateBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateBundle.class);
  }

  /**
   * Convert an instance of CertificateBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

