/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedKeyBundle;
import org.openapitools.client.model.DeletedKeyListResult;
import org.openapitools.client.model.KeyBundle;
import org.openapitools.client.model.KeyVaultError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeletedKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeletedKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeletedKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDeletedKey
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedKeyCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedkeys/{key-name}"
            .replace("{" + "key-name" + "}", localVarApiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedKeyValidateBeforeCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling getDeletedKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedKey(Async)");
        }

        return getDeletedKeyCall(keyName, apiVersion, _callback);

    }

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedKeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedKeyBundle getDeletedKey(String keyName, String apiVersion) throws ApiException {
        ApiResponse<DeletedKeyBundle> localVarResp = getDeletedKeyWithHttpInfo(keyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the public part of a deleted key.
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedKeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedKeyBundle> getDeletedKeyWithHttpInfo(String keyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getDeletedKeyValidateBeforeCall(keyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedKeyBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the public part of a deleted key. (asynchronously)
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedKeyAsync(String keyName, String apiVersion, final ApiCallback<DeletedKeyBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedKeyValidateBeforeCall(keyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedKeyBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedKeys
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedKeysCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedkeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedKeysValidateBeforeCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedKeys(Async)");
        }

        return getDeletedKeysCall(apiVersion, maxresults, _callback);

    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return DeletedKeyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedKeyListResult getDeletedKeys(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<DeletedKeyListResult> localVarResp = getDeletedKeysWithHttpInfo(apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * Lists the deleted keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;DeletedKeyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedKeyListResult> getDeletedKeysWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getDeletedKeysValidateBeforeCall(apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<DeletedKeyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the deleted keys in the specified vault. (asynchronously)
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedKeysAsync(String apiVersion, Integer maxresults, final ApiCallback<DeletedKeyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedKeysValidateBeforeCall(apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<DeletedKeyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purgeDeletedKey
     * @param keyName The name of the key (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, signaling that the key was permanently purged. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedKeyCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedkeys/{key-name}"
            .replace("{" + "key-name" + "}", localVarApiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purgeDeletedKeyValidateBeforeCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling purgeDeletedKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling purgeDeletedKey(Async)");
        }

        return purgeDeletedKeyCall(keyName, apiVersion, _callback);

    }

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     * @param keyName The name of the key (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, signaling that the key was permanently purged. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void purgeDeletedKey(String keyName, String apiVersion) throws ApiException {
        purgeDeletedKeyWithHttpInfo(keyName, apiVersion);
    }

    /**
     * Permanently deletes the specified key.
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     * @param keyName The name of the key (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, signaling that the key was permanently purged. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> purgeDeletedKeyWithHttpInfo(String keyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = purgeDeletedKeyValidateBeforeCall(keyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permanently deletes the specified key. (asynchronously)
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     * @param keyName The name of the key (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, signaling that the key was permanently purged. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedKeyAsync(String keyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purgeDeletedKeyValidateBeforeCall(keyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverDeletedKey
     * @param keyName The name of the deleted key. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Key bundle of the original key and its attributes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedKeyCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedkeys/{key-name}/recover"
            .replace("{" + "key-name" + "}", localVarApiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverDeletedKeyValidateBeforeCall(String keyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling recoverDeletedKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverDeletedKey(Async)");
        }

        return recoverDeletedKeyCall(keyName, apiVersion, _callback);

    }

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     * @param keyName The name of the deleted key. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Key bundle of the original key and its attributes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public KeyBundle recoverDeletedKey(String keyName, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> localVarResp = recoverDeletedKeyWithHttpInfo(keyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Recovers the deleted key to its latest version.
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     * @param keyName The name of the deleted key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Key bundle of the original key and its attributes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBundle> recoverDeletedKeyWithHttpInfo(String keyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverDeletedKeyValidateBeforeCall(keyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers the deleted key to its latest version. (asynchronously)
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     * @param keyName The name of the deleted key. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Key bundle of the original key and its attributes </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedKeyAsync(String keyName, String apiVersion, final ApiCallback<KeyBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverDeletedKeyValidateBeforeCall(keyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
