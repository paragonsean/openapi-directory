/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubjectAlternativeNames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the X509 component of a certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:41.971524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X509CertificateProperties {
  public static final String SERIALIZED_NAME_EKUS = "ekus";
  @SerializedName(SERIALIZED_NAME_EKUS)
  private List<String> ekus = new ArrayList<>();

  /**
   * Gets or Sets keyUsage
   */
  @JsonAdapter(KeyUsageEnum.Adapter.class)
  public enum KeyUsageEnum {
    DIGITAL_SIGNATURE("digitalSignature"),
    
    NON_REPUDIATION("nonRepudiation"),
    
    KEY_ENCIPHERMENT("keyEncipherment"),
    
    DATA_ENCIPHERMENT("dataEncipherment"),
    
    KEY_AGREEMENT("keyAgreement"),
    
    KEY_CERT_SIGN("keyCertSign"),
    
    C_RL_SIGN("cRLSign"),
    
    ENCIPHER_ONLY("encipherOnly"),
    
    DECIPHER_ONLY("decipherOnly");

    private String value;

    KeyUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyUsageEnum fromValue(String value) {
      for (KeyUsageEnum b : KeyUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyUsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyUsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_USAGE = "key_usage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  private List<KeyUsageEnum> keyUsage = new ArrayList<>();

  public static final String SERIALIZED_NAME_SANS = "sans";
  @SerializedName(SERIALIZED_NAME_SANS)
  private SubjectAlternativeNames sans;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_VALIDITY_MONTHS = "validity_months";
  @SerializedName(SERIALIZED_NAME_VALIDITY_MONTHS)
  private Integer validityMonths;

  public X509CertificateProperties() {
  }

  public X509CertificateProperties ekus(List<String> ekus) {
    this.ekus = ekus;
    return this;
  }

  public X509CertificateProperties addEkusItem(String ekusItem) {
    if (this.ekus == null) {
      this.ekus = new ArrayList<>();
    }
    this.ekus.add(ekusItem);
    return this;
  }

  /**
   * The enhanced key usage.
   * @return ekus
   */
  @javax.annotation.Nullable
  public List<String> getEkus() {
    return ekus;
  }

  public void setEkus(List<String> ekus) {
    this.ekus = ekus;
  }


  public X509CertificateProperties keyUsage(List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  public X509CertificateProperties addKeyUsageItem(KeyUsageEnum keyUsageItem) {
    if (this.keyUsage == null) {
      this.keyUsage = new ArrayList<>();
    }
    this.keyUsage.add(keyUsageItem);
    return this;
  }

  /**
   * List of key usages.
   * @return keyUsage
   */
  @javax.annotation.Nullable
  public List<KeyUsageEnum> getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
  }


  public X509CertificateProperties sans(SubjectAlternativeNames sans) {
    this.sans = sans;
    return this;
  }

  /**
   * Get sans
   * @return sans
   */
  @javax.annotation.Nullable
  public SubjectAlternativeNames getSans() {
    return sans;
  }

  public void setSans(SubjectAlternativeNames sans) {
    this.sans = sans;
  }


  public X509CertificateProperties subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject name. Should be a valid X509 distinguished Name.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public X509CertificateProperties validityMonths(Integer validityMonths) {
    this.validityMonths = validityMonths;
    return this;
  }

  /**
   * The duration that the certificate is valid in months.
   * minimum: 0
   * @return validityMonths
   */
  @javax.annotation.Nullable
  public Integer getValidityMonths() {
    return validityMonths;
  }

  public void setValidityMonths(Integer validityMonths) {
    this.validityMonths = validityMonths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X509CertificateProperties x509CertificateProperties = (X509CertificateProperties) o;
    return Objects.equals(this.ekus, x509CertificateProperties.ekus) &&
        Objects.equals(this.keyUsage, x509CertificateProperties.keyUsage) &&
        Objects.equals(this.sans, x509CertificateProperties.sans) &&
        Objects.equals(this.subject, x509CertificateProperties.subject) &&
        Objects.equals(this.validityMonths, x509CertificateProperties.validityMonths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ekus, keyUsage, sans, subject, validityMonths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X509CertificateProperties {\n");
    sb.append("    ekus: ").append(toIndentedString(ekus)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    sans: ").append(toIndentedString(sans)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    validityMonths: ").append(toIndentedString(validityMonths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ekus");
    openapiFields.add("key_usage");
    openapiFields.add("sans");
    openapiFields.add("subject");
    openapiFields.add("validity_months");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X509CertificateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X509CertificateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X509CertificateProperties is not found in the empty JSON string", X509CertificateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X509CertificateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X509CertificateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ekus") != null && !jsonObj.get("ekus").isJsonNull() && !jsonObj.get("ekus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ekus` to be an array in the JSON string but got `%s`", jsonObj.get("ekus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_usage") != null && !jsonObj.get("key_usage").isJsonNull() && !jsonObj.get("key_usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_usage` to be an array in the JSON string but got `%s`", jsonObj.get("key_usage").toString()));
      }
      // validate the optional field `sans`
      if (jsonObj.get("sans") != null && !jsonObj.get("sans").isJsonNull()) {
        SubjectAlternativeNames.validateJsonElement(jsonObj.get("sans"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X509CertificateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X509CertificateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X509CertificateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X509CertificateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<X509CertificateProperties>() {
           @Override
           public void write(JsonWriter out, X509CertificateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X509CertificateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X509CertificateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X509CertificateProperties
   * @throws IOException if the JSON string is invalid with respect to X509CertificateProperties
   */
  public static X509CertificateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X509CertificateProperties.class);
  }

  /**
   * Convert an instance of X509CertificateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

