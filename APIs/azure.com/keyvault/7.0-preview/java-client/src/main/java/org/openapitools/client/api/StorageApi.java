/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupStorageResult;
import org.openapitools.client.model.DeletedSasDefinitionBundle;
import org.openapitools.client.model.DeletedStorageBundle;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SasDefinitionBundle;
import org.openapitools.client.model.SasDefinitionCreateParameters;
import org.openapitools.client.model.SasDefinitionListResult;
import org.openapitools.client.model.SasDefinitionUpdateParameters;
import org.openapitools.client.model.StorageAccountCreateParameters;
import org.openapitools.client.model.StorageAccountRegenerteKeyParameters;
import org.openapitools.client.model.StorageAccountUpdateParameters;
import org.openapitools.client.model.StorageBundle;
import org.openapitools.client.model.StorageListResult;
import org.openapitools.client.model.StorageRestoreParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/backup"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling backupStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupStorageAccount(Async)");
        }

        return backupStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return BackupStorageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BackupStorageResult backupStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<BackupStorageResult> localVarResp = backupStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Backs up the specified storage account.
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;BackupStorageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupStorageResult> backupStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupStorageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Backs up the specified storage account. (asynchronously)
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<BackupStorageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupStorageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the SAS definition will be deleted, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling deleteSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling deleteSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteSasDefinition(Async)");
        }

        return deleteSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedSasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the SAS definition will be deleted, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSasDefinitionBundle deleteSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<DeletedSasDefinitionBundle> localVarResp = deleteSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedSasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the SAS definition will be deleted, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSasDefinitionBundle> deleteSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the SAS definition will be deleted, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<DeletedSasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when the storage account will be deleted, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling deleteStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteStorageAccount(Async)");
        }

        return deleteStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedStorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when the storage account will be deleted, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedStorageBundle deleteStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<DeletedStorageBundle> localVarResp = deleteStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedStorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when the storage account will be deleted, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedStorageBundle> deleteStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedStorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when the storage account will be deleted, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<DeletedStorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedStorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling getSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSasDefinition(Async)");
        }

        return getSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SasDefinitionBundle getSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> localVarResp = getSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SasDefinitionBundle> getSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<SasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSasDefinitions
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of SAS definitions along with a link to the next page of SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSasDefinitionsCall(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSasDefinitionsValidateBeforeCall(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getSasDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSasDefinitions(Async)");
        }

        return getSasDefinitionsCall(storageAccountName, apiVersion, maxresults, _callback);

    }

    /**
     * 
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return SasDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of SAS definitions along with a link to the next page of SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SasDefinitionListResult getSasDefinitions(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<SasDefinitionListResult> localVarResp = getSasDefinitionsWithHttpInfo(storageAccountName, apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * 
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;SasDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of SAS definitions along with a link to the next page of SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SasDefinitionListResult> getSasDefinitionsWithHttpInfo(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<SasDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of SAS definitions along with a link to the next page of SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSasDefinitionsAsync(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback<SasDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<SasDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getStorageAccount(Async)");
        }

        return getStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * 
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle getStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = getStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> getStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStorageAccounts
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of storage accounts along with a link to the next page of storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageAccountsCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorageAccountsValidateBeforeCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getStorageAccounts(Async)");
        }

        return getStorageAccountsCall(apiVersion, maxresults, _callback);

    }

    /**
     * 
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return StorageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of storage accounts along with a link to the next page of storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageListResult getStorageAccounts(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<StorageListResult> localVarResp = getStorageAccountsWithHttpInfo(apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * 
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;StorageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of storage accounts along with a link to the next page of storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageListResult> getStorageAccountsWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getStorageAccountsValidateBeforeCall(apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<StorageListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of storage accounts along with a link to the next page of storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageAccountsAsync(String apiVersion, Integer maxresults, final ApiCallback<StorageListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorageAccountsValidateBeforeCall(apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<StorageListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateStorageAccountKey
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateStorageAccountKeyCall(String storageAccountName, String apiVersion, StorageAccountRegenerteKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/regeneratekey"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateStorageAccountKeyValidateBeforeCall(String storageAccountName, String apiVersion, StorageAccountRegenerteKeyParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling regenerateStorageAccountKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regenerateStorageAccountKey(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling regenerateStorageAccountKey(Async)");
        }

        return regenerateStorageAccountKeyCall(storageAccountName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle regenerateStorageAccountKey(String storageAccountName, String apiVersion, StorageAccountRegenerteKeyParameters parameters) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = regenerateStorageAccountKeyWithHttpInfo(storageAccountName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> regenerateStorageAccountKeyWithHttpInfo(String storageAccountName, String apiVersion, StorageAccountRegenerteKeyParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = regenerateStorageAccountKeyValidateBeforeCall(storageAccountName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateStorageAccountKeyAsync(String storageAccountName, String apiVersion, StorageAccountRegenerteKeyParameters parameters, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateStorageAccountKeyValidateBeforeCall(storageAccountName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreStorageAccount
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the storage account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored storage account bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreStorageAccountCall(String apiVersion, StorageRestoreParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreStorageAccountValidateBeforeCall(String apiVersion, StorageRestoreParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling restoreStorageAccount(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling restoreStorageAccount(Async)");
        }

        return restoreStorageAccountCall(apiVersion, parameters, _callback);

    }

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the storage account. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored storage account bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle restoreStorageAccount(String apiVersion, StorageRestoreParameters parameters) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = restoreStorageAccountWithHttpInfo(apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Restores a backed up storage account to a vault.
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the storage account. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored storage account bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> restoreStorageAccountWithHttpInfo(String apiVersion, StorageRestoreParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = restoreStorageAccountValidateBeforeCall(apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restores a backed up storage account to a vault. (asynchronously)
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the storage account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored storage account bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreStorageAccountAsync(String apiVersion, StorageRestoreParameters parameters, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreStorageAccountValidateBeforeCall(apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling setSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling setSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setSasDefinition(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling setSasDefinition(Async)");
        }

        return setSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SasDefinitionBundle setSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionCreateParameters parameters) throws ApiException {
        ApiResponse<SasDefinitionBundle> localVarResp = setSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SasDefinitionBundle> setSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = setSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionCreateParameters parameters, final ApiCallback<SasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setStorageAccountCall(String storageAccountName, String apiVersion, StorageAccountCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, StorageAccountCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling setStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setStorageAccount(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling setStorageAccount(Async)");
        }

        return setStorageAccountCall(storageAccountName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle setStorageAccount(String storageAccountName, String apiVersion, StorageAccountCreateParameters parameters) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = setStorageAccountWithHttpInfo(storageAccountName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> setStorageAccountWithHttpInfo(String storageAccountName, String apiVersion, StorageAccountCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = setStorageAccountValidateBeforeCall(storageAccountName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setStorageAccountAsync(String storageAccountName, String apiVersion, StorageAccountCreateParameters parameters, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStorageAccountValidateBeforeCall(storageAccountName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling updateSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling updateSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateSasDefinition(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateSasDefinition(Async)");
        }

        return updateSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SasDefinitionBundle updateSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionUpdateParameters parameters) throws ApiException {
        ApiResponse<SasDefinitionBundle> localVarResp = updateSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SasDefinitionBundle> updateSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = updateSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, SasDefinitionUpdateParameters parameters, final ApiCallback<SasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageAccountCall(String storageAccountName, String apiVersion, StorageAccountUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, StorageAccountUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling updateStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateStorageAccount(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateStorageAccount(Async)");
        }

        return updateStorageAccountCall(storageAccountName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle updateStorageAccount(String storageAccountName, String apiVersion, StorageAccountUpdateParameters parameters) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = updateStorageAccountWithHttpInfo(storageAccountName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> updateStorageAccountWithHttpInfo(String storageAccountName, String apiVersion, StorageAccountUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = updateStorageAccountValidateBeforeCall(storageAccountName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageAccountAsync(String storageAccountName, String apiVersion, StorageAccountUpdateParameters parameters, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStorageAccountValidateBeforeCall(storageAccountName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
