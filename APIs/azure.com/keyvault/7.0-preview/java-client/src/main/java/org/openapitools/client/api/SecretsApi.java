/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupSecretResult;
import org.openapitools.client.model.DeletedSecretBundle;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SecretBundle;
import org.openapitools.client.model.SecretListResult;
import org.openapitools.client.model.SecretRestoreParameters;
import org.openapitools.client.model.SecretSetParameters;
import org.openapitools.client.model.SecretUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecretsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecretsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupSecret
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupSecretCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}/backup"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupSecretValidateBeforeCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling backupSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupSecret(Async)");
        }

        return backupSecretCall(secretName, apiVersion, _callback);

    }

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return BackupSecretResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BackupSecretResult backupSecret(String secretName, String apiVersion) throws ApiException {
        ApiResponse<BackupSecretResult> localVarResp = backupSecretWithHttpInfo(secretName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Backs up the specified secret.
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;BackupSecretResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupSecretResult> backupSecretWithHttpInfo(String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = backupSecretValidateBeforeCall(secretName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupSecretResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Backs up the specified secret. (asynchronously)
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The backup blob containing the backed up secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupSecretAsync(String secretName, String apiVersion, final ApiCallback<BackupSecretResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupSecretValidateBeforeCall(secretName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupSecretResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSecret
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSecretCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSecretValidateBeforeCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling deleteSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteSecret(Async)");
        }

        return deleteSecretCall(secretName, apiVersion, _callback);

    }

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedSecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSecretBundle deleteSecret(String secretName, String apiVersion) throws ApiException {
        ApiResponse<DeletedSecretBundle> localVarResp = deleteSecretWithHttpInfo(secretName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a secret from a specified key vault.
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedSecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSecretBundle> deleteSecretWithHttpInfo(String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteSecretValidateBeforeCall(secretName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedSecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a secret from a specified key vault. (asynchronously)
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSecretAsync(String secretName, String apiVersion, final ApiCallback<DeletedSecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSecretValidateBeforeCall(secretName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedSecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecret
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretCall(String secretName, String secretVersion, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}/{secret-version}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "secret-version" + "}", localVarApiClient.escapeString(secretVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretValidateBeforeCall(String secretName, String secretVersion, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling getSecret(Async)");
        }

        // verify the required parameter 'secretVersion' is set
        if (secretVersion == null) {
            throw new ApiException("Missing the required parameter 'secretVersion' when calling getSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSecret(Async)");
        }

        return getSecretCall(secretName, secretVersion, apiVersion, _callback);

    }

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return SecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretBundle getSecret(String secretName, String secretVersion, String apiVersion) throws ApiException {
        ApiResponse<SecretBundle> localVarResp = getSecretWithHttpInfo(secretName, secretVersion, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a specified secret from a given key vault.
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretBundle> getSecretWithHttpInfo(String secretName, String secretVersion, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getSecretValidateBeforeCall(secretName, secretVersion, apiVersion, null);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specified secret from a given key vault. (asynchronously)
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretAsync(String secretName, String secretVersion, String apiVersion, final ApiCallback<SecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretValidateBeforeCall(secretName, secretVersion, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecretVersions
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretVersionsCall(String secretName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}/versions"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretVersionsValidateBeforeCall(String secretName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling getSecretVersions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSecretVersions(Async)");
        }

        return getSecretVersionsCall(secretName, apiVersion, maxresults, _callback);

    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @return SecretListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretListResult getSecretVersions(String secretName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<SecretListResult> localVarResp = getSecretVersionsWithHttpInfo(secretName, apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * List all versions of the specified secret.
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;SecretListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretListResult> getSecretVersionsWithHttpInfo(String secretName, String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getSecretVersionsValidateBeforeCall(secretName, apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<SecretListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all versions of the specified secret. (asynchronously)
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretVersionsAsync(String secretName, String apiVersion, Integer maxresults, final ApiCallback<SecretListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretVersionsValidateBeforeCall(secretName, apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<SecretListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecrets
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets in the vault along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretsCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretsValidateBeforeCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSecrets(Async)");
        }

        return getSecretsCall(apiVersion, maxresults, _callback);

    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @return SecretListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets in the vault along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretListResult getSecrets(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<SecretListResult> localVarResp = getSecretsWithHttpInfo(apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * List secrets in a specified key vault.
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;SecretListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets in the vault along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretListResult> getSecretsWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getSecretsValidateBeforeCall(apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<SecretListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List secrets in a specified key vault. (asynchronously)
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified, the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of secrets in the vault along with a link to the next page of secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretsAsync(String apiVersion, Integer maxresults, final ApiCallback<SecretListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretsValidateBeforeCall(apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<SecretListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreSecret
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored secret bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSecretCall(String apiVersion, SecretRestoreParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/secrets/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreSecretValidateBeforeCall(String apiVersion, SecretRestoreParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling restoreSecret(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling restoreSecret(Async)");
        }

        return restoreSecretCall(apiVersion, parameters, _callback);

    }

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the secret. (required)
     * @return SecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored secret bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretBundle restoreSecret(String apiVersion, SecretRestoreParameters parameters) throws ApiException {
        ApiResponse<SecretBundle> localVarResp = restoreSecretWithHttpInfo(apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Restores a backed up secret to a vault.
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the secret. (required)
     * @return ApiResponse&lt;SecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored secret bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretBundle> restoreSecretWithHttpInfo(String apiVersion, SecretRestoreParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = restoreSecretValidateBeforeCall(apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restores a backed up secret to a vault. (asynchronously)
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters to restore the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restored secret bundle in the vault. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSecretAsync(String apiVersion, SecretRestoreParameters parameters, final ApiCallback<SecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreSecretValidateBeforeCall(apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setSecret
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for setting the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle containing the result of the set secret request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSecretCall(String secretName, String apiVersion, SecretSetParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSecretValidateBeforeCall(String secretName, String apiVersion, SecretSetParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling setSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setSecret(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling setSecret(Async)");
        }

        return setSecretCall(secretName, apiVersion, parameters, _callback);

    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for setting the secret. (required)
     * @return SecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle containing the result of the set secret request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretBundle setSecret(String secretName, String apiVersion, SecretSetParameters parameters) throws ApiException {
        ApiResponse<SecretBundle> localVarResp = setSecretWithHttpInfo(secretName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Sets a secret in a specified key vault.
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for setting the secret. (required)
     * @return ApiResponse&lt;SecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle containing the result of the set secret request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretBundle> setSecretWithHttpInfo(String secretName, String apiVersion, SecretSetParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = setSecretValidateBeforeCall(secretName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets a secret in a specified key vault. (asynchronously)
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for setting the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle containing the result of the set secret request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSecretAsync(String secretName, String apiVersion, SecretSetParameters parameters, final ApiCallback<SecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSecretValidateBeforeCall(secretName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSecret
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for update secret operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretCall(String secretName, String secretVersion, String apiVersion, SecretUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/secrets/{secret-name}/{secret-version}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "secret-version" + "}", localVarApiClient.escapeString(secretVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecretValidateBeforeCall(String secretName, String secretVersion, String apiVersion, SecretUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling updateSecret(Async)");
        }

        // verify the required parameter 'secretVersion' is set
        if (secretVersion == null) {
            throw new ApiException("Missing the required parameter 'secretVersion' when calling updateSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateSecret(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateSecret(Async)");
        }

        return updateSecretCall(secretName, secretVersion, apiVersion, parameters, _callback);

    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for update secret operation. (required)
     * @return SecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretBundle updateSecret(String secretName, String secretVersion, String apiVersion, SecretUpdateParameters parameters) throws ApiException {
        ApiResponse<SecretBundle> localVarResp = updateSecretWithHttpInfo(secretName, secretVersion, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for update secret operation. (required)
     * @return ApiResponse&lt;SecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretBundle> updateSecretWithHttpInfo(String secretName, String secretVersion, String apiVersion, SecretUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = updateSecretValidateBeforeCall(secretName, secretVersion, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault. (asynchronously)
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     * @param secretName The name of the secret. (required)
     * @param secretVersion The version of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param parameters The parameters for update secret operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated secret. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretAsync(String secretName, String secretVersion, String apiVersion, SecretUpdateParameters parameters, final ApiCallback<SecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecretValidateBeforeCall(secretName, secretVersion, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
