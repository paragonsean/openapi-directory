/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.KeyAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The key update parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:41.971524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyUpdateParameters {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private KeyAttributes attributes;

  /**
   * Gets or Sets keyOps
   */
  @JsonAdapter(KeyOpsEnum.Adapter.class)
  public enum KeyOpsEnum {
    ENCRYPT("encrypt"),
    
    DECRYPT("decrypt"),
    
    SIGN("sign"),
    
    VERIFY("verify"),
    
    WRAP_KEY("wrapKey"),
    
    UNWRAP_KEY("unwrapKey");

    private String value;

    KeyOpsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyOpsEnum fromValue(String value) {
      for (KeyOpsEnum b : KeyOpsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyOpsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyOpsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyOpsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyOpsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyOpsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_OPS = "key_ops";
  @SerializedName(SERIALIZED_NAME_KEY_OPS)
  private List<KeyOpsEnum> keyOps = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public KeyUpdateParameters() {
  }

  public KeyUpdateParameters attributes(KeyAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public KeyAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(KeyAttributes attributes) {
    this.attributes = attributes;
  }


  public KeyUpdateParameters keyOps(List<KeyOpsEnum> keyOps) {
    this.keyOps = keyOps;
    return this;
  }

  public KeyUpdateParameters addKeyOpsItem(KeyOpsEnum keyOpsItem) {
    if (this.keyOps == null) {
      this.keyOps = new ArrayList<>();
    }
    this.keyOps.add(keyOpsItem);
    return this;
  }

  /**
   * Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
   * @return keyOps
   */
  @javax.annotation.Nullable
  public List<KeyOpsEnum> getKeyOps() {
    return keyOps;
  }

  public void setKeyOps(List<KeyOpsEnum> keyOps) {
    this.keyOps = keyOps;
  }


  public KeyUpdateParameters tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public KeyUpdateParameters putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Application specific metadata in the form of key-value pairs.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyUpdateParameters keyUpdateParameters = (KeyUpdateParameters) o;
    return Objects.equals(this.attributes, keyUpdateParameters.attributes) &&
        Objects.equals(this.keyOps, keyUpdateParameters.keyOps) &&
        Objects.equals(this.tags, keyUpdateParameters.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, keyOps, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyUpdateParameters {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    keyOps: ").append(toIndentedString(keyOps)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("key_ops");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyUpdateParameters is not found in the empty JSON string", KeyUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        KeyAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_ops") != null && !jsonObj.get("key_ops").isJsonNull() && !jsonObj.get("key_ops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_ops` to be an array in the JSON string but got `%s`", jsonObj.get("key_ops").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyUpdateParameters>() {
           @Override
           public void write(JsonWriter out, KeyUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to KeyUpdateParameters
   */
  public static KeyUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyUpdateParameters.class);
  }

  /**
   * Convert an instance of KeyUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

