/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedSecretBundle;
import org.openapitools.client.model.DeletedSecretListResult;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SecretBundle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeletedSecretsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeletedSecretsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeletedSecretsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDeletedSecret
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle of the secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSecretCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedsecrets/{secret-name}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedSecretValidateBeforeCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling getDeletedSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedSecret(Async)");
        }

        return getDeletedSecretCall(secretName, apiVersion, _callback);

    }

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedSecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle of the secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSecretBundle getDeletedSecret(String secretName, String apiVersion) throws ApiException {
        ApiResponse<DeletedSecretBundle> localVarResp = getDeletedSecretWithHttpInfo(secretName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the specified deleted secret.
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedSecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle of the secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSecretBundle> getDeletedSecretWithHttpInfo(String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getDeletedSecretValidateBeforeCall(secretName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedSecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified deleted secret. (asynchronously)
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A secret bundle of the secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSecretAsync(String secretName, String apiVersion, final ApiCallback<DeletedSecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedSecretValidateBeforeCall(secretName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedSecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedSecrets
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSecretsCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedsecrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedSecretsValidateBeforeCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedSecrets(Async)");
        }

        return getDeletedSecretsCall(apiVersion, maxresults, _callback);

    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return DeletedSecretListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSecretListResult getDeletedSecrets(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<DeletedSecretListResult> localVarResp = getDeletedSecretsWithHttpInfo(apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * Lists deleted secrets for the specified vault.
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;DeletedSecretListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSecretListResult> getDeletedSecretsWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getDeletedSecretsValidateBeforeCall(apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<DeletedSecretListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists deleted secrets for the specified vault. (asynchronously)
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSecretsAsync(String apiVersion, Integer maxresults, final ApiCallback<DeletedSecretListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedSecretsValidateBeforeCall(apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<DeletedSecretListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purgeDeletedSecret
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the secret was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedSecretCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedsecrets/{secret-name}"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purgeDeletedSecretValidateBeforeCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling purgeDeletedSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling purgeDeletedSecret(Async)");
        }

        return purgeDeletedSecretCall(secretName, apiVersion, _callback);

    }

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the secret was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void purgeDeletedSecret(String secretName, String apiVersion) throws ApiException {
        purgeDeletedSecretWithHttpInfo(secretName, apiVersion);
    }

    /**
     * Permanently deletes the specified secret.
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the secret was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> purgeDeletedSecretWithHttpInfo(String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = purgeDeletedSecretValidateBeforeCall(secretName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permanently deletes the specified secret. (asynchronously)
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the secret was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedSecretAsync(String secretName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purgeDeletedSecretValidateBeforeCall(secretName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverDeletedSecret
     * @param secretName The name of the deleted secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Secret bundle of the original secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedSecretCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedsecrets/{secret-name}/recover"
            .replace("{" + "secret-name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverDeletedSecretValidateBeforeCall(String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling recoverDeletedSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverDeletedSecret(Async)");
        }

        return recoverDeletedSecretCall(secretName, apiVersion, _callback);

    }

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     * @param secretName The name of the deleted secret. (required)
     * @param apiVersion Client API version. (required)
     * @return SecretBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Secret bundle of the original secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SecretBundle recoverDeletedSecret(String secretName, String apiVersion) throws ApiException {
        ApiResponse<SecretBundle> localVarResp = recoverDeletedSecretWithHttpInfo(secretName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Recovers the deleted secret to the latest version.
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     * @param secretName The name of the deleted secret. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SecretBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Secret bundle of the original secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecretBundle> recoverDeletedSecretWithHttpInfo(String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverDeletedSecretValidateBeforeCall(secretName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers the deleted secret to the latest version. (asynchronously)
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     * @param secretName The name of the deleted secret. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Secret bundle of the original secret and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedSecretAsync(String secretName, String apiVersion, final ApiCallback<SecretBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverDeletedSecretValidateBeforeCall(secretName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SecretBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
