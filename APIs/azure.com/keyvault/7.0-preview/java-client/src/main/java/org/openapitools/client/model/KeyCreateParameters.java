/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.KeyAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The key create parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:41.971524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyCreateParameters {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private KeyAttributes attributes;

  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   */
  @JsonAdapter(CrvEnum.Adapter.class)
  public enum CrvEnum {
    _256("P-256"),
    
    _384("P-384"),
    
    _521("P-521"),
    
    _256_K("P-256K");

    private String value;

    CrvEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrvEnum fromValue(String value) {
      for (CrvEnum b : CrvEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CrvEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrvEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrvEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CrvEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CrvEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRV = "crv";
  @SerializedName(SERIALIZED_NAME_CRV)
  private CrvEnum crv;

  /**
   * JSON web key operations. For more information, see JsonWebKeyOperation.
   */
  @JsonAdapter(KeyOpsEnum.Adapter.class)
  public enum KeyOpsEnum {
    ENCRYPT("encrypt"),
    
    DECRYPT("decrypt"),
    
    SIGN("sign"),
    
    VERIFY("verify"),
    
    WRAP_KEY("wrapKey"),
    
    UNWRAP_KEY("unwrapKey");

    private String value;

    KeyOpsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyOpsEnum fromValue(String value) {
      for (KeyOpsEnum b : KeyOpsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyOpsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyOpsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyOpsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyOpsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyOpsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_OPS = "key_ops";
  @SerializedName(SERIALIZED_NAME_KEY_OPS)
  private List<KeyOpsEnum> keyOps = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_SIZE = "key_size";
  @SerializedName(SERIALIZED_NAME_KEY_SIZE)
  private Integer keySize;

  /**
   * The type of key to create. For valid values, see JsonWebKeyType.
   */
  @JsonAdapter(KtyEnum.Adapter.class)
  public enum KtyEnum {
    EC("EC"),
    
    EC_HSM("EC-HSM"),
    
    RSA("RSA"),
    
    RSA_HSM("RSA-HSM"),
    
    OCT("oct");

    private String value;

    KtyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KtyEnum fromValue(String value) {
      for (KtyEnum b : KtyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KtyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KtyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KtyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KtyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KtyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KTY = "kty";
  @SerializedName(SERIALIZED_NAME_KTY)
  private KtyEnum kty;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public KeyCreateParameters() {
  }

  public KeyCreateParameters attributes(KeyAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public KeyAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(KeyAttributes attributes) {
    this.attributes = attributes;
  }


  public KeyCreateParameters crv(CrvEnum crv) {
    this.crv = crv;
    return this;
  }

  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   * @return crv
   */
  @javax.annotation.Nullable
  public CrvEnum getCrv() {
    return crv;
  }

  public void setCrv(CrvEnum crv) {
    this.crv = crv;
  }


  public KeyCreateParameters keyOps(List<KeyOpsEnum> keyOps) {
    this.keyOps = keyOps;
    return this;
  }

  public KeyCreateParameters addKeyOpsItem(KeyOpsEnum keyOpsItem) {
    if (this.keyOps == null) {
      this.keyOps = new ArrayList<>();
    }
    this.keyOps.add(keyOpsItem);
    return this;
  }

  /**
   * Get keyOps
   * @return keyOps
   */
  @javax.annotation.Nullable
  public List<KeyOpsEnum> getKeyOps() {
    return keyOps;
  }

  public void setKeyOps(List<KeyOpsEnum> keyOps) {
    this.keyOps = keyOps;
  }


  public KeyCreateParameters keySize(Integer keySize) {
    this.keySize = keySize;
    return this;
  }

  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   * @return keySize
   */
  @javax.annotation.Nullable
  public Integer getKeySize() {
    return keySize;
  }

  public void setKeySize(Integer keySize) {
    this.keySize = keySize;
  }


  public KeyCreateParameters kty(KtyEnum kty) {
    this.kty = kty;
    return this;
  }

  /**
   * The type of key to create. For valid values, see JsonWebKeyType.
   * @return kty
   */
  @javax.annotation.Nonnull
  public KtyEnum getKty() {
    return kty;
  }

  public void setKty(KtyEnum kty) {
    this.kty = kty;
  }


  public KeyCreateParameters tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public KeyCreateParameters putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Application specific metadata in the form of key-value pairs.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyCreateParameters keyCreateParameters = (KeyCreateParameters) o;
    return Objects.equals(this.attributes, keyCreateParameters.attributes) &&
        Objects.equals(this.crv, keyCreateParameters.crv) &&
        Objects.equals(this.keyOps, keyCreateParameters.keyOps) &&
        Objects.equals(this.keySize, keyCreateParameters.keySize) &&
        Objects.equals(this.kty, keyCreateParameters.kty) &&
        Objects.equals(this.tags, keyCreateParameters.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, crv, keyOps, keySize, kty, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyCreateParameters {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    crv: ").append(toIndentedString(crv)).append("\n");
    sb.append("    keyOps: ").append(toIndentedString(keyOps)).append("\n");
    sb.append("    keySize: ").append(toIndentedString(keySize)).append("\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("crv");
    openapiFields.add("key_ops");
    openapiFields.add("key_size");
    openapiFields.add("kty");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("kty");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyCreateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyCreateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyCreateParameters is not found in the empty JSON string", KeyCreateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyCreateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyCreateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyCreateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        KeyAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("crv") != null && !jsonObj.get("crv").isJsonNull()) && !jsonObj.get("crv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crv").toString()));
      }
      // validate the optional field `crv`
      if (jsonObj.get("crv") != null && !jsonObj.get("crv").isJsonNull()) {
        CrvEnum.validateJsonElement(jsonObj.get("crv"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_ops") != null && !jsonObj.get("key_ops").isJsonNull() && !jsonObj.get("key_ops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_ops` to be an array in the JSON string but got `%s`", jsonObj.get("key_ops").toString()));
      }
      if (!jsonObj.get("kty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kty").toString()));
      }
      // validate the required field `kty`
      KtyEnum.validateJsonElement(jsonObj.get("kty"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyCreateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyCreateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyCreateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyCreateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyCreateParameters>() {
           @Override
           public void write(JsonWriter out, KeyCreateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyCreateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyCreateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyCreateParameters
   * @throws IOException if the JSON string is invalid with respect to KeyCreateParameters
   */
  public static KeyCreateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyCreateParameters.class);
  }

  /**
   * Convert an instance of KeyCreateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

