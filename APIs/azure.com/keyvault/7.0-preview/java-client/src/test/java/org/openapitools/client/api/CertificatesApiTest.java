/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupCertificateResult;
import org.openapitools.client.model.CertificateBundle;
import org.openapitools.client.model.CertificateCreateParameters;
import org.openapitools.client.model.CertificateImportParameters;
import org.openapitools.client.model.CertificateIssuerListResult;
import org.openapitools.client.model.CertificateIssuerSetParameters;
import org.openapitools.client.model.CertificateIssuerUpdateParameters;
import org.openapitools.client.model.CertificateListResult;
import org.openapitools.client.model.CertificateMergeParameters;
import org.openapitools.client.model.CertificateOperation;
import org.openapitools.client.model.CertificateOperationUpdateParameter;
import org.openapitools.client.model.CertificatePolicy;
import org.openapitools.client.model.CertificateRestoreParameters;
import org.openapitools.client.model.CertificateUpdateParameters;
import org.openapitools.client.model.Contacts;
import org.openapitools.client.model.DeletedCertificateBundle;
import org.openapitools.client.model.IssuerBundle;
import org.openapitools.client.model.KeyVaultError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatesApi
 */
@Disabled
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    /**
     * Backs up the specified certificate.
     *
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backupCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        BackupCertificateResult response = api.backupCertificate(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new certificate.
     *
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateCreateParameters parameters = null;
        CertificateOperation response = api.createCertificate(certificateName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a certificate from a specified key vault.
     *
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        DeletedCertificateBundle response = api.deleteCertificate(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     *
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateContactsTest() throws ApiException {
        String apiVersion = null;
        Contacts response = api.deleteCertificateContacts(apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the specified certificate issuer.
     *
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateIssuerTest() throws ApiException {
        String issuerName = null;
        String apiVersion = null;
        IssuerBundle response = api.deleteCertificateIssuer(issuerName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the creation operation for a specific certificate.
     *
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateOperationTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateOperation response = api.deleteCertificateOperation(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets information about a certificate.
     *
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateTest() throws ApiException {
        String certificateName = null;
        String certificateVersion = null;
        String apiVersion = null;
        CertificateBundle response = api.getCertificate(certificateName, certificateVersion, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     *
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateContactsTest() throws ApiException {
        String apiVersion = null;
        Contacts response = api.getCertificateContacts(apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the specified certificate issuer.
     *
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateIssuerTest() throws ApiException {
        String issuerName = null;
        String apiVersion = null;
        IssuerBundle response = api.getCertificateIssuer(issuerName, apiVersion);
        // TODO: test validations
    }

    /**
     * List certificate issuers for a specified key vault.
     *
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateIssuersTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        CertificateIssuerListResult response = api.getCertificateIssuers(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Gets the creation operation of a certificate.
     *
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateOperationTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateOperation response = api.getCertificateOperation(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the policy for a certificate.
     *
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificatePolicyTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificatePolicy response = api.getCertificatePolicy(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * List the versions of a certificate.
     *
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateVersionsTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        Integer maxresults = null;
        CertificateListResult response = api.getCertificateVersions(certificateName, apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * List certificates in a specified key vault
     *
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificatesTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        Boolean includePending = null;
        CertificateListResult response = api.getCertificates(apiVersion, maxresults, includePending);
        // TODO: test validations
    }

    /**
     * Imports a certificate into a specified key vault.
     *
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateImportParameters parameters = null;
        CertificateBundle response = api.importCertificate(certificateName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     *
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateMergeParameters parameters = null;
        CertificateBundle response = api.mergeCertificate(certificateName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Restores a backed up certificate to a vault.
     *
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreCertificateTest() throws ApiException {
        String apiVersion = null;
        CertificateRestoreParameters parameters = null;
        CertificateBundle response = api.restoreCertificate(apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     *
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCertificateContactsTest() throws ApiException {
        String apiVersion = null;
        Contacts contacts = null;
        Contacts response = api.setCertificateContacts(apiVersion, contacts);
        // TODO: test validations
    }

    /**
     * Sets the specified certificate issuer.
     *
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setCertificateIssuerTest() throws ApiException {
        String issuerName = null;
        String apiVersion = null;
        CertificateIssuerSetParameters parameter = null;
        IssuerBundle response = api.setCertificateIssuer(issuerName, apiVersion, parameter);
        // TODO: test validations
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     *
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCertificateTest() throws ApiException {
        String certificateName = null;
        String certificateVersion = null;
        String apiVersion = null;
        CertificateUpdateParameters parameters = null;
        CertificateBundle response = api.updateCertificate(certificateName, certificateVersion, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates the specified certificate issuer.
     *
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCertificateIssuerTest() throws ApiException {
        String issuerName = null;
        String apiVersion = null;
        CertificateIssuerUpdateParameters parameter = null;
        IssuerBundle response = api.updateCertificateIssuer(issuerName, apiVersion, parameter);
        // TODO: test validations
    }

    /**
     * Updates a certificate operation.
     *
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCertificateOperationTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateOperationUpdateParameter certificateOperation = null;
        CertificateOperation response = api.updateCertificateOperation(certificateName, apiVersion, certificateOperation);
        // TODO: test validations
    }

    /**
     * Updates the policy for a certificate.
     *
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCertificatePolicyTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificatePolicy certificatePolicy = null;
        CertificatePolicy response = api.updateCertificatePolicy(certificateName, apiVersion, certificatePolicy);
        // TODO: test validations
    }

}
