/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupStorageResult;
import org.openapitools.client.model.DeletedSasDefinitionBundle;
import org.openapitools.client.model.DeletedStorageBundle;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SasDefinitionBundle;
import org.openapitools.client.model.SasDefinitionCreateParameters;
import org.openapitools.client.model.SasDefinitionListResult;
import org.openapitools.client.model.SasDefinitionUpdateParameters;
import org.openapitools.client.model.StorageAccountCreateParameters;
import org.openapitools.client.model.StorageAccountRegenerteKeyParameters;
import org.openapitools.client.model.StorageAccountUpdateParameters;
import org.openapitools.client.model.StorageBundle;
import org.openapitools.client.model.StorageListResult;
import org.openapitools.client.model.StorageRestoreParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */
@Disabled
public class StorageApiTest {

    private final StorageApi api = new StorageApi();

    /**
     * Backs up the specified storage account.
     *
     * Requests that a backup of the specified storage account be downloaded to the client. This operation requires the storage/backup permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backupStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        BackupStorageResult response = api.backupStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        DeletedSasDefinitionBundle response = api.deleteSasDefinition(storageAccountName, sasDefinitionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a storage account. This operation requires the storage/delete permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        DeletedStorageBundle response = api.deleteStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        SasDefinitionBundle response = api.getSasDefinition(storageAccountName, sasDefinitionName, apiVersion);
        // TODO: test validations
    }

    /**
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSasDefinitionsTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        Integer maxresults = null;
        SasDefinitionListResult response = api.getSasDefinitions(storageAccountName, apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        StorageBundle response = api.getStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

    /**
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStorageAccountsTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        StorageListResult response = api.getStorageAccounts(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regenerateStorageAccountKeyTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        StorageAccountRegenerteKeyParameters parameters = null;
        StorageBundle response = api.regenerateStorageAccountKey(storageAccountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Restores a backed up storage account to a vault.
     *
     * Restores a backed up storage account to a vault. This operation requires the storage/restore permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreStorageAccountTest() throws ApiException {
        String apiVersion = null;
        StorageRestoreParameters parameters = null;
        StorageBundle response = api.restoreStorageAccount(apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        SasDefinitionCreateParameters parameters = null;
        SasDefinitionBundle response = api.setSasDefinition(storageAccountName, sasDefinitionName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        StorageAccountCreateParameters parameters = null;
        StorageBundle response = api.setStorageAccount(storageAccountName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        SasDefinitionUpdateParameters parameters = null;
        SasDefinitionBundle response = api.updateSasDefinition(storageAccountName, sasDefinitionName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        StorageAccountUpdateParameters parameters = null;
        StorageBundle response = api.updateStorageAccount(storageAccountName, apiVersion, parameters);
        // TODO: test validations
    }

}
