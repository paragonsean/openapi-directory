/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeletedStorageApi_H
#define OAI_OAIDeletedStorageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletedSasDefinitionBundle.h"
#include "OAIDeletedSasDefinitionListResult.h"
#include "OAIDeletedStorageBundle.h"
#include "OAIDeletedStorageListResult.h"
#include "OAIKeyVaultError.h"
#include "OAISasDefinitionBundle.h"
#include "OAIStorageBundle.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeletedStorageApi : public QObject {
    Q_OBJECT

public:
    OAIDeletedStorageApi(const int timeOut = 0);
    ~OAIDeletedStorageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDeletedSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getDeletedSasDefinitions(const QString &storage_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDeletedStorageAccount(const QString &storage_account_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getDeletedStorageAccounts(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void purgeDeletedStorageAccount(const QString &storage_account_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recoverDeletedSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recoverDeletedStorageAccount(const QString &storage_account_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeletedSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void getDeletedSasDefinitionsCallback(OAIHttpRequestWorker *worker);
    void getDeletedStorageAccountCallback(OAIHttpRequestWorker *worker);
    void getDeletedStorageAccountsCallback(OAIHttpRequestWorker *worker);
    void purgeDeletedStorageAccountCallback(OAIHttpRequestWorker *worker);
    void recoverDeletedSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void recoverDeletedStorageAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeletedSasDefinitionSignal(OAIDeletedSasDefinitionBundle summary);
    void getDeletedSasDefinitionsSignal(OAIDeletedSasDefinitionListResult summary);
    void getDeletedStorageAccountSignal(OAIDeletedStorageBundle summary);
    void getDeletedStorageAccountsSignal(OAIDeletedStorageListResult summary);
    void purgeDeletedStorageAccountSignal();
    void recoverDeletedSasDefinitionSignal(OAISasDefinitionBundle summary);
    void recoverDeletedStorageAccountSignal(OAIStorageBundle summary);


    void getDeletedSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDeletedSasDefinitionBundle summary);
    void getDeletedSasDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIDeletedSasDefinitionListResult summary);
    void getDeletedStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIDeletedStorageBundle summary);
    void getDeletedStorageAccountsSignalFull(OAIHttpRequestWorker *worker, OAIDeletedStorageListResult summary);
    void purgeDeletedStorageAccountSignalFull(OAIHttpRequestWorker *worker);
    void recoverDeletedSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISasDefinitionBundle summary);
    void recoverDeletedStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);

    Q_DECL_DEPRECATED_X("Use getDeletedSasDefinitionSignalError() instead")
    void getDeletedSasDefinitionSignalE(OAIDeletedSasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedSasDefinitionSignalError(OAIDeletedSasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedSasDefinitionsSignalError() instead")
    void getDeletedSasDefinitionsSignalE(OAIDeletedSasDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedSasDefinitionsSignalError(OAIDeletedSasDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedStorageAccountSignalError() instead")
    void getDeletedStorageAccountSignalE(OAIDeletedStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedStorageAccountSignalError(OAIDeletedStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedStorageAccountsSignalError() instead")
    void getDeletedStorageAccountsSignalE(OAIDeletedStorageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedStorageAccountsSignalError(OAIDeletedStorageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purgeDeletedStorageAccountSignalError() instead")
    void purgeDeletedStorageAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void purgeDeletedStorageAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedSasDefinitionSignalError() instead")
    void recoverDeletedSasDefinitionSignalE(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedSasDefinitionSignalError(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedStorageAccountSignalError() instead")
    void recoverDeletedStorageAccountSignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedStorageAccountSignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeletedSasDefinitionSignalErrorFull() instead")
    void getDeletedSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedSasDefinitionsSignalErrorFull() instead")
    void getDeletedSasDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedSasDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedStorageAccountSignalErrorFull() instead")
    void getDeletedStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedStorageAccountsSignalErrorFull() instead")
    void getDeletedStorageAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedStorageAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purgeDeletedStorageAccountSignalErrorFull() instead")
    void purgeDeletedStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purgeDeletedStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedSasDefinitionSignalErrorFull() instead")
    void recoverDeletedSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedStorageAccountSignalErrorFull() instead")
    void recoverDeletedStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
