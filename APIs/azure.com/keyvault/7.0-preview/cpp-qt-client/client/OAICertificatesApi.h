/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupCertificateResult.h"
#include "OAICertificateBundle.h"
#include "OAICertificateCreateParameters.h"
#include "OAICertificateImportParameters.h"
#include "OAICertificateIssuerListResult.h"
#include "OAICertificateIssuerSetParameters.h"
#include "OAICertificateIssuerUpdateParameters.h"
#include "OAICertificateListResult.h"
#include "OAICertificateMergeParameters.h"
#include "OAICertificateOperation.h"
#include "OAICertificateOperationUpdateParameter.h"
#include "OAICertificatePolicy.h"
#include "OAICertificateRestoreParameters.h"
#include "OAICertificateUpdateParameters.h"
#include "OAIContacts.h"
#include "OAIDeletedCertificateBundle.h"
#include "OAIIssuerBundle.h"
#include "OAIKeyVaultError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupCertificate(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICertificateCreateParameters [required]
    */
    virtual void createCertificate(const QString &certificate_name, const QString &api_version, const OAICertificateCreateParameters &parameters);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteCertificate(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void deleteCertificateContacts(const QString &api_version);

    /**
    * @param[in]  issuer_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteCertificateIssuer(const QString &issuer_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteCertificateOperation(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  certificate_version QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCertificate(const QString &certificate_name, const QString &certificate_version, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void getCertificateContacts(const QString &api_version);

    /**
    * @param[in]  issuer_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCertificateIssuer(const QString &issuer_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getCertificateIssuers(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCertificateOperation(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCertificatePolicy(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getCertificateVersions(const QString &certificate_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  include_pending bool [optional]
    */
    virtual void getCertificates(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_pending = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICertificateImportParameters [required]
    */
    virtual void importCertificate(const QString &certificate_name, const QString &api_version, const OAICertificateImportParameters &parameters);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICertificateMergeParameters [required]
    */
    virtual void mergeCertificate(const QString &certificate_name, const QString &api_version, const OAICertificateMergeParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICertificateRestoreParameters [required]
    */
    virtual void restoreCertificate(const QString &api_version, const OAICertificateRestoreParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  contacts OAIContacts [required]
    */
    virtual void setCertificateContacts(const QString &api_version, const OAIContacts &contacts);

    /**
    * @param[in]  issuer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameter OAICertificateIssuerSetParameters [required]
    */
    virtual void setCertificateIssuer(const QString &issuer_name, const QString &api_version, const OAICertificateIssuerSetParameters &parameter);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  certificate_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAICertificateUpdateParameters [required]
    */
    virtual void updateCertificate(const QString &certificate_name, const QString &certificate_version, const QString &api_version, const OAICertificateUpdateParameters &parameters);

    /**
    * @param[in]  issuer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameter OAICertificateIssuerUpdateParameters [required]
    */
    virtual void updateCertificateIssuer(const QString &issuer_name, const QString &api_version, const OAICertificateIssuerUpdateParameters &parameter);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_operation OAICertificateOperationUpdateParameter [required]
    */
    virtual void updateCertificateOperation(const QString &certificate_name, const QString &api_version, const OAICertificateOperationUpdateParameter &certificate_operation);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_policy OAICertificatePolicy [required]
    */
    virtual void updateCertificatePolicy(const QString &certificate_name, const QString &api_version, const OAICertificatePolicy &certificate_policy);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupCertificateCallback(OAIHttpRequestWorker *worker);
    void createCertificateCallback(OAIHttpRequestWorker *worker);
    void deleteCertificateCallback(OAIHttpRequestWorker *worker);
    void deleteCertificateContactsCallback(OAIHttpRequestWorker *worker);
    void deleteCertificateIssuerCallback(OAIHttpRequestWorker *worker);
    void deleteCertificateOperationCallback(OAIHttpRequestWorker *worker);
    void getCertificateCallback(OAIHttpRequestWorker *worker);
    void getCertificateContactsCallback(OAIHttpRequestWorker *worker);
    void getCertificateIssuerCallback(OAIHttpRequestWorker *worker);
    void getCertificateIssuersCallback(OAIHttpRequestWorker *worker);
    void getCertificateOperationCallback(OAIHttpRequestWorker *worker);
    void getCertificatePolicyCallback(OAIHttpRequestWorker *worker);
    void getCertificateVersionsCallback(OAIHttpRequestWorker *worker);
    void getCertificatesCallback(OAIHttpRequestWorker *worker);
    void importCertificateCallback(OAIHttpRequestWorker *worker);
    void mergeCertificateCallback(OAIHttpRequestWorker *worker);
    void restoreCertificateCallback(OAIHttpRequestWorker *worker);
    void setCertificateContactsCallback(OAIHttpRequestWorker *worker);
    void setCertificateIssuerCallback(OAIHttpRequestWorker *worker);
    void updateCertificateCallback(OAIHttpRequestWorker *worker);
    void updateCertificateIssuerCallback(OAIHttpRequestWorker *worker);
    void updateCertificateOperationCallback(OAIHttpRequestWorker *worker);
    void updateCertificatePolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupCertificateSignal(OAIBackupCertificateResult summary);
    void createCertificateSignal(OAICertificateOperation summary);
    void deleteCertificateSignal(OAIDeletedCertificateBundle summary);
    void deleteCertificateContactsSignal(OAIContacts summary);
    void deleteCertificateIssuerSignal(OAIIssuerBundle summary);
    void deleteCertificateOperationSignal(OAICertificateOperation summary);
    void getCertificateSignal(OAICertificateBundle summary);
    void getCertificateContactsSignal(OAIContacts summary);
    void getCertificateIssuerSignal(OAIIssuerBundle summary);
    void getCertificateIssuersSignal(OAICertificateIssuerListResult summary);
    void getCertificateOperationSignal(OAICertificateOperation summary);
    void getCertificatePolicySignal(OAICertificatePolicy summary);
    void getCertificateVersionsSignal(OAICertificateListResult summary);
    void getCertificatesSignal(OAICertificateListResult summary);
    void importCertificateSignal(OAICertificateBundle summary);
    void mergeCertificateSignal(OAICertificateBundle summary);
    void restoreCertificateSignal(OAICertificateBundle summary);
    void setCertificateContactsSignal(OAIContacts summary);
    void setCertificateIssuerSignal(OAIIssuerBundle summary);
    void updateCertificateSignal(OAICertificateBundle summary);
    void updateCertificateIssuerSignal(OAIIssuerBundle summary);
    void updateCertificateOperationSignal(OAICertificateOperation summary);
    void updateCertificatePolicySignal(OAICertificatePolicy summary);


    void backupCertificateSignalFull(OAIHttpRequestWorker *worker, OAIBackupCertificateResult summary);
    void createCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateOperation summary);
    void deleteCertificateSignalFull(OAIHttpRequestWorker *worker, OAIDeletedCertificateBundle summary);
    void deleteCertificateContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void deleteCertificateIssuerSignalFull(OAIHttpRequestWorker *worker, OAIIssuerBundle summary);
    void deleteCertificateOperationSignalFull(OAIHttpRequestWorker *worker, OAICertificateOperation summary);
    void getCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void getCertificateContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void getCertificateIssuerSignalFull(OAIHttpRequestWorker *worker, OAIIssuerBundle summary);
    void getCertificateIssuersSignalFull(OAIHttpRequestWorker *worker, OAICertificateIssuerListResult summary);
    void getCertificateOperationSignalFull(OAIHttpRequestWorker *worker, OAICertificateOperation summary);
    void getCertificatePolicySignalFull(OAIHttpRequestWorker *worker, OAICertificatePolicy summary);
    void getCertificateVersionsSignalFull(OAIHttpRequestWorker *worker, OAICertificateListResult summary);
    void getCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateListResult summary);
    void importCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void mergeCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void restoreCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void setCertificateContactsSignalFull(OAIHttpRequestWorker *worker, OAIContacts summary);
    void setCertificateIssuerSignalFull(OAIHttpRequestWorker *worker, OAIIssuerBundle summary);
    void updateCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void updateCertificateIssuerSignalFull(OAIHttpRequestWorker *worker, OAIIssuerBundle summary);
    void updateCertificateOperationSignalFull(OAIHttpRequestWorker *worker, OAICertificateOperation summary);
    void updateCertificatePolicySignalFull(OAIHttpRequestWorker *worker, OAICertificatePolicy summary);

    Q_DECL_DEPRECATED_X("Use backupCertificateSignalError() instead")
    void backupCertificateSignalE(OAIBackupCertificateResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupCertificateSignalError(OAIBackupCertificateResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCertificateSignalError() instead")
    void createCertificateSignalE(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCertificateSignalError(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateSignalError() instead")
    void deleteCertificateSignalE(OAIDeletedCertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateSignalError(OAIDeletedCertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateContactsSignalError() instead")
    void deleteCertificateContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateIssuerSignalError() instead")
    void deleteCertificateIssuerSignalE(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateIssuerSignalError(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateOperationSignalError() instead")
    void deleteCertificateOperationSignalE(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateOperationSignalError(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateSignalError() instead")
    void getCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateContactsSignalError() instead")
    void getCertificateContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateIssuerSignalError() instead")
    void getCertificateIssuerSignalE(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateIssuerSignalError(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateIssuersSignalError() instead")
    void getCertificateIssuersSignalE(OAICertificateIssuerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateIssuersSignalError(OAICertificateIssuerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateOperationSignalError() instead")
    void getCertificateOperationSignalE(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateOperationSignalError(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificatePolicySignalError() instead")
    void getCertificatePolicySignalE(OAICertificatePolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificatePolicySignalError(OAICertificatePolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateVersionsSignalError() instead")
    void getCertificateVersionsSignalE(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateVersionsSignalError(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificatesSignalError() instead")
    void getCertificatesSignalE(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificatesSignalError(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importCertificateSignalError() instead")
    void importCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeCertificateSignalError() instead")
    void mergeCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreCertificateSignalError() instead")
    void restoreCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCertificateContactsSignalError() instead")
    void setCertificateContactsSignalE(OAIContacts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setCertificateContactsSignalError(OAIContacts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCertificateIssuerSignalError() instead")
    void setCertificateIssuerSignalE(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setCertificateIssuerSignalError(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateSignalError() instead")
    void updateCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateIssuerSignalError() instead")
    void updateCertificateIssuerSignalE(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateIssuerSignalError(OAIIssuerBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateOperationSignalError() instead")
    void updateCertificateOperationSignalE(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateOperationSignalError(OAICertificateOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificatePolicySignalError() instead")
    void updateCertificatePolicySignalE(OAICertificatePolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificatePolicySignalError(OAICertificatePolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupCertificateSignalErrorFull() instead")
    void backupCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCertificateSignalErrorFull() instead")
    void createCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateSignalErrorFull() instead")
    void deleteCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateContactsSignalErrorFull() instead")
    void deleteCertificateContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateIssuerSignalErrorFull() instead")
    void deleteCertificateIssuerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateIssuerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCertificateOperationSignalErrorFull() instead")
    void deleteCertificateOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCertificateOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateSignalErrorFull() instead")
    void getCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateContactsSignalErrorFull() instead")
    void getCertificateContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateIssuerSignalErrorFull() instead")
    void getCertificateIssuerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateIssuerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateIssuersSignalErrorFull() instead")
    void getCertificateIssuersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateIssuersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateOperationSignalErrorFull() instead")
    void getCertificateOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificatePolicySignalErrorFull() instead")
    void getCertificatePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificatePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateVersionsSignalErrorFull() instead")
    void getCertificateVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificatesSignalErrorFull() instead")
    void getCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importCertificateSignalErrorFull() instead")
    void importCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeCertificateSignalErrorFull() instead")
    void mergeCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreCertificateSignalErrorFull() instead")
    void restoreCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCertificateContactsSignalErrorFull() instead")
    void setCertificateContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCertificateContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCertificateIssuerSignalErrorFull() instead")
    void setCertificateIssuerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCertificateIssuerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateSignalErrorFull() instead")
    void updateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateIssuerSignalErrorFull() instead")
    void updateCertificateIssuerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateIssuerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificateOperationSignalErrorFull() instead")
    void updateCertificateOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificateOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCertificatePolicySignalErrorFull() instead")
    void updateCertificatePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCertificatePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
