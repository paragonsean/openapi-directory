/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyImportParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyImportParameters::OAIKeyImportParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyImportParameters::OAIKeyImportParameters() {
    this->initializeModel();
}

OAIKeyImportParameters::~OAIKeyImportParameters() {}

void OAIKeyImportParameters::initializeModel() {

    m_hsm_isSet = false;
    m_hsm_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIKeyImportParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyImportParameters::fromJsonObject(QJsonObject json) {

    m_hsm_isValid = ::OpenAPI::fromJsonValue(m_hsm, json[QString("Hsm")]);
    m_hsm_isSet = !json[QString("Hsm")].isNull() && m_hsm_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIKeyImportParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyImportParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_hsm_isSet) {
        obj.insert(QString("Hsm"), ::OpenAPI::toJsonValue(m_hsm));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIKeyImportParameters::isHsm() const {
    return m_hsm;
}
void OAIKeyImportParameters::setHsm(const bool &hsm) {
    m_hsm = hsm;
    m_hsm_isSet = true;
}

bool OAIKeyImportParameters::is_hsm_Set() const{
    return m_hsm_isSet;
}

bool OAIKeyImportParameters::is_hsm_Valid() const{
    return m_hsm_isValid;
}

OAIKeyAttributes OAIKeyImportParameters::getAttributes() const {
    return m_attributes;
}
void OAIKeyImportParameters::setAttributes(const OAIKeyAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIKeyImportParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIKeyImportParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIJsonWebKey OAIKeyImportParameters::getKey() const {
    return m_key;
}
void OAIKeyImportParameters::setKey(const OAIJsonWebKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKeyImportParameters::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKeyImportParameters::is_key_Valid() const{
    return m_key_isValid;
}

QMap<QString, QString> OAIKeyImportParameters::getTags() const {
    return m_tags;
}
void OAIKeyImportParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIKeyImportParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIKeyImportParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIKeyImportParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyImportParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
