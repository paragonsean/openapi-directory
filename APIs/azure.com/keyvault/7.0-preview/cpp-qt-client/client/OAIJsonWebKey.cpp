/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonWebKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonWebKey::OAIJsonWebKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonWebKey::OAIJsonWebKey() {
    this->initializeModel();
}

OAIJsonWebKey::~OAIJsonWebKey() {}

void OAIJsonWebKey::initializeModel() {

    m_crv_isSet = false;
    m_crv_isValid = false;

    m_d_isSet = false;
    m_d_isValid = false;

    m_dp_isSet = false;
    m_dp_isValid = false;

    m_dq_isSet = false;
    m_dq_isValid = false;

    m_e_isSet = false;
    m_e_isValid = false;

    m_k_isSet = false;
    m_k_isValid = false;

    m_key_hsm_isSet = false;
    m_key_hsm_isValid = false;

    m_key_ops_isSet = false;
    m_key_ops_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_p_isSet = false;
    m_p_isValid = false;

    m_q_isSet = false;
    m_q_isValid = false;

    m_qi_isSet = false;
    m_qi_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIJsonWebKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonWebKey::fromJsonObject(QJsonObject json) {

    m_crv_isValid = ::OpenAPI::fromJsonValue(m_crv, json[QString("crv")]);
    m_crv_isSet = !json[QString("crv")].isNull() && m_crv_isValid;

    m_d_isValid = ::OpenAPI::fromJsonValue(m_d, json[QString("d")]);
    m_d_isSet = !json[QString("d")].isNull() && m_d_isValid;

    m_dp_isValid = ::OpenAPI::fromJsonValue(m_dp, json[QString("dp")]);
    m_dp_isSet = !json[QString("dp")].isNull() && m_dp_isValid;

    m_dq_isValid = ::OpenAPI::fromJsonValue(m_dq, json[QString("dq")]);
    m_dq_isSet = !json[QString("dq")].isNull() && m_dq_isValid;

    m_e_isValid = ::OpenAPI::fromJsonValue(m_e, json[QString("e")]);
    m_e_isSet = !json[QString("e")].isNull() && m_e_isValid;

    m_k_isValid = ::OpenAPI::fromJsonValue(m_k, json[QString("k")]);
    m_k_isSet = !json[QString("k")].isNull() && m_k_isValid;

    m_key_hsm_isValid = ::OpenAPI::fromJsonValue(m_key_hsm, json[QString("key_hsm")]);
    m_key_hsm_isSet = !json[QString("key_hsm")].isNull() && m_key_hsm_isValid;

    m_key_ops_isValid = ::OpenAPI::fromJsonValue(m_key_ops, json[QString("key_ops")]);
    m_key_ops_isSet = !json[QString("key_ops")].isNull() && m_key_ops_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_p_isValid = ::OpenAPI::fromJsonValue(m_p, json[QString("p")]);
    m_p_isSet = !json[QString("p")].isNull() && m_p_isValid;

    m_q_isValid = ::OpenAPI::fromJsonValue(m_q, json[QString("q")]);
    m_q_isSet = !json[QString("q")].isNull() && m_q_isValid;

    m_qi_isValid = ::OpenAPI::fromJsonValue(m_qi, json[QString("qi")]);
    m_qi_isSet = !json[QString("qi")].isNull() && m_qi_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIJsonWebKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonWebKey::asJsonObject() const {
    QJsonObject obj;
    if (m_crv_isSet) {
        obj.insert(QString("crv"), ::OpenAPI::toJsonValue(m_crv));
    }
    if (m_d_isSet) {
        obj.insert(QString("d"), ::OpenAPI::toJsonValue(m_d));
    }
    if (m_dp_isSet) {
        obj.insert(QString("dp"), ::OpenAPI::toJsonValue(m_dp));
    }
    if (m_dq_isSet) {
        obj.insert(QString("dq"), ::OpenAPI::toJsonValue(m_dq));
    }
    if (m_e_isSet) {
        obj.insert(QString("e"), ::OpenAPI::toJsonValue(m_e));
    }
    if (m_k_isSet) {
        obj.insert(QString("k"), ::OpenAPI::toJsonValue(m_k));
    }
    if (m_key_hsm_isSet) {
        obj.insert(QString("key_hsm"), ::OpenAPI::toJsonValue(m_key_hsm));
    }
    if (m_key_ops.size() > 0) {
        obj.insert(QString("key_ops"), ::OpenAPI::toJsonValue(m_key_ops));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_p_isSet) {
        obj.insert(QString("p"), ::OpenAPI::toJsonValue(m_p));
    }
    if (m_q_isSet) {
        obj.insert(QString("q"), ::OpenAPI::toJsonValue(m_q));
    }
    if (m_qi_isSet) {
        obj.insert(QString("qi"), ::OpenAPI::toJsonValue(m_qi));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

QString OAIJsonWebKey::getCrv() const {
    return m_crv;
}
void OAIJsonWebKey::setCrv(const QString &crv) {
    m_crv = crv;
    m_crv_isSet = true;
}

bool OAIJsonWebKey::is_crv_Set() const{
    return m_crv_isSet;
}

bool OAIJsonWebKey::is_crv_Valid() const{
    return m_crv_isValid;
}

QString OAIJsonWebKey::getD() const {
    return m_d;
}
void OAIJsonWebKey::setD(const QString &d) {
    m_d = d;
    m_d_isSet = true;
}

bool OAIJsonWebKey::is_d_Set() const{
    return m_d_isSet;
}

bool OAIJsonWebKey::is_d_Valid() const{
    return m_d_isValid;
}

QString OAIJsonWebKey::getDp() const {
    return m_dp;
}
void OAIJsonWebKey::setDp(const QString &dp) {
    m_dp = dp;
    m_dp_isSet = true;
}

bool OAIJsonWebKey::is_dp_Set() const{
    return m_dp_isSet;
}

bool OAIJsonWebKey::is_dp_Valid() const{
    return m_dp_isValid;
}

QString OAIJsonWebKey::getDq() const {
    return m_dq;
}
void OAIJsonWebKey::setDq(const QString &dq) {
    m_dq = dq;
    m_dq_isSet = true;
}

bool OAIJsonWebKey::is_dq_Set() const{
    return m_dq_isSet;
}

bool OAIJsonWebKey::is_dq_Valid() const{
    return m_dq_isValid;
}

QString OAIJsonWebKey::getE() const {
    return m_e;
}
void OAIJsonWebKey::setE(const QString &e) {
    m_e = e;
    m_e_isSet = true;
}

bool OAIJsonWebKey::is_e_Set() const{
    return m_e_isSet;
}

bool OAIJsonWebKey::is_e_Valid() const{
    return m_e_isValid;
}

QString OAIJsonWebKey::getK() const {
    return m_k;
}
void OAIJsonWebKey::setK(const QString &k) {
    m_k = k;
    m_k_isSet = true;
}

bool OAIJsonWebKey::is_k_Set() const{
    return m_k_isSet;
}

bool OAIJsonWebKey::is_k_Valid() const{
    return m_k_isValid;
}

QString OAIJsonWebKey::getKeyHsm() const {
    return m_key_hsm;
}
void OAIJsonWebKey::setKeyHsm(const QString &key_hsm) {
    m_key_hsm = key_hsm;
    m_key_hsm_isSet = true;
}

bool OAIJsonWebKey::is_key_hsm_Set() const{
    return m_key_hsm_isSet;
}

bool OAIJsonWebKey::is_key_hsm_Valid() const{
    return m_key_hsm_isValid;
}

QList<QString> OAIJsonWebKey::getKeyOps() const {
    return m_key_ops;
}
void OAIJsonWebKey::setKeyOps(const QList<QString> &key_ops) {
    m_key_ops = key_ops;
    m_key_ops_isSet = true;
}

bool OAIJsonWebKey::is_key_ops_Set() const{
    return m_key_ops_isSet;
}

bool OAIJsonWebKey::is_key_ops_Valid() const{
    return m_key_ops_isValid;
}

QString OAIJsonWebKey::getKid() const {
    return m_kid;
}
void OAIJsonWebKey::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAIJsonWebKey::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAIJsonWebKey::is_kid_Valid() const{
    return m_kid_isValid;
}

QString OAIJsonWebKey::getKty() const {
    return m_kty;
}
void OAIJsonWebKey::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAIJsonWebKey::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAIJsonWebKey::is_kty_Valid() const{
    return m_kty_isValid;
}

QString OAIJsonWebKey::getN() const {
    return m_n;
}
void OAIJsonWebKey::setN(const QString &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIJsonWebKey::is_n_Set() const{
    return m_n_isSet;
}

bool OAIJsonWebKey::is_n_Valid() const{
    return m_n_isValid;
}

QString OAIJsonWebKey::getP() const {
    return m_p;
}
void OAIJsonWebKey::setP(const QString &p) {
    m_p = p;
    m_p_isSet = true;
}

bool OAIJsonWebKey::is_p_Set() const{
    return m_p_isSet;
}

bool OAIJsonWebKey::is_p_Valid() const{
    return m_p_isValid;
}

QString OAIJsonWebKey::getQ() const {
    return m_q;
}
void OAIJsonWebKey::setQ(const QString &q) {
    m_q = q;
    m_q_isSet = true;
}

bool OAIJsonWebKey::is_q_Set() const{
    return m_q_isSet;
}

bool OAIJsonWebKey::is_q_Valid() const{
    return m_q_isValid;
}

QString OAIJsonWebKey::getQi() const {
    return m_qi;
}
void OAIJsonWebKey::setQi(const QString &qi) {
    m_qi = qi;
    m_qi_isSet = true;
}

bool OAIJsonWebKey::is_qi_Set() const{
    return m_qi_isSet;
}

bool OAIJsonWebKey::is_qi_Valid() const{
    return m_qi_isValid;
}

QString OAIJsonWebKey::getX() const {
    return m_x;
}
void OAIJsonWebKey::setX(const QString &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIJsonWebKey::is_x_Set() const{
    return m_x_isSet;
}

bool OAIJsonWebKey::is_x_Valid() const{
    return m_x_isValid;
}

QString OAIJsonWebKey::getY() const {
    return m_y;
}
void OAIJsonWebKey::setY(const QString &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIJsonWebKey::is_y_Set() const{
    return m_y_isSet;
}

bool OAIJsonWebKey::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIJsonWebKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_hsm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_ops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_q_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonWebKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
