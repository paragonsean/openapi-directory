/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeletedCertificatesApi_H
#define OAI_OAIDeletedCertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateBundle.h"
#include "OAIDeletedCertificateBundle.h"
#include "OAIDeletedCertificateListResult.h"
#include "OAIKeyVaultError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeletedCertificatesApi : public QObject {
    Q_OBJECT

public:
    OAIDeletedCertificatesApi(const int timeOut = 0);
    ~OAIDeletedCertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDeletedCertificate(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  include_pending bool [optional]
    */
    virtual void getDeletedCertificates(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_pending = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void purgeDeletedCertificate(const QString &certificate_name, const QString &api_version);

    /**
    * @param[in]  certificate_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recoverDeletedCertificate(const QString &certificate_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeletedCertificateCallback(OAIHttpRequestWorker *worker);
    void getDeletedCertificatesCallback(OAIHttpRequestWorker *worker);
    void purgeDeletedCertificateCallback(OAIHttpRequestWorker *worker);
    void recoverDeletedCertificateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeletedCertificateSignal(OAIDeletedCertificateBundle summary);
    void getDeletedCertificatesSignal(OAIDeletedCertificateListResult summary);
    void purgeDeletedCertificateSignal();
    void recoverDeletedCertificateSignal(OAICertificateBundle summary);


    void getDeletedCertificateSignalFull(OAIHttpRequestWorker *worker, OAIDeletedCertificateBundle summary);
    void getDeletedCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIDeletedCertificateListResult summary);
    void purgeDeletedCertificateSignalFull(OAIHttpRequestWorker *worker);
    void recoverDeletedCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);

    Q_DECL_DEPRECATED_X("Use getDeletedCertificateSignalError() instead")
    void getDeletedCertificateSignalE(OAIDeletedCertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedCertificateSignalError(OAIDeletedCertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedCertificatesSignalError() instead")
    void getDeletedCertificatesSignalE(OAIDeletedCertificateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedCertificatesSignalError(OAIDeletedCertificateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purgeDeletedCertificateSignalError() instead")
    void purgeDeletedCertificateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void purgeDeletedCertificateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedCertificateSignalError() instead")
    void recoverDeletedCertificateSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedCertificateSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeletedCertificateSignalErrorFull() instead")
    void getDeletedCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeletedCertificatesSignalErrorFull() instead")
    void getDeletedCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeletedCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use purgeDeletedCertificateSignalErrorFull() instead")
    void purgeDeletedCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void purgeDeletedCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverDeletedCertificateSignalErrorFull() instead")
    void recoverDeletedCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverDeletedCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
