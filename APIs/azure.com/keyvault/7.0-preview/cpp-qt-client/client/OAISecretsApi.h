/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretsApi_H
#define OAI_OAISecretsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupSecretResult.h"
#include "OAIDeletedSecretBundle.h"
#include "OAIKeyVaultError.h"
#include "OAISecretBundle.h"
#include "OAISecretListResult.h"
#include "OAISecretRestoreParameters.h"
#include "OAISecretSetParameters.h"
#include "OAISecretUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretsApi : public QObject {
    Q_OBJECT

public:
    OAISecretsApi(const int timeOut = 0);
    ~OAISecretsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupSecret(const QString &secret_name, const QString &api_version);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteSecret(const QString &secret_name, const QString &api_version);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  secret_version QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSecret(const QString &secret_name, const QString &secret_version, const QString &api_version);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getSecretVersions(const QString &secret_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getSecrets(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISecretRestoreParameters [required]
    */
    virtual void restoreSecret(const QString &api_version, const OAISecretRestoreParameters &parameters);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISecretSetParameters [required]
    */
    virtual void setSecret(const QString &secret_name, const QString &api_version, const OAISecretSetParameters &parameters);

    /**
    * @param[in]  secret_name QString [required]
    * @param[in]  secret_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISecretUpdateParameters [required]
    */
    virtual void updateSecret(const QString &secret_name, const QString &secret_version, const QString &api_version, const OAISecretUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupSecretCallback(OAIHttpRequestWorker *worker);
    void deleteSecretCallback(OAIHttpRequestWorker *worker);
    void getSecretCallback(OAIHttpRequestWorker *worker);
    void getSecretVersionsCallback(OAIHttpRequestWorker *worker);
    void getSecretsCallback(OAIHttpRequestWorker *worker);
    void restoreSecretCallback(OAIHttpRequestWorker *worker);
    void setSecretCallback(OAIHttpRequestWorker *worker);
    void updateSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupSecretSignal(OAIBackupSecretResult summary);
    void deleteSecretSignal(OAIDeletedSecretBundle summary);
    void getSecretSignal(OAISecretBundle summary);
    void getSecretVersionsSignal(OAISecretListResult summary);
    void getSecretsSignal(OAISecretListResult summary);
    void restoreSecretSignal(OAISecretBundle summary);
    void setSecretSignal(OAISecretBundle summary);
    void updateSecretSignal(OAISecretBundle summary);


    void backupSecretSignalFull(OAIHttpRequestWorker *worker, OAIBackupSecretResult summary);
    void deleteSecretSignalFull(OAIHttpRequestWorker *worker, OAIDeletedSecretBundle summary);
    void getSecretSignalFull(OAIHttpRequestWorker *worker, OAISecretBundle summary);
    void getSecretVersionsSignalFull(OAIHttpRequestWorker *worker, OAISecretListResult summary);
    void getSecretsSignalFull(OAIHttpRequestWorker *worker, OAISecretListResult summary);
    void restoreSecretSignalFull(OAIHttpRequestWorker *worker, OAISecretBundle summary);
    void setSecretSignalFull(OAIHttpRequestWorker *worker, OAISecretBundle summary);
    void updateSecretSignalFull(OAIHttpRequestWorker *worker, OAISecretBundle summary);

    Q_DECL_DEPRECATED_X("Use backupSecretSignalError() instead")
    void backupSecretSignalE(OAIBackupSecretResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupSecretSignalError(OAIBackupSecretResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecretSignalError() instead")
    void deleteSecretSignalE(OAIDeletedSecretBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecretSignalError(OAIDeletedSecretBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretSignalError() instead")
    void getSecretSignalE(OAISecretBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretSignalError(OAISecretBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretVersionsSignalError() instead")
    void getSecretVersionsSignalE(OAISecretListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretVersionsSignalError(OAISecretListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsSignalError() instead")
    void getSecretsSignalE(OAISecretListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsSignalError(OAISecretListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSecretSignalError() instead")
    void restoreSecretSignalE(OAISecretBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSecretSignalError(OAISecretBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSecretSignalError() instead")
    void setSecretSignalE(OAISecretBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setSecretSignalError(OAISecretBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecretSignalError() instead")
    void updateSecretSignalE(OAISecretBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecretSignalError(OAISecretBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupSecretSignalErrorFull() instead")
    void backupSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSecretSignalErrorFull() instead")
    void deleteSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretSignalErrorFull() instead")
    void getSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretVersionsSignalErrorFull() instead")
    void getSecretVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecretsSignalErrorFull() instead")
    void getSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSecretSignalErrorFull() instead")
    void restoreSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSecretSignalErrorFull() instead")
    void setSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSecretSignalErrorFull() instead")
    void updateSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
