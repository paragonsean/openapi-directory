/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasDefinitionUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasDefinitionUpdateParameters::OAISasDefinitionUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasDefinitionUpdateParameters::OAISasDefinitionUpdateParameters() {
    this->initializeModel();
}

OAISasDefinitionUpdateParameters::~OAISasDefinitionUpdateParameters() {}

void OAISasDefinitionUpdateParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_sas_type_isSet = false;
    m_sas_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_template_uri_isSet = false;
    m_template_uri_isValid = false;

    m_validity_period_isSet = false;
    m_validity_period_isValid = false;
}

void OAISasDefinitionUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasDefinitionUpdateParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_sas_type_isValid = ::OpenAPI::fromJsonValue(m_sas_type, json[QString("sasType")]);
    m_sas_type_isSet = !json[QString("sasType")].isNull() && m_sas_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_template_uri_isValid = ::OpenAPI::fromJsonValue(m_template_uri, json[QString("templateUri")]);
    m_template_uri_isSet = !json[QString("templateUri")].isNull() && m_template_uri_isValid;

    m_validity_period_isValid = ::OpenAPI::fromJsonValue(m_validity_period, json[QString("validityPeriod")]);
    m_validity_period_isSet = !json[QString("validityPeriod")].isNull() && m_validity_period_isValid;
}

QString OAISasDefinitionUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasDefinitionUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_sas_type_isSet) {
        obj.insert(QString("sasType"), ::OpenAPI::toJsonValue(m_sas_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_template_uri_isSet) {
        obj.insert(QString("templateUri"), ::OpenAPI::toJsonValue(m_template_uri));
    }
    if (m_validity_period_isSet) {
        obj.insert(QString("validityPeriod"), ::OpenAPI::toJsonValue(m_validity_period));
    }
    return obj;
}

OAISasDefinitionAttributes OAISasDefinitionUpdateParameters::getAttributes() const {
    return m_attributes;
}
void OAISasDefinitionUpdateParameters::setAttributes(const OAISasDefinitionAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISasDefinitionUpdateParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISasDefinitionUpdateParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISasDefinitionUpdateParameters::getSasType() const {
    return m_sas_type;
}
void OAISasDefinitionUpdateParameters::setSasType(const QString &sas_type) {
    m_sas_type = sas_type;
    m_sas_type_isSet = true;
}

bool OAISasDefinitionUpdateParameters::is_sas_type_Set() const{
    return m_sas_type_isSet;
}

bool OAISasDefinitionUpdateParameters::is_sas_type_Valid() const{
    return m_sas_type_isValid;
}

QMap<QString, QString> OAISasDefinitionUpdateParameters::getTags() const {
    return m_tags;
}
void OAISasDefinitionUpdateParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISasDefinitionUpdateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISasDefinitionUpdateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISasDefinitionUpdateParameters::getTemplateUri() const {
    return m_template_uri;
}
void OAISasDefinitionUpdateParameters::setTemplateUri(const QString &template_uri) {
    m_template_uri = template_uri;
    m_template_uri_isSet = true;
}

bool OAISasDefinitionUpdateParameters::is_template_uri_Set() const{
    return m_template_uri_isSet;
}

bool OAISasDefinitionUpdateParameters::is_template_uri_Valid() const{
    return m_template_uri_isValid;
}

QString OAISasDefinitionUpdateParameters::getValidityPeriod() const {
    return m_validity_period;
}
void OAISasDefinitionUpdateParameters::setValidityPeriod(const QString &validity_period) {
    m_validity_period = validity_period;
    m_validity_period_isSet = true;
}

bool OAISasDefinitionUpdateParameters::is_validity_period_Set() const{
    return m_validity_period_isSet;
}

bool OAISasDefinitionUpdateParameters::is_validity_period_Valid() const{
    return m_validity_period_isValid;
}

bool OAISasDefinitionUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasDefinitionUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
