/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyCreateParameters::OAIKeyCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyCreateParameters::OAIKeyCreateParameters() {
    this->initializeModel();
}

OAIKeyCreateParameters::~OAIKeyCreateParameters() {}

void OAIKeyCreateParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_crv_isSet = false;
    m_crv_isValid = false;

    m_key_ops_isSet = false;
    m_key_ops_isValid = false;

    m_key_size_isSet = false;
    m_key_size_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIKeyCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyCreateParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_crv_isValid = ::OpenAPI::fromJsonValue(m_crv, json[QString("crv")]);
    m_crv_isSet = !json[QString("crv")].isNull() && m_crv_isValid;

    m_key_ops_isValid = ::OpenAPI::fromJsonValue(m_key_ops, json[QString("key_ops")]);
    m_key_ops_isSet = !json[QString("key_ops")].isNull() && m_key_ops_isValid;

    m_key_size_isValid = ::OpenAPI::fromJsonValue(m_key_size, json[QString("key_size")]);
    m_key_size_isSet = !json[QString("key_size")].isNull() && m_key_size_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIKeyCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_crv_isSet) {
        obj.insert(QString("crv"), ::OpenAPI::toJsonValue(m_crv));
    }
    if (m_key_ops.size() > 0) {
        obj.insert(QString("key_ops"), ::OpenAPI::toJsonValue(m_key_ops));
    }
    if (m_key_size_isSet) {
        obj.insert(QString("key_size"), ::OpenAPI::toJsonValue(m_key_size));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIKeyAttributes OAIKeyCreateParameters::getAttributes() const {
    return m_attributes;
}
void OAIKeyCreateParameters::setAttributes(const OAIKeyAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIKeyCreateParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIKeyCreateParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIKeyCreateParameters::getCrv() const {
    return m_crv;
}
void OAIKeyCreateParameters::setCrv(const QString &crv) {
    m_crv = crv;
    m_crv_isSet = true;
}

bool OAIKeyCreateParameters::is_crv_Set() const{
    return m_crv_isSet;
}

bool OAIKeyCreateParameters::is_crv_Valid() const{
    return m_crv_isValid;
}

QList<QString> OAIKeyCreateParameters::getKeyOps() const {
    return m_key_ops;
}
void OAIKeyCreateParameters::setKeyOps(const QList<QString> &key_ops) {
    m_key_ops = key_ops;
    m_key_ops_isSet = true;
}

bool OAIKeyCreateParameters::is_key_ops_Set() const{
    return m_key_ops_isSet;
}

bool OAIKeyCreateParameters::is_key_ops_Valid() const{
    return m_key_ops_isValid;
}

qint32 OAIKeyCreateParameters::getKeySize() const {
    return m_key_size;
}
void OAIKeyCreateParameters::setKeySize(const qint32 &key_size) {
    m_key_size = key_size;
    m_key_size_isSet = true;
}

bool OAIKeyCreateParameters::is_key_size_Set() const{
    return m_key_size_isSet;
}

bool OAIKeyCreateParameters::is_key_size_Valid() const{
    return m_key_size_isValid;
}

QString OAIKeyCreateParameters::getKty() const {
    return m_kty;
}
void OAIKeyCreateParameters::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAIKeyCreateParameters::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAIKeyCreateParameters::is_kty_Valid() const{
    return m_kty_isValid;
}

QMap<QString, QString> OAIKeyCreateParameters::getTags() const {
    return m_tags;
}
void OAIKeyCreateParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIKeyCreateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIKeyCreateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIKeyCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_ops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kty_isValid && true;
}

} // namespace OpenAPI
