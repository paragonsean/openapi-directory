/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateOperationUpdateParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateOperationUpdateParameter::OAICertificateOperationUpdateParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateOperationUpdateParameter::OAICertificateOperationUpdateParameter() {
    this->initializeModel();
}

OAICertificateOperationUpdateParameter::~OAICertificateOperationUpdateParameter() {}

void OAICertificateOperationUpdateParameter::initializeModel() {

    m_cancellation_requested_isSet = false;
    m_cancellation_requested_isValid = false;
}

void OAICertificateOperationUpdateParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateOperationUpdateParameter::fromJsonObject(QJsonObject json) {

    m_cancellation_requested_isValid = ::OpenAPI::fromJsonValue(m_cancellation_requested, json[QString("cancellation_requested")]);
    m_cancellation_requested_isSet = !json[QString("cancellation_requested")].isNull() && m_cancellation_requested_isValid;
}

QString OAICertificateOperationUpdateParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateOperationUpdateParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_requested_isSet) {
        obj.insert(QString("cancellation_requested"), ::OpenAPI::toJsonValue(m_cancellation_requested));
    }
    return obj;
}

bool OAICertificateOperationUpdateParameter::isCancellationRequested() const {
    return m_cancellation_requested;
}
void OAICertificateOperationUpdateParameter::setCancellationRequested(const bool &cancellation_requested) {
    m_cancellation_requested = cancellation_requested;
    m_cancellation_requested_isSet = true;
}

bool OAICertificateOperationUpdateParameter::is_cancellation_requested_Set() const{
    return m_cancellation_requested_isSet;
}

bool OAICertificateOperationUpdateParameter::is_cancellation_requested_Valid() const{
    return m_cancellation_requested_isValid;
}

bool OAICertificateOperationUpdateParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_requested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateOperationUpdateParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_requested_isValid && true;
}

} // namespace OpenAPI
