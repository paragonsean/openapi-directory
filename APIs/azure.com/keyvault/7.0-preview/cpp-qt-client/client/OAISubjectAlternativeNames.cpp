/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubjectAlternativeNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubjectAlternativeNames::OAISubjectAlternativeNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubjectAlternativeNames::OAISubjectAlternativeNames() {
    this->initializeModel();
}

OAISubjectAlternativeNames::~OAISubjectAlternativeNames() {}

void OAISubjectAlternativeNames::initializeModel() {

    m_dns_names_isSet = false;
    m_dns_names_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_upns_isSet = false;
    m_upns_isValid = false;
}

void OAISubjectAlternativeNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubjectAlternativeNames::fromJsonObject(QJsonObject json) {

    m_dns_names_isValid = ::OpenAPI::fromJsonValue(m_dns_names, json[QString("dns_names")]);
    m_dns_names_isSet = !json[QString("dns_names")].isNull() && m_dns_names_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_upns_isValid = ::OpenAPI::fromJsonValue(m_upns, json[QString("upns")]);
    m_upns_isSet = !json[QString("upns")].isNull() && m_upns_isValid;
}

QString OAISubjectAlternativeNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubjectAlternativeNames::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_names.size() > 0) {
        obj.insert(QString("dns_names"), ::OpenAPI::toJsonValue(m_dns_names));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_upns.size() > 0) {
        obj.insert(QString("upns"), ::OpenAPI::toJsonValue(m_upns));
    }
    return obj;
}

QList<QString> OAISubjectAlternativeNames::getDnsNames() const {
    return m_dns_names;
}
void OAISubjectAlternativeNames::setDnsNames(const QList<QString> &dns_names) {
    m_dns_names = dns_names;
    m_dns_names_isSet = true;
}

bool OAISubjectAlternativeNames::is_dns_names_Set() const{
    return m_dns_names_isSet;
}

bool OAISubjectAlternativeNames::is_dns_names_Valid() const{
    return m_dns_names_isValid;
}

QList<QString> OAISubjectAlternativeNames::getEmails() const {
    return m_emails;
}
void OAISubjectAlternativeNames::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAISubjectAlternativeNames::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAISubjectAlternativeNames::is_emails_Valid() const{
    return m_emails_isValid;
}

QList<QString> OAISubjectAlternativeNames::getUpns() const {
    return m_upns;
}
void OAISubjectAlternativeNames::setUpns(const QList<QString> &upns) {
    m_upns = upns;
    m_upns_isSet = true;
}

bool OAISubjectAlternativeNames::is_upns_Set() const{
    return m_upns_isSet;
}

bool OAISubjectAlternativeNames::is_upns_Valid() const{
    return m_upns_isValid;
}

bool OAISubjectAlternativeNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubjectAlternativeNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
