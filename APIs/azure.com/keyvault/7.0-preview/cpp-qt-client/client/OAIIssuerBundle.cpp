/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuerBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuerBundle::OAIIssuerBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuerBundle::OAIIssuerBundle() {
    this->initializeModel();
}

OAIIssuerBundle::~OAIIssuerBundle() {}

void OAIIssuerBundle::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_org_details_isSet = false;
    m_org_details_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIIssuerBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuerBundle::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_org_details_isValid = ::OpenAPI::fromJsonValue(m_org_details, json[QString("org_details")]);
    m_org_details_isSet = !json[QString("org_details")].isNull() && m_org_details_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIIssuerBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuerBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_org_details.isSet()) {
        obj.insert(QString("org_details"), ::OpenAPI::toJsonValue(m_org_details));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

OAIIssuerAttributes OAIIssuerBundle::getAttributes() const {
    return m_attributes;
}
void OAIIssuerBundle::setAttributes(const OAIIssuerAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIIssuerBundle::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIIssuerBundle::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIIssuerCredentials OAIIssuerBundle::getCredentials() const {
    return m_credentials;
}
void OAIIssuerBundle::setCredentials(const OAIIssuerCredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIIssuerBundle::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIIssuerBundle::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAIIssuerBundle::getId() const {
    return m_id;
}
void OAIIssuerBundle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssuerBundle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssuerBundle::is_id_Valid() const{
    return m_id_isValid;
}

OAIOrganizationDetails OAIIssuerBundle::getOrgDetails() const {
    return m_org_details;
}
void OAIIssuerBundle::setOrgDetails(const OAIOrganizationDetails &org_details) {
    m_org_details = org_details;
    m_org_details_isSet = true;
}

bool OAIIssuerBundle::is_org_details_Set() const{
    return m_org_details_isSet;
}

bool OAIIssuerBundle::is_org_details_Valid() const{
    return m_org_details_isValid;
}

QString OAIIssuerBundle::getProvider() const {
    return m_provider;
}
void OAIIssuerBundle::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIIssuerBundle::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIssuerBundle::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIIssuerBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuerBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
