/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletedStorageAccountItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletedStorageAccountItem::OAIDeletedStorageAccountItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletedStorageAccountItem::OAIDeletedStorageAccountItem() {
    this->initializeModel();
}

OAIDeletedStorageAccountItem::~OAIDeletedStorageAccountItem() {}

void OAIDeletedStorageAccountItem::initializeModel() {

    m_deleted_date_isSet = false;
    m_deleted_date_isValid = false;

    m_recovery_id_isSet = false;
    m_recovery_id_isValid = false;

    m_scheduled_purge_date_isSet = false;
    m_scheduled_purge_date_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDeletedStorageAccountItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletedStorageAccountItem::fromJsonObject(QJsonObject json) {

    m_deleted_date_isValid = ::OpenAPI::fromJsonValue(m_deleted_date, json[QString("deletedDate")]);
    m_deleted_date_isSet = !json[QString("deletedDate")].isNull() && m_deleted_date_isValid;

    m_recovery_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_id, json[QString("recoveryId")]);
    m_recovery_id_isSet = !json[QString("recoveryId")].isNull() && m_recovery_id_isValid;

    m_scheduled_purge_date_isValid = ::OpenAPI::fromJsonValue(m_scheduled_purge_date, json[QString("scheduledPurgeDate")]);
    m_scheduled_purge_date_isSet = !json[QString("scheduledPurgeDate")].isNull() && m_scheduled_purge_date_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDeletedStorageAccountItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletedStorageAccountItem::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_date_isSet) {
        obj.insert(QString("deletedDate"), ::OpenAPI::toJsonValue(m_deleted_date));
    }
    if (m_recovery_id_isSet) {
        obj.insert(QString("recoveryId"), ::OpenAPI::toJsonValue(m_recovery_id));
    }
    if (m_scheduled_purge_date_isSet) {
        obj.insert(QString("scheduledPurgeDate"), ::OpenAPI::toJsonValue(m_scheduled_purge_date));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIDeletedStorageAccountItem::getDeletedDate() const {
    return m_deleted_date;
}
void OAIDeletedStorageAccountItem::setDeletedDate(const qint32 &deleted_date) {
    m_deleted_date = deleted_date;
    m_deleted_date_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_deleted_date_Set() const{
    return m_deleted_date_isSet;
}

bool OAIDeletedStorageAccountItem::is_deleted_date_Valid() const{
    return m_deleted_date_isValid;
}

QString OAIDeletedStorageAccountItem::getRecoveryId() const {
    return m_recovery_id;
}
void OAIDeletedStorageAccountItem::setRecoveryId(const QString &recovery_id) {
    m_recovery_id = recovery_id;
    m_recovery_id_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_recovery_id_Set() const{
    return m_recovery_id_isSet;
}

bool OAIDeletedStorageAccountItem::is_recovery_id_Valid() const{
    return m_recovery_id_isValid;
}

qint32 OAIDeletedStorageAccountItem::getScheduledPurgeDate() const {
    return m_scheduled_purge_date;
}
void OAIDeletedStorageAccountItem::setScheduledPurgeDate(const qint32 &scheduled_purge_date) {
    m_scheduled_purge_date = scheduled_purge_date;
    m_scheduled_purge_date_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_scheduled_purge_date_Set() const{
    return m_scheduled_purge_date_isSet;
}

bool OAIDeletedStorageAccountItem::is_scheduled_purge_date_Valid() const{
    return m_scheduled_purge_date_isValid;
}

OAIStorageAccountAttributes OAIDeletedStorageAccountItem::getAttributes() const {
    return m_attributes;
}
void OAIDeletedStorageAccountItem::setAttributes(const OAIStorageAccountAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDeletedStorageAccountItem::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIDeletedStorageAccountItem::getId() const {
    return m_id;
}
void OAIDeletedStorageAccountItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeletedStorageAccountItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeletedStorageAccountItem::getResourceId() const {
    return m_resource_id;
}
void OAIDeletedStorageAccountItem::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDeletedStorageAccountItem::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QMap<QString, QString> OAIDeletedStorageAccountItem::getTags() const {
    return m_tags;
}
void OAIDeletedStorageAccountItem::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeletedStorageAccountItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeletedStorageAccountItem::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDeletedStorageAccountItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_purge_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletedStorageAccountItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
