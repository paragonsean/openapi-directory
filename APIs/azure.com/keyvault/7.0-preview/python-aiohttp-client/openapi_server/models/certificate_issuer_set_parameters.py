# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issuer_attributes import IssuerAttributes
from openapi_server.models.issuer_credentials import IssuerCredentials
from openapi_server.models.organization_details import OrganizationDetails
from openapi_server import util


class CertificateIssuerSetParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: IssuerAttributes=None, credentials: IssuerCredentials=None, org_details: OrganizationDetails=None, provider: str=None):
        """CertificateIssuerSetParameters - a model defined in OpenAPI

        :param attributes: The attributes of this CertificateIssuerSetParameters.
        :param credentials: The credentials of this CertificateIssuerSetParameters.
        :param org_details: The org_details of this CertificateIssuerSetParameters.
        :param provider: The provider of this CertificateIssuerSetParameters.
        """
        self.openapi_types = {
            'attributes': IssuerAttributes,
            'credentials': IssuerCredentials,
            'org_details': OrganizationDetails,
            'provider': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'credentials': 'credentials',
            'org_details': 'org_details',
            'provider': 'provider'
        }

        self._attributes = attributes
        self._credentials = credentials
        self._org_details = org_details
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateIssuerSetParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateIssuerSetParameters of this CertificateIssuerSetParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CertificateIssuerSetParameters.


        :return: The attributes of this CertificateIssuerSetParameters.
        :rtype: IssuerAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CertificateIssuerSetParameters.


        :param attributes: The attributes of this CertificateIssuerSetParameters.
        :type attributes: IssuerAttributes
        """

        self._attributes = attributes

    @property
    def credentials(self):
        """Gets the credentials of this CertificateIssuerSetParameters.


        :return: The credentials of this CertificateIssuerSetParameters.
        :rtype: IssuerCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this CertificateIssuerSetParameters.


        :param credentials: The credentials of this CertificateIssuerSetParameters.
        :type credentials: IssuerCredentials
        """

        self._credentials = credentials

    @property
    def org_details(self):
        """Gets the org_details of this CertificateIssuerSetParameters.


        :return: The org_details of this CertificateIssuerSetParameters.
        :rtype: OrganizationDetails
        """
        return self._org_details

    @org_details.setter
    def org_details(self, org_details):
        """Sets the org_details of this CertificateIssuerSetParameters.


        :param org_details: The org_details of this CertificateIssuerSetParameters.
        :type org_details: OrganizationDetails
        """

        self._org_details = org_details

    @property
    def provider(self):
        """Gets the provider of this CertificateIssuerSetParameters.

        The issuer provider.

        :return: The provider of this CertificateIssuerSetParameters.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CertificateIssuerSetParameters.

        The issuer provider.

        :param provider: The provider of this CertificateIssuerSetParameters.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
