# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.trigger import Trigger
from openapi_server import util


class LifetimeAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, trigger: Trigger=None):
        """LifetimeAction - a model defined in OpenAPI

        :param action: The action of this LifetimeAction.
        :param trigger: The trigger of this LifetimeAction.
        """
        self.openapi_types = {
            'action': Action,
            'trigger': Trigger
        }

        self.attribute_map = {
            'action': 'action',
            'trigger': 'trigger'
        }

        self._action = action
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifetimeAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifetimeAction of this LifetimeAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LifetimeAction.


        :return: The action of this LifetimeAction.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LifetimeAction.


        :param action: The action of this LifetimeAction.
        :type action: Action
        """

        self._action = action

    @property
    def trigger(self):
        """Gets the trigger of this LifetimeAction.


        :return: The trigger of this LifetimeAction.
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this LifetimeAction.


        :param trigger: The trigger of this LifetimeAction.
        :type trigger: Trigger
        """

        self._trigger = trigger
