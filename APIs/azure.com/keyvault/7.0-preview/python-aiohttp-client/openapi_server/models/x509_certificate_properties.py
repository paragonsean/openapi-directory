# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subject_alternative_names import SubjectAlternativeNames
from openapi_server import util


class X509CertificateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ekus: List[str]=None, key_usage: List[str]=None, sans: SubjectAlternativeNames=None, subject: str=None, validity_months: int=None):
        """X509CertificateProperties - a model defined in OpenAPI

        :param ekus: The ekus of this X509CertificateProperties.
        :param key_usage: The key_usage of this X509CertificateProperties.
        :param sans: The sans of this X509CertificateProperties.
        :param subject: The subject of this X509CertificateProperties.
        :param validity_months: The validity_months of this X509CertificateProperties.
        """
        self.openapi_types = {
            'ekus': List[str],
            'key_usage': List[str],
            'sans': SubjectAlternativeNames,
            'subject': str,
            'validity_months': int
        }

        self.attribute_map = {
            'ekus': 'ekus',
            'key_usage': 'key_usage',
            'sans': 'sans',
            'subject': 'subject',
            'validity_months': 'validity_months'
        }

        self._ekus = ekus
        self._key_usage = key_usage
        self._sans = sans
        self._subject = subject
        self._validity_months = validity_months

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X509CertificateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X509CertificateProperties of this X509CertificateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ekus(self):
        """Gets the ekus of this X509CertificateProperties.

        The enhanced key usage.

        :return: The ekus of this X509CertificateProperties.
        :rtype: List[str]
        """
        return self._ekus

    @ekus.setter
    def ekus(self, ekus):
        """Sets the ekus of this X509CertificateProperties.

        The enhanced key usage.

        :param ekus: The ekus of this X509CertificateProperties.
        :type ekus: List[str]
        """

        self._ekus = ekus

    @property
    def key_usage(self):
        """Gets the key_usage of this X509CertificateProperties.

        List of key usages.

        :return: The key_usage of this X509CertificateProperties.
        :rtype: List[str]
        """
        return self._key_usage

    @key_usage.setter
    def key_usage(self, key_usage):
        """Sets the key_usage of this X509CertificateProperties.

        List of key usages.

        :param key_usage: The key_usage of this X509CertificateProperties.
        :type key_usage: List[str]
        """
        allowed_values = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"]  # noqa: E501
        if not set(key_usage).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `key_usage` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(key_usage) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._key_usage = key_usage

    @property
    def sans(self):
        """Gets the sans of this X509CertificateProperties.


        :return: The sans of this X509CertificateProperties.
        :rtype: SubjectAlternativeNames
        """
        return self._sans

    @sans.setter
    def sans(self, sans):
        """Sets the sans of this X509CertificateProperties.


        :param sans: The sans of this X509CertificateProperties.
        :type sans: SubjectAlternativeNames
        """

        self._sans = sans

    @property
    def subject(self):
        """Gets the subject of this X509CertificateProperties.

        The subject name. Should be a valid X509 distinguished Name.

        :return: The subject of this X509CertificateProperties.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this X509CertificateProperties.

        The subject name. Should be a valid X509 distinguished Name.

        :param subject: The subject of this X509CertificateProperties.
        :type subject: str
        """

        self._subject = subject

    @property
    def validity_months(self):
        """Gets the validity_months of this X509CertificateProperties.

        The duration that the certificate is valid in months.

        :return: The validity_months of this X509CertificateProperties.
        :rtype: int
        """
        return self._validity_months

    @validity_months.setter
    def validity_months(self, validity_months):
        """Sets the validity_months of this X509CertificateProperties.

        The duration that the certificate is valid in months.

        :param validity_months: The validity_months of this X509CertificateProperties.
        :type validity_months: int
        """
        if validity_months is not None and validity_months < 0:
            raise ValueError("Invalid value for `validity_months`, must be a value greater than or equal to `0`")

        self._validity_months = validity_months
