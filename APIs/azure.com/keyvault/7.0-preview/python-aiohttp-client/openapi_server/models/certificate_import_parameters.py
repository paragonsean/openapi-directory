# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_attributes import CertificateAttributes
from openapi_server.models.certificate_policy import CertificatePolicy
from openapi_server import util


class CertificateImportParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: CertificateAttributes=None, policy: CertificatePolicy=None, pwd: str=None, tags: Dict[str, str]=None, value: str=None):
        """CertificateImportParameters - a model defined in OpenAPI

        :param attributes: The attributes of this CertificateImportParameters.
        :param policy: The policy of this CertificateImportParameters.
        :param pwd: The pwd of this CertificateImportParameters.
        :param tags: The tags of this CertificateImportParameters.
        :param value: The value of this CertificateImportParameters.
        """
        self.openapi_types = {
            'attributes': CertificateAttributes,
            'policy': CertificatePolicy,
            'pwd': str,
            'tags': Dict[str, str],
            'value': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'policy': 'policy',
            'pwd': 'pwd',
            'tags': 'tags',
            'value': 'value'
        }

        self._attributes = attributes
        self._policy = policy
        self._pwd = pwd
        self._tags = tags
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateImportParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateImportParameters of this CertificateImportParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CertificateImportParameters.


        :return: The attributes of this CertificateImportParameters.
        :rtype: CertificateAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CertificateImportParameters.


        :param attributes: The attributes of this CertificateImportParameters.
        :type attributes: CertificateAttributes
        """

        self._attributes = attributes

    @property
    def policy(self):
        """Gets the policy of this CertificateImportParameters.


        :return: The policy of this CertificateImportParameters.
        :rtype: CertificatePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CertificateImportParameters.


        :param policy: The policy of this CertificateImportParameters.
        :type policy: CertificatePolicy
        """

        self._policy = policy

    @property
    def pwd(self):
        """Gets the pwd of this CertificateImportParameters.

        If the private key in base64EncodedCertificate is encrypted, the password used for encryption.

        :return: The pwd of this CertificateImportParameters.
        :rtype: str
        """
        return self._pwd

    @pwd.setter
    def pwd(self, pwd):
        """Sets the pwd of this CertificateImportParameters.

        If the private key in base64EncodedCertificate is encrypted, the password used for encryption.

        :param pwd: The pwd of this CertificateImportParameters.
        :type pwd: str
        """

        self._pwd = pwd

    @property
    def tags(self):
        """Gets the tags of this CertificateImportParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this CertificateImportParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CertificateImportParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this CertificateImportParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def value(self):
        """Gets the value of this CertificateImportParameters.

        Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.

        :return: The value of this CertificateImportParameters.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CertificateImportParameters.

        Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.

        :param value: The value of this CertificateImportParameters.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
