# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_attributes import CertificateAttributes
from openapi_server import util


class CertificateMergeParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: CertificateAttributes=None, tags: Dict[str, str]=None, x5c: List[str]=None):
        """CertificateMergeParameters - a model defined in OpenAPI

        :param attributes: The attributes of this CertificateMergeParameters.
        :param tags: The tags of this CertificateMergeParameters.
        :param x5c: The x5c of this CertificateMergeParameters.
        """
        self.openapi_types = {
            'attributes': CertificateAttributes,
            'tags': Dict[str, str],
            'x5c': List[str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'tags': 'tags',
            'x5c': 'x5c'
        }

        self._attributes = attributes
        self._tags = tags
        self._x5c = x5c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateMergeParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateMergeParameters of this CertificateMergeParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CertificateMergeParameters.


        :return: The attributes of this CertificateMergeParameters.
        :rtype: CertificateAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CertificateMergeParameters.


        :param attributes: The attributes of this CertificateMergeParameters.
        :type attributes: CertificateAttributes
        """

        self._attributes = attributes

    @property
    def tags(self):
        """Gets the tags of this CertificateMergeParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this CertificateMergeParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CertificateMergeParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this CertificateMergeParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def x5c(self):
        """Gets the x5c of this CertificateMergeParameters.

        The certificate or the certificate chain to merge.

        :return: The x5c of this CertificateMergeParameters.
        :rtype: List[str]
        """
        return self._x5c

    @x5c.setter
    def x5c(self, x5c):
        """Sets the x5c of this CertificateMergeParameters.

        The certificate or the certificate chain to merge.

        :param x5c: The x5c of this CertificateMergeParameters.
        :type x5c: List[str]
        """
        if x5c is None:
            raise ValueError("Invalid value for `x5c`, must not be `None`")

        self._x5c = x5c
