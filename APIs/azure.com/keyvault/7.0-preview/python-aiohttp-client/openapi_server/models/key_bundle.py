# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_web_key import JsonWebKey
from openapi_server.models.key_attributes import KeyAttributes
from openapi_server import util


class KeyBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: KeyAttributes=None, key: JsonWebKey=None, managed: bool=None, tags: Dict[str, str]=None):
        """KeyBundle - a model defined in OpenAPI

        :param attributes: The attributes of this KeyBundle.
        :param key: The key of this KeyBundle.
        :param managed: The managed of this KeyBundle.
        :param tags: The tags of this KeyBundle.
        """
        self.openapi_types = {
            'attributes': KeyAttributes,
            'key': JsonWebKey,
            'managed': bool,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'key': 'key',
            'managed': 'managed',
            'tags': 'tags'
        }

        self._attributes = attributes
        self._key = key
        self._managed = managed
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyBundle of this KeyBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this KeyBundle.


        :return: The attributes of this KeyBundle.
        :rtype: KeyAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this KeyBundle.


        :param attributes: The attributes of this KeyBundle.
        :type attributes: KeyAttributes
        """

        self._attributes = attributes

    @property
    def key(self):
        """Gets the key of this KeyBundle.


        :return: The key of this KeyBundle.
        :rtype: JsonWebKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyBundle.


        :param key: The key of this KeyBundle.
        :type key: JsonWebKey
        """

        self._key = key

    @property
    def managed(self):
        """Gets the managed of this KeyBundle.

        True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.

        :return: The managed of this KeyBundle.
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this KeyBundle.

        True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.

        :param managed: The managed of this KeyBundle.
        :type managed: bool
        """

        self._managed = managed

    @property
    def tags(self):
        """Gets the tags of this KeyBundle.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this KeyBundle.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KeyBundle.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this KeyBundle.
        :type tags: Dict[str, str]
        """

        self._tags = tags
