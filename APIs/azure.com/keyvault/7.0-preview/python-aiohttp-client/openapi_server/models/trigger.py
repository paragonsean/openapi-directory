# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Trigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_before_expiry: int=None, lifetime_percentage: int=None):
        """Trigger - a model defined in OpenAPI

        :param days_before_expiry: The days_before_expiry of this Trigger.
        :param lifetime_percentage: The lifetime_percentage of this Trigger.
        """
        self.openapi_types = {
            'days_before_expiry': int,
            'lifetime_percentage': int
        }

        self.attribute_map = {
            'days_before_expiry': 'days_before_expiry',
            'lifetime_percentage': 'lifetime_percentage'
        }

        self._days_before_expiry = days_before_expiry
        self._lifetime_percentage = lifetime_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trigger of this Trigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_before_expiry(self):
        """Gets the days_before_expiry of this Trigger.

        Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).

        :return: The days_before_expiry of this Trigger.
        :rtype: int
        """
        return self._days_before_expiry

    @days_before_expiry.setter
    def days_before_expiry(self, days_before_expiry):
        """Sets the days_before_expiry of this Trigger.

        Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).

        :param days_before_expiry: The days_before_expiry of this Trigger.
        :type days_before_expiry: int
        """

        self._days_before_expiry = days_before_expiry

    @property
    def lifetime_percentage(self):
        """Gets the lifetime_percentage of this Trigger.

        Percentage of lifetime at which to trigger. Value should be between 1 and 99.

        :return: The lifetime_percentage of this Trigger.
        :rtype: int
        """
        return self._lifetime_percentage

    @lifetime_percentage.setter
    def lifetime_percentage(self, lifetime_percentage):
        """Sets the lifetime_percentage of this Trigger.

        Percentage of lifetime at which to trigger. Value should be between 1 and 99.

        :param lifetime_percentage: The lifetime_percentage of this Trigger.
        :type lifetime_percentage: int
        """
        if lifetime_percentage is not None and lifetime_percentage > 99:
            raise ValueError("Invalid value for `lifetime_percentage`, must be a value less than or equal to `99`")
        if lifetime_percentage is not None and lifetime_percentage < 1:
            raise ValueError("Invalid value for `lifetime_percentage`, must be a value greater than or equal to `1`")

        self._lifetime_percentage = lifetime_percentage
