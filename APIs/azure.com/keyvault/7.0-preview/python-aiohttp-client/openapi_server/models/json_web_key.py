# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonWebKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crv: str=None, d: str=None, dp: str=None, dq: str=None, e: str=None, k: str=None, key_hsm: str=None, key_ops: List[str]=None, kid: str=None, kty: str=None, n: str=None, p: str=None, q: str=None, qi: str=None, x: str=None, y: str=None):
        """JsonWebKey - a model defined in OpenAPI

        :param crv: The crv of this JsonWebKey.
        :param d: The d of this JsonWebKey.
        :param dp: The dp of this JsonWebKey.
        :param dq: The dq of this JsonWebKey.
        :param e: The e of this JsonWebKey.
        :param k: The k of this JsonWebKey.
        :param key_hsm: The key_hsm of this JsonWebKey.
        :param key_ops: The key_ops of this JsonWebKey.
        :param kid: The kid of this JsonWebKey.
        :param kty: The kty of this JsonWebKey.
        :param n: The n of this JsonWebKey.
        :param p: The p of this JsonWebKey.
        :param q: The q of this JsonWebKey.
        :param qi: The qi of this JsonWebKey.
        :param x: The x of this JsonWebKey.
        :param y: The y of this JsonWebKey.
        """
        self.openapi_types = {
            'crv': str,
            'd': str,
            'dp': str,
            'dq': str,
            'e': str,
            'k': str,
            'key_hsm': str,
            'key_ops': List[str],
            'kid': str,
            'kty': str,
            'n': str,
            'p': str,
            'q': str,
            'qi': str,
            'x': str,
            'y': str
        }

        self.attribute_map = {
            'crv': 'crv',
            'd': 'd',
            'dp': 'dp',
            'dq': 'dq',
            'e': 'e',
            'k': 'k',
            'key_hsm': 'key_hsm',
            'key_ops': 'key_ops',
            'kid': 'kid',
            'kty': 'kty',
            'n': 'n',
            'p': 'p',
            'q': 'q',
            'qi': 'qi',
            'x': 'x',
            'y': 'y'
        }

        self._crv = crv
        self._d = d
        self._dp = dp
        self._dq = dq
        self._e = e
        self._k = k
        self._key_hsm = key_hsm
        self._key_ops = key_ops
        self._kid = kid
        self._kty = kty
        self._n = n
        self._p = p
        self._q = q
        self._qi = qi
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonWebKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonWebKey of this JsonWebKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crv(self):
        """Gets the crv of this JsonWebKey.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :return: The crv of this JsonWebKey.
        :rtype: str
        """
        return self._crv

    @crv.setter
    def crv(self, crv):
        """Sets the crv of this JsonWebKey.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :param crv: The crv of this JsonWebKey.
        :type crv: str
        """
        allowed_values = ["P-256", "P-384", "P-521", "P-256K"]  # noqa: E501
        if crv not in allowed_values:
            raise ValueError(
                "Invalid value for `crv` ({0}), must be one of {1}"
                .format(crv, allowed_values)
            )

        self._crv = crv

    @property
    def d(self):
        """Gets the d of this JsonWebKey.

        RSA private exponent, or the D component of an EC private key.

        :return: The d of this JsonWebKey.
        :rtype: str
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this JsonWebKey.

        RSA private exponent, or the D component of an EC private key.

        :param d: The d of this JsonWebKey.
        :type d: str
        """

        self._d = d

    @property
    def dp(self):
        """Gets the dp of this JsonWebKey.

        RSA private key parameter.

        :return: The dp of this JsonWebKey.
        :rtype: str
        """
        return self._dp

    @dp.setter
    def dp(self, dp):
        """Sets the dp of this JsonWebKey.

        RSA private key parameter.

        :param dp: The dp of this JsonWebKey.
        :type dp: str
        """

        self._dp = dp

    @property
    def dq(self):
        """Gets the dq of this JsonWebKey.

        RSA private key parameter.

        :return: The dq of this JsonWebKey.
        :rtype: str
        """
        return self._dq

    @dq.setter
    def dq(self, dq):
        """Sets the dq of this JsonWebKey.

        RSA private key parameter.

        :param dq: The dq of this JsonWebKey.
        :type dq: str
        """

        self._dq = dq

    @property
    def e(self):
        """Gets the e of this JsonWebKey.

        RSA public exponent.

        :return: The e of this JsonWebKey.
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this JsonWebKey.

        RSA public exponent.

        :param e: The e of this JsonWebKey.
        :type e: str
        """

        self._e = e

    @property
    def k(self):
        """Gets the k of this JsonWebKey.

        Symmetric key.

        :return: The k of this JsonWebKey.
        :rtype: str
        """
        return self._k

    @k.setter
    def k(self, k):
        """Sets the k of this JsonWebKey.

        Symmetric key.

        :param k: The k of this JsonWebKey.
        :type k: str
        """

        self._k = k

    @property
    def key_hsm(self):
        """Gets the key_hsm of this JsonWebKey.

        HSM Token, used with 'Bring Your Own Key'.

        :return: The key_hsm of this JsonWebKey.
        :rtype: str
        """
        return self._key_hsm

    @key_hsm.setter
    def key_hsm(self, key_hsm):
        """Sets the key_hsm of this JsonWebKey.

        HSM Token, used with 'Bring Your Own Key'.

        :param key_hsm: The key_hsm of this JsonWebKey.
        :type key_hsm: str
        """

        self._key_hsm = key_hsm

    @property
    def key_ops(self):
        """Gets the key_ops of this JsonWebKey.


        :return: The key_ops of this JsonWebKey.
        :rtype: List[str]
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """Sets the key_ops of this JsonWebKey.


        :param key_ops: The key_ops of this JsonWebKey.
        :type key_ops: List[str]
        """

        self._key_ops = key_ops

    @property
    def kid(self):
        """Gets the kid of this JsonWebKey.

        Key identifier.

        :return: The kid of this JsonWebKey.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this JsonWebKey.

        Key identifier.

        :param kid: The kid of this JsonWebKey.
        :type kid: str
        """

        self._kid = kid

    @property
    def kty(self):
        """Gets the kty of this JsonWebKey.

        JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.

        :return: The kty of this JsonWebKey.
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this JsonWebKey.

        JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.

        :param kty: The kty of this JsonWebKey.
        :type kty: str
        """
        allowed_values = ["EC", "EC-HSM", "RSA", "RSA-HSM", "oct"]  # noqa: E501
        if kty not in allowed_values:
            raise ValueError(
                "Invalid value for `kty` ({0}), must be one of {1}"
                .format(kty, allowed_values)
            )

        self._kty = kty

    @property
    def n(self):
        """Gets the n of this JsonWebKey.

        RSA modulus.

        :return: The n of this JsonWebKey.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this JsonWebKey.

        RSA modulus.

        :param n: The n of this JsonWebKey.
        :type n: str
        """

        self._n = n

    @property
    def p(self):
        """Gets the p of this JsonWebKey.

        RSA secret prime.

        :return: The p of this JsonWebKey.
        :rtype: str
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this JsonWebKey.

        RSA secret prime.

        :param p: The p of this JsonWebKey.
        :type p: str
        """

        self._p = p

    @property
    def q(self):
        """Gets the q of this JsonWebKey.

        RSA secret prime, with p < q.

        :return: The q of this JsonWebKey.
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this JsonWebKey.

        RSA secret prime, with p < q.

        :param q: The q of this JsonWebKey.
        :type q: str
        """

        self._q = q

    @property
    def qi(self):
        """Gets the qi of this JsonWebKey.

        RSA private key parameter.

        :return: The qi of this JsonWebKey.
        :rtype: str
        """
        return self._qi

    @qi.setter
    def qi(self, qi):
        """Sets the qi of this JsonWebKey.

        RSA private key parameter.

        :param qi: The qi of this JsonWebKey.
        :type qi: str
        """

        self._qi = qi

    @property
    def x(self):
        """Gets the x of this JsonWebKey.

        X component of an EC public key.

        :return: The x of this JsonWebKey.
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this JsonWebKey.

        X component of an EC public key.

        :param x: The x of this JsonWebKey.
        :type x: str
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this JsonWebKey.

        Y component of an EC public key.

        :return: The y of this JsonWebKey.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this JsonWebKey.

        Y component of an EC public key.

        :param y: The y of this JsonWebKey.
        :type y: str
        """

        self._y = y
