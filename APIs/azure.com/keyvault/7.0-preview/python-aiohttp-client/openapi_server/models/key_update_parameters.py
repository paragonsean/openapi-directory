# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_attributes import KeyAttributes
from openapi_server import util


class KeyUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: KeyAttributes=None, key_ops: List[str]=None, tags: Dict[str, str]=None):
        """KeyUpdateParameters - a model defined in OpenAPI

        :param attributes: The attributes of this KeyUpdateParameters.
        :param key_ops: The key_ops of this KeyUpdateParameters.
        :param tags: The tags of this KeyUpdateParameters.
        """
        self.openapi_types = {
            'attributes': KeyAttributes,
            'key_ops': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'key_ops': 'key_ops',
            'tags': 'tags'
        }

        self._attributes = attributes
        self._key_ops = key_ops
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyUpdateParameters of this KeyUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this KeyUpdateParameters.


        :return: The attributes of this KeyUpdateParameters.
        :rtype: KeyAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this KeyUpdateParameters.


        :param attributes: The attributes of this KeyUpdateParameters.
        :type attributes: KeyAttributes
        """

        self._attributes = attributes

    @property
    def key_ops(self):
        """Gets the key_ops of this KeyUpdateParameters.

        Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.

        :return: The key_ops of this KeyUpdateParameters.
        :rtype: List[str]
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """Sets the key_ops of this KeyUpdateParameters.

        Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.

        :param key_ops: The key_ops of this KeyUpdateParameters.
        :type key_ops: List[str]
        """
        allowed_values = ["encrypt", "decrypt", "sign", "verify", "wrapKey", "unwrapKey"]  # noqa: E501
        if not set(key_ops).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `key_ops` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(key_ops) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._key_ops = key_ops

    @property
    def tags(self):
        """Gets the tags of this KeyUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this KeyUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KeyUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this KeyUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
