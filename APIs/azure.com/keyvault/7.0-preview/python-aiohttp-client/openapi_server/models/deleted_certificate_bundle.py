# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_attributes import CertificateAttributes
from openapi_server.models.certificate_policy import CertificatePolicy
import re
from openapi_server import util


class DeletedCertificateBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_date: int=None, recovery_id: str=None, scheduled_purge_date: int=None, attributes: CertificateAttributes=None, cer: str=None, content_type: str=None, id: str=None, kid: str=None, policy: CertificatePolicy=None, sid: str=None, tags: Dict[str, str]=None, x5t: str=None):
        """DeletedCertificateBundle - a model defined in OpenAPI

        :param deleted_date: The deleted_date of this DeletedCertificateBundle.
        :param recovery_id: The recovery_id of this DeletedCertificateBundle.
        :param scheduled_purge_date: The scheduled_purge_date of this DeletedCertificateBundle.
        :param attributes: The attributes of this DeletedCertificateBundle.
        :param cer: The cer of this DeletedCertificateBundle.
        :param content_type: The content_type of this DeletedCertificateBundle.
        :param id: The id of this DeletedCertificateBundle.
        :param kid: The kid of this DeletedCertificateBundle.
        :param policy: The policy of this DeletedCertificateBundle.
        :param sid: The sid of this DeletedCertificateBundle.
        :param tags: The tags of this DeletedCertificateBundle.
        :param x5t: The x5t of this DeletedCertificateBundle.
        """
        self.openapi_types = {
            'deleted_date': int,
            'recovery_id': str,
            'scheduled_purge_date': int,
            'attributes': CertificateAttributes,
            'cer': str,
            'content_type': str,
            'id': str,
            'kid': str,
            'policy': CertificatePolicy,
            'sid': str,
            'tags': Dict[str, str],
            'x5t': str
        }

        self.attribute_map = {
            'deleted_date': 'deletedDate',
            'recovery_id': 'recoveryId',
            'scheduled_purge_date': 'scheduledPurgeDate',
            'attributes': 'attributes',
            'cer': 'cer',
            'content_type': 'contentType',
            'id': 'id',
            'kid': 'kid',
            'policy': 'policy',
            'sid': 'sid',
            'tags': 'tags',
            'x5t': 'x5t'
        }

        self._deleted_date = deleted_date
        self._recovery_id = recovery_id
        self._scheduled_purge_date = scheduled_purge_date
        self._attributes = attributes
        self._cer = cer
        self._content_type = content_type
        self._id = id
        self._kid = kid
        self._policy = policy
        self._sid = sid
        self._tags = tags
        self._x5t = x5t

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletedCertificateBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletedCertificateBundle of this DeletedCertificateBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_date(self):
        """Gets the deleted_date of this DeletedCertificateBundle.

        The time when the certificate was deleted, in UTC

        :return: The deleted_date of this DeletedCertificateBundle.
        :rtype: int
        """
        return self._deleted_date

    @deleted_date.setter
    def deleted_date(self, deleted_date):
        """Sets the deleted_date of this DeletedCertificateBundle.

        The time when the certificate was deleted, in UTC

        :param deleted_date: The deleted_date of this DeletedCertificateBundle.
        :type deleted_date: int
        """

        self._deleted_date = deleted_date

    @property
    def recovery_id(self):
        """Gets the recovery_id of this DeletedCertificateBundle.

        The url of the recovery object, used to identify and recover the deleted certificate.

        :return: The recovery_id of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._recovery_id

    @recovery_id.setter
    def recovery_id(self, recovery_id):
        """Sets the recovery_id of this DeletedCertificateBundle.

        The url of the recovery object, used to identify and recover the deleted certificate.

        :param recovery_id: The recovery_id of this DeletedCertificateBundle.
        :type recovery_id: str
        """

        self._recovery_id = recovery_id

    @property
    def scheduled_purge_date(self):
        """Gets the scheduled_purge_date of this DeletedCertificateBundle.

        The time when the certificate is scheduled to be purged, in UTC

        :return: The scheduled_purge_date of this DeletedCertificateBundle.
        :rtype: int
        """
        return self._scheduled_purge_date

    @scheduled_purge_date.setter
    def scheduled_purge_date(self, scheduled_purge_date):
        """Sets the scheduled_purge_date of this DeletedCertificateBundle.

        The time when the certificate is scheduled to be purged, in UTC

        :param scheduled_purge_date: The scheduled_purge_date of this DeletedCertificateBundle.
        :type scheduled_purge_date: int
        """

        self._scheduled_purge_date = scheduled_purge_date

    @property
    def attributes(self):
        """Gets the attributes of this DeletedCertificateBundle.


        :return: The attributes of this DeletedCertificateBundle.
        :rtype: CertificateAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DeletedCertificateBundle.


        :param attributes: The attributes of this DeletedCertificateBundle.
        :type attributes: CertificateAttributes
        """

        self._attributes = attributes

    @property
    def cer(self):
        """Gets the cer of this DeletedCertificateBundle.

        CER contents of x509 certificate.

        :return: The cer of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._cer

    @cer.setter
    def cer(self, cer):
        """Sets the cer of this DeletedCertificateBundle.

        CER contents of x509 certificate.

        :param cer: The cer of this DeletedCertificateBundle.
        :type cer: str
        """
        if cer is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', cer):
            raise ValueError("Invalid value for `cer`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._cer = cer

    @property
    def content_type(self):
        """Gets the content_type of this DeletedCertificateBundle.

        The content type of the secret.

        :return: The content_type of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DeletedCertificateBundle.

        The content type of the secret.

        :param content_type: The content_type of this DeletedCertificateBundle.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def id(self):
        """Gets the id of this DeletedCertificateBundle.

        The certificate id.

        :return: The id of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeletedCertificateBundle.

        The certificate id.

        :param id: The id of this DeletedCertificateBundle.
        :type id: str
        """

        self._id = id

    @property
    def kid(self):
        """Gets the kid of this DeletedCertificateBundle.

        The key id.

        :return: The kid of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this DeletedCertificateBundle.

        The key id.

        :param kid: The kid of this DeletedCertificateBundle.
        :type kid: str
        """

        self._kid = kid

    @property
    def policy(self):
        """Gets the policy of this DeletedCertificateBundle.


        :return: The policy of this DeletedCertificateBundle.
        :rtype: CertificatePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this DeletedCertificateBundle.


        :param policy: The policy of this DeletedCertificateBundle.
        :type policy: CertificatePolicy
        """

        self._policy = policy

    @property
    def sid(self):
        """Gets the sid of this DeletedCertificateBundle.

        The secret id.

        :return: The sid of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this DeletedCertificateBundle.

        The secret id.

        :param sid: The sid of this DeletedCertificateBundle.
        :type sid: str
        """

        self._sid = sid

    @property
    def tags(self):
        """Gets the tags of this DeletedCertificateBundle.

        Application specific metadata in the form of key-value pairs

        :return: The tags of this DeletedCertificateBundle.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeletedCertificateBundle.

        Application specific metadata in the form of key-value pairs

        :param tags: The tags of this DeletedCertificateBundle.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def x5t(self):
        """Gets the x5t of this DeletedCertificateBundle.

        Thumbprint of the certificate.

        :return: The x5t of this DeletedCertificateBundle.
        :rtype: str
        """
        return self._x5t

    @x5t.setter
    def x5t(self, x5t):
        """Sets the x5t of this DeletedCertificateBundle.

        Thumbprint of the certificate.

        :param x5t: The x5t of this DeletedCertificateBundle.
        :type x5t: str
        """

        self._x5t = x5t
