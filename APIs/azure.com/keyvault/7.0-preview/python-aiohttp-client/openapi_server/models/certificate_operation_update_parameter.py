# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateOperationUpdateParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_requested: bool=None):
        """CertificateOperationUpdateParameter - a model defined in OpenAPI

        :param cancellation_requested: The cancellation_requested of this CertificateOperationUpdateParameter.
        """
        self.openapi_types = {
            'cancellation_requested': bool
        }

        self.attribute_map = {
            'cancellation_requested': 'cancellation_requested'
        }

        self._cancellation_requested = cancellation_requested

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateOperationUpdateParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateOperationUpdateParameter of this CertificateOperationUpdateParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_requested(self):
        """Gets the cancellation_requested of this CertificateOperationUpdateParameter.

        Indicates if cancellation was requested on the certificate operation.

        :return: The cancellation_requested of this CertificateOperationUpdateParameter.
        :rtype: bool
        """
        return self._cancellation_requested

    @cancellation_requested.setter
    def cancellation_requested(self, cancellation_requested):
        """Sets the cancellation_requested of this CertificateOperationUpdateParameter.

        Indicates if cancellation was requested on the certificate operation.

        :param cancellation_requested: The cancellation_requested of this CertificateOperationUpdateParameter.
        :type cancellation_requested: bool
        """
        if cancellation_requested is None:
            raise ValueError("Invalid value for `cancellation_requested`, must not be `None`")

        self._cancellation_requested = cancellation_requested
