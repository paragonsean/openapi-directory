# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasDefinitionAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, enabled: bool=None, recovery_level: str=None, updated: int=None):
        """SasDefinitionAttributes - a model defined in OpenAPI

        :param created: The created of this SasDefinitionAttributes.
        :param enabled: The enabled of this SasDefinitionAttributes.
        :param recovery_level: The recovery_level of this SasDefinitionAttributes.
        :param updated: The updated of this SasDefinitionAttributes.
        """
        self.openapi_types = {
            'created': int,
            'enabled': bool,
            'recovery_level': str,
            'updated': int
        }

        self.attribute_map = {
            'created': 'created',
            'enabled': 'enabled',
            'recovery_level': 'recoveryLevel',
            'updated': 'updated'
        }

        self._created = created
        self._enabled = enabled
        self._recovery_level = recovery_level
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasDefinitionAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasDefinitionAttributes of this SasDefinitionAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this SasDefinitionAttributes.

        Creation time in UTC.

        :return: The created of this SasDefinitionAttributes.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SasDefinitionAttributes.

        Creation time in UTC.

        :param created: The created of this SasDefinitionAttributes.
        :type created: int
        """

        self._created = created

    @property
    def enabled(self):
        """Gets the enabled of this SasDefinitionAttributes.

        the enabled state of the object.

        :return: The enabled of this SasDefinitionAttributes.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SasDefinitionAttributes.

        the enabled state of the object.

        :param enabled: The enabled of this SasDefinitionAttributes.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def recovery_level(self):
        """Gets the recovery_level of this SasDefinitionAttributes.

        Reflects the deletion recovery level currently in effect for SAS definitions in the current vault. If it contains 'Purgeable' the SAS definition can be permanently deleted by a privileged user; otherwise, only the system can purge the SAS definition, at the end of the retention interval.

        :return: The recovery_level of this SasDefinitionAttributes.
        :rtype: str
        """
        return self._recovery_level

    @recovery_level.setter
    def recovery_level(self, recovery_level):
        """Sets the recovery_level of this SasDefinitionAttributes.

        Reflects the deletion recovery level currently in effect for SAS definitions in the current vault. If it contains 'Purgeable' the SAS definition can be permanently deleted by a privileged user; otherwise, only the system can purge the SAS definition, at the end of the retention interval.

        :param recovery_level: The recovery_level of this SasDefinitionAttributes.
        :type recovery_level: str
        """
        allowed_values = ["Purgeable", "Recoverable+Purgeable", "Recoverable", "Recoverable+ProtectedSubscription"]  # noqa: E501
        if recovery_level not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_level` ({0}), must be one of {1}"
                .format(recovery_level, allowed_values)
            )

        self._recovery_level = recovery_level

    @property
    def updated(self):
        """Gets the updated of this SasDefinitionAttributes.

        Last updated time in UTC.

        :return: The updated of this SasDefinitionAttributes.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SasDefinitionAttributes.

        Last updated time in UTC.

        :param updated: The updated of this SasDefinitionAttributes.
        :type updated: int
        """

        self._updated = updated
