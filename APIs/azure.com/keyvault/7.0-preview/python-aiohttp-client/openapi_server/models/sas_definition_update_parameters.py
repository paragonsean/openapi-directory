# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_definition_attributes import SasDefinitionAttributes
from openapi_server import util


class SasDefinitionUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: SasDefinitionAttributes=None, sas_type: str=None, tags: Dict[str, str]=None, template_uri: str=None, validity_period: str=None):
        """SasDefinitionUpdateParameters - a model defined in OpenAPI

        :param attributes: The attributes of this SasDefinitionUpdateParameters.
        :param sas_type: The sas_type of this SasDefinitionUpdateParameters.
        :param tags: The tags of this SasDefinitionUpdateParameters.
        :param template_uri: The template_uri of this SasDefinitionUpdateParameters.
        :param validity_period: The validity_period of this SasDefinitionUpdateParameters.
        """
        self.openapi_types = {
            'attributes': SasDefinitionAttributes,
            'sas_type': str,
            'tags': Dict[str, str],
            'template_uri': str,
            'validity_period': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'sas_type': 'sasType',
            'tags': 'tags',
            'template_uri': 'templateUri',
            'validity_period': 'validityPeriod'
        }

        self._attributes = attributes
        self._sas_type = sas_type
        self._tags = tags
        self._template_uri = template_uri
        self._validity_period = validity_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasDefinitionUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasDefinitionUpdateParameters of this SasDefinitionUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this SasDefinitionUpdateParameters.


        :return: The attributes of this SasDefinitionUpdateParameters.
        :rtype: SasDefinitionAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SasDefinitionUpdateParameters.


        :param attributes: The attributes of this SasDefinitionUpdateParameters.
        :type attributes: SasDefinitionAttributes
        """

        self._attributes = attributes

    @property
    def sas_type(self):
        """Gets the sas_type of this SasDefinitionUpdateParameters.

        The type of SAS token the SAS definition will create.

        :return: The sas_type of this SasDefinitionUpdateParameters.
        :rtype: str
        """
        return self._sas_type

    @sas_type.setter
    def sas_type(self, sas_type):
        """Sets the sas_type of this SasDefinitionUpdateParameters.

        The type of SAS token the SAS definition will create.

        :param sas_type: The sas_type of this SasDefinitionUpdateParameters.
        :type sas_type: str
        """
        allowed_values = ["account", "service"]  # noqa: E501
        if sas_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sas_type` ({0}), must be one of {1}"
                .format(sas_type, allowed_values)
            )

        self._sas_type = sas_type

    @property
    def tags(self):
        """Gets the tags of this SasDefinitionUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this SasDefinitionUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SasDefinitionUpdateParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this SasDefinitionUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def template_uri(self):
        """Gets the template_uri of this SasDefinitionUpdateParameters.

        The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.

        :return: The template_uri of this SasDefinitionUpdateParameters.
        :rtype: str
        """
        return self._template_uri

    @template_uri.setter
    def template_uri(self, template_uri):
        """Sets the template_uri of this SasDefinitionUpdateParameters.

        The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template.

        :param template_uri: The template_uri of this SasDefinitionUpdateParameters.
        :type template_uri: str
        """

        self._template_uri = template_uri

    @property
    def validity_period(self):
        """Gets the validity_period of this SasDefinitionUpdateParameters.

        The validity period of SAS tokens created according to the SAS definition.

        :return: The validity_period of this SasDefinitionUpdateParameters.
        :rtype: str
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SasDefinitionUpdateParameters.

        The validity period of SAS tokens created according to the SAS definition.

        :param validity_period: The validity_period of this SasDefinitionUpdateParameters.
        :type validity_period: str
        """

        self._validity_period = validity_period
