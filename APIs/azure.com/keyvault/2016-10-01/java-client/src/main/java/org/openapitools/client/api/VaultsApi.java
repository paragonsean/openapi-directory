/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.DeletedVault;
import org.openapitools.client.model.DeletedVaultListResult;
import org.openapitools.client.model.ResourceListResult;
import org.openapitools.client.model.Vault;
import org.openapitools.client.model.VaultAccessPolicyParameters;
import org.openapitools.client.model.VaultCheckNameAvailabilityParameters;
import org.openapitools.client.model.VaultCreateOrUpdateParameters;
import org.openapitools.client.model.VaultListResult;
import org.openapitools.client.model.VaultPatchParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VaultsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VaultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VaultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vaultsCheckNameAvailability
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vaultName The name of the vault. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the vault name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCheckNameAvailabilityCall(String apiVersion, String subscriptionId, VaultCheckNameAvailabilityParameters vaultName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vaultName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsCheckNameAvailabilityValidateBeforeCall(String apiVersion, String subscriptionId, VaultCheckNameAvailabilityParameters vaultName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsCheckNameAvailability(Async)");
        }

        return vaultsCheckNameAvailabilityCall(apiVersion, subscriptionId, vaultName, _callback);

    }

    /**
     * 
     * Checks that the vault name is valid and is not already in use.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vaultName The name of the vault. (required)
     * @return CheckNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the vault name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResult vaultsCheckNameAvailability(String apiVersion, String subscriptionId, VaultCheckNameAvailabilityParameters vaultName) throws ApiException {
        ApiResponse<CheckNameAvailabilityResult> localVarResp = vaultsCheckNameAvailabilityWithHttpInfo(apiVersion, subscriptionId, vaultName);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks that the vault name is valid and is not already in use.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vaultName The name of the vault. (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the vault name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResult> vaultsCheckNameAvailabilityWithHttpInfo(String apiVersion, String subscriptionId, VaultCheckNameAvailabilityParameters vaultName) throws ApiException {
        okhttp3.Call localVarCall = vaultsCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, vaultName, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks that the vault name is valid and is not already in use.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vaultName The name of the vault. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the vault name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCheckNameAvailabilityAsync(String apiVersion, String subscriptionId, VaultCheckNameAvailabilityParameters vaultName, final ApiCallback<CheckNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, vaultName, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsCreateOrUpdate
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to create or update the vault (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created or updated vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCreateOrUpdateCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling vaultsCreateOrUpdate(Async)");
        }

        return vaultsCreateOrUpdateCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create or update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to create or update the vault (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created or updated vault </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsCreateOrUpdate(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsCreateOrUpdateWithHttpInfo(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to create or update the vault (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created or updated vault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsCreateOrUpdateWithHttpInfo(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = vaultsCreateOrUpdateValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to create or update the vault (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created or updated vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCreateOrUpdateAsync(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultCreateOrUpdateParameters parameters, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsCreateOrUpdateValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsDelete
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsDeleteCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsDeleteValidateBeforeCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsDelete(Async)");
        }

        return vaultsDeleteCall(resourceGroupName, vaultName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void vaultsDelete(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId) throws ApiException {
        vaultsDeleteWithHttpInfo(resourceGroupName, vaultName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vaultsDeleteWithHttpInfo(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = vaultsDeleteValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsDeleteAsync(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsDeleteValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsGet
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsGetValidateBeforeCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsGet(Async)");
        }

        return vaultsGetCall(resourceGroupName, vaultName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved vault </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsGet(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsGetWithHttpInfo(resourceGroupName, vaultName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved vault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsGetWithHttpInfo(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = vaultsGetValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName The name of the vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetAsync(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsGetValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsGetDeleted
     * @param vaultName The name of the vault. (required)
     * @param location The location of the deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about the deleted vault. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetDeletedCall(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsGetDeletedValidateBeforeCall(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsGetDeleted(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling vaultsGetDeleted(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsGetDeleted(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsGetDeleted(Async)");
        }

        return vaultsGetDeletedCall(vaultName, location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the deleted Azure key vault.
     * @param vaultName The name of the vault. (required)
     * @param location The location of the deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DeletedVault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about the deleted vault. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedVault vaultsGetDeleted(String vaultName, String location, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DeletedVault> localVarResp = vaultsGetDeletedWithHttpInfo(vaultName, location, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the deleted Azure key vault.
     * @param vaultName The name of the vault. (required)
     * @param location The location of the deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DeletedVault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about the deleted vault. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedVault> vaultsGetDeletedWithHttpInfo(String vaultName, String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = vaultsGetDeletedValidateBeforeCall(vaultName, location, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DeletedVault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the deleted Azure key vault.
     * @param vaultName The name of the vault. (required)
     * @param location The location of the deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about the deleted vault. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetDeletedAsync(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback<DeletedVault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsGetDeletedValidateBeforeCall(vaultName, location, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DeletedVault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsList
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Azure Resource Manager Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListCall(String $filter, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resources"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListValidateBeforeCall(String $filter, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling vaultsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsList(Async)");
        }

        return vaultsListCall($filter, apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription.
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Azure Resource Manager Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return ResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListResult vaultsList(String $filter, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<ResourceListResult> localVarResp = vaultsListWithHttpInfo($filter, apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription.
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Azure Resource Manager Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return ApiResponse&lt;ResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListResult> vaultsListWithHttpInfo(String $filter, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = vaultsListValidateBeforeCall($filter, apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<ResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List operation gets information about the vaults associated with the subscription.
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Azure Resource Manager Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListAsync(String $filter, String apiVersion, String subscriptionId, Integer $top, final ApiCallback<ResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListValidateBeforeCall($filter, apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<ResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsListByResourceGroup
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsListByResourceGroup(Async)");
        }

        return vaultsListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription and within the specified resource group.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return VaultListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public VaultListResult vaultsListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<VaultListResult> localVarResp = vaultsListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription and within the specified resource group.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return ApiResponse&lt;VaultListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VaultListResult> vaultsListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = vaultsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<VaultListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List operation gets information about the vaults associated with the subscription and within the specified resource group.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback<VaultListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<VaultListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsListBySubscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListBySubscriptionCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsListBySubscription(Async)");
        }

        return vaultsListBySubscriptionCall(apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return VaultListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified subscription. </td><td>  -  </td></tr>
     </table>
     */
    public VaultListResult vaultsListBySubscription(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<VaultListResult> localVarResp = vaultsListBySubscriptionWithHttpInfo(apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * The List operation gets information about the vaults associated with the subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @return ApiResponse&lt;VaultListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VaultListResult> vaultsListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = vaultsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<VaultListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The List operation gets information about the vaults associated with the subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top Maximum number of results to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get information about all key vaults in the specified subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListBySubscriptionAsync(String apiVersion, String subscriptionId, Integer $top, final ApiCallback<VaultListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<VaultListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsListDeleted
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about all deleted key vaults in a subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListDeletedCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListDeletedValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsListDeleted(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsListDeleted(Async)");
        }

        return vaultsListDeletedCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets information about the deleted vaults in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DeletedVaultListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about all deleted key vaults in a subscription. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedVaultListResult vaultsListDeleted(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DeletedVaultListResult> localVarResp = vaultsListDeletedWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the deleted vaults in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DeletedVaultListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about all deleted key vaults in a subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedVaultListResult> vaultsListDeletedWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = vaultsListDeletedValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DeletedVaultListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the deleted vaults in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved information about all deleted key vaults in a subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListDeletedAsync(String apiVersion, String subscriptionId, final ApiCallback<DeletedVaultListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListDeletedValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DeletedVaultListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsPurgeDeleted
     * @param vaultName The name of the soft-deleted vault. (required)
     * @param location The location of the soft-deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The vault is purged. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vault is being purged. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsPurgeDeletedCall(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsPurgeDeletedValidateBeforeCall(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsPurgeDeleted(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling vaultsPurgeDeleted(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsPurgeDeleted(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsPurgeDeleted(Async)");
        }

        return vaultsPurgeDeletedCall(vaultName, location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     * @param vaultName The name of the soft-deleted vault. (required)
     * @param location The location of the soft-deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The vault is purged. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vault is being purged. </td><td>  -  </td></tr>
     </table>
     */
    public void vaultsPurgeDeleted(String vaultName, String location, String apiVersion, String subscriptionId) throws ApiException {
        vaultsPurgeDeletedWithHttpInfo(vaultName, location, apiVersion, subscriptionId);
    }

    /**
     * 
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     * @param vaultName The name of the soft-deleted vault. (required)
     * @param location The location of the soft-deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The vault is purged. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vault is being purged. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vaultsPurgeDeletedWithHttpInfo(String vaultName, String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = vaultsPurgeDeletedValidateBeforeCall(vaultName, location, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     * @param vaultName The name of the soft-deleted vault. (required)
     * @param location The location of the soft-deleted vault. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The vault is purged. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Vault is being purged. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsPurgeDeletedAsync(String vaultName, String location, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsPurgeDeletedValidateBeforeCall(vaultName, location, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsUpdate
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to patch the vault (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patched vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Patched vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultPatchParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsUpdateValidateBeforeCall(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultPatchParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling vaultsUpdate(Async)");
        }

        return vaultsUpdateCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to patch the vault (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patched vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Patched vault </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsUpdate(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultPatchParameters parameters) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsUpdateWithHttpInfo(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to patch the vault (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patched vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Patched vault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsUpdateWithHttpInfo(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultPatchParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = vaultsUpdateValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to patch the vault (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patched vault </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Patched vault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateAsync(String resourceGroupName, String vaultName, String apiVersion, String subscriptionId, VaultPatchParameters parameters, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsUpdateValidateBeforeCall(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsUpdateAccessPolicy
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param operationKind Name of the operation (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Access policy to merge into the vault (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access policies </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The updated access policies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateAccessPolicyCall(String resourceGroupName, String vaultName, String operationKind, String apiVersion, String subscriptionId, VaultAccessPolicyParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "operationKind" + "}", localVarApiClient.escapeString(operationKind.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsUpdateAccessPolicyValidateBeforeCall(String resourceGroupName, String vaultName, String operationKind, String apiVersion, String subscriptionId, VaultAccessPolicyParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsUpdateAccessPolicy(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsUpdateAccessPolicy(Async)");
        }

        // verify the required parameter 'operationKind' is set
        if (operationKind == null) {
            throw new ApiException("Missing the required parameter 'operationKind' when calling vaultsUpdateAccessPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsUpdateAccessPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsUpdateAccessPolicy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling vaultsUpdateAccessPolicy(Async)");
        }

        return vaultsUpdateAccessPolicyCall(resourceGroupName, vaultName, operationKind, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Update access policies in a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param operationKind Name of the operation (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Access policy to merge into the vault (required)
     * @return VaultAccessPolicyParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access policies </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The updated access policies </td><td>  -  </td></tr>
     </table>
     */
    public VaultAccessPolicyParameters vaultsUpdateAccessPolicy(String resourceGroupName, String vaultName, String operationKind, String apiVersion, String subscriptionId, VaultAccessPolicyParameters parameters) throws ApiException {
        ApiResponse<VaultAccessPolicyParameters> localVarResp = vaultsUpdateAccessPolicyWithHttpInfo(resourceGroupName, vaultName, operationKind, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update access policies in a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param operationKind Name of the operation (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Access policy to merge into the vault (required)
     * @return ApiResponse&lt;VaultAccessPolicyParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access policies </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The updated access policies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VaultAccessPolicyParameters> vaultsUpdateAccessPolicyWithHttpInfo(String resourceGroupName, String vaultName, String operationKind, String apiVersion, String subscriptionId, VaultAccessPolicyParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = vaultsUpdateAccessPolicyValidateBeforeCall(resourceGroupName, vaultName, operationKind, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<VaultAccessPolicyParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update access policies in a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs. (required)
     * @param vaultName Name of the vault (required)
     * @param operationKind Name of the operation (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Access policy to merge into the vault (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access policies </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The updated access policies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateAccessPolicyAsync(String resourceGroupName, String vaultName, String operationKind, String apiVersion, String subscriptionId, VaultAccessPolicyParameters parameters, final ApiCallback<VaultAccessPolicyParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsUpdateAccessPolicyValidateBeforeCall(resourceGroupName, vaultName, operationKind, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<VaultAccessPolicyParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
