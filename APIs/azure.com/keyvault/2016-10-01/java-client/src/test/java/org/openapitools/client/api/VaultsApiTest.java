/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.DeletedVault;
import org.openapitools.client.model.DeletedVaultListResult;
import org.openapitools.client.model.ResourceListResult;
import org.openapitools.client.model.Vault;
import org.openapitools.client.model.VaultAccessPolicyParameters;
import org.openapitools.client.model.VaultCheckNameAvailabilityParameters;
import org.openapitools.client.model.VaultCreateOrUpdateParameters;
import org.openapitools.client.model.VaultListResult;
import org.openapitools.client.model.VaultPatchParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VaultsApi
 */
@Disabled
public class VaultsApiTest {

    private final VaultsApi api = new VaultsApi();

    /**
     * Checks that the vault name is valid and is not already in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        VaultCheckNameAvailabilityParameters vaultName = null;
        CheckNameAvailabilityResult response = api.vaultsCheckNameAvailability(apiVersion, subscriptionId, vaultName);
        // TODO: test validations
    }

    /**
     * Create or update a key vault in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String vaultName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VaultCreateOrUpdateParameters parameters = null;
        Vault response = api.vaultsCreateOrUpdate(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified Azure key vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String vaultName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.vaultsDelete(resourceGroupName, vaultName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified Azure key vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsGetTest() throws ApiException {
        String resourceGroupName = null;
        String vaultName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Vault response = api.vaultsGet(resourceGroupName, vaultName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the deleted Azure key vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsGetDeletedTest() throws ApiException {
        String vaultName = null;
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        DeletedVault response = api.vaultsGetDeleted(vaultName, location, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The List operation gets information about the vaults associated with the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsListTest() throws ApiException {
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        ResourceListResult response = api.vaultsList($filter, apiVersion, subscriptionId, $top);
        // TODO: test validations
    }

    /**
     * The List operation gets information about the vaults associated with the subscription and within the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        VaultListResult response = api.vaultsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, $top);
        // TODO: test validations
    }

    /**
     * The List operation gets information about the vaults associated with the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        VaultListResult response = api.vaultsListBySubscription(apiVersion, subscriptionId, $top);
        // TODO: test validations
    }

    /**
     * Gets information about the deleted vaults in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsListDeletedTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        DeletedVaultListResult response = api.vaultsListDeleted(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsPurgeDeletedTest() throws ApiException {
        String vaultName = null;
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.vaultsPurgeDeleted(vaultName, location, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Update a key vault in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String vaultName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VaultPatchParameters parameters = null;
        Vault response = api.vaultsUpdate(resourceGroupName, vaultName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Update access policies in a key vault in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultsUpdateAccessPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String vaultName = null;
        String operationKind = null;
        String apiVersion = null;
        String subscriptionId = null;
        VaultAccessPolicyParameters parameters = null;
        VaultAccessPolicyParameters response = api.vaultsUpdateAccessPolicy(resourceGroupName, vaultName, operationKind, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
