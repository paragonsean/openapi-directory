/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissions::OAIPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissions::OAIPermissions() {
    this->initializeModel();
}

OAIPermissions::~OAIPermissions() {}

void OAIPermissions::initializeModel() {

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;
}

void OAIPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissions::fromJsonObject(QJsonObject json) {

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("storage")]);
    m_storage_isSet = !json[QString("storage")].isNull() && m_storage_isValid;
}

QString OAIPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_certificates.size() > 0) {
        obj.insert(QString("certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_keys.size() > 0) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_secrets.size() > 0) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    if (m_storage.size() > 0) {
        obj.insert(QString("storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    return obj;
}

QList<QString> OAIPermissions::getCertificates() const {
    return m_certificates;
}
void OAIPermissions::setCertificates(const QList<QString> &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAIPermissions::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAIPermissions::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QList<QString> OAIPermissions::getKeys() const {
    return m_keys;
}
void OAIPermissions::setKeys(const QList<QString> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIPermissions::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIPermissions::is_keys_Valid() const{
    return m_keys_isValid;
}

QList<QString> OAIPermissions::getSecrets() const {
    return m_secrets;
}
void OAIPermissions::setSecrets(const QList<QString> &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAIPermissions::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAIPermissions::is_secrets_Valid() const{
    return m_secrets_isValid;
}

QList<QString> OAIPermissions::getStorage() const {
    return m_storage;
}
void OAIPermissions::setStorage(const QList<QString> &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIPermissions::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIPermissions::is_storage_Valid() const{
    return m_storage_isValid;
}

bool OAIPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
