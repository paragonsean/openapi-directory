/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultPatchProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultPatchProperties::OAIVaultPatchProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultPatchProperties::OAIVaultPatchProperties() {
    this->initializeModel();
}

OAIVaultPatchProperties::~OAIVaultPatchProperties() {}

void OAIVaultPatchProperties::initializeModel() {

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;

    m_create_mode_isSet = false;
    m_create_mode_isValid = false;

    m_enable_purge_protection_isSet = false;
    m_enable_purge_protection_isValid = false;

    m_enable_soft_delete_isSet = false;
    m_enable_soft_delete_isValid = false;

    m_enabled_for_deployment_isSet = false;
    m_enabled_for_deployment_isValid = false;

    m_enabled_for_disk_encryption_isSet = false;
    m_enabled_for_disk_encryption_isValid = false;

    m_enabled_for_template_deployment_isSet = false;
    m_enabled_for_template_deployment_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIVaultPatchProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultPatchProperties::fromJsonObject(QJsonObject json) {

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("accessPolicies")]);
    m_access_policies_isSet = !json[QString("accessPolicies")].isNull() && m_access_policies_isValid;

    m_create_mode_isValid = ::OpenAPI::fromJsonValue(m_create_mode, json[QString("createMode")]);
    m_create_mode_isSet = !json[QString("createMode")].isNull() && m_create_mode_isValid;

    m_enable_purge_protection_isValid = ::OpenAPI::fromJsonValue(m_enable_purge_protection, json[QString("enablePurgeProtection")]);
    m_enable_purge_protection_isSet = !json[QString("enablePurgeProtection")].isNull() && m_enable_purge_protection_isValid;

    m_enable_soft_delete_isValid = ::OpenAPI::fromJsonValue(m_enable_soft_delete, json[QString("enableSoftDelete")]);
    m_enable_soft_delete_isSet = !json[QString("enableSoftDelete")].isNull() && m_enable_soft_delete_isValid;

    m_enabled_for_deployment_isValid = ::OpenAPI::fromJsonValue(m_enabled_for_deployment, json[QString("enabledForDeployment")]);
    m_enabled_for_deployment_isSet = !json[QString("enabledForDeployment")].isNull() && m_enabled_for_deployment_isValid;

    m_enabled_for_disk_encryption_isValid = ::OpenAPI::fromJsonValue(m_enabled_for_disk_encryption, json[QString("enabledForDiskEncryption")]);
    m_enabled_for_disk_encryption_isSet = !json[QString("enabledForDiskEncryption")].isNull() && m_enabled_for_disk_encryption_isValid;

    m_enabled_for_template_deployment_isValid = ::OpenAPI::fromJsonValue(m_enabled_for_template_deployment, json[QString("enabledForTemplateDeployment")]);
    m_enabled_for_template_deployment_isSet = !json[QString("enabledForTemplateDeployment")].isNull() && m_enabled_for_template_deployment_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIVaultPatchProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultPatchProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policies.size() > 0) {
        obj.insert(QString("accessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    if (m_create_mode_isSet) {
        obj.insert(QString("createMode"), ::OpenAPI::toJsonValue(m_create_mode));
    }
    if (m_enable_purge_protection_isSet) {
        obj.insert(QString("enablePurgeProtection"), ::OpenAPI::toJsonValue(m_enable_purge_protection));
    }
    if (m_enable_soft_delete_isSet) {
        obj.insert(QString("enableSoftDelete"), ::OpenAPI::toJsonValue(m_enable_soft_delete));
    }
    if (m_enabled_for_deployment_isSet) {
        obj.insert(QString("enabledForDeployment"), ::OpenAPI::toJsonValue(m_enabled_for_deployment));
    }
    if (m_enabled_for_disk_encryption_isSet) {
        obj.insert(QString("enabledForDiskEncryption"), ::OpenAPI::toJsonValue(m_enabled_for_disk_encryption));
    }
    if (m_enabled_for_template_deployment_isSet) {
        obj.insert(QString("enabledForTemplateDeployment"), ::OpenAPI::toJsonValue(m_enabled_for_template_deployment));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QList<OAIAccessPolicyEntry> OAIVaultPatchProperties::getAccessPolicies() const {
    return m_access_policies;
}
void OAIVaultPatchProperties::setAccessPolicies(const QList<OAIAccessPolicyEntry> &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAIVaultPatchProperties::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAIVaultPatchProperties::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

QString OAIVaultPatchProperties::getCreateMode() const {
    return m_create_mode;
}
void OAIVaultPatchProperties::setCreateMode(const QString &create_mode) {
    m_create_mode = create_mode;
    m_create_mode_isSet = true;
}

bool OAIVaultPatchProperties::is_create_mode_Set() const{
    return m_create_mode_isSet;
}

bool OAIVaultPatchProperties::is_create_mode_Valid() const{
    return m_create_mode_isValid;
}

bool OAIVaultPatchProperties::isEnablePurgeProtection() const {
    return m_enable_purge_protection;
}
void OAIVaultPatchProperties::setEnablePurgeProtection(const bool &enable_purge_protection) {
    m_enable_purge_protection = enable_purge_protection;
    m_enable_purge_protection_isSet = true;
}

bool OAIVaultPatchProperties::is_enable_purge_protection_Set() const{
    return m_enable_purge_protection_isSet;
}

bool OAIVaultPatchProperties::is_enable_purge_protection_Valid() const{
    return m_enable_purge_protection_isValid;
}

bool OAIVaultPatchProperties::isEnableSoftDelete() const {
    return m_enable_soft_delete;
}
void OAIVaultPatchProperties::setEnableSoftDelete(const bool &enable_soft_delete) {
    m_enable_soft_delete = enable_soft_delete;
    m_enable_soft_delete_isSet = true;
}

bool OAIVaultPatchProperties::is_enable_soft_delete_Set() const{
    return m_enable_soft_delete_isSet;
}

bool OAIVaultPatchProperties::is_enable_soft_delete_Valid() const{
    return m_enable_soft_delete_isValid;
}

bool OAIVaultPatchProperties::isEnabledForDeployment() const {
    return m_enabled_for_deployment;
}
void OAIVaultPatchProperties::setEnabledForDeployment(const bool &enabled_for_deployment) {
    m_enabled_for_deployment = enabled_for_deployment;
    m_enabled_for_deployment_isSet = true;
}

bool OAIVaultPatchProperties::is_enabled_for_deployment_Set() const{
    return m_enabled_for_deployment_isSet;
}

bool OAIVaultPatchProperties::is_enabled_for_deployment_Valid() const{
    return m_enabled_for_deployment_isValid;
}

bool OAIVaultPatchProperties::isEnabledForDiskEncryption() const {
    return m_enabled_for_disk_encryption;
}
void OAIVaultPatchProperties::setEnabledForDiskEncryption(const bool &enabled_for_disk_encryption) {
    m_enabled_for_disk_encryption = enabled_for_disk_encryption;
    m_enabled_for_disk_encryption_isSet = true;
}

bool OAIVaultPatchProperties::is_enabled_for_disk_encryption_Set() const{
    return m_enabled_for_disk_encryption_isSet;
}

bool OAIVaultPatchProperties::is_enabled_for_disk_encryption_Valid() const{
    return m_enabled_for_disk_encryption_isValid;
}

bool OAIVaultPatchProperties::isEnabledForTemplateDeployment() const {
    return m_enabled_for_template_deployment;
}
void OAIVaultPatchProperties::setEnabledForTemplateDeployment(const bool &enabled_for_template_deployment) {
    m_enabled_for_template_deployment = enabled_for_template_deployment;
    m_enabled_for_template_deployment_isSet = true;
}

bool OAIVaultPatchProperties::is_enabled_for_template_deployment_Set() const{
    return m_enabled_for_template_deployment_isSet;
}

bool OAIVaultPatchProperties::is_enabled_for_template_deployment_Valid() const{
    return m_enabled_for_template_deployment_isValid;
}

OAISku OAIVaultPatchProperties::getSku() const {
    return m_sku;
}
void OAIVaultPatchProperties::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIVaultPatchProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIVaultPatchProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIVaultPatchProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIVaultPatchProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIVaultPatchProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIVaultPatchProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIVaultPatchProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_purge_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_soft_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_for_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_for_disk_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_for_template_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultPatchProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
