/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessPolicyEntry from './AccessPolicyEntry';
import Sku from './Sku';

/**
 * The VaultProperties model module.
 * @module model/VaultProperties
 * @version 2016-10-01
 */
class VaultProperties {
    /**
     * Constructs a new <code>VaultProperties</code>.
     * Properties of the vault
     * @alias module:model/VaultProperties
     * @param sku {module:model/Sku} 
     * @param tenantId {String} The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     */
    constructor(sku, tenantId) { 
        
        VaultProperties.initialize(this, sku, tenantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku, tenantId) { 
        obj['sku'] = sku;
        obj['tenantId'] = tenantId;
    }

    /**
     * Constructs a <code>VaultProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VaultProperties} obj Optional instance to populate.
     * @return {module:model/VaultProperties} The populated <code>VaultProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VaultProperties();

            if (data.hasOwnProperty('accessPolicies')) {
                obj['accessPolicies'] = ApiClient.convertToType(data['accessPolicies'], [AccessPolicyEntry]);
            }
            if (data.hasOwnProperty('createMode')) {
                obj['createMode'] = ApiClient.convertToType(data['createMode'], 'String');
            }
            if (data.hasOwnProperty('enablePurgeProtection')) {
                obj['enablePurgeProtection'] = ApiClient.convertToType(data['enablePurgeProtection'], 'Boolean');
            }
            if (data.hasOwnProperty('enableSoftDelete')) {
                obj['enableSoftDelete'] = ApiClient.convertToType(data['enableSoftDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForDeployment')) {
                obj['enabledForDeployment'] = ApiClient.convertToType(data['enabledForDeployment'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForDiskEncryption')) {
                obj['enabledForDiskEncryption'] = ApiClient.convertToType(data['enabledForDiskEncryption'], 'Boolean');
            }
            if (data.hasOwnProperty('enabledForTemplateDeployment')) {
                obj['enabledForTemplateDeployment'] = ApiClient.convertToType(data['enabledForTemplateDeployment'], 'Boolean');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('vaultUri')) {
                obj['vaultUri'] = ApiClient.convertToType(data['vaultUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VaultProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VaultProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VaultProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accessPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessPolicies'])) {
                throw new Error("Expected the field `accessPolicies` to be an array in the JSON data but got " + data['accessPolicies']);
            }
            // validate the optional field `accessPolicies` (array)
            for (const item of data['accessPolicies']) {
                AccessPolicyEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createMode'] && !(typeof data['createMode'] === 'string' || data['createMode'] instanceof String)) {
            throw new Error("Expected the field `createMode` to be a primitive type in the JSON string but got " + data['createMode']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['vaultUri'] && !(typeof data['vaultUri'] === 'string' || data['vaultUri'] instanceof String)) {
            throw new Error("Expected the field `vaultUri` to be a primitive type in the JSON string but got " + data['vaultUri']);
        }

        return true;
    }


}

VaultProperties.RequiredProperties = ["sku", "tenantId"];

/**
 * An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
 * @member {Array.<module:model/AccessPolicyEntry>} accessPolicies
 */
VaultProperties.prototype['accessPolicies'] = undefined;

/**
 * The vault's create mode to indicate whether the vault need to be recovered or not.
 * @member {module:model/VaultProperties.CreateModeEnum} createMode
 */
VaultProperties.prototype['createMode'] = undefined;

/**
 * Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
 * @member {Boolean} enablePurgeProtection
 */
VaultProperties.prototype['enablePurgeProtection'] = undefined;

/**
 * Property specifying whether recoverable deletion is enabled for this key vault. Setting this property to true activates the soft delete feature, whereby vaults or vault entities can be recovered after deletion. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
 * @member {Boolean} enableSoftDelete
 */
VaultProperties.prototype['enableSoftDelete'] = undefined;

/**
 * Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
 * @member {Boolean} enabledForDeployment
 */
VaultProperties.prototype['enabledForDeployment'] = undefined;

/**
 * Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
 * @member {Boolean} enabledForDiskEncryption
 */
VaultProperties.prototype['enabledForDiskEncryption'] = undefined;

/**
 * Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
 * @member {Boolean} enabledForTemplateDeployment
 */
VaultProperties.prototype['enabledForTemplateDeployment'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
VaultProperties.prototype['sku'] = undefined;

/**
 * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
 * @member {String} tenantId
 */
VaultProperties.prototype['tenantId'] = undefined;

/**
 * The URI of the vault for performing operations on keys and secrets.
 * @member {String} vaultUri
 */
VaultProperties.prototype['vaultUri'] = undefined;





/**
 * Allowed values for the <code>createMode</code> property.
 * @enum {String}
 * @readonly
 */
VaultProperties['CreateModeEnum'] = {

    /**
     * value: "recover"
     * @const
     */
    "recover": "recover",

    /**
     * value: "default"
     * @const
     */
    "default": "default"
};



export default VaultProperties;

