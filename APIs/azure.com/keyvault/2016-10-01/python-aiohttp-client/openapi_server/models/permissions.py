# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[str]=None, keys: List[str]=None, secrets: List[str]=None, storage: List[str]=None):
        """Permissions - a model defined in OpenAPI

        :param certificates: The certificates of this Permissions.
        :param keys: The keys of this Permissions.
        :param secrets: The secrets of this Permissions.
        :param storage: The storage of this Permissions.
        """
        self.openapi_types = {
            'certificates': List[str],
            'keys': List[str],
            'secrets': List[str],
            'storage': List[str]
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'keys': 'keys',
            'secrets': 'secrets',
            'storage': 'storage'
        }

        self._certificates = certificates
        self._keys = keys
        self._secrets = secrets
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permissions of this Permissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this Permissions.

        Permissions to certificates

        :return: The certificates of this Permissions.
        :rtype: List[str]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this Permissions.

        Permissions to certificates

        :param certificates: The certificates of this Permissions.
        :type certificates: List[str]
        """
        allowed_values = ["get", "list", "delete", "create", "import", "update", "managecontacts", "getissuers", "listissuers", "setissuers", "deleteissuers", "manageissuers", "recover", "purge"]  # noqa: E501
        if not set(certificates).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `certificates` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(certificates) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._certificates = certificates

    @property
    def keys(self):
        """Gets the keys of this Permissions.

        Permissions to keys

        :return: The keys of this Permissions.
        :rtype: List[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this Permissions.

        Permissions to keys

        :param keys: The keys of this Permissions.
        :type keys: List[str]
        """
        allowed_values = ["encrypt", "decrypt", "wrapKey", "unwrapKey", "sign", "verify", "get", "list", "create", "update", "import", "delete", "backup", "restore", "recover", "purge"]  # noqa: E501
        if not set(keys).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `keys` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(keys) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._keys = keys

    @property
    def secrets(self):
        """Gets the secrets of this Permissions.

        Permissions to secrets

        :return: The secrets of this Permissions.
        :rtype: List[str]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this Permissions.

        Permissions to secrets

        :param secrets: The secrets of this Permissions.
        :type secrets: List[str]
        """
        allowed_values = ["get", "list", "set", "delete", "backup", "restore", "recover", "purge"]  # noqa: E501
        if not set(secrets).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `secrets` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(secrets) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._secrets = secrets

    @property
    def storage(self):
        """Gets the storage of this Permissions.

        Permissions to storage accounts

        :return: The storage of this Permissions.
        :rtype: List[str]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Permissions.

        Permissions to storage accounts

        :param storage: The storage of this Permissions.
        :type storage: List[str]
        """
        allowed_values = ["get", "list", "delete", "set", "update", "regeneratekey", "recover", "purge", "backup", "restore", "setsas", "listsas", "getsas", "deletesas"]  # noqa: E501
        if not set(storage).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `storage` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(storage) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._storage = storage
