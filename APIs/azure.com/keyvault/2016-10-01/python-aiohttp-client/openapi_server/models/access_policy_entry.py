# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server import util


class AccessPolicyEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, object_id: str=None, permissions: Permissions=None, tenant_id: str=None):
        """AccessPolicyEntry - a model defined in OpenAPI

        :param application_id: The application_id of this AccessPolicyEntry.
        :param object_id: The object_id of this AccessPolicyEntry.
        :param permissions: The permissions of this AccessPolicyEntry.
        :param tenant_id: The tenant_id of this AccessPolicyEntry.
        """
        self.openapi_types = {
            'application_id': str,
            'object_id': str,
            'permissions': Permissions,
            'tenant_id': str
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'object_id': 'objectId',
            'permissions': 'permissions',
            'tenant_id': 'tenantId'
        }

        self._application_id = application_id
        self._object_id = object_id
        self._permissions = permissions
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPolicyEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPolicyEntry of this AccessPolicyEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this AccessPolicyEntry.

         Application ID of the client making request on behalf of a principal

        :return: The application_id of this AccessPolicyEntry.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AccessPolicyEntry.

         Application ID of the client making request on behalf of a principal

        :param application_id: The application_id of this AccessPolicyEntry.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def object_id(self):
        """Gets the object_id of this AccessPolicyEntry.

        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.

        :return: The object_id of this AccessPolicyEntry.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this AccessPolicyEntry.

        The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.

        :param object_id: The object_id of this AccessPolicyEntry.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def permissions(self):
        """Gets the permissions of this AccessPolicyEntry.


        :return: The permissions of this AccessPolicyEntry.
        :rtype: Permissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AccessPolicyEntry.


        :param permissions: The permissions of this AccessPolicyEntry.
        :type permissions: Permissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AccessPolicyEntry.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :return: The tenant_id of this AccessPolicyEntry.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AccessPolicyEntry.

        The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.

        :param tenant_id: The tenant_id of this AccessPolicyEntry.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")

        self._tenant_id = tenant_id
