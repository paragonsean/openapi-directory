# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_policy_entry import AccessPolicyEntry
from openapi_server import util


class VaultAccessPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policies: List[AccessPolicyEntry]=None):
        """VaultAccessPolicyProperties - a model defined in OpenAPI

        :param access_policies: The access_policies of this VaultAccessPolicyProperties.
        """
        self.openapi_types = {
            'access_policies': List[AccessPolicyEntry]
        }

        self.attribute_map = {
            'access_policies': 'accessPolicies'
        }

        self._access_policies = access_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VaultAccessPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VaultAccessPolicyProperties of this VaultAccessPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policies(self):
        """Gets the access_policies of this VaultAccessPolicyProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :return: The access_policies of this VaultAccessPolicyProperties.
        :rtype: List[AccessPolicyEntry]
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this VaultAccessPolicyProperties.

        An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

        :param access_policies: The access_policies of this VaultAccessPolicyProperties.
        :type access_policies: List[AccessPolicyEntry]
        """
        if access_policies is None:
            raise ValueError("Invalid value for `access_policies`, must not be `None`")

        self._access_policies = access_policies
