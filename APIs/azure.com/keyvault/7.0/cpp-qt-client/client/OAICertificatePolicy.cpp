/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificatePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificatePolicy::OAICertificatePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificatePolicy::OAICertificatePolicy() {
    this->initializeModel();
}

OAICertificatePolicy::~OAICertificatePolicy() {}

void OAICertificatePolicy::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_key_props_isSet = false;
    m_key_props_isValid = false;

    m_lifetime_actions_isSet = false;
    m_lifetime_actions_isValid = false;

    m_secret_props_isSet = false;
    m_secret_props_isValid = false;

    m_x509_props_isSet = false;
    m_x509_props_isValid = false;
}

void OAICertificatePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificatePolicy::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_key_props_isValid = ::OpenAPI::fromJsonValue(m_key_props, json[QString("key_props")]);
    m_key_props_isSet = !json[QString("key_props")].isNull() && m_key_props_isValid;

    m_lifetime_actions_isValid = ::OpenAPI::fromJsonValue(m_lifetime_actions, json[QString("lifetime_actions")]);
    m_lifetime_actions_isSet = !json[QString("lifetime_actions")].isNull() && m_lifetime_actions_isValid;

    m_secret_props_isValid = ::OpenAPI::fromJsonValue(m_secret_props, json[QString("secret_props")]);
    m_secret_props_isSet = !json[QString("secret_props")].isNull() && m_secret_props_isValid;

    m_x509_props_isValid = ::OpenAPI::fromJsonValue(m_x509_props, json[QString("x509_props")]);
    m_x509_props_isSet = !json[QString("x509_props")].isNull() && m_x509_props_isValid;
}

QString OAICertificatePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificatePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer.isSet()) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_key_props.isSet()) {
        obj.insert(QString("key_props"), ::OpenAPI::toJsonValue(m_key_props));
    }
    if (m_lifetime_actions.size() > 0) {
        obj.insert(QString("lifetime_actions"), ::OpenAPI::toJsonValue(m_lifetime_actions));
    }
    if (m_secret_props.isSet()) {
        obj.insert(QString("secret_props"), ::OpenAPI::toJsonValue(m_secret_props));
    }
    if (m_x509_props.isSet()) {
        obj.insert(QString("x509_props"), ::OpenAPI::toJsonValue(m_x509_props));
    }
    return obj;
}

OAICertificateAttributes OAICertificatePolicy::getAttributes() const {
    return m_attributes;
}
void OAICertificatePolicy::setAttributes(const OAICertificateAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICertificatePolicy::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICertificatePolicy::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICertificatePolicy::getId() const {
    return m_id;
}
void OAICertificatePolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificatePolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificatePolicy::is_id_Valid() const{
    return m_id_isValid;
}

OAIIssuerParameters OAICertificatePolicy::getIssuer() const {
    return m_issuer;
}
void OAICertificatePolicy::setIssuer(const OAIIssuerParameters &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICertificatePolicy::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICertificatePolicy::is_issuer_Valid() const{
    return m_issuer_isValid;
}

OAIKeyProperties OAICertificatePolicy::getKeyProps() const {
    return m_key_props;
}
void OAICertificatePolicy::setKeyProps(const OAIKeyProperties &key_props) {
    m_key_props = key_props;
    m_key_props_isSet = true;
}

bool OAICertificatePolicy::is_key_props_Set() const{
    return m_key_props_isSet;
}

bool OAICertificatePolicy::is_key_props_Valid() const{
    return m_key_props_isValid;
}

QList<OAILifetimeAction> OAICertificatePolicy::getLifetimeActions() const {
    return m_lifetime_actions;
}
void OAICertificatePolicy::setLifetimeActions(const QList<OAILifetimeAction> &lifetime_actions) {
    m_lifetime_actions = lifetime_actions;
    m_lifetime_actions_isSet = true;
}

bool OAICertificatePolicy::is_lifetime_actions_Set() const{
    return m_lifetime_actions_isSet;
}

bool OAICertificatePolicy::is_lifetime_actions_Valid() const{
    return m_lifetime_actions_isValid;
}

OAISecretProperties OAICertificatePolicy::getSecretProps() const {
    return m_secret_props;
}
void OAICertificatePolicy::setSecretProps(const OAISecretProperties &secret_props) {
    m_secret_props = secret_props;
    m_secret_props_isSet = true;
}

bool OAICertificatePolicy::is_secret_props_Set() const{
    return m_secret_props_isSet;
}

bool OAICertificatePolicy::is_secret_props_Valid() const{
    return m_secret_props_isValid;
}

OAIX509CertificateProperties OAICertificatePolicy::getX509Props() const {
    return m_x509_props;
}
void OAICertificatePolicy::setX509Props(const OAIX509CertificateProperties &x509_props) {
    m_x509_props = x509_props;
    m_x509_props_isSet = true;
}

bool OAICertificatePolicy::is_x509_props_Set() const{
    return m_x509_props_isSet;
}

bool OAICertificatePolicy::is_x509_props_Valid() const{
    return m_x509_props_isValid;
}

bool OAICertificatePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_props.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_props.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x509_props.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificatePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
