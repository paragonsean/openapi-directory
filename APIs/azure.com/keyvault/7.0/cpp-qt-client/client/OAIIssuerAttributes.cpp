/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuerAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuerAttributes::OAIIssuerAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuerAttributes::OAIIssuerAttributes() {
    this->initializeModel();
}

OAIIssuerAttributes::~OAIIssuerAttributes() {}

void OAIIssuerAttributes::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIIssuerAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuerAttributes::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIIssuerAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuerAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIIssuerAttributes::getCreated() const {
    return m_created;
}
void OAIIssuerAttributes::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIIssuerAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIIssuerAttributes::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIIssuerAttributes::isEnabled() const {
    return m_enabled;
}
void OAIIssuerAttributes::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIIssuerAttributes::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIIssuerAttributes::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIIssuerAttributes::getUpdated() const {
    return m_updated;
}
void OAIIssuerAttributes::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIIssuerAttributes::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIIssuerAttributes::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIIssuerAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuerAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
