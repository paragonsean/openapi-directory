/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX509CertificateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX509CertificateProperties::OAIX509CertificateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX509CertificateProperties::OAIX509CertificateProperties() {
    this->initializeModel();
}

OAIX509CertificateProperties::~OAIX509CertificateProperties() {}

void OAIX509CertificateProperties::initializeModel() {

    m_ekus_isSet = false;
    m_ekus_isValid = false;

    m_key_usage_isSet = false;
    m_key_usage_isValid = false;

    m_sans_isSet = false;
    m_sans_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_validity_months_isSet = false;
    m_validity_months_isValid = false;
}

void OAIX509CertificateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX509CertificateProperties::fromJsonObject(QJsonObject json) {

    m_ekus_isValid = ::OpenAPI::fromJsonValue(m_ekus, json[QString("ekus")]);
    m_ekus_isSet = !json[QString("ekus")].isNull() && m_ekus_isValid;

    m_key_usage_isValid = ::OpenAPI::fromJsonValue(m_key_usage, json[QString("key_usage")]);
    m_key_usage_isSet = !json[QString("key_usage")].isNull() && m_key_usage_isValid;

    m_sans_isValid = ::OpenAPI::fromJsonValue(m_sans, json[QString("sans")]);
    m_sans_isSet = !json[QString("sans")].isNull() && m_sans_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_validity_months_isValid = ::OpenAPI::fromJsonValue(m_validity_months, json[QString("validity_months")]);
    m_validity_months_isSet = !json[QString("validity_months")].isNull() && m_validity_months_isValid;
}

QString OAIX509CertificateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX509CertificateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_ekus.size() > 0) {
        obj.insert(QString("ekus"), ::OpenAPI::toJsonValue(m_ekus));
    }
    if (m_key_usage.size() > 0) {
        obj.insert(QString("key_usage"), ::OpenAPI::toJsonValue(m_key_usage));
    }
    if (m_sans.isSet()) {
        obj.insert(QString("sans"), ::OpenAPI::toJsonValue(m_sans));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_validity_months_isSet) {
        obj.insert(QString("validity_months"), ::OpenAPI::toJsonValue(m_validity_months));
    }
    return obj;
}

QList<QString> OAIX509CertificateProperties::getEkus() const {
    return m_ekus;
}
void OAIX509CertificateProperties::setEkus(const QList<QString> &ekus) {
    m_ekus = ekus;
    m_ekus_isSet = true;
}

bool OAIX509CertificateProperties::is_ekus_Set() const{
    return m_ekus_isSet;
}

bool OAIX509CertificateProperties::is_ekus_Valid() const{
    return m_ekus_isValid;
}

QList<QString> OAIX509CertificateProperties::getKeyUsage() const {
    return m_key_usage;
}
void OAIX509CertificateProperties::setKeyUsage(const QList<QString> &key_usage) {
    m_key_usage = key_usage;
    m_key_usage_isSet = true;
}

bool OAIX509CertificateProperties::is_key_usage_Set() const{
    return m_key_usage_isSet;
}

bool OAIX509CertificateProperties::is_key_usage_Valid() const{
    return m_key_usage_isValid;
}

OAISubjectAlternativeNames OAIX509CertificateProperties::getSans() const {
    return m_sans;
}
void OAIX509CertificateProperties::setSans(const OAISubjectAlternativeNames &sans) {
    m_sans = sans;
    m_sans_isSet = true;
}

bool OAIX509CertificateProperties::is_sans_Set() const{
    return m_sans_isSet;
}

bool OAIX509CertificateProperties::is_sans_Valid() const{
    return m_sans_isValid;
}

QString OAIX509CertificateProperties::getSubject() const {
    return m_subject;
}
void OAIX509CertificateProperties::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIX509CertificateProperties::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIX509CertificateProperties::is_subject_Valid() const{
    return m_subject_isValid;
}

qint32 OAIX509CertificateProperties::getValidityMonths() const {
    return m_validity_months;
}
void OAIX509CertificateProperties::setValidityMonths(const qint32 &validity_months) {
    m_validity_months = validity_months;
    m_validity_months_isSet = true;
}

bool OAIX509CertificateProperties::is_validity_months_Set() const{
    return m_validity_months_isSet;
}

bool OAIX509CertificateProperties::is_validity_months_Valid() const{
    return m_validity_months_isValid;
}

bool OAIX509CertificateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ekus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_months_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX509CertificateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
