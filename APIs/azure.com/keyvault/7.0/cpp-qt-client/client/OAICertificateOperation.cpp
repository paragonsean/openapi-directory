/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateOperation::OAICertificateOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateOperation::OAICertificateOperation() {
    this->initializeModel();
}

OAICertificateOperation::~OAICertificateOperation() {}

void OAICertificateOperation::initializeModel() {

    m_cancellation_requested_isSet = false;
    m_cancellation_requested_isValid = false;

    m_csr_isSet = false;
    m_csr_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAICertificateOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateOperation::fromJsonObject(QJsonObject json) {

    m_cancellation_requested_isValid = ::OpenAPI::fromJsonValue(m_cancellation_requested, json[QString("cancellation_requested")]);
    m_cancellation_requested_isSet = !json[QString("cancellation_requested")].isNull() && m_cancellation_requested_isValid;

    m_csr_isValid = ::OpenAPI::fromJsonValue(m_csr, json[QString("csr")]);
    m_csr_isSet = !json[QString("csr")].isNull() && m_csr_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("status_details")]);
    m_status_details_isSet = !json[QString("status_details")].isNull() && m_status_details_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAICertificateOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_requested_isSet) {
        obj.insert(QString("cancellation_requested"), ::OpenAPI::toJsonValue(m_cancellation_requested));
    }
    if (m_csr_isSet) {
        obj.insert(QString("csr"), ::OpenAPI::toJsonValue(m_csr));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer.isSet()) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("status_details"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

bool OAICertificateOperation::isCancellationRequested() const {
    return m_cancellation_requested;
}
void OAICertificateOperation::setCancellationRequested(const bool &cancellation_requested) {
    m_cancellation_requested = cancellation_requested;
    m_cancellation_requested_isSet = true;
}

bool OAICertificateOperation::is_cancellation_requested_Set() const{
    return m_cancellation_requested_isSet;
}

bool OAICertificateOperation::is_cancellation_requested_Valid() const{
    return m_cancellation_requested_isValid;
}

QByteArray OAICertificateOperation::getCsr() const {
    return m_csr;
}
void OAICertificateOperation::setCsr(const QByteArray &csr) {
    m_csr = csr;
    m_csr_isSet = true;
}

bool OAICertificateOperation::is_csr_Set() const{
    return m_csr_isSet;
}

bool OAICertificateOperation::is_csr_Valid() const{
    return m_csr_isValid;
}

OAIError OAICertificateOperation::getError() const {
    return m_error;
}
void OAICertificateOperation::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICertificateOperation::is_error_Set() const{
    return m_error_isSet;
}

bool OAICertificateOperation::is_error_Valid() const{
    return m_error_isValid;
}

QString OAICertificateOperation::getId() const {
    return m_id;
}
void OAICertificateOperation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificateOperation::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificateOperation::is_id_Valid() const{
    return m_id_isValid;
}

OAIIssuerParameters OAICertificateOperation::getIssuer() const {
    return m_issuer;
}
void OAICertificateOperation::setIssuer(const OAIIssuerParameters &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICertificateOperation::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICertificateOperation::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAICertificateOperation::getRequestId() const {
    return m_request_id;
}
void OAICertificateOperation::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICertificateOperation::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICertificateOperation::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICertificateOperation::getStatus() const {
    return m_status;
}
void OAICertificateOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICertificateOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAICertificateOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICertificateOperation::getStatusDetails() const {
    return m_status_details;
}
void OAICertificateOperation::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAICertificateOperation::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAICertificateOperation::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAICertificateOperation::getTarget() const {
    return m_target;
}
void OAICertificateOperation::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICertificateOperation::is_target_Set() const{
    return m_target_isSet;
}

bool OAICertificateOperation::is_target_Valid() const{
    return m_target_isValid;
}

bool OAICertificateOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
