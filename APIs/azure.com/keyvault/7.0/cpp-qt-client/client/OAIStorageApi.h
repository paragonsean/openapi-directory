/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStorageApi_H
#define OAI_OAIStorageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupStorageResult.h"
#include "OAIDeletedSasDefinitionBundle.h"
#include "OAIDeletedStorageBundle.h"
#include "OAIKeyVaultError.h"
#include "OAISasDefinitionBundle.h"
#include "OAISasDefinitionCreateParameters.h"
#include "OAISasDefinitionListResult.h"
#include "OAISasDefinitionUpdateParameters.h"
#include "OAIStorageAccountCreateParameters.h"
#include "OAIStorageAccountRegenerteKeyParameters.h"
#include "OAIStorageAccountUpdateParameters.h"
#include "OAIStorageBundle.h"
#include "OAIStorageListResult.h"
#include "OAIStorageRestoreParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStorageApi : public QObject {
    Q_OBJECT

public:
    OAIStorageApi(const int timeOut = 0);
    ~OAIStorageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupStorageAccount(const QString &storage_account_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteStorageAccount(const QString &storage_account_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getSasDefinitions(const QString &storage_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getStorageAccount(const QString &storage_account_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getStorageAccounts(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStorageAccountRegenerteKeyParameters [required]
    */
    virtual void regenerateStorageAccountKey(const QString &storage_account_name, const QString &api_version, const OAIStorageAccountRegenerteKeyParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStorageRestoreParameters [required]
    */
    virtual void restoreStorageAccount(const QString &api_version, const OAIStorageRestoreParameters &parameters);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISasDefinitionCreateParameters [required]
    */
    virtual void setSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version, const OAISasDefinitionCreateParameters &parameters);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStorageAccountCreateParameters [required]
    */
    virtual void setStorageAccount(const QString &storage_account_name, const QString &api_version, const OAIStorageAccountCreateParameters &parameters);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  sas_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISasDefinitionUpdateParameters [required]
    */
    virtual void updateSasDefinition(const QString &storage_account_name, const QString &sas_definition_name, const QString &api_version, const OAISasDefinitionUpdateParameters &parameters);

    /**
    * @param[in]  storage_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIStorageAccountUpdateParameters [required]
    */
    virtual void updateStorageAccount(const QString &storage_account_name, const QString &api_version, const OAIStorageAccountUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupStorageAccountCallback(OAIHttpRequestWorker *worker);
    void deleteSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void deleteStorageAccountCallback(OAIHttpRequestWorker *worker);
    void getSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void getSasDefinitionsCallback(OAIHttpRequestWorker *worker);
    void getStorageAccountCallback(OAIHttpRequestWorker *worker);
    void getStorageAccountsCallback(OAIHttpRequestWorker *worker);
    void regenerateStorageAccountKeyCallback(OAIHttpRequestWorker *worker);
    void restoreStorageAccountCallback(OAIHttpRequestWorker *worker);
    void setSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void setStorageAccountCallback(OAIHttpRequestWorker *worker);
    void updateSasDefinitionCallback(OAIHttpRequestWorker *worker);
    void updateStorageAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupStorageAccountSignal(OAIBackupStorageResult summary);
    void deleteSasDefinitionSignal(OAIDeletedSasDefinitionBundle summary);
    void deleteStorageAccountSignal(OAIDeletedStorageBundle summary);
    void getSasDefinitionSignal(OAISasDefinitionBundle summary);
    void getSasDefinitionsSignal(OAISasDefinitionListResult summary);
    void getStorageAccountSignal(OAIStorageBundle summary);
    void getStorageAccountsSignal(OAIStorageListResult summary);
    void regenerateStorageAccountKeySignal(OAIStorageBundle summary);
    void restoreStorageAccountSignal(OAIStorageBundle summary);
    void setSasDefinitionSignal(OAISasDefinitionBundle summary);
    void setStorageAccountSignal(OAIStorageBundle summary);
    void updateSasDefinitionSignal(OAISasDefinitionBundle summary);
    void updateStorageAccountSignal(OAIStorageBundle summary);


    void backupStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIBackupStorageResult summary);
    void deleteSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIDeletedSasDefinitionBundle summary);
    void deleteStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIDeletedStorageBundle summary);
    void getSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISasDefinitionBundle summary);
    void getSasDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAISasDefinitionListResult summary);
    void getStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);
    void getStorageAccountsSignalFull(OAIHttpRequestWorker *worker, OAIStorageListResult summary);
    void regenerateStorageAccountKeySignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);
    void restoreStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);
    void setSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISasDefinitionBundle summary);
    void setStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);
    void updateSasDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISasDefinitionBundle summary);
    void updateStorageAccountSignalFull(OAIHttpRequestWorker *worker, OAIStorageBundle summary);

    Q_DECL_DEPRECATED_X("Use backupStorageAccountSignalError() instead")
    void backupStorageAccountSignalE(OAIBackupStorageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupStorageAccountSignalError(OAIBackupStorageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSasDefinitionSignalError() instead")
    void deleteSasDefinitionSignalE(OAIDeletedSasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSasDefinitionSignalError(OAIDeletedSasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageAccountSignalError() instead")
    void deleteStorageAccountSignalE(OAIDeletedStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageAccountSignalError(OAIDeletedStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSasDefinitionSignalError() instead")
    void getSasDefinitionSignalE(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSasDefinitionSignalError(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSasDefinitionsSignalError() instead")
    void getSasDefinitionsSignalE(OAISasDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSasDefinitionsSignalError(OAISasDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageAccountSignalError() instead")
    void getStorageAccountSignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageAccountSignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageAccountsSignalError() instead")
    void getStorageAccountsSignalE(OAIStorageListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageAccountsSignalError(OAIStorageListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateStorageAccountKeySignalError() instead")
    void regenerateStorageAccountKeySignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateStorageAccountKeySignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreStorageAccountSignalError() instead")
    void restoreStorageAccountSignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreStorageAccountSignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSasDefinitionSignalError() instead")
    void setSasDefinitionSignalE(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setSasDefinitionSignalError(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStorageAccountSignalError() instead")
    void setStorageAccountSignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setStorageAccountSignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSasDefinitionSignalError() instead")
    void updateSasDefinitionSignalE(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSasDefinitionSignalError(OAISasDefinitionBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStorageAccountSignalError() instead")
    void updateStorageAccountSignalE(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStorageAccountSignalError(OAIStorageBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupStorageAccountSignalErrorFull() instead")
    void backupStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSasDefinitionSignalErrorFull() instead")
    void deleteSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageAccountSignalErrorFull() instead")
    void deleteStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSasDefinitionSignalErrorFull() instead")
    void getSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSasDefinitionsSignalErrorFull() instead")
    void getSasDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSasDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageAccountSignalErrorFull() instead")
    void getStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageAccountsSignalErrorFull() instead")
    void getStorageAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateStorageAccountKeySignalErrorFull() instead")
    void regenerateStorageAccountKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateStorageAccountKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreStorageAccountSignalErrorFull() instead")
    void restoreStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSasDefinitionSignalErrorFull() instead")
    void setSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStorageAccountSignalErrorFull() instead")
    void setStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSasDefinitionSignalErrorFull() instead")
    void updateSasDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSasDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStorageAccountSignalErrorFull() instead")
    void updateStorageAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStorageAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
