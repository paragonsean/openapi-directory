/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateIssuerUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateIssuerUpdateParameters::OAICertificateIssuerUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateIssuerUpdateParameters::OAICertificateIssuerUpdateParameters() {
    this->initializeModel();
}

OAICertificateIssuerUpdateParameters::~OAICertificateIssuerUpdateParameters() {}

void OAICertificateIssuerUpdateParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_org_details_isSet = false;
    m_org_details_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAICertificateIssuerUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateIssuerUpdateParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_org_details_isValid = ::OpenAPI::fromJsonValue(m_org_details, json[QString("org_details")]);
    m_org_details_isSet = !json[QString("org_details")].isNull() && m_org_details_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAICertificateIssuerUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateIssuerUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_org_details.isSet()) {
        obj.insert(QString("org_details"), ::OpenAPI::toJsonValue(m_org_details));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

OAIIssuerAttributes OAICertificateIssuerUpdateParameters::getAttributes() const {
    return m_attributes;
}
void OAICertificateIssuerUpdateParameters::setAttributes(const OAIIssuerAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICertificateIssuerUpdateParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICertificateIssuerUpdateParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIIssuerCredentials OAICertificateIssuerUpdateParameters::getCredentials() const {
    return m_credentials;
}
void OAICertificateIssuerUpdateParameters::setCredentials(const OAIIssuerCredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAICertificateIssuerUpdateParameters::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAICertificateIssuerUpdateParameters::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAIOrganizationDetails OAICertificateIssuerUpdateParameters::getOrgDetails() const {
    return m_org_details;
}
void OAICertificateIssuerUpdateParameters::setOrgDetails(const OAIOrganizationDetails &org_details) {
    m_org_details = org_details;
    m_org_details_isSet = true;
}

bool OAICertificateIssuerUpdateParameters::is_org_details_Set() const{
    return m_org_details_isSet;
}

bool OAICertificateIssuerUpdateParameters::is_org_details_Valid() const{
    return m_org_details_isValid;
}

QString OAICertificateIssuerUpdateParameters::getProvider() const {
    return m_provider;
}
void OAICertificateIssuerUpdateParameters::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICertificateIssuerUpdateParameters::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICertificateIssuerUpdateParameters::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAICertificateIssuerUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateIssuerUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
