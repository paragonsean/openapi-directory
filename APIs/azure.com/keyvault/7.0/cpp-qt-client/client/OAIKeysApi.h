/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKeysApi_H
#define OAI_OAIKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupKeyResult.h"
#include "OAIDeletedKeyBundle.h"
#include "OAIKeyBundle.h"
#include "OAIKeyCreateParameters.h"
#include "OAIKeyImportParameters.h"
#include "OAIKeyListResult.h"
#include "OAIKeyOperationResult.h"
#include "OAIKeyOperationsParameters.h"
#include "OAIKeyRestoreParameters.h"
#include "OAIKeySignParameters.h"
#include "OAIKeyUpdateParameters.h"
#include "OAIKeyVaultError.h"
#include "OAIKeyVerifyParameters.h"
#include "OAIKeyVerifyResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKeysApi : public QObject {
    Q_OBJECT

public:
    OAIKeysApi(const int timeOut = 0);
    ~OAIKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupKey(const QString &key_name, const QString &api_version);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyCreateParameters [required]
    */
    virtual void createKey(const QString &key_name, const QString &api_version, const OAIKeyCreateParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyOperationsParameters [required]
    */
    virtual void decrypt(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyOperationsParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteKey(const QString &key_name, const QString &api_version);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyOperationsParameters [required]
    */
    virtual void encrypt(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyOperationsParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getKey(const QString &key_name, const QString &key_version, const QString &api_version);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getKeyVersions(const QString &key_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  maxresults qint32 [optional]
    */
    virtual void getKeys(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyImportParameters [required]
    */
    virtual void importKey(const QString &key_name, const QString &api_version, const OAIKeyImportParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyRestoreParameters [required]
    */
    virtual void restoreKey(const QString &api_version, const OAIKeyRestoreParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeySignParameters [required]
    */
    virtual void sign(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeySignParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyOperationsParameters [required]
    */
    virtual void unwrapKey(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyOperationsParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyUpdateParameters [required]
    */
    virtual void updateKey(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyUpdateParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyVerifyParameters [required]
    */
    virtual void verify(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyVerifyParameters &parameters);

    /**
    * @param[in]  key_name QString [required]
    * @param[in]  key_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIKeyOperationsParameters [required]
    */
    virtual void wrapKey(const QString &key_name, const QString &key_version, const QString &api_version, const OAIKeyOperationsParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupKeyCallback(OAIHttpRequestWorker *worker);
    void createKeyCallback(OAIHttpRequestWorker *worker);
    void decryptCallback(OAIHttpRequestWorker *worker);
    void deleteKeyCallback(OAIHttpRequestWorker *worker);
    void encryptCallback(OAIHttpRequestWorker *worker);
    void getKeyCallback(OAIHttpRequestWorker *worker);
    void getKeyVersionsCallback(OAIHttpRequestWorker *worker);
    void getKeysCallback(OAIHttpRequestWorker *worker);
    void importKeyCallback(OAIHttpRequestWorker *worker);
    void restoreKeyCallback(OAIHttpRequestWorker *worker);
    void signCallback(OAIHttpRequestWorker *worker);
    void unwrapKeyCallback(OAIHttpRequestWorker *worker);
    void updateKeyCallback(OAIHttpRequestWorker *worker);
    void verifyCallback(OAIHttpRequestWorker *worker);
    void wrapKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupKeySignal(OAIBackupKeyResult summary);
    void createKeySignal(OAIKeyBundle summary);
    void decryptSignal(OAIKeyOperationResult summary);
    void deleteKeySignal(OAIDeletedKeyBundle summary);
    void encryptSignal(OAIKeyOperationResult summary);
    void getKeySignal(OAIKeyBundle summary);
    void getKeyVersionsSignal(OAIKeyListResult summary);
    void getKeysSignal(OAIKeyListResult summary);
    void importKeySignal(OAIKeyBundle summary);
    void restoreKeySignal(OAIKeyBundle summary);
    void signSignal(OAIKeyOperationResult summary);
    void unwrapKeySignal(OAIKeyOperationResult summary);
    void updateKeySignal(OAIKeyBundle summary);
    void verifySignal(OAIKeyVerifyResult summary);
    void wrapKeySignal(OAIKeyOperationResult summary);


    void backupKeySignalFull(OAIHttpRequestWorker *worker, OAIBackupKeyResult summary);
    void createKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyBundle summary);
    void decryptSignalFull(OAIHttpRequestWorker *worker, OAIKeyOperationResult summary);
    void deleteKeySignalFull(OAIHttpRequestWorker *worker, OAIDeletedKeyBundle summary);
    void encryptSignalFull(OAIHttpRequestWorker *worker, OAIKeyOperationResult summary);
    void getKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyBundle summary);
    void getKeyVersionsSignalFull(OAIHttpRequestWorker *worker, OAIKeyListResult summary);
    void getKeysSignalFull(OAIHttpRequestWorker *worker, OAIKeyListResult summary);
    void importKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyBundle summary);
    void restoreKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyBundle summary);
    void signSignalFull(OAIHttpRequestWorker *worker, OAIKeyOperationResult summary);
    void unwrapKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyOperationResult summary);
    void updateKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyBundle summary);
    void verifySignalFull(OAIHttpRequestWorker *worker, OAIKeyVerifyResult summary);
    void wrapKeySignalFull(OAIHttpRequestWorker *worker, OAIKeyOperationResult summary);

    Q_DECL_DEPRECATED_X("Use backupKeySignalError() instead")
    void backupKeySignalE(OAIBackupKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupKeySignalError(OAIBackupKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeySignalError() instead")
    void createKeySignalE(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeySignalError(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decryptSignalError() instead")
    void decryptSignalE(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void decryptSignalError(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySignalError() instead")
    void deleteKeySignalE(OAIDeletedKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySignalError(OAIDeletedKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptSignalError() instead")
    void encryptSignalE(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptSignalError(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeySignalError() instead")
    void getKeySignalE(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeySignalError(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeyVersionsSignalError() instead")
    void getKeyVersionsSignalE(OAIKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeyVersionsSignalError(OAIKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeysSignalError() instead")
    void getKeysSignalE(OAIKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeysSignalError(OAIKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importKeySignalError() instead")
    void importKeySignalE(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importKeySignalError(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreKeySignalError() instead")
    void restoreKeySignalE(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreKeySignalError(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signSignalError() instead")
    void signSignalE(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signSignalError(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unwrapKeySignalError() instead")
    void unwrapKeySignalE(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unwrapKeySignalError(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeySignalError() instead")
    void updateKeySignalE(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeySignalError(OAIKeyBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySignalError() instead")
    void verifySignalE(OAIKeyVerifyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySignalError(OAIKeyVerifyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wrapKeySignalError() instead")
    void wrapKeySignalE(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wrapKeySignalError(OAIKeyOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupKeySignalErrorFull() instead")
    void backupKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createKeySignalErrorFull() instead")
    void createKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decryptSignalErrorFull() instead")
    void decryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySignalErrorFull() instead")
    void deleteKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptSignalErrorFull() instead")
    void encryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeySignalErrorFull() instead")
    void getKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeyVersionsSignalErrorFull() instead")
    void getKeyVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeyVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeysSignalErrorFull() instead")
    void getKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importKeySignalErrorFull() instead")
    void importKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreKeySignalErrorFull() instead")
    void restoreKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signSignalErrorFull() instead")
    void signSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unwrapKeySignalErrorFull() instead")
    void unwrapKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unwrapKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeySignalErrorFull() instead")
    void updateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySignalErrorFull() instead")
    void verifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wrapKeySignalErrorFull() instead")
    void wrapKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wrapKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
