/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretUpdateParameters::OAISecretUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretUpdateParameters::OAISecretUpdateParameters() {
    this->initializeModel();
}

OAISecretUpdateParameters::~OAISecretUpdateParameters() {}

void OAISecretUpdateParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISecretUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretUpdateParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISecretUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAISecretAttributes OAISecretUpdateParameters::getAttributes() const {
    return m_attributes;
}
void OAISecretUpdateParameters::setAttributes(const OAISecretAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISecretUpdateParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISecretUpdateParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISecretUpdateParameters::getContentType() const {
    return m_content_type;
}
void OAISecretUpdateParameters::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISecretUpdateParameters::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISecretUpdateParameters::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QMap<QString, QString> OAISecretUpdateParameters::getTags() const {
    return m_tags;
}
void OAISecretUpdateParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISecretUpdateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISecretUpdateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISecretUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
