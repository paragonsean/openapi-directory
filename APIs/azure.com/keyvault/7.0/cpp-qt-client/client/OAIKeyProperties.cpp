/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyProperties::OAIKeyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyProperties::OAIKeyProperties() {
    this->initializeModel();
}

OAIKeyProperties::~OAIKeyProperties() {}

void OAIKeyProperties::initializeModel() {

    m_crv_isSet = false;
    m_crv_isValid = false;

    m_exportable_isSet = false;
    m_exportable_isValid = false;

    m_key_size_isSet = false;
    m_key_size_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_reuse_key_isSet = false;
    m_reuse_key_isValid = false;
}

void OAIKeyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyProperties::fromJsonObject(QJsonObject json) {

    m_crv_isValid = ::OpenAPI::fromJsonValue(m_crv, json[QString("crv")]);
    m_crv_isSet = !json[QString("crv")].isNull() && m_crv_isValid;

    m_exportable_isValid = ::OpenAPI::fromJsonValue(m_exportable, json[QString("exportable")]);
    m_exportable_isSet = !json[QString("exportable")].isNull() && m_exportable_isValid;

    m_key_size_isValid = ::OpenAPI::fromJsonValue(m_key_size, json[QString("key_size")]);
    m_key_size_isSet = !json[QString("key_size")].isNull() && m_key_size_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_reuse_key_isValid = ::OpenAPI::fromJsonValue(m_reuse_key, json[QString("reuse_key")]);
    m_reuse_key_isSet = !json[QString("reuse_key")].isNull() && m_reuse_key_isValid;
}

QString OAIKeyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_crv_isSet) {
        obj.insert(QString("crv"), ::OpenAPI::toJsonValue(m_crv));
    }
    if (m_exportable_isSet) {
        obj.insert(QString("exportable"), ::OpenAPI::toJsonValue(m_exportable));
    }
    if (m_key_size_isSet) {
        obj.insert(QString("key_size"), ::OpenAPI::toJsonValue(m_key_size));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_reuse_key_isSet) {
        obj.insert(QString("reuse_key"), ::OpenAPI::toJsonValue(m_reuse_key));
    }
    return obj;
}

QString OAIKeyProperties::getCrv() const {
    return m_crv;
}
void OAIKeyProperties::setCrv(const QString &crv) {
    m_crv = crv;
    m_crv_isSet = true;
}

bool OAIKeyProperties::is_crv_Set() const{
    return m_crv_isSet;
}

bool OAIKeyProperties::is_crv_Valid() const{
    return m_crv_isValid;
}

bool OAIKeyProperties::isExportable() const {
    return m_exportable;
}
void OAIKeyProperties::setExportable(const bool &exportable) {
    m_exportable = exportable;
    m_exportable_isSet = true;
}

bool OAIKeyProperties::is_exportable_Set() const{
    return m_exportable_isSet;
}

bool OAIKeyProperties::is_exportable_Valid() const{
    return m_exportable_isValid;
}

qint32 OAIKeyProperties::getKeySize() const {
    return m_key_size;
}
void OAIKeyProperties::setKeySize(const qint32 &key_size) {
    m_key_size = key_size;
    m_key_size_isSet = true;
}

bool OAIKeyProperties::is_key_size_Set() const{
    return m_key_size_isSet;
}

bool OAIKeyProperties::is_key_size_Valid() const{
    return m_key_size_isValid;
}

QString OAIKeyProperties::getKty() const {
    return m_kty;
}
void OAIKeyProperties::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAIKeyProperties::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAIKeyProperties::is_kty_Valid() const{
    return m_kty_isValid;
}

bool OAIKeyProperties::isReuseKey() const {
    return m_reuse_key;
}
void OAIKeyProperties::setReuseKey(const bool &reuse_key) {
    m_reuse_key = reuse_key;
    m_reuse_key_isSet = true;
}

bool OAIKeyProperties::is_reuse_key_Set() const{
    return m_reuse_key_isSet;
}

bool OAIKeyProperties::is_reuse_key_Valid() const{
    return m_reuse_key_isValid;
}

bool OAIKeyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exportable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reuse_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
