/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateImportParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateImportParameters::OAICertificateImportParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateImportParameters::OAICertificateImportParameters() {
    this->initializeModel();
}

OAICertificateImportParameters::~OAICertificateImportParameters() {}

void OAICertificateImportParameters::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_pwd_isSet = false;
    m_pwd_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICertificateImportParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateImportParameters::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_pwd_isValid = ::OpenAPI::fromJsonValue(m_pwd, json[QString("pwd")]);
    m_pwd_isSet = !json[QString("pwd")].isNull() && m_pwd_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICertificateImportParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateImportParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_pwd_isSet) {
        obj.insert(QString("pwd"), ::OpenAPI::toJsonValue(m_pwd));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICertificateAttributes OAICertificateImportParameters::getAttributes() const {
    return m_attributes;
}
void OAICertificateImportParameters::setAttributes(const OAICertificateAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICertificateImportParameters::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICertificateImportParameters::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAICertificatePolicy OAICertificateImportParameters::getPolicy() const {
    return m_policy;
}
void OAICertificateImportParameters::setPolicy(const OAICertificatePolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICertificateImportParameters::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICertificateImportParameters::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAICertificateImportParameters::getPwd() const {
    return m_pwd;
}
void OAICertificateImportParameters::setPwd(const QString &pwd) {
    m_pwd = pwd;
    m_pwd_isSet = true;
}

bool OAICertificateImportParameters::is_pwd_Set() const{
    return m_pwd_isSet;
}

bool OAICertificateImportParameters::is_pwd_Valid() const{
    return m_pwd_isValid;
}

QMap<QString, QString> OAICertificateImportParameters::getTags() const {
    return m_tags;
}
void OAICertificateImportParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICertificateImportParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICertificateImportParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICertificateImportParameters::getValue() const {
    return m_value;
}
void OAICertificateImportParameters::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICertificateImportParameters::is_value_Set() const{
    return m_value_isSet;
}

bool OAICertificateImportParameters::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICertificateImportParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pwd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateImportParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
