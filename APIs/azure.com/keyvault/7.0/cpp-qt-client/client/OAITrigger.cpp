/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrigger::OAITrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrigger::OAITrigger() {
    this->initializeModel();
}

OAITrigger::~OAITrigger() {}

void OAITrigger::initializeModel() {

    m_days_before_expiry_isSet = false;
    m_days_before_expiry_isValid = false;

    m_lifetime_percentage_isSet = false;
    m_lifetime_percentage_isValid = false;
}

void OAITrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrigger::fromJsonObject(QJsonObject json) {

    m_days_before_expiry_isValid = ::OpenAPI::fromJsonValue(m_days_before_expiry, json[QString("days_before_expiry")]);
    m_days_before_expiry_isSet = !json[QString("days_before_expiry")].isNull() && m_days_before_expiry_isValid;

    m_lifetime_percentage_isValid = ::OpenAPI::fromJsonValue(m_lifetime_percentage, json[QString("lifetime_percentage")]);
    m_lifetime_percentage_isSet = !json[QString("lifetime_percentage")].isNull() && m_lifetime_percentage_isValid;
}

QString OAITrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_days_before_expiry_isSet) {
        obj.insert(QString("days_before_expiry"), ::OpenAPI::toJsonValue(m_days_before_expiry));
    }
    if (m_lifetime_percentage_isSet) {
        obj.insert(QString("lifetime_percentage"), ::OpenAPI::toJsonValue(m_lifetime_percentage));
    }
    return obj;
}

qint32 OAITrigger::getDaysBeforeExpiry() const {
    return m_days_before_expiry;
}
void OAITrigger::setDaysBeforeExpiry(const qint32 &days_before_expiry) {
    m_days_before_expiry = days_before_expiry;
    m_days_before_expiry_isSet = true;
}

bool OAITrigger::is_days_before_expiry_Set() const{
    return m_days_before_expiry_isSet;
}

bool OAITrigger::is_days_before_expiry_Valid() const{
    return m_days_before_expiry_isValid;
}

qint32 OAITrigger::getLifetimePercentage() const {
    return m_lifetime_percentage;
}
void OAITrigger::setLifetimePercentage(const qint32 &lifetime_percentage) {
    m_lifetime_percentage = lifetime_percentage;
    m_lifetime_percentage_isSet = true;
}

bool OAITrigger::is_lifetime_percentage_Set() const{
    return m_lifetime_percentage_isSet;
}

bool OAITrigger::is_lifetime_percentage_Valid() const{
    return m_lifetime_percentage_isValid;
}

bool OAITrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_before_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
