/**
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretBundle::OAISecretBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretBundle::OAISecretBundle() {
    this->initializeModel();
}

OAISecretBundle::~OAISecretBundle() {}

void OAISecretBundle::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_managed_isSet = false;
    m_managed_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISecretBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretBundle::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_managed_isValid = ::OpenAPI::fromJsonValue(m_managed, json[QString("managed")]);
    m_managed_isSet = !json[QString("managed")].isNull() && m_managed_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISecretBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_managed_isSet) {
        obj.insert(QString("managed"), ::OpenAPI::toJsonValue(m_managed));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAISecretAttributes OAISecretBundle::getAttributes() const {
    return m_attributes;
}
void OAISecretBundle::setAttributes(const OAISecretAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISecretBundle::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISecretBundle::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISecretBundle::getContentType() const {
    return m_content_type;
}
void OAISecretBundle::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISecretBundle::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISecretBundle::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAISecretBundle::getId() const {
    return m_id;
}
void OAISecretBundle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISecretBundle::is_id_Set() const{
    return m_id_isSet;
}

bool OAISecretBundle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISecretBundle::getKid() const {
    return m_kid;
}
void OAISecretBundle::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAISecretBundle::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAISecretBundle::is_kid_Valid() const{
    return m_kid_isValid;
}

bool OAISecretBundle::isManaged() const {
    return m_managed;
}
void OAISecretBundle::setManaged(const bool &managed) {
    m_managed = managed;
    m_managed_isSet = true;
}

bool OAISecretBundle::is_managed_Set() const{
    return m_managed_isSet;
}

bool OAISecretBundle::is_managed_Valid() const{
    return m_managed_isValid;
}

QMap<QString, QString> OAISecretBundle::getTags() const {
    return m_tags;
}
void OAISecretBundle::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISecretBundle::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISecretBundle::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISecretBundle::getValue() const {
    return m_value;
}
void OAISecretBundle::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISecretBundle::is_value_Set() const{
    return m_value_isSet;
}

bool OAISecretBundle::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISecretBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
