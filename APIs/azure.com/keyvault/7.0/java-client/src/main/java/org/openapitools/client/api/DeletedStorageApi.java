/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletedSasDefinitionBundle;
import org.openapitools.client.model.DeletedSasDefinitionListResult;
import org.openapitools.client.model.DeletedStorageBundle;
import org.openapitools.client.model.DeletedStorageListResult;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SasDefinitionBundle;
import org.openapitools.client.model.StorageBundle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeletedStorageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeletedStorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeletedStorageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDeletedSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the it will be purged, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}/sas/{sas-definition-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getDeletedSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling getDeletedSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedSasDefinition(Async)");
        }

        return getDeletedSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, _callback);

    }

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedSasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the it will be purged, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSasDefinitionBundle getDeletedSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<DeletedSasDefinitionBundle> localVarResp = getDeletedSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the specified deleted sas definition.
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedSasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the it will be purged, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSasDefinitionBundle> getDeletedSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getDeletedSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified deleted sas definition. (asynchronously)
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted SAS definition and information on when the it will be purged, and how to recover the deleted SAS definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<DeletedSasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedSasDefinitions
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted SAS definitions for the storage account, along with a link to the next page of deleted SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSasDefinitionsCall(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}/sas"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedSasDefinitionsValidateBeforeCall(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getDeletedSasDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedSasDefinitions(Async)");
        }

        return getDeletedSasDefinitionsCall(storageAccountName, apiVersion, maxresults, _callback);

    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return DeletedSasDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted SAS definitions for the storage account, along with a link to the next page of deleted SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSasDefinitionListResult getDeletedSasDefinitions(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<DeletedSasDefinitionListResult> localVarResp = getDeletedSasDefinitionsWithHttpInfo(storageAccountName, apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;DeletedSasDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted SAS definitions for the storage account, along with a link to the next page of deleted SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSasDefinitionListResult> getDeletedSasDefinitionsWithHttpInfo(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getDeletedSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account. (asynchronously)
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted SAS definitions for the storage account, along with a link to the next page of deleted SAS definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedSasDefinitionsAsync(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback<DeletedSasDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<DeletedSasDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when it will be purged, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getDeletedStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedStorageAccount(Async)");
        }

        return getDeletedStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedStorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when it will be purged, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedStorageBundle getDeletedStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<DeletedStorageBundle> localVarResp = getDeletedStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the specified deleted storage account.
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedStorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when it will be purged, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedStorageBundle> getDeletedStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeletedStorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified deleted storage account. (asynchronously)
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted storage account and information on when it will be purged, and how to recover the deleted storage account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<DeletedStorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeletedStorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeletedStorageAccounts
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted storage accounts in the vault, along with a link to the next page of deleted storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedStorageAccountsCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeletedStorageAccountsValidateBeforeCall(String apiVersion, Integer maxresults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeletedStorageAccounts(Async)");
        }

        return getDeletedStorageAccountsCall(apiVersion, maxresults, _callback);

    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return DeletedStorageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted storage accounts in the vault, along with a link to the next page of deleted storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeletedStorageListResult getDeletedStorageAccounts(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<DeletedStorageListResult> localVarResp = getDeletedStorageAccountsWithHttpInfo(apiVersion, maxresults);
        return localVarResp.getData();
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;DeletedStorageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted storage accounts in the vault, along with a link to the next page of deleted storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedStorageListResult> getDeletedStorageAccountsWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        okhttp3.Call localVarCall = getDeletedStorageAccountsValidateBeforeCall(apiVersion, maxresults, null);
        Type localVarReturnType = new TypeToken<DeletedStorageListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists deleted storage accounts for the specified vault. (asynchronously)
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response message containing a list of deleted storage accounts in the vault, along with a link to the next page of deleted storage accounts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeletedStorageAccountsAsync(String apiVersion, Integer maxresults, final ApiCallback<DeletedStorageListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeletedStorageAccountsValidateBeforeCall(apiVersion, maxresults, _callback);
        Type localVarReturnType = new TypeToken<DeletedStorageListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purgeDeletedStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the storage account was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purgeDeletedStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling purgeDeletedStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling purgeDeletedStorageAccount(Async)");
        }

        return purgeDeletedStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the storage account was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void purgeDeletedStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        purgeDeletedStorageAccountWithHttpInfo(storageAccountName, apiVersion);
    }

    /**
     * Permanently deletes the specified storage account.
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the storage account was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> purgeDeletedStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = purgeDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permanently deletes the specified storage account. (asynchronously)
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content signaling that the storage account was purged forever. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeDeletedStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purgeDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverDeletedSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A SAS definition bundle of the original SAS definition and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "sas-definition-name" + "}", localVarApiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverDeletedSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling recoverDeletedSasDefinition(Async)");
        }

        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling recoverDeletedSasDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverDeletedSasDefinition(Async)");
        }

        return recoverDeletedSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, _callback);

    }

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A SAS definition bundle of the original SAS definition and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SasDefinitionBundle recoverDeletedSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> localVarResp = recoverDeletedSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Recovers the deleted SAS definition.
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A SAS definition bundle of the original SAS definition and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SasDefinitionBundle> recoverDeletedSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverDeletedSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers the deleted SAS definition. (asynchronously)
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A SAS definition bundle of the original SAS definition and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<SasDefinitionBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverDeletedSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recoverDeletedStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A storage bundle of the original storage account and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedStorageAccountCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deletedstorage/{storage-account-name}/recover"
            .replace("{" + "storage-account-name" + "}", localVarApiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoverDeletedStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling recoverDeletedStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoverDeletedStorageAccount(Async)");
        }

        return recoverDeletedStorageAccountCall(storageAccountName, apiVersion, _callback);

    }

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A storage bundle of the original storage account and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageBundle recoverDeletedStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> localVarResp = recoverDeletedStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Recovers the deleted storage account.
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A storage bundle of the original storage account and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageBundle> recoverDeletedStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recoverDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers the deleted storage account. (asynchronously)
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A storage bundle of the original storage account and its attributes. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Key Vault error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoverDeletedStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<StorageBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoverDeletedStorageAccountValidateBeforeCall(storageAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
