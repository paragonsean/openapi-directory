/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StorageAccountAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The deleted storage account item containing metadata about the deleted storage account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:33.568209-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletedStorageAccountItem {
  public static final String SERIALIZED_NAME_DELETED_DATE = "deletedDate";
  @SerializedName(SERIALIZED_NAME_DELETED_DATE)
  private Integer deletedDate;

  public static final String SERIALIZED_NAME_RECOVERY_ID = "recoveryId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_ID)
  private String recoveryId;

  public static final String SERIALIZED_NAME_SCHEDULED_PURGE_DATE = "scheduledPurgeDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_PURGE_DATE)
  private Integer scheduledPurgeDate;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private StorageAccountAttributes attributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public DeletedStorageAccountItem() {
  }

  public DeletedStorageAccountItem(
     Integer deletedDate, 
     Integer scheduledPurgeDate, 
     String id, 
     String resourceId, 
     Map<String, String> tags
  ) {
    this();
    this.deletedDate = deletedDate;
    this.scheduledPurgeDate = scheduledPurgeDate;
    this.id = id;
    this.resourceId = resourceId;
    this.tags = tags;
  }

  /**
   * The time when the storage account was deleted, in UTC
   * @return deletedDate
   */
  @javax.annotation.Nullable
  public Integer getDeletedDate() {
    return deletedDate;
  }



  public DeletedStorageAccountItem recoveryId(String recoveryId) {
    this.recoveryId = recoveryId;
    return this;
  }

  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
   * @return recoveryId
   */
  @javax.annotation.Nullable
  public String getRecoveryId() {
    return recoveryId;
  }

  public void setRecoveryId(String recoveryId) {
    this.recoveryId = recoveryId;
  }


  /**
   * The time when the storage account is scheduled to be purged, in UTC
   * @return scheduledPurgeDate
   */
  @javax.annotation.Nullable
  public Integer getScheduledPurgeDate() {
    return scheduledPurgeDate;
  }



  public DeletedStorageAccountItem attributes(StorageAccountAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public StorageAccountAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(StorageAccountAttributes attributes) {
    this.attributes = attributes;
  }


  /**
   * Storage identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Storage account resource Id.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }



  /**
   * Application specific metadata in the form of key-value pairs.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletedStorageAccountItem deletedStorageAccountItem = (DeletedStorageAccountItem) o;
    return Objects.equals(this.deletedDate, deletedStorageAccountItem.deletedDate) &&
        Objects.equals(this.recoveryId, deletedStorageAccountItem.recoveryId) &&
        Objects.equals(this.scheduledPurgeDate, deletedStorageAccountItem.scheduledPurgeDate) &&
        Objects.equals(this.attributes, deletedStorageAccountItem.attributes) &&
        Objects.equals(this.id, deletedStorageAccountItem.id) &&
        Objects.equals(this.resourceId, deletedStorageAccountItem.resourceId) &&
        Objects.equals(this.tags, deletedStorageAccountItem.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletedDate, recoveryId, scheduledPurgeDate, attributes, id, resourceId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletedStorageAccountItem {\n");
    sb.append("    deletedDate: ").append(toIndentedString(deletedDate)).append("\n");
    sb.append("    recoveryId: ").append(toIndentedString(recoveryId)).append("\n");
    sb.append("    scheduledPurgeDate: ").append(toIndentedString(scheduledPurgeDate)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("id");
    openapiFields.add("resourceId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletedStorageAccountItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletedStorageAccountItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletedStorageAccountItem is not found in the empty JSON string", DeletedStorageAccountItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletedStorageAccountItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletedStorageAccountItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recoveryId") != null && !jsonObj.get("recoveryId").isJsonNull()) && !jsonObj.get("recoveryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryId").toString()));
      }
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        StorageAccountAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletedStorageAccountItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletedStorageAccountItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletedStorageAccountItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletedStorageAccountItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletedStorageAccountItem>() {
           @Override
           public void write(JsonWriter out, DeletedStorageAccountItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletedStorageAccountItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletedStorageAccountItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletedStorageAccountItem
   * @throws IOException if the JSON string is invalid with respect to DeletedStorageAccountItem
   */
  public static DeletedStorageAccountItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletedStorageAccountItem.class);
  }

  /**
   * Convert an instance of DeletedStorageAccountItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

