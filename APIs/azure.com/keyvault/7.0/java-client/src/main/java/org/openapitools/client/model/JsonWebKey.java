/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:33.568209-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonWebKey {
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   */
  @JsonAdapter(CrvEnum.Adapter.class)
  public enum CrvEnum {
    _256("P-256"),
    
    _384("P-384"),
    
    _521("P-521"),
    
    _256_K("P-256K");

    private String value;

    CrvEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrvEnum fromValue(String value) {
      for (CrvEnum b : CrvEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CrvEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrvEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrvEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CrvEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CrvEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRV = "crv";
  @SerializedName(SERIALIZED_NAME_CRV)
  private CrvEnum crv;

  public static final String SERIALIZED_NAME_D = "d";
  @SerializedName(SERIALIZED_NAME_D)
  private String d;

  public static final String SERIALIZED_NAME_DP = "dp";
  @SerializedName(SERIALIZED_NAME_DP)
  private String dp;

  public static final String SERIALIZED_NAME_DQ = "dq";
  @SerializedName(SERIALIZED_NAME_DQ)
  private String dq;

  public static final String SERIALIZED_NAME_E = "e";
  @SerializedName(SERIALIZED_NAME_E)
  private String e;

  public static final String SERIALIZED_NAME_K = "k";
  @SerializedName(SERIALIZED_NAME_K)
  private String k;

  public static final String SERIALIZED_NAME_KEY_HSM = "key_hsm";
  @SerializedName(SERIALIZED_NAME_KEY_HSM)
  private String keyHsm;

  public static final String SERIALIZED_NAME_KEY_OPS = "key_ops";
  @SerializedName(SERIALIZED_NAME_KEY_OPS)
  private List<String> keyOps = new ArrayList<>();

  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  /**
   * JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
   */
  @JsonAdapter(KtyEnum.Adapter.class)
  public enum KtyEnum {
    EC("EC"),
    
    EC_HSM("EC-HSM"),
    
    RSA("RSA"),
    
    RSA_HSM("RSA-HSM"),
    
    OCT("oct");

    private String value;

    KtyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KtyEnum fromValue(String value) {
      for (KtyEnum b : KtyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KtyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KtyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KtyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KtyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KtyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KTY = "kty";
  @SerializedName(SERIALIZED_NAME_KTY)
  private KtyEnum kty;

  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private String n;

  public static final String SERIALIZED_NAME_P = "p";
  @SerializedName(SERIALIZED_NAME_P)
  private String p;

  public static final String SERIALIZED_NAME_Q = "q";
  @SerializedName(SERIALIZED_NAME_Q)
  private String q;

  public static final String SERIALIZED_NAME_QI = "qi";
  @SerializedName(SERIALIZED_NAME_QI)
  private String qi;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private String x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private String y;

  public JsonWebKey() {
  }

  public JsonWebKey crv(CrvEnum crv) {
    this.crv = crv;
    return this;
  }

  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
   * @return crv
   */
  @javax.annotation.Nullable
  public CrvEnum getCrv() {
    return crv;
  }

  public void setCrv(CrvEnum crv) {
    this.crv = crv;
  }


  public JsonWebKey d(String d) {
    this.d = d;
    return this;
  }

  /**
   * RSA private exponent, or the D component of an EC private key.
   * @return d
   */
  @javax.annotation.Nullable
  public String getD() {
    return d;
  }

  public void setD(String d) {
    this.d = d;
  }


  public JsonWebKey dp(String dp) {
    this.dp = dp;
    return this;
  }

  /**
   * RSA private key parameter.
   * @return dp
   */
  @javax.annotation.Nullable
  public String getDp() {
    return dp;
  }

  public void setDp(String dp) {
    this.dp = dp;
  }


  public JsonWebKey dq(String dq) {
    this.dq = dq;
    return this;
  }

  /**
   * RSA private key parameter.
   * @return dq
   */
  @javax.annotation.Nullable
  public String getDq() {
    return dq;
  }

  public void setDq(String dq) {
    this.dq = dq;
  }


  public JsonWebKey e(String e) {
    this.e = e;
    return this;
  }

  /**
   * RSA public exponent.
   * @return e
   */
  @javax.annotation.Nullable
  public String getE() {
    return e;
  }

  public void setE(String e) {
    this.e = e;
  }


  public JsonWebKey k(String k) {
    this.k = k;
    return this;
  }

  /**
   * Symmetric key.
   * @return k
   */
  @javax.annotation.Nullable
  public String getK() {
    return k;
  }

  public void setK(String k) {
    this.k = k;
  }


  public JsonWebKey keyHsm(String keyHsm) {
    this.keyHsm = keyHsm;
    return this;
  }

  /**
   * HSM Token, used with &#39;Bring Your Own Key&#39;.
   * @return keyHsm
   */
  @javax.annotation.Nullable
  public String getKeyHsm() {
    return keyHsm;
  }

  public void setKeyHsm(String keyHsm) {
    this.keyHsm = keyHsm;
  }


  public JsonWebKey keyOps(List<String> keyOps) {
    this.keyOps = keyOps;
    return this;
  }

  public JsonWebKey addKeyOpsItem(String keyOpsItem) {
    if (this.keyOps == null) {
      this.keyOps = new ArrayList<>();
    }
    this.keyOps.add(keyOpsItem);
    return this;
  }

  /**
   * Get keyOps
   * @return keyOps
   */
  @javax.annotation.Nullable
  public List<String> getKeyOps() {
    return keyOps;
  }

  public void setKeyOps(List<String> keyOps) {
    this.keyOps = keyOps;
  }


  public JsonWebKey kid(String kid) {
    this.kid = kid;
    return this;
  }

  /**
   * Key identifier.
   * @return kid
   */
  @javax.annotation.Nullable
  public String getKid() {
    return kid;
  }

  public void setKid(String kid) {
    this.kid = kid;
  }


  public JsonWebKey kty(KtyEnum kty) {
    this.kty = kty;
    return this;
  }

  /**
   * JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40.
   * @return kty
   */
  @javax.annotation.Nullable
  public KtyEnum getKty() {
    return kty;
  }

  public void setKty(KtyEnum kty) {
    this.kty = kty;
  }


  public JsonWebKey n(String n) {
    this.n = n;
    return this;
  }

  /**
   * RSA modulus.
   * @return n
   */
  @javax.annotation.Nullable
  public String getN() {
    return n;
  }

  public void setN(String n) {
    this.n = n;
  }


  public JsonWebKey p(String p) {
    this.p = p;
    return this;
  }

  /**
   * RSA secret prime.
   * @return p
   */
  @javax.annotation.Nullable
  public String getP() {
    return p;
  }

  public void setP(String p) {
    this.p = p;
  }


  public JsonWebKey q(String q) {
    this.q = q;
    return this;
  }

  /**
   * RSA secret prime, with p &lt; q.
   * @return q
   */
  @javax.annotation.Nullable
  public String getQ() {
    return q;
  }

  public void setQ(String q) {
    this.q = q;
  }


  public JsonWebKey qi(String qi) {
    this.qi = qi;
    return this;
  }

  /**
   * RSA private key parameter.
   * @return qi
   */
  @javax.annotation.Nullable
  public String getQi() {
    return qi;
  }

  public void setQi(String qi) {
    this.qi = qi;
  }


  public JsonWebKey x(String x) {
    this.x = x;
    return this;
  }

  /**
   * X component of an EC public key.
   * @return x
   */
  @javax.annotation.Nullable
  public String getX() {
    return x;
  }

  public void setX(String x) {
    this.x = x;
  }


  public JsonWebKey y(String y) {
    this.y = y;
    return this;
  }

  /**
   * Y component of an EC public key.
   * @return y
   */
  @javax.annotation.Nullable
  public String getY() {
    return y;
  }

  public void setY(String y) {
    this.y = y;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonWebKey jsonWebKey = (JsonWebKey) o;
    return Objects.equals(this.crv, jsonWebKey.crv) &&
        Objects.equals(this.d, jsonWebKey.d) &&
        Objects.equals(this.dp, jsonWebKey.dp) &&
        Objects.equals(this.dq, jsonWebKey.dq) &&
        Objects.equals(this.e, jsonWebKey.e) &&
        Objects.equals(this.k, jsonWebKey.k) &&
        Objects.equals(this.keyHsm, jsonWebKey.keyHsm) &&
        Objects.equals(this.keyOps, jsonWebKey.keyOps) &&
        Objects.equals(this.kid, jsonWebKey.kid) &&
        Objects.equals(this.kty, jsonWebKey.kty) &&
        Objects.equals(this.n, jsonWebKey.n) &&
        Objects.equals(this.p, jsonWebKey.p) &&
        Objects.equals(this.q, jsonWebKey.q) &&
        Objects.equals(this.qi, jsonWebKey.qi) &&
        Objects.equals(this.x, jsonWebKey.x) &&
        Objects.equals(this.y, jsonWebKey.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crv, d, dp, dq, e, k, keyHsm, keyOps, kid, kty, n, p, q, qi, x, y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonWebKey {\n");
    sb.append("    crv: ").append(toIndentedString(crv)).append("\n");
    sb.append("    d: ").append(toIndentedString(d)).append("\n");
    sb.append("    dp: ").append(toIndentedString(dp)).append("\n");
    sb.append("    dq: ").append(toIndentedString(dq)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("    k: ").append(toIndentedString(k)).append("\n");
    sb.append("    keyHsm: ").append(toIndentedString(keyHsm)).append("\n");
    sb.append("    keyOps: ").append(toIndentedString(keyOps)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    p: ").append(toIndentedString(p)).append("\n");
    sb.append("    q: ").append(toIndentedString(q)).append("\n");
    sb.append("    qi: ").append(toIndentedString(qi)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crv");
    openapiFields.add("d");
    openapiFields.add("dp");
    openapiFields.add("dq");
    openapiFields.add("e");
    openapiFields.add("k");
    openapiFields.add("key_hsm");
    openapiFields.add("key_ops");
    openapiFields.add("kid");
    openapiFields.add("kty");
    openapiFields.add("n");
    openapiFields.add("p");
    openapiFields.add("q");
    openapiFields.add("qi");
    openapiFields.add("x");
    openapiFields.add("y");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonWebKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonWebKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonWebKey is not found in the empty JSON string", JsonWebKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonWebKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonWebKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crv") != null && !jsonObj.get("crv").isJsonNull()) && !jsonObj.get("crv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crv").toString()));
      }
      // validate the optional field `crv`
      if (jsonObj.get("crv") != null && !jsonObj.get("crv").isJsonNull()) {
        CrvEnum.validateJsonElement(jsonObj.get("crv"));
      }
      if ((jsonObj.get("d") != null && !jsonObj.get("d").isJsonNull()) && !jsonObj.get("d").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `d` to be a primitive type in the JSON string but got `%s`", jsonObj.get("d").toString()));
      }
      if ((jsonObj.get("dp") != null && !jsonObj.get("dp").isJsonNull()) && !jsonObj.get("dp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dp").toString()));
      }
      if ((jsonObj.get("dq") != null && !jsonObj.get("dq").isJsonNull()) && !jsonObj.get("dq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dq").toString()));
      }
      if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull()) && !jsonObj.get("e").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e").toString()));
      }
      if ((jsonObj.get("k") != null && !jsonObj.get("k").isJsonNull()) && !jsonObj.get("k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k").toString()));
      }
      if ((jsonObj.get("key_hsm") != null && !jsonObj.get("key_hsm").isJsonNull()) && !jsonObj.get("key_hsm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_hsm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_hsm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_ops") != null && !jsonObj.get("key_ops").isJsonNull() && !jsonObj.get("key_ops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_ops` to be an array in the JSON string but got `%s`", jsonObj.get("key_ops").toString()));
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      if ((jsonObj.get("kty") != null && !jsonObj.get("kty").isJsonNull()) && !jsonObj.get("kty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kty").toString()));
      }
      // validate the optional field `kty`
      if (jsonObj.get("kty") != null && !jsonObj.get("kty").isJsonNull()) {
        KtyEnum.validateJsonElement(jsonObj.get("kty"));
      }
      if ((jsonObj.get("n") != null && !jsonObj.get("n").isJsonNull()) && !jsonObj.get("n").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `n` to be a primitive type in the JSON string but got `%s`", jsonObj.get("n").toString()));
      }
      if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull()) && !jsonObj.get("p").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p").toString()));
      }
      if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull()) && !jsonObj.get("q").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `q` to be a primitive type in the JSON string but got `%s`", jsonObj.get("q").toString()));
      }
      if ((jsonObj.get("qi") != null && !jsonObj.get("qi").isJsonNull()) && !jsonObj.get("qi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qi").toString()));
      }
      if ((jsonObj.get("x") != null && !jsonObj.get("x").isJsonNull()) && !jsonObj.get("x").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x").toString()));
      }
      if ((jsonObj.get("y") != null && !jsonObj.get("y").isJsonNull()) && !jsonObj.get("y").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `y` to be a primitive type in the JSON string but got `%s`", jsonObj.get("y").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonWebKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonWebKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonWebKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonWebKey.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonWebKey>() {
           @Override
           public void write(JsonWriter out, JsonWebKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonWebKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonWebKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonWebKey
   * @throws IOException if the JSON string is invalid with respect to JsonWebKey
   */
  public static JsonWebKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonWebKey.class);
  }

  /**
   * Convert an instance of JsonWebKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

