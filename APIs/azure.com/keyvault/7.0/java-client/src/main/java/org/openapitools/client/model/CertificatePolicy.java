/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateAttributes;
import org.openapitools.client.model.IssuerParameters;
import org.openapitools.client.model.KeyProperties;
import org.openapitools.client.model.LifetimeAction;
import org.openapitools.client.model.SecretProperties;
import org.openapitools.client.model.X509CertificateProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Management policy for a certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:33.568209-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificatePolicy {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private CertificateAttributes attributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private IssuerParameters issuer;

  public static final String SERIALIZED_NAME_KEY_PROPS = "key_props";
  @SerializedName(SERIALIZED_NAME_KEY_PROPS)
  private KeyProperties keyProps;

  public static final String SERIALIZED_NAME_LIFETIME_ACTIONS = "lifetime_actions";
  @SerializedName(SERIALIZED_NAME_LIFETIME_ACTIONS)
  private List<LifetimeAction> lifetimeActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET_PROPS = "secret_props";
  @SerializedName(SERIALIZED_NAME_SECRET_PROPS)
  private SecretProperties secretProps;

  public static final String SERIALIZED_NAME_X509_PROPS = "x509_props";
  @SerializedName(SERIALIZED_NAME_X509_PROPS)
  private X509CertificateProperties x509Props;

  public CertificatePolicy() {
  }

  public CertificatePolicy(
     String id
  ) {
    this();
    this.id = id;
  }

  public CertificatePolicy attributes(CertificateAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public CertificateAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(CertificateAttributes attributes) {
    this.attributes = attributes;
  }


  /**
   * The certificate id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public CertificatePolicy issuer(IssuerParameters issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public IssuerParameters getIssuer() {
    return issuer;
  }

  public void setIssuer(IssuerParameters issuer) {
    this.issuer = issuer;
  }


  public CertificatePolicy keyProps(KeyProperties keyProps) {
    this.keyProps = keyProps;
    return this;
  }

  /**
   * Get keyProps
   * @return keyProps
   */
  @javax.annotation.Nullable
  public KeyProperties getKeyProps() {
    return keyProps;
  }

  public void setKeyProps(KeyProperties keyProps) {
    this.keyProps = keyProps;
  }


  public CertificatePolicy lifetimeActions(List<LifetimeAction> lifetimeActions) {
    this.lifetimeActions = lifetimeActions;
    return this;
  }

  public CertificatePolicy addLifetimeActionsItem(LifetimeAction lifetimeActionsItem) {
    if (this.lifetimeActions == null) {
      this.lifetimeActions = new ArrayList<>();
    }
    this.lifetimeActions.add(lifetimeActionsItem);
    return this;
  }

  /**
   * Actions that will be performed by Key Vault over the lifetime of a certificate.
   * @return lifetimeActions
   */
  @javax.annotation.Nullable
  public List<LifetimeAction> getLifetimeActions() {
    return lifetimeActions;
  }

  public void setLifetimeActions(List<LifetimeAction> lifetimeActions) {
    this.lifetimeActions = lifetimeActions;
  }


  public CertificatePolicy secretProps(SecretProperties secretProps) {
    this.secretProps = secretProps;
    return this;
  }

  /**
   * Get secretProps
   * @return secretProps
   */
  @javax.annotation.Nullable
  public SecretProperties getSecretProps() {
    return secretProps;
  }

  public void setSecretProps(SecretProperties secretProps) {
    this.secretProps = secretProps;
  }


  public CertificatePolicy x509Props(X509CertificateProperties x509Props) {
    this.x509Props = x509Props;
    return this;
  }

  /**
   * Get x509Props
   * @return x509Props
   */
  @javax.annotation.Nullable
  public X509CertificateProperties getX509Props() {
    return x509Props;
  }

  public void setX509Props(X509CertificateProperties x509Props) {
    this.x509Props = x509Props;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificatePolicy certificatePolicy = (CertificatePolicy) o;
    return Objects.equals(this.attributes, certificatePolicy.attributes) &&
        Objects.equals(this.id, certificatePolicy.id) &&
        Objects.equals(this.issuer, certificatePolicy.issuer) &&
        Objects.equals(this.keyProps, certificatePolicy.keyProps) &&
        Objects.equals(this.lifetimeActions, certificatePolicy.lifetimeActions) &&
        Objects.equals(this.secretProps, certificatePolicy.secretProps) &&
        Objects.equals(this.x509Props, certificatePolicy.x509Props);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, id, issuer, keyProps, lifetimeActions, secretProps, x509Props);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificatePolicy {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    keyProps: ").append(toIndentedString(keyProps)).append("\n");
    sb.append("    lifetimeActions: ").append(toIndentedString(lifetimeActions)).append("\n");
    sb.append("    secretProps: ").append(toIndentedString(secretProps)).append("\n");
    sb.append("    x509Props: ").append(toIndentedString(x509Props)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("id");
    openapiFields.add("issuer");
    openapiFields.add("key_props");
    openapiFields.add("lifetime_actions");
    openapiFields.add("secret_props");
    openapiFields.add("x509_props");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificatePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificatePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificatePolicy is not found in the empty JSON string", CertificatePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificatePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificatePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        CertificateAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `issuer`
      if (jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) {
        IssuerParameters.validateJsonElement(jsonObj.get("issuer"));
      }
      // validate the optional field `key_props`
      if (jsonObj.get("key_props") != null && !jsonObj.get("key_props").isJsonNull()) {
        KeyProperties.validateJsonElement(jsonObj.get("key_props"));
      }
      if (jsonObj.get("lifetime_actions") != null && !jsonObj.get("lifetime_actions").isJsonNull()) {
        JsonArray jsonArraylifetimeActions = jsonObj.getAsJsonArray("lifetime_actions");
        if (jsonArraylifetimeActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lifetime_actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lifetime_actions` to be an array in the JSON string but got `%s`", jsonObj.get("lifetime_actions").toString()));
          }

          // validate the optional field `lifetime_actions` (array)
          for (int i = 0; i < jsonArraylifetimeActions.size(); i++) {
            LifetimeAction.validateJsonElement(jsonArraylifetimeActions.get(i));
          };
        }
      }
      // validate the optional field `secret_props`
      if (jsonObj.get("secret_props") != null && !jsonObj.get("secret_props").isJsonNull()) {
        SecretProperties.validateJsonElement(jsonObj.get("secret_props"));
      }
      // validate the optional field `x509_props`
      if (jsonObj.get("x509_props") != null && !jsonObj.get("x509_props").isJsonNull()) {
        X509CertificateProperties.validateJsonElement(jsonObj.get("x509_props"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificatePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificatePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificatePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificatePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificatePolicy>() {
           @Override
           public void write(JsonWriter out, CertificatePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificatePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificatePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificatePolicy
   * @throws IOException if the JSON string is invalid with respect to CertificatePolicy
   */
  public static CertificatePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificatePolicy.class);
  }

  /**
   * Convert an instance of CertificatePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

