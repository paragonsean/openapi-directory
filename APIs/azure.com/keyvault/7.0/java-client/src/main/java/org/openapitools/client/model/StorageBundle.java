/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StorageAccountAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Storage account bundle consists of key vault storage account details plus its attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:33.568209-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageBundle {
  public static final String SERIALIZED_NAME_ACTIVE_KEY_NAME = "activeKeyName";
  @SerializedName(SERIALIZED_NAME_ACTIVE_KEY_NAME)
  private String activeKeyName;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private StorageAccountAttributes attributes;

  public static final String SERIALIZED_NAME_AUTO_REGENERATE_KEY = "autoRegenerateKey";
  @SerializedName(SERIALIZED_NAME_AUTO_REGENERATE_KEY)
  private Boolean autoRegenerateKey;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REGENERATION_PERIOD = "regenerationPeriod";
  @SerializedName(SERIALIZED_NAME_REGENERATION_PERIOD)
  private String regenerationPeriod;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public StorageBundle() {
  }

  public StorageBundle(
     String activeKeyName, 
     Boolean autoRegenerateKey, 
     String id, 
     String regenerationPeriod, 
     String resourceId, 
     Map<String, String> tags
  ) {
    this();
    this.activeKeyName = activeKeyName;
    this.autoRegenerateKey = autoRegenerateKey;
    this.id = id;
    this.regenerationPeriod = regenerationPeriod;
    this.resourceId = resourceId;
    this.tags = tags;
  }

  /**
   * The current active storage account key name.
   * @return activeKeyName
   */
  @javax.annotation.Nullable
  public String getActiveKeyName() {
    return activeKeyName;
  }



  public StorageBundle attributes(StorageAccountAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public StorageAccountAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(StorageAccountAttributes attributes) {
    this.attributes = attributes;
  }


  /**
   * whether keyvault should manage the storage account for the user.
   * @return autoRegenerateKey
   */
  @javax.annotation.Nullable
  public Boolean getAutoRegenerateKey() {
    return autoRegenerateKey;
  }



  /**
   * The storage account id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * The key regeneration time duration specified in ISO-8601 format.
   * @return regenerationPeriod
   */
  @javax.annotation.Nullable
  public String getRegenerationPeriod() {
    return regenerationPeriod;
  }



  /**
   * The storage account resource id.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }



  /**
   * Application specific metadata in the form of key-value pairs
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageBundle storageBundle = (StorageBundle) o;
    return Objects.equals(this.activeKeyName, storageBundle.activeKeyName) &&
        Objects.equals(this.attributes, storageBundle.attributes) &&
        Objects.equals(this.autoRegenerateKey, storageBundle.autoRegenerateKey) &&
        Objects.equals(this.id, storageBundle.id) &&
        Objects.equals(this.regenerationPeriod, storageBundle.regenerationPeriod) &&
        Objects.equals(this.resourceId, storageBundle.resourceId) &&
        Objects.equals(this.tags, storageBundle.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeKeyName, attributes, autoRegenerateKey, id, regenerationPeriod, resourceId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageBundle {\n");
    sb.append("    activeKeyName: ").append(toIndentedString(activeKeyName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    autoRegenerateKey: ").append(toIndentedString(autoRegenerateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    regenerationPeriod: ").append(toIndentedString(regenerationPeriod)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeKeyName");
    openapiFields.add("attributes");
    openapiFields.add("autoRegenerateKey");
    openapiFields.add("id");
    openapiFields.add("regenerationPeriod");
    openapiFields.add("resourceId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageBundle is not found in the empty JSON string", StorageBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeKeyName") != null && !jsonObj.get("activeKeyName").isJsonNull()) && !jsonObj.get("activeKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeKeyName").toString()));
      }
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        StorageAccountAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("regenerationPeriod") != null && !jsonObj.get("regenerationPeriod").isJsonNull()) && !jsonObj.get("regenerationPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regenerationPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regenerationPeriod").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageBundle>() {
           @Override
           public void write(JsonWriter out, StorageBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageBundle
   * @throws IOException if the JSON string is invalid with respect to StorageBundle
   */
  public static StorageBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageBundle.class);
  }

  /**
   * Convert an instance of StorageBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

