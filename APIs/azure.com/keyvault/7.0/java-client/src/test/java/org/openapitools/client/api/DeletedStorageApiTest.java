/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeletedSasDefinitionBundle;
import org.openapitools.client.model.DeletedSasDefinitionListResult;
import org.openapitools.client.model.DeletedStorageBundle;
import org.openapitools.client.model.DeletedStorageListResult;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SasDefinitionBundle;
import org.openapitools.client.model.StorageBundle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeletedStorageApi
 */
@Disabled
public class DeletedStorageApiTest {

    private final DeletedStorageApi api = new DeletedStorageApi();

    /**
     * Gets the specified deleted sas definition.
     *
     * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with its attributes. This operation requires the storage/getsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        DeletedSasDefinitionBundle response = api.getDeletedSasDefinition(storageAccountName, sasDefinitionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists deleted SAS definitions for the specified vault and storage account.
     *
     * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for a vault enabled for soft-delete. This operation requires the storage/listsas permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedSasDefinitionsTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        Integer maxresults = null;
        DeletedSasDefinitionListResult response = api.getDeletedSasDefinitions(storageAccountName, apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Gets the specified deleted storage account.
     *
     * The Get Deleted Storage Account operation returns the specified deleted storage account along with its attributes. This operation requires the storage/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        DeletedStorageBundle response = api.getDeletedStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists deleted storage accounts for the specified vault.
     *
     * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted for a vault enabled for soft-delete. This operation requires the storage/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedStorageAccountsTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        DeletedStorageListResult response = api.getDeletedStorageAccounts(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified storage account.
     *
     * The purge deleted storage account operation removes the secret permanently, without the possibility of recovery. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/purge permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purgeDeletedStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        api.purgeDeletedStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers the deleted SAS definition.
     *
     * Recovers the deleted SAS definition for the specified storage account. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverDeletedSasDefinitionTest() throws ApiException {
        String storageAccountName = null;
        String sasDefinitionName = null;
        String apiVersion = null;
        SasDefinitionBundle response = api.recoverDeletedSasDefinition(storageAccountName, sasDefinitionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers the deleted storage account.
     *
     * Recovers the deleted storage account in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the storage/recover permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverDeletedStorageAccountTest() throws ApiException {
        String storageAccountName = null;
        String apiVersion = null;
        StorageBundle response = api.recoverDeletedStorageAccount(storageAccountName, apiVersion);
        // TODO: test validations
    }

}
