/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupSecretResult;
import org.openapitools.client.model.DeletedSecretBundle;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SecretBundle;
import org.openapitools.client.model.SecretListResult;
import org.openapitools.client.model.SecretRestoreParameters;
import org.openapitools.client.model.SecretSetParameters;
import org.openapitools.client.model.SecretUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecretsApi
 */
@Disabled
public class SecretsApiTest {

    private final SecretsApi api = new SecretsApi();

    /**
     * Backs up the specified secret.
     *
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backupSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        BackupSecretResult response = api.backupSecret(secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a secret from a specified key vault.
     *
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        DeletedSecretBundle response = api.deleteSecret(secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a specified secret from a given key vault.
     *
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecretTest() throws ApiException {
        String secretName = null;
        String secretVersion = null;
        String apiVersion = null;
        SecretBundle response = api.getSecret(secretName, secretVersion, apiVersion);
        // TODO: test validations
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecretVersionsTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        Integer maxresults = null;
        SecretListResult response = api.getSecretVersions(secretName, apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecretsTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        SecretListResult response = api.getSecrets(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Restores a backed up secret to a vault.
     *
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreSecretTest() throws ApiException {
        String apiVersion = null;
        SecretRestoreParameters parameters = null;
        SecretBundle response = api.restoreSecret(apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Sets a secret in a specified key vault.
     *
     *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        SecretSetParameters parameters = null;
        SecretBundle response = api.setSecret(secretName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     *
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecretTest() throws ApiException {
        String secretName = null;
        String secretVersion = null;
        String apiVersion = null;
        SecretUpdateParameters parameters = null;
        SecretBundle response = api.updateSecret(secretName, secretVersion, apiVersion, parameters);
        // TODO: test validations
    }

}
