/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeletedSecretBundle;
import org.openapitools.client.model.DeletedSecretListResult;
import org.openapitools.client.model.KeyVaultError;
import org.openapitools.client.model.SecretBundle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeletedSecretsApi
 */
@Disabled
public class DeletedSecretsApiTest {

    private final DeletedSecretsApi api = new DeletedSecretsApi();

    /**
     * Gets the specified deleted secret.
     *
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        DeletedSecretBundle response = api.getDeletedSecret(secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedSecretsTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        DeletedSecretListResult response = api.getDeletedSecrets(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified secret.
     *
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purgeDeletedSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        api.purgeDeletedSecret(secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers the deleted secret to the latest version.
     *
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverDeletedSecretTest() throws ApiException {
        String secretName = null;
        String apiVersion = null;
        SecretBundle response = api.recoverDeletedSecret(secretName, apiVersion);
        // TODO: test validations
    }

}
