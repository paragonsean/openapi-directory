/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateBundle;
import org.openapitools.client.model.DeletedCertificateBundle;
import org.openapitools.client.model.DeletedCertificateListResult;
import org.openapitools.client.model.KeyVaultError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeletedCertificatesApi
 */
@Disabled
public class DeletedCertificatesApiTest {

    private final DeletedCertificatesApi api = new DeletedCertificatesApi();

    /**
     * Retrieves information about the specified deleted certificate.
     *
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        DeletedCertificateBundle response = api.getDeletedCertificate(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     *
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedCertificatesTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        Boolean includePending = null;
        DeletedCertificateListResult response = api.getDeletedCertificates(apiVersion, maxresults, includePending);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified deleted certificate.
     *
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify &#39;Purgeable&#39;. This operation requires the certificate/purge permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purgeDeletedCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        api.purgeDeletedCertificate(certificateName, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     *
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate&#39;s attributes). This operation requires the certificates/recover permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverDeletedCertificateTest() throws ApiException {
        String certificateName = null;
        String apiVersion = null;
        CertificateBundle response = api.recoverDeletedCertificate(certificateName, apiVersion);
        // TODO: test validations
    }

}
