/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * The version of the OpenAPI document: 7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeletedKeyBundle;
import org.openapitools.client.model.DeletedKeyListResult;
import org.openapitools.client.model.KeyBundle;
import org.openapitools.client.model.KeyVaultError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeletedKeysApi
 */
@Disabled
public class DeletedKeysApiTest {

    private final DeletedKeysApi api = new DeletedKeysApi();

    /**
     * Gets the public part of a deleted key.
     *
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/get permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedKeyTest() throws ApiException {
        String keyName = null;
        String apiVersion = null;
        DeletedKeyBundle response = api.getDeletedKey(keyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the deleted keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeletedKeysTest() throws ApiException {
        String apiVersion = null;
        Integer maxresults = null;
        DeletedKeyListResult response = api.getDeletedKeys(apiVersion, maxresults);
        // TODO: test validations
    }

    /**
     * Permanently deletes the specified key.
     *
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the keys/purge permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purgeDeletedKeyTest() throws ApiException {
        String keyName = null;
        String apiVersion = null;
        api.purgeDeletedKey(keyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers the deleted key to its latest version.
     *
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the keys/recover permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverDeletedKeyTest() throws ApiException {
        String keyName = null;
        String apiVersion = null;
        KeyBundle response = api.recoverDeletedKey(keyName, apiVersion);
        // TODO: test validations
    }

}
