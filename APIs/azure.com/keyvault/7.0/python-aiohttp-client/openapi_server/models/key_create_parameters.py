# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_attributes import KeyAttributes
from openapi_server import util


class KeyCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: KeyAttributes=None, crv: str=None, key_ops: List[str]=None, key_size: int=None, kty: str=None, tags: Dict[str, str]=None):
        """KeyCreateParameters - a model defined in OpenAPI

        :param attributes: The attributes of this KeyCreateParameters.
        :param crv: The crv of this KeyCreateParameters.
        :param key_ops: The key_ops of this KeyCreateParameters.
        :param key_size: The key_size of this KeyCreateParameters.
        :param kty: The kty of this KeyCreateParameters.
        :param tags: The tags of this KeyCreateParameters.
        """
        self.openapi_types = {
            'attributes': KeyAttributes,
            'crv': str,
            'key_ops': List[str],
            'key_size': int,
            'kty': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'crv': 'crv',
            'key_ops': 'key_ops',
            'key_size': 'key_size',
            'kty': 'kty',
            'tags': 'tags'
        }

        self._attributes = attributes
        self._crv = crv
        self._key_ops = key_ops
        self._key_size = key_size
        self._kty = kty
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyCreateParameters of this KeyCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this KeyCreateParameters.


        :return: The attributes of this KeyCreateParameters.
        :rtype: KeyAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this KeyCreateParameters.


        :param attributes: The attributes of this KeyCreateParameters.
        :type attributes: KeyAttributes
        """

        self._attributes = attributes

    @property
    def crv(self):
        """Gets the crv of this KeyCreateParameters.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :return: The crv of this KeyCreateParameters.
        :rtype: str
        """
        return self._crv

    @crv.setter
    def crv(self, crv):
        """Sets the crv of this KeyCreateParameters.

        Elliptic curve name. For valid values, see JsonWebKeyCurveName.

        :param crv: The crv of this KeyCreateParameters.
        :type crv: str
        """
        allowed_values = ["P-256", "P-384", "P-521", "P-256K"]  # noqa: E501
        if crv not in allowed_values:
            raise ValueError(
                "Invalid value for `crv` ({0}), must be one of {1}"
                .format(crv, allowed_values)
            )

        self._crv = crv

    @property
    def key_ops(self):
        """Gets the key_ops of this KeyCreateParameters.


        :return: The key_ops of this KeyCreateParameters.
        :rtype: List[str]
        """
        return self._key_ops

    @key_ops.setter
    def key_ops(self, key_ops):
        """Sets the key_ops of this KeyCreateParameters.


        :param key_ops: The key_ops of this KeyCreateParameters.
        :type key_ops: List[str]
        """
        allowed_values = ["encrypt", "decrypt", "sign", "verify", "wrapKey", "unwrapKey"]  # noqa: E501
        if not set(key_ops).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `key_ops` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(key_ops) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._key_ops = key_ops

    @property
    def key_size(self):
        """Gets the key_size of this KeyCreateParameters.

        The key size in bits. For example: 2048, 3072, or 4096 for RSA.

        :return: The key_size of this KeyCreateParameters.
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this KeyCreateParameters.

        The key size in bits. For example: 2048, 3072, or 4096 for RSA.

        :param key_size: The key_size of this KeyCreateParameters.
        :type key_size: int
        """

        self._key_size = key_size

    @property
    def kty(self):
        """Gets the kty of this KeyCreateParameters.

        The type of key to create. For valid values, see JsonWebKeyType.

        :return: The kty of this KeyCreateParameters.
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this KeyCreateParameters.

        The type of key to create. For valid values, see JsonWebKeyType.

        :param kty: The kty of this KeyCreateParameters.
        :type kty: str
        """
        allowed_values = ["EC", "EC-HSM", "RSA", "RSA-HSM", "oct"]  # noqa: E501
        if kty not in allowed_values:
            raise ValueError(
                "Invalid value for `kty` ({0}), must be one of {1}"
                .format(kty, allowed_values)
            )

        self._kty = kty

    @property
    def tags(self):
        """Gets the tags of this KeyCreateParameters.

        Application specific metadata in the form of key-value pairs.

        :return: The tags of this KeyCreateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KeyCreateParameters.

        Application specific metadata in the form of key-value pairs.

        :param tags: The tags of this KeyCreateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
