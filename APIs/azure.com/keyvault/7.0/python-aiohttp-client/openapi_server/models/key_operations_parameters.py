# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyOperationsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alg: str=None, value: str=None):
        """KeyOperationsParameters - a model defined in OpenAPI

        :param alg: The alg of this KeyOperationsParameters.
        :param value: The value of this KeyOperationsParameters.
        """
        self.openapi_types = {
            'alg': str,
            'value': str
        }

        self.attribute_map = {
            'alg': 'alg',
            'value': 'value'
        }

        self._alg = alg
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyOperationsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyOperationsParameters of this KeyOperationsParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alg(self):
        """Gets the alg of this KeyOperationsParameters.

        algorithm identifier

        :return: The alg of this KeyOperationsParameters.
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this KeyOperationsParameters.

        algorithm identifier

        :param alg: The alg of this KeyOperationsParameters.
        :type alg: str
        """
        allowed_values = ["RSA-OAEP", "RSA-OAEP-256", "RSA1_5"]  # noqa: E501
        if alg not in allowed_values:
            raise ValueError(
                "Invalid value for `alg` ({0}), must be one of {1}"
                .format(alg, allowed_values)
            )

        self._alg = alg

    @property
    def value(self):
        """Gets the value of this KeyOperationsParameters.


        :return: The value of this KeyOperationsParameters.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this KeyOperationsParameters.


        :param value: The value of this KeyOperationsParameters.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
