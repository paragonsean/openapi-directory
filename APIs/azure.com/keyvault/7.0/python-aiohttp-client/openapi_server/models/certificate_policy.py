# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_attributes import CertificateAttributes
from openapi_server.models.issuer_parameters import IssuerParameters
from openapi_server.models.key_properties import KeyProperties
from openapi_server.models.lifetime_action import LifetimeAction
from openapi_server.models.secret_properties import SecretProperties
from openapi_server.models.x509_certificate_properties import X509CertificateProperties
from openapi_server import util


class CertificatePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: CertificateAttributes=None, id: str=None, issuer: IssuerParameters=None, key_props: KeyProperties=None, lifetime_actions: List[LifetimeAction]=None, secret_props: SecretProperties=None, x509_props: X509CertificateProperties=None):
        """CertificatePolicy - a model defined in OpenAPI

        :param attributes: The attributes of this CertificatePolicy.
        :param id: The id of this CertificatePolicy.
        :param issuer: The issuer of this CertificatePolicy.
        :param key_props: The key_props of this CertificatePolicy.
        :param lifetime_actions: The lifetime_actions of this CertificatePolicy.
        :param secret_props: The secret_props of this CertificatePolicy.
        :param x509_props: The x509_props of this CertificatePolicy.
        """
        self.openapi_types = {
            'attributes': CertificateAttributes,
            'id': str,
            'issuer': IssuerParameters,
            'key_props': KeyProperties,
            'lifetime_actions': List[LifetimeAction],
            'secret_props': SecretProperties,
            'x509_props': X509CertificateProperties
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'issuer': 'issuer',
            'key_props': 'key_props',
            'lifetime_actions': 'lifetime_actions',
            'secret_props': 'secret_props',
            'x509_props': 'x509_props'
        }

        self._attributes = attributes
        self._id = id
        self._issuer = issuer
        self._key_props = key_props
        self._lifetime_actions = lifetime_actions
        self._secret_props = secret_props
        self._x509_props = x509_props

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificatePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificatePolicy of this CertificatePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CertificatePolicy.


        :return: The attributes of this CertificatePolicy.
        :rtype: CertificateAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CertificatePolicy.


        :param attributes: The attributes of this CertificatePolicy.
        :type attributes: CertificateAttributes
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this CertificatePolicy.

        The certificate id.

        :return: The id of this CertificatePolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificatePolicy.

        The certificate id.

        :param id: The id of this CertificatePolicy.
        :type id: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this CertificatePolicy.


        :return: The issuer of this CertificatePolicy.
        :rtype: IssuerParameters
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificatePolicy.


        :param issuer: The issuer of this CertificatePolicy.
        :type issuer: IssuerParameters
        """

        self._issuer = issuer

    @property
    def key_props(self):
        """Gets the key_props of this CertificatePolicy.


        :return: The key_props of this CertificatePolicy.
        :rtype: KeyProperties
        """
        return self._key_props

    @key_props.setter
    def key_props(self, key_props):
        """Sets the key_props of this CertificatePolicy.


        :param key_props: The key_props of this CertificatePolicy.
        :type key_props: KeyProperties
        """

        self._key_props = key_props

    @property
    def lifetime_actions(self):
        """Gets the lifetime_actions of this CertificatePolicy.

        Actions that will be performed by Key Vault over the lifetime of a certificate.

        :return: The lifetime_actions of this CertificatePolicy.
        :rtype: List[LifetimeAction]
        """
        return self._lifetime_actions

    @lifetime_actions.setter
    def lifetime_actions(self, lifetime_actions):
        """Sets the lifetime_actions of this CertificatePolicy.

        Actions that will be performed by Key Vault over the lifetime of a certificate.

        :param lifetime_actions: The lifetime_actions of this CertificatePolicy.
        :type lifetime_actions: List[LifetimeAction]
        """

        self._lifetime_actions = lifetime_actions

    @property
    def secret_props(self):
        """Gets the secret_props of this CertificatePolicy.


        :return: The secret_props of this CertificatePolicy.
        :rtype: SecretProperties
        """
        return self._secret_props

    @secret_props.setter
    def secret_props(self, secret_props):
        """Sets the secret_props of this CertificatePolicy.


        :param secret_props: The secret_props of this CertificatePolicy.
        :type secret_props: SecretProperties
        """

        self._secret_props = secret_props

    @property
    def x509_props(self):
        """Gets the x509_props of this CertificatePolicy.


        :return: The x509_props of this CertificatePolicy.
        :rtype: X509CertificateProperties
        """
        return self._x509_props

    @x509_props.setter
    def x509_props(self, x509_props):
        """Sets the x509_props of this CertificatePolicy.


        :param x509_props: The x509_props of this CertificatePolicy.
        :type x509_props: X509CertificateProperties
        """

        self._x509_props = x509_props
